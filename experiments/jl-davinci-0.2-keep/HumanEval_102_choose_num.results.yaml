name: HumanEval_102_choose_num
language: julia
results:
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpygyv_o6u.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpygyv_o6u.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygyv_o6u.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpygyv_o6u.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpygyv_o6u.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygyv_o6u.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpygyv_o6u.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpygyv_o6u.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygyv_o6u.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpygyv_o6u.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqm7m0ps1.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqm7m0ps1.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqm7m0ps1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqm7m0ps1.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqm7m0ps1.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqm7m0ps1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqm7m0ps1.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqm7m0ps1.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqm7m0ps1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqm7m0ps1.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqm7m0ps1.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqm7m0ps1.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqm7m0ps1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8kuw4li7.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8kuw4li7.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8kuw4li7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp8kuw4li7.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8kuw4li7.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8kuw4li7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp8kuw4li7.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8kuw4li7.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8kuw4li7.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8kuw4li7.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbt_5ao5p.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbt_5ao5p.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbt_5ao5p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbt_5ao5p.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbt_5ao5p.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbt_5ao5p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbt_5ao5p.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbt_5ao5p.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbt_5ao5p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbt_5ao5p.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbt_5ao5p.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbt_5ao5p.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbt_5ao5p.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpng9i19kc.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpng9i19kc.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpng9i19kc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpng9i19kc.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpng9i19kc.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpng9i19kc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpng9i19kc.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpng9i19kc.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpng9i19kc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpng9i19kc.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpng9i19kc.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpng9i19kc.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpng9i19kc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphd_nvbms.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphd_nvbms.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphd_nvbms.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphd_nvbms.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphd_nvbms.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphd_nvbms.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphd_nvbms.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphd_nvbms.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphd_nvbms.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphd_nvbms.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphd_nvbms.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphd_nvbms.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphd_nvbms.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp47l1x6ud.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp47l1x6ud.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp47l1x6ud.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp47l1x6ud.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp47l1x6ud.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp47l1x6ud.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp47l1x6ud.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp47l1x6ud.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp47l1x6ud.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp47l1x6ud.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph4zo53ik.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph4zo53ik.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph4zo53ik.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph4zo53ik.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph4zo53ik.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph4zo53ik.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph4zo53ik.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph4zo53ik.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph4zo53ik.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph4zo53ik.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph4zo53ik.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph4zo53ik.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph4zo53ik.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpygh2zf6h.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpygh2zf6h.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygh2zf6h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpygh2zf6h.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpygh2zf6h.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygh2zf6h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpygh2zf6h.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpygh2zf6h.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygh2zf6h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpygh2zf6h.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpygh2zf6h.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygh2zf6h.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpygh2zf6h.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps4ejmbk7.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps4ejmbk7.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps4ejmbk7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmps4ejmbk7.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps4ejmbk7.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps4ejmbk7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmps4ejmbk7.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps4ejmbk7.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps4ejmbk7.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps4ejmbk7.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi31sixrk.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi31sixrk.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi31sixrk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi31sixrk.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi31sixrk.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi31sixrk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi31sixrk.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi31sixrk.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi31sixrk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi31sixrk.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi31sixrk.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi31sixrk.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi31sixrk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp68sedxlf.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp68sedxlf.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp68sedxlf.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp68sedxlf.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp68sedxlf.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp68sedxlf.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp68sedxlf.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp68sedxlf.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp68sedxlf.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp68sedxlf.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9qacktc6.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9qacktc6.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qacktc6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9qacktc6.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9qacktc6.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qacktc6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9qacktc6.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9qacktc6.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qacktc6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9qacktc6.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9qacktc6.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qacktc6.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9qacktc6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvtoginz5.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvtoginz5.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvtoginz5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvtoginz5.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvtoginz5.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvtoginz5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvtoginz5.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvtoginz5.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvtoginz5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvtoginz5.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvtoginz5.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvtoginz5.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvtoginz5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqn01j0cm.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqn01j0cm.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqn01j0cm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqn01j0cm.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqn01j0cm.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqn01j0cm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqn01j0cm.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqn01j0cm.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqn01j0cm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqn01j0cm.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqn01j0cm.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqn01j0cm.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqn01j0cm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1d0tfc8s.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1d0tfc8s.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1d0tfc8s.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1d0tfc8s.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1d0tfc8s.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1d0tfc8s.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1d0tfc8s.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1d0tfc8s.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1d0tfc8s.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1d0tfc8s.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzcbc_c7l.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzcbc_c7l.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzcbc_c7l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzcbc_c7l.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzcbc_c7l.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzcbc_c7l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzcbc_c7l.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzcbc_c7l.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzcbc_c7l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzcbc_c7l.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzcbc_c7l.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzcbc_c7l.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzcbc_c7l.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsphguutn.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsphguutn.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsphguutn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsphguutn.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsphguutn.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsphguutn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsphguutn.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsphguutn.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsphguutn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsphguutn.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsphguutn.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsphguutn.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsphguutn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa5ip38ea.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa5ip38ea.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa5ip38ea.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa5ip38ea.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa5ip38ea.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa5ip38ea.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa5ip38ea.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa5ip38ea.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa5ip38ea.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa5ip38ea.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa5ip38ea.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa5ip38ea.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa5ip38ea.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqiztte71.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqiztte71.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqiztte71.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqiztte71.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqiztte71.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqiztte71.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqiztte71.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqiztte71.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqiztte71.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqiztte71.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqiztte71.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqiztte71.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqiztte71.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqi4o7gy7.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqi4o7gy7.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqi4o7gy7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqi4o7gy7.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqi4o7gy7.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqi4o7gy7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqi4o7gy7.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqi4o7gy7.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqi4o7gy7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqi4o7gy7.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqi4o7gy7.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqi4o7gy7.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqi4o7gy7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpefkmtw9w.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpefkmtw9w.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpefkmtw9w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpefkmtw9w.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpefkmtw9w.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpefkmtw9w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpefkmtw9w.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpefkmtw9w.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpefkmtw9w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpefkmtw9w.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpefkmtw9w.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpefkmtw9w.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpefkmtw9w.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb8lxpix4.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb8lxpix4.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb8lxpix4.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpb8lxpix4.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb8lxpix4.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb8lxpix4.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpb8lxpix4.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb8lxpix4.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb8lxpix4.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb8lxpix4.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ux37vf7.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9ux37vf7.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9ux37vf7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9ux37vf7.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9ux37vf7.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9ux37vf7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9ux37vf7.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9ux37vf7.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9ux37vf7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9ux37vf7.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9ux37vf7.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9ux37vf7.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ux37vf7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvmwn8qhr.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvmwn8qhr.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvmwn8qhr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvmwn8qhr.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvmwn8qhr.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvmwn8qhr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvmwn8qhr.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvmwn8qhr.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvmwn8qhr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvmwn8qhr.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvmwn8qhr.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvmwn8qhr.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvmwn8qhr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwx4l15w9.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwx4l15w9.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwx4l15w9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwx4l15w9.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwx4l15w9.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwx4l15w9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwx4l15w9.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwx4l15w9.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwx4l15w9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwx4l15w9.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwx4l15w9.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwx4l15w9.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwx4l15w9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdz42hutk.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdz42hutk.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdz42hutk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdz42hutk.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdz42hutk.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdz42hutk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdz42hutk.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdz42hutk.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdz42hutk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdz42hutk.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdz42hutk.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdz42hutk.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdz42hutk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpush2k658.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpush2k658.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpush2k658.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpush2k658.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpush2k658.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpush2k658.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpush2k658.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpush2k658.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpush2k658.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpush2k658.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpush2k658.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpush2k658.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpush2k658.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcbytaza9.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcbytaza9.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcbytaza9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcbytaza9.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcbytaza9.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcbytaza9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcbytaza9.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcbytaza9.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcbytaza9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcbytaza9.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcbytaza9.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcbytaza9.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcbytaza9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpynvkzjwq.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpynvkzjwq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpynvkzjwq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpynvkzjwq.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpynvkzjwq.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpynvkzjwq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpynvkzjwq.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpynvkzjwq.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpynvkzjwq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpynvkzjwq.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpynvkzjwq.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpynvkzjwq.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpynvkzjwq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x % 2 == 0\n        return x\n\
    \    else\n        if x + 1 == y\n            return -1\n        else\n      \
    \      return choose_num(x + 1, y)\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmes4hic2.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmes4hic2.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmes4hic2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmes4hic2.jl:26\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmes4hic2.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmes4hic2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmes4hic2.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmes4hic2.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmes4hic2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmes4hic2.jl:28\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmes4hic2.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmes4hic2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmes4hic2.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmes4hic2.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmes4hic2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmes4hic2.jl:30\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 28 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmes4hic2.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/us"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmes4hic2.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpthftrtpl.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpthftrtpl.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpthftrtpl.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpthftrtpl.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpthftrtpl.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpthftrtpl.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpthftrtpl.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpthftrtpl.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpthftrtpl.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpthftrtpl.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_mqgarhl.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_mqgarhl.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_mqgarhl.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_mqgarhl.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_mqgarhl.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_mqgarhl.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_mqgarhl.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_mqgarhl.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_mqgarhl.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_mqgarhl.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsqvt7u45.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsqvt7u45.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsqvt7u45.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsqvt7u45.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsqvt7u45.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsqvt7u45.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsqvt7u45.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsqvt7u45.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsqvt7u45.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsqvt7u45.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsqvt7u45.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsqvt7u45.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsqvt7u45.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_1c00dkg.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_1c00dkg.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_1c00dkg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_1c00dkg.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_1c00dkg.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_1c00dkg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_1c00dkg.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_1c00dkg.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_1c00dkg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_1c00dkg.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_1c00dkg.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_1c00dkg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_1c00dkg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphxmlslc1.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphxmlslc1.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphxmlslc1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphxmlslc1.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphxmlslc1.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphxmlslc1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphxmlslc1.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphxmlslc1.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphxmlslc1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphxmlslc1.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphxmlslc1.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphxmlslc1.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphxmlslc1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsth7r6j6.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsth7r6j6.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsth7r6j6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpsth7r6j6.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsth7r6j6.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsth7r6j6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpsth7r6j6.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsth7r6j6.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsth7r6j6.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsth7r6j6.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i = y:-1:x\n        if i % 2 == 0\n            return i\n    \
    \    end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcg9wviqo.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcg9wviqo.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcg9wviqo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcg9wviqo.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcg9wviqo.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcg9wviqo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcg9wviqo.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcg9wviqo.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcg9wviqo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcg9wviqo.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcg9wviqo.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcg9wviqo.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcg9wviqo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp840u0hq_.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp840u0hq_.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp840u0hq_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp840u0hq_.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp840u0hq_.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp840u0hq_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp840u0hq_.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp840u0hq_.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp840u0hq_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp840u0hq_.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp840u0hq_.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp840u0hq_.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp840u0hq_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp479s4_n9.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp479s4_n9.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp479s4_n9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp479s4_n9.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp479s4_n9.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp479s4_n9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp479s4_n9.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp479s4_n9.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp479s4_n9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp479s4_n9.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp479s4_n9.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp479s4_n9.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp479s4_n9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplm34l9t9.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplm34l9t9.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplm34l9t9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplm34l9t9.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplm34l9t9.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplm34l9t9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplm34l9t9.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplm34l9t9.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplm34l9t9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplm34l9t9.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplm34l9t9.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplm34l9t9.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplm34l9t9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgz7s3h10.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgz7s3h10.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgz7s3h10.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgz7s3h10.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgz7s3h10.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgz7s3h10.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgz7s3h10.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgz7s3h10.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgz7s3h10.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgz7s3h10.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgz7s3h10.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgz7s3h10.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgz7s3h10.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcbg7rmck.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcbg7rmck.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcbg7rmck.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcbg7rmck.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcbg7rmck.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcbg7rmck.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcbg7rmck.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcbg7rmck.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcbg7rmck.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcbg7rmck.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcbg7rmck.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcbg7rmck.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcbg7rmck.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvl4wokwp.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvl4wokwp.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvl4wokwp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvl4wokwp.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvl4wokwp.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvl4wokwp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvl4wokwp.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvl4wokwp.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvl4wokwp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvl4wokwp.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvl4wokwp.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvl4wokwp.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvl4wokwp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbemoifi3.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbemoifi3.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbemoifi3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbemoifi3.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbemoifi3.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbemoifi3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbemoifi3.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbemoifi3.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbemoifi3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbemoifi3.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbemoifi3.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbemoifi3.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbemoifi3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp81kw5afh.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp81kw5afh.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp81kw5afh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp81kw5afh.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp81kw5afh.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp81kw5afh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp81kw5afh.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp81kw5afh.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp81kw5afh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp81kw5afh.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp81kw5afh.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp81kw5afh.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp81kw5afh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjso9t2de.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjso9t2de.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjso9t2de.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjso9t2de.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjso9t2de.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjso9t2de.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjso9t2de.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjso9t2de.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjso9t2de.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjso9t2de.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjso9t2de.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjso9t2de.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjso9t2de.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbwkvysho.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbwkvysho.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbwkvysho.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbwkvysho.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbwkvysho.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbwkvysho.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbwkvysho.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbwkvysho.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbwkvysho.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbwkvysho.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbwkvysho.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbwkvysho.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbwkvysho.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp85c6ncob.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp85c6ncob.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85c6ncob.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp85c6ncob.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp85c6ncob.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85c6ncob.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp85c6ncob.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp85c6ncob.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85c6ncob.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp85c6ncob.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp85c6ncob.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85c6ncob.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp85c6ncob.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvnm4fdgh.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvnm4fdgh.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvnm4fdgh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvnm4fdgh.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvnm4fdgh.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvnm4fdgh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvnm4fdgh.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvnm4fdgh.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvnm4fdgh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvnm4fdgh.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvnm4fdgh.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvnm4fdgh.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvnm4fdgh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb6ovxg80.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb6ovxg80.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb6ovxg80.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb6ovxg80.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb6ovxg80.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb6ovxg80.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb6ovxg80.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb6ovxg80.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb6ovxg80.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb6ovxg80.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb6ovxg80.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb6ovxg80.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb6ovxg80.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdebnt993.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdebnt993.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdebnt993.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdebnt993.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdebnt993.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdebnt993.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdebnt993.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdebnt993.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdebnt993.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdebnt993.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdebnt993.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdebnt993.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdebnt993.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpavrfrovt.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpavrfrovt.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpavrfrovt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpavrfrovt.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpavrfrovt.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpavrfrovt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpavrfrovt.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpavrfrovt.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpavrfrovt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpavrfrovt.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpavrfrovt.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpavrfrovt.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpavrfrovt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjoqwwohq.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjoqwwohq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjoqwwohq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjoqwwohq.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjoqwwohq.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjoqwwohq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjoqwwohq.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjoqwwohq.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjoqwwohq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjoqwwohq.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjoqwwohq.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjoqwwohq.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjoqwwohq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk3w_ea2b.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk3w_ea2b.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk3w_ea2b.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk3w_ea2b.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk3w_ea2b.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk3w_ea2b.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk3w_ea2b.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk3w_ea2b.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk3w_ea2b.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk3w_ea2b.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk3w_ea2b.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk3w_ea2b.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk3w_ea2b.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf_72cq_h.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf_72cq_h.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf_72cq_h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf_72cq_h.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf_72cq_h.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf_72cq_h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf_72cq_h.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf_72cq_h.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf_72cq_h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf_72cq_h.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf_72cq_h.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf_72cq_h.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf_72cq_h.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq9c1mfpc.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq9c1mfpc.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq9c1mfpc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq9c1mfpc.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq9c1mfpc.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq9c1mfpc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq9c1mfpc.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq9c1mfpc.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq9c1mfpc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq9c1mfpc.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq9c1mfpc.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq9c1mfpc.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq9c1mfpc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1ns943ec.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1ns943ec.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ns943ec.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1ns943ec.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1ns943ec.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ns943ec.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1ns943ec.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1ns943ec.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ns943ec.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ns943ec.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5i7_u3v9.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5i7_u3v9.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5i7_u3v9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5i7_u3v9.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5i7_u3v9.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5i7_u3v9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5i7_u3v9.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5i7_u3v9.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5i7_u3v9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5i7_u3v9.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5i7_u3v9.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5i7_u3v9.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5i7_u3v9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjtzd_nrj.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjtzd_nrj.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjtzd_nrj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjtzd_nrj.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjtzd_nrj.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjtzd_nrj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjtzd_nrj.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjtzd_nrj.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjtzd_nrj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjtzd_nrj.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjtzd_nrj.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjtzd_nrj.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjtzd_nrj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprh2xh3x2.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprh2xh3x2.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprh2xh3x2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprh2xh3x2.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprh2xh3x2.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprh2xh3x2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprh2xh3x2.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprh2xh3x2.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprh2xh3x2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprh2xh3x2.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprh2xh3x2.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprh2xh3x2.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprh2xh3x2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqpiayej0.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqpiayej0.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqpiayej0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqpiayej0.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqpiayej0.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqpiayej0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqpiayej0.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqpiayej0.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqpiayej0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqpiayej0.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqpiayej0.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqpiayej0.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqpiayej0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9l71akkg.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9l71akkg.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9l71akkg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9l71akkg.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9l71akkg.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9l71akkg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9l71akkg.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9l71akkg.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9l71akkg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9l71akkg.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9l71akkg.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9l71akkg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9l71akkg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgti60tsn.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgti60tsn.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgti60tsn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgti60tsn.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgti60tsn.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgti60tsn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgti60tsn.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgti60tsn.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgti60tsn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgti60tsn.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgti60tsn.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgti60tsn.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgti60tsn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5p1ijgld.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5p1ijgld.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5p1ijgld.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5p1ijgld.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5p1ijgld.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5p1ijgld.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5p1ijgld.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5p1ijgld.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5p1ijgld.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5p1ijgld.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5p1ijgld.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5p1ijgld.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5p1ijgld.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv3snybff.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv3snybff.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv3snybff.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv3snybff.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv3snybff.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv3snybff.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv3snybff.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv3snybff.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv3snybff.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv3snybff.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv3snybff.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv3snybff.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv3snybff.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkli304o5.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkli304o5.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkli304o5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkli304o5.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkli304o5.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkli304o5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkli304o5.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkli304o5.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkli304o5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkli304o5.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkli304o5.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkli304o5.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkli304o5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcw7bm_fs.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcw7bm_fs.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcw7bm_fs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcw7bm_fs.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcw7bm_fs.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcw7bm_fs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcw7bm_fs.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcw7bm_fs.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcw7bm_fs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcw7bm_fs.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcw7bm_fs.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcw7bm_fs.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcw7bm_fs.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8sw_txkt.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8sw_txkt.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8sw_txkt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8sw_txkt.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8sw_txkt.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8sw_txkt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8sw_txkt.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8sw_txkt.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8sw_txkt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8sw_txkt.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8sw_txkt.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8sw_txkt.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8sw_txkt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2n5ymg6r.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2n5ymg6r.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2n5ymg6r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2n5ymg6r.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2n5ymg6r.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2n5ymg6r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2n5ymg6r.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2n5ymg6r.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2n5ymg6r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2n5ymg6r.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2n5ymg6r.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2n5ymg6r.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2n5ymg6r.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8g7bslwd.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8g7bslwd.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8g7bslwd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8g7bslwd.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8g7bslwd.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8g7bslwd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8g7bslwd.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8g7bslwd.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8g7bslwd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8g7bslwd.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8g7bslwd.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8g7bslwd.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8g7bslwd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaasq1x56.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaasq1x56.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaasq1x56.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaasq1x56.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaasq1x56.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaasq1x56.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaasq1x56.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaasq1x56.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaasq1x56.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaasq1x56.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaasq1x56.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaasq1x56.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaasq1x56.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6zsq9p0v.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6zsq9p0v.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6zsq9p0v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6zsq9p0v.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6zsq9p0v.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6zsq9p0v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6zsq9p0v.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6zsq9p0v.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6zsq9p0v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6zsq9p0v.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6zsq9p0v.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6zsq9p0v.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6zsq9p0v.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x % 2 == 0\n        return x\n\
    \    else\n        return x + 1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1g6xd7fr.jl:21\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1g6xd7fr.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1g6xd7fr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1g6xd7fr.jl:22\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1g6xd7fr.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1g6xd7fr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1g6xd7fr.jl:23\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1g6xd7fr.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1g6xd7fr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1g6xd7fr.jl:24\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1g6xd7fr.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1g6xd7fr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1g6xd7fr.jl:25\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1g6xd7fr.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1g6xd7fr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1g6xd7fr.jl:26\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 28 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1g6xd7fr.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/us"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1g6xd7fr.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp28x8z28u.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28x8z28u.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28x8z28u.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp28x8z28u.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28x8z28u.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28x8z28u.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp28x8z28u.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28x8z28u.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28x8z28u.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp28x8z28u.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_rgfhz6q.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_rgfhz6q.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_rgfhz6q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_rgfhz6q.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_rgfhz6q.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_rgfhz6q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_rgfhz6q.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_rgfhz6q.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_rgfhz6q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_rgfhz6q.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_rgfhz6q.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_rgfhz6q.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_rgfhz6q.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x%2 == 0\n        return x\n\
    \    else\n        return x+1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvbtb3qe6.jl:21\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvbtb3qe6.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvbtb3qe6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvbtb3qe6.jl:22\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvbtb3qe6.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvbtb3qe6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvbtb3qe6.jl:23\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvbtb3qe6.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvbtb3qe6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvbtb3qe6.jl:24\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvbtb3qe6.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvbtb3qe6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvbtb3qe6.jl:25\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvbtb3qe6.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvbtb3qe6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvbtb3qe6.jl:26\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 28 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvbtb3qe6.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/us"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvbtb3qe6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp48cs_47n.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp48cs_47n.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp48cs_47n.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48cs_47n.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp48cs_47n.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp48cs_47n.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48cs_47n.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp48cs_47n.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp48cs_47n.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp48cs_47n.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp48cs_47n.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp48cs_47n.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp48cs_47n.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptu1jtvar.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptu1jtvar.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptu1jtvar.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptu1jtvar.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptu1jtvar.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptu1jtvar.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptu1jtvar.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptu1jtvar.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptu1jtvar.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptu1jtvar.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptu1jtvar.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptu1jtvar.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptu1jtvar.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfc0331dc.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfc0331dc.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfc0331dc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfc0331dc.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfc0331dc.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfc0331dc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfc0331dc.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfc0331dc.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfc0331dc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfc0331dc.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfc0331dc.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfc0331dc.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfc0331dc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x % 2 == 0 && y % 2 == 0\n  \
    \      return max(x, y)\n    elseif x % 2 == 1 && y % 2 == 1\n        return -1\n\
    \    else\n        return max(x, y) - 1\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplrm01awg.jl:24\n  Expression: candidate(13,\
    \ 12) == -1\n   Evaluated: 12 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplrm01awg.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplrm01awg.jl:22\ntest set: Test\
    \ Failed at /tmp/tmplrm01awg.jl:25\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 12353 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplrm01awg.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplrm01awg.jl:22\ntest set: Test\
    \ Failed at /tmp/tmplrm01awg.jl:26\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5233 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplrm01awg.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplrm01awg.jl:22\ntest set: Test\
    \ Failed at /tmp/tmplrm01awg.jl:28\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 26 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplrm01awg.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplrm01awg.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplrm01awg.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1wddrulu.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1wddrulu.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1wddrulu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1wddrulu.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1wddrulu.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1wddrulu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1wddrulu.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1wddrulu.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1wddrulu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1wddrulu.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1wddrulu.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1wddrulu.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1wddrulu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxxb04wxo.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxxb04wxo.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxxb04wxo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxxb04wxo.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxxb04wxo.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxxb04wxo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxxb04wxo.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxxb04wxo.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxxb04wxo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxxb04wxo.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxxb04wxo.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxxb04wxo.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxxb04wxo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy7bl0hh6.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7bl0hh6.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7bl0hh6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpy7bl0hh6.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7bl0hh6.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7bl0hh6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpy7bl0hh6.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7bl0hh6.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7bl0hh6.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy7bl0hh6.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp773jlbac.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp773jlbac.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp773jlbac.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp773jlbac.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp773jlbac.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp773jlbac.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp773jlbac.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp773jlbac.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp773jlbac.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp773jlbac.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp773jlbac.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp773jlbac.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp773jlbac.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x % 2 == 0\n        return x\n\
    \    else\n        return x + 1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq65ml7u1.jl:21\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq65ml7u1.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq65ml7u1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq65ml7u1.jl:22\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq65ml7u1.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq65ml7u1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq65ml7u1.jl:23\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq65ml7u1.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq65ml7u1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq65ml7u1.jl:24\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq65ml7u1.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq65ml7u1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq65ml7u1.jl:25\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq65ml7u1.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq65ml7u1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq65ml7u1.jl:26\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 28 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq65ml7u1.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/us"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq65ml7u1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc0il5cn1.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc0il5cn1.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc0il5cn1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc0il5cn1.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc0il5cn1.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc0il5cn1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc0il5cn1.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc0il5cn1.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc0il5cn1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc0il5cn1.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc0il5cn1.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc0il5cn1.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc0il5cn1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpus4tsjly.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpus4tsjly.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpus4tsjly.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpus4tsjly.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpus4tsjly.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpus4tsjly.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpus4tsjly.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpus4tsjly.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpus4tsjly.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpus4tsjly.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0rnt7ff9.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0rnt7ff9.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0rnt7ff9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0rnt7ff9.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0rnt7ff9.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0rnt7ff9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0rnt7ff9.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0rnt7ff9.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0rnt7ff9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0rnt7ff9.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0rnt7ff9.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0rnt7ff9.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0rnt7ff9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe77qx3iz.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe77qx3iz.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe77qx3iz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe77qx3iz.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe77qx3iz.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe77qx3iz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe77qx3iz.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe77qx3iz.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe77qx3iz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe77qx3iz.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe77qx3iz.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe77qx3iz.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe77qx3iz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoy6o8hou.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoy6o8hou.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoy6o8hou.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpoy6o8hou.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoy6o8hou.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoy6o8hou.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpoy6o8hou.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoy6o8hou.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoy6o8hou.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoy6o8hou.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptc0dyk85.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptc0dyk85.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptc0dyk85.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptc0dyk85.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptc0dyk85.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptc0dyk85.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptc0dyk85.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptc0dyk85.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptc0dyk85.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptc0dyk85.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptc0dyk85.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptc0dyk85.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptc0dyk85.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvg1468n2.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvg1468n2.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvg1468n2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvg1468n2.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvg1468n2.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvg1468n2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvg1468n2.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvg1468n2.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvg1468n2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvg1468n2.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvg1468n2.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvg1468n2.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvg1468n2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2a271952.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2a271952.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2a271952.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2a271952.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2a271952.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2a271952.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2a271952.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2a271952.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2a271952.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2a271952.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2a271952.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2a271952.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2a271952.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5t8ifhqi.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5t8ifhqi.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5t8ifhqi.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5t8ifhqi.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5t8ifhqi.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5t8ifhqi.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5t8ifhqi.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5t8ifhqi.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5t8ifhqi.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5t8ifhqi.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb_3p4hjs.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb_3p4hjs.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb_3p4hjs.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpb_3p4hjs.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb_3p4hjs.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb_3p4hjs.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpb_3p4hjs.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb_3p4hjs.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb_3p4hjs.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb_3p4hjs.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5s9j75pe.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5s9j75pe.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5s9j75pe.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5s9j75pe.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5s9j75pe.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5s9j75pe.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5s9j75pe.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5s9j75pe.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5s9j75pe.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5s9j75pe.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5s9j75pe.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5s9j75pe.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5s9j75pe.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0aeu1073.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0aeu1073.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0aeu1073.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0aeu1073.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0aeu1073.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0aeu1073.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0aeu1073.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0aeu1073.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0aeu1073.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0aeu1073.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0aeu1073.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0aeu1073.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0aeu1073.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9winczux.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9winczux.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9winczux.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9winczux.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9winczux.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9winczux.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9winczux.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9winczux.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9winczux.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9winczux.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9winczux.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9winczux.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9winczux.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsrnq5p5a.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsrnq5p5a.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsrnq5p5a.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpsrnq5p5a.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsrnq5p5a.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsrnq5p5a.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpsrnq5p5a.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsrnq5p5a.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsrnq5p5a.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsrnq5p5a.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjb98j2ys.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjb98j2ys.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjb98j2ys.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpjb98j2ys.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjb98j2ys.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjb98j2ys.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpjb98j2ys.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjb98j2ys.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjb98j2ys.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjb98j2ys.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzoilfx28.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzoilfx28.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzoilfx28.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzoilfx28.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzoilfx28.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzoilfx28.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzoilfx28.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzoilfx28.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzoilfx28.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzoilfx28.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzoilfx28.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzoilfx28.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzoilfx28.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmuo6l15b.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmuo6l15b.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmuo6l15b.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmuo6l15b.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmuo6l15b.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmuo6l15b.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmuo6l15b.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmuo6l15b.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmuo6l15b.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmuo6l15b.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmuo6l15b.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmuo6l15b.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmuo6l15b.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2b9salfm.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2b9salfm.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2b9salfm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2b9salfm.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2b9salfm.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2b9salfm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2b9salfm.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2b9salfm.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2b9salfm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2b9salfm.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2b9salfm.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2b9salfm.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2b9salfm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3q6uk2al.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3q6uk2al.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3q6uk2al.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3q6uk2al.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3q6uk2al.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3q6uk2al.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3q6uk2al.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3q6uk2al.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3q6uk2al.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3q6uk2al.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3q6uk2al.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3q6uk2al.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3q6uk2al.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp82do2rba.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp82do2rba.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp82do2rba.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp82do2rba.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp82do2rba.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp82do2rba.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp82do2rba.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp82do2rba.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp82do2rba.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp82do2rba.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp82do2rba.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp82do2rba.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp82do2rba.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuzg7jaeg.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuzg7jaeg.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuzg7jaeg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuzg7jaeg.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuzg7jaeg.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuzg7jaeg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuzg7jaeg.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuzg7jaeg.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuzg7jaeg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuzg7jaeg.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuzg7jaeg.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuzg7jaeg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuzg7jaeg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpib588m7e.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpib588m7e.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpib588m7e.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpib588m7e.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpib588m7e.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpib588m7e.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpib588m7e.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpib588m7e.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpib588m7e.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpib588m7e.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpib588m7e.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpib588m7e.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpib588m7e.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppmpgqe2u.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppmpgqe2u.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppmpgqe2u.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppmpgqe2u.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppmpgqe2u.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppmpgqe2u.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppmpgqe2u.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppmpgqe2u.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppmpgqe2u.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppmpgqe2u.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppmpgqe2u.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppmpgqe2u.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppmpgqe2u.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwp_7qvej.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwp_7qvej.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwp_7qvej.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwp_7qvej.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwp_7qvej.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwp_7qvej.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwp_7qvej.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwp_7qvej.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwp_7qvej.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwp_7qvej.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwp_7qvej.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwp_7qvej.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwp_7qvej.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe3olrgan.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe3olrgan.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe3olrgan.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe3olrgan.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe3olrgan.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe3olrgan.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe3olrgan.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe3olrgan.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe3olrgan.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe3olrgan.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe3olrgan.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe3olrgan.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe3olrgan.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc0o8992z.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc0o8992z.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc0o8992z.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpc0o8992z.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc0o8992z.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc0o8992z.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpc0o8992z.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc0o8992z.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc0o8992z.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc0o8992z.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp05e0qlav.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp05e0qlav.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp05e0qlav.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp05e0qlav.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp05e0qlav.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp05e0qlav.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp05e0qlav.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp05e0qlav.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp05e0qlav.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp05e0qlav.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp05e0qlav.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp05e0qlav.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp05e0qlav.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpucp6_p4k.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpucp6_p4k.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpucp6_p4k.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpucp6_p4k.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpucp6_p4k.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpucp6_p4k.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpucp6_p4k.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpucp6_p4k.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpucp6_p4k.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpucp6_p4k.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpucp6_p4k.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpucp6_p4k.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpucp6_p4k.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp19v0ihzv.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp19v0ihzv.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp19v0ihzv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp19v0ihzv.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp19v0ihzv.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp19v0ihzv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp19v0ihzv.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp19v0ihzv.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp19v0ihzv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp19v0ihzv.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp19v0ihzv.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp19v0ihzv.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp19v0ihzv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl3qf8jjx.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl3qf8jjx.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl3qf8jjx.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpl3qf8jjx.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl3qf8jjx.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl3qf8jjx.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpl3qf8jjx.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl3qf8jjx.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl3qf8jjx.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl3qf8jjx.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa3wirv5p.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa3wirv5p.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa3wirv5p.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpa3wirv5p.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa3wirv5p.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa3wirv5p.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpa3wirv5p.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa3wirv5p.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa3wirv5p.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa3wirv5p.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3y9185iz.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3y9185iz.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3y9185iz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3y9185iz.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3y9185iz.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3y9185iz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3y9185iz.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3y9185iz.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3y9185iz.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3y9185iz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgq49u472.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgq49u472.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgq49u472.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgq49u472.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgq49u472.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgq49u472.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgq49u472.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgq49u472.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgq49u472.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgq49u472.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgq49u472.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgq49u472.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgq49u472.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl0rfwfrt.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl0rfwfrt.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl0rfwfrt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl0rfwfrt.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl0rfwfrt.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl0rfwfrt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl0rfwfrt.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl0rfwfrt.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl0rfwfrt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl0rfwfrt.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl0rfwfrt.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl0rfwfrt.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl0rfwfrt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoik3a0jp.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoik3a0jp.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoik3a0jp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoik3a0jp.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoik3a0jp.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoik3a0jp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoik3a0jp.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoik3a0jp.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoik3a0jp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoik3a0jp.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoik3a0jp.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoik3a0jp.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoik3a0jp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm1gajg2b.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm1gajg2b.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm1gajg2b.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm1gajg2b.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm1gajg2b.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm1gajg2b.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm1gajg2b.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm1gajg2b.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm1gajg2b.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm1gajg2b.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm1gajg2b.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm1gajg2b.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm1gajg2b.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8hjwbc1c.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8hjwbc1c.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8hjwbc1c.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp8hjwbc1c.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8hjwbc1c.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8hjwbc1c.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp8hjwbc1c.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8hjwbc1c.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8hjwbc1c.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8hjwbc1c.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj853c1ak.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj853c1ak.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj853c1ak.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj853c1ak.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj853c1ak.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj853c1ak.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj853c1ak.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj853c1ak.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj853c1ak.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj853c1ak.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj853c1ak.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj853c1ak.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj853c1ak.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8eyce8yp.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8eyce8yp.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8eyce8yp.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp8eyce8yp.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8eyce8yp.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8eyce8yp.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp8eyce8yp.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8eyce8yp.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8eyce8yp.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8eyce8yp.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5fx5319j.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5fx5319j.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5fx5319j.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5fx5319j.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5fx5319j.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5fx5319j.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5fx5319j.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5fx5319j.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5fx5319j.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5fx5319j.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5fx5319j.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5fx5319j.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5fx5319j.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvm9szmg2.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvm9szmg2.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvm9szmg2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpvm9szmg2.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvm9szmg2.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvm9szmg2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpvm9szmg2.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvm9szmg2.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvm9szmg2.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvm9szmg2.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjlmodjv1.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjlmodjv1.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjlmodjv1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjlmodjv1.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjlmodjv1.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjlmodjv1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjlmodjv1.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjlmodjv1.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjlmodjv1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjlmodjv1.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjlmodjv1.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjlmodjv1.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjlmodjv1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplqlhg55m.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplqlhg55m.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplqlhg55m.jl:24\ntest set: Test\
    \ Failed at /tmp/tmplqlhg55m.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplqlhg55m.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplqlhg55m.jl:24\ntest set: Test\
    \ Failed at /tmp/tmplqlhg55m.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplqlhg55m.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplqlhg55m.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplqlhg55m.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl_ngoh7n.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl_ngoh7n.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl_ngoh7n.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl_ngoh7n.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl_ngoh7n.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl_ngoh7n.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl_ngoh7n.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl_ngoh7n.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl_ngoh7n.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl_ngoh7n.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl_ngoh7n.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl_ngoh7n.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl_ngoh7n.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmple3m5ifh.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmple3m5ifh.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmple3m5ifh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmple3m5ifh.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmple3m5ifh.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmple3m5ifh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmple3m5ifh.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmple3m5ifh.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmple3m5ifh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmple3m5ifh.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmple3m5ifh.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmple3m5ifh.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmple3m5ifh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4mik1fy_.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4mik1fy_.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4mik1fy_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4mik1fy_.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4mik1fy_.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4mik1fy_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4mik1fy_.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4mik1fy_.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4mik1fy_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4mik1fy_.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4mik1fy_.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4mik1fy_.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4mik1fy_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnnk32b15.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnnk32b15.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnnk32b15.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnnk32b15.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnnk32b15.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnnk32b15.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnnk32b15.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnnk32b15.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnnk32b15.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnnk32b15.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnnk32b15.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnnk32b15.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnnk32b15.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeoia2rxq.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeoia2rxq.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeoia2rxq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpeoia2rxq.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeoia2rxq.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeoia2rxq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpeoia2rxq.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeoia2rxq.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeoia2rxq.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeoia2rxq.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdv581967.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdv581967.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdv581967.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdv581967.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdv581967.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdv581967.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdv581967.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdv581967.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdv581967.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdv581967.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdv581967.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdv581967.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdv581967.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x % 2 == 0\n        return x\n\
    \    else\n        return x + 1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv1fnsvtv.jl:21\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv1fnsvtv.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv1fnsvtv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpv1fnsvtv.jl:22\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv1fnsvtv.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv1fnsvtv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpv1fnsvtv.jl:23\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv1fnsvtv.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv1fnsvtv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpv1fnsvtv.jl:24\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv1fnsvtv.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv1fnsvtv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpv1fnsvtv.jl:25\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv1fnsvtv.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv1fnsvtv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpv1fnsvtv.jl:26\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 28 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv1fnsvtv.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/us"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv1fnsvtv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2gkukypx.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2gkukypx.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2gkukypx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2gkukypx.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2gkukypx.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2gkukypx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2gkukypx.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2gkukypx.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2gkukypx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2gkukypx.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2gkukypx.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2gkukypx.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2gkukypx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6f_25lgd.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6f_25lgd.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6f_25lgd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6f_25lgd.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6f_25lgd.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6f_25lgd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6f_25lgd.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6f_25lgd.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6f_25lgd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6f_25lgd.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6f_25lgd.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6f_25lgd.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6f_25lgd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpes8ak1dp.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpes8ak1dp.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpes8ak1dp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpes8ak1dp.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpes8ak1dp.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpes8ak1dp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpes8ak1dp.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpes8ak1dp.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpes8ak1dp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpes8ak1dp.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpes8ak1dp.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpes8ak1dp.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpes8ak1dp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb3_5a1v5.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb3_5a1v5.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb3_5a1v5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpb3_5a1v5.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb3_5a1v5.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb3_5a1v5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpb3_5a1v5.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb3_5a1v5.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb3_5a1v5.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb3_5a1v5.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpguvyk5nx.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpguvyk5nx.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpguvyk5nx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpguvyk5nx.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpguvyk5nx.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpguvyk5nx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpguvyk5nx.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpguvyk5nx.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpguvyk5nx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpguvyk5nx.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpguvyk5nx.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpguvyk5nx.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpguvyk5nx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsqctrziz.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsqctrziz.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsqctrziz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsqctrziz.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsqctrziz.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsqctrziz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsqctrziz.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsqctrziz.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsqctrziz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsqctrziz.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsqctrziz.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsqctrziz.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsqctrziz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3sfvgprp.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3sfvgprp.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3sfvgprp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3sfvgprp.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3sfvgprp.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3sfvgprp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3sfvgprp.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3sfvgprp.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3sfvgprp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3sfvgprp.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3sfvgprp.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3sfvgprp.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3sfvgprp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmputifahu_.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmputifahu_.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputifahu_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmputifahu_.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmputifahu_.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputifahu_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmputifahu_.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmputifahu_.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputifahu_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmputifahu_.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmputifahu_.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputifahu_.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmputifahu_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu_9ggebx.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu_9ggebx.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu_9ggebx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu_9ggebx.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu_9ggebx.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu_9ggebx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu_9ggebx.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu_9ggebx.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu_9ggebx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu_9ggebx.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu_9ggebx.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu_9ggebx.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu_9ggebx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu1ttzf0r.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu1ttzf0r.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu1ttzf0r.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpu1ttzf0r.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu1ttzf0r.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu1ttzf0r.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpu1ttzf0r.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu1ttzf0r.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu1ttzf0r.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu1ttzf0r.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4g4fb9m4.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4g4fb9m4.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4g4fb9m4.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp4g4fb9m4.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4g4fb9m4.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4g4fb9m4.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp4g4fb9m4.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4g4fb9m4.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4g4fb9m4.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4g4fb9m4.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpinty57bf.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpinty57bf.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpinty57bf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpinty57bf.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpinty57bf.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpinty57bf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpinty57bf.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpinty57bf.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpinty57bf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpinty57bf.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpinty57bf.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpinty57bf.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpinty57bf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn72txq2d.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn72txq2d.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn72txq2d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpn72txq2d.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn72txq2d.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn72txq2d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpn72txq2d.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn72txq2d.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn72txq2d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpn72txq2d.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn72txq2d.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn72txq2d.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn72txq2d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnchk1eqn.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnchk1eqn.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnchk1eqn.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpnchk1eqn.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnchk1eqn.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnchk1eqn.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpnchk1eqn.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnchk1eqn.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnchk1eqn.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnchk1eqn.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpekahdc87.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpekahdc87.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpekahdc87.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpekahdc87.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpekahdc87.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpekahdc87.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpekahdc87.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpekahdc87.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpekahdc87.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpekahdc87.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpekahdc87.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpekahdc87.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpekahdc87.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0hi6dkcj.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0hi6dkcj.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0hi6dkcj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0hi6dkcj.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0hi6dkcj.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0hi6dkcj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0hi6dkcj.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0hi6dkcj.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0hi6dkcj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0hi6dkcj.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0hi6dkcj.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0hi6dkcj.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0hi6dkcj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl8nd09_o.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl8nd09_o.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl8nd09_o.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpl8nd09_o.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl8nd09_o.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl8nd09_o.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpl8nd09_o.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl8nd09_o.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl8nd09_o.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl8nd09_o.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppnlfr9w2.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppnlfr9w2.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppnlfr9w2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppnlfr9w2.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppnlfr9w2.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppnlfr9w2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppnlfr9w2.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppnlfr9w2.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppnlfr9w2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppnlfr9w2.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppnlfr9w2.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppnlfr9w2.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppnlfr9w2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5_7d1e3i.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5_7d1e3i.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5_7d1e3i.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5_7d1e3i.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5_7d1e3i.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5_7d1e3i.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5_7d1e3i.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5_7d1e3i.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5_7d1e3i.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5_7d1e3i.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptc74cl8g.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptc74cl8g.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptc74cl8g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptc74cl8g.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptc74cl8g.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptc74cl8g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptc74cl8g.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptc74cl8g.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptc74cl8g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptc74cl8g.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptc74cl8g.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptc74cl8g.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptc74cl8g.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa31vol0h.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa31vol0h.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa31vol0h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa31vol0h.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa31vol0h.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa31vol0h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa31vol0h.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa31vol0h.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa31vol0h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa31vol0h.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa31vol0h.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa31vol0h.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa31vol0h.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0183erli.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0183erli.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0183erli.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0183erli.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0183erli.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0183erli.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0183erli.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0183erli.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0183erli.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0183erli.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0183erli.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0183erli.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0183erli.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy1ddjqku.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy1ddjqku.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy1ddjqku.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy1ddjqku.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy1ddjqku.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy1ddjqku.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy1ddjqku.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy1ddjqku.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy1ddjqku.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy1ddjqku.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy1ddjqku.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy1ddjqku.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy1ddjqku.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiit3729h.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiit3729h.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiit3729h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiit3729h.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiit3729h.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiit3729h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiit3729h.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiit3729h.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiit3729h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiit3729h.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiit3729h.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiit3729h.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiit3729h.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5pikhol6.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5pikhol6.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5pikhol6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5pikhol6.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5pikhol6.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5pikhol6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5pikhol6.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5pikhol6.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5pikhol6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5pikhol6.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5pikhol6.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5pikhol6.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5pikhol6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfdydtecn.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfdydtecn.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfdydtecn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfdydtecn.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfdydtecn.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfdydtecn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfdydtecn.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfdydtecn.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfdydtecn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfdydtecn.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfdydtecn.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfdydtecn.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfdydtecn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpewca37ic.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpewca37ic.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpewca37ic.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpewca37ic.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpewca37ic.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpewca37ic.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpewca37ic.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpewca37ic.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpewca37ic.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpewca37ic.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7212waq7.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7212waq7.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7212waq7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7212waq7.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7212waq7.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7212waq7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7212waq7.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7212waq7.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7212waq7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7212waq7.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7212waq7.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7212waq7.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7212waq7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6ac1ebw8.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ac1ebw8.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ac1ebw8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6ac1ebw8.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ac1ebw8.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ac1ebw8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6ac1ebw8.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ac1ebw8.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ac1ebw8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6ac1ebw8.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ac1ebw8.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ac1ebw8.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ac1ebw8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8u70irna.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8u70irna.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8u70irna.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp8u70irna.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8u70irna.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8u70irna.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp8u70irna.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8u70irna.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8u70irna.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8u70irna.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzxlcto6n.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzxlcto6n.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxlcto6n.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzxlcto6n.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzxlcto6n.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxlcto6n.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzxlcto6n.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzxlcto6n.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxlcto6n.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzxlcto6n.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzxlcto6n.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxlcto6n.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzxlcto6n.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzwqrp1u6.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzwqrp1u6.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzwqrp1u6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzwqrp1u6.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzwqrp1u6.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzwqrp1u6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzwqrp1u6.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzwqrp1u6.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzwqrp1u6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzwqrp1u6.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzwqrp1u6.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzwqrp1u6.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzwqrp1u6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpejg0efz6.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpejg0efz6.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpejg0efz6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpejg0efz6.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpejg0efz6.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpejg0efz6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpejg0efz6.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpejg0efz6.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpejg0efz6.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpejg0efz6.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp27xzpv9g.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp27xzpv9g.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27xzpv9g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp27xzpv9g.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp27xzpv9g.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27xzpv9g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp27xzpv9g.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp27xzpv9g.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27xzpv9g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp27xzpv9g.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp27xzpv9g.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27xzpv9g.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp27xzpv9g.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphjh2t7li.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphjh2t7li.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjh2t7li.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphjh2t7li.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphjh2t7li.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjh2t7li.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphjh2t7li.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphjh2t7li.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjh2t7li.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphjh2t7li.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphjh2t7li.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjh2t7li.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphjh2t7li.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8xevmv_q.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8xevmv_q.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8xevmv_q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8xevmv_q.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8xevmv_q.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8xevmv_q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8xevmv_q.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8xevmv_q.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8xevmv_q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8xevmv_q.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8xevmv_q.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8xevmv_q.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8xevmv_q.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4_1a0cq9.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4_1a0cq9.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4_1a0cq9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4_1a0cq9.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4_1a0cq9.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4_1a0cq9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4_1a0cq9.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4_1a0cq9.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4_1a0cq9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4_1a0cq9.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4_1a0cq9.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4_1a0cq9.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4_1a0cq9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph3nkrc40.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph3nkrc40.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3nkrc40.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph3nkrc40.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph3nkrc40.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3nkrc40.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph3nkrc40.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph3nkrc40.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3nkrc40.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph3nkrc40.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph3nkrc40.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3nkrc40.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph3nkrc40.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsl4udhs4.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsl4udhs4.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsl4udhs4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsl4udhs4.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsl4udhs4.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsl4udhs4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsl4udhs4.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsl4udhs4.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsl4udhs4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsl4udhs4.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsl4udhs4.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsl4udhs4.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsl4udhs4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphbqesyg6.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphbqesyg6.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphbqesyg6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphbqesyg6.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphbqesyg6.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphbqesyg6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphbqesyg6.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphbqesyg6.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphbqesyg6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphbqesyg6.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphbqesyg6.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphbqesyg6.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphbqesyg6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuqynlt94.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuqynlt94.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuqynlt94.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuqynlt94.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuqynlt94.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuqynlt94.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuqynlt94.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuqynlt94.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuqynlt94.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuqynlt94.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuqynlt94.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuqynlt94.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuqynlt94.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp31it1kdq.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp31it1kdq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp31it1kdq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp31it1kdq.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp31it1kdq.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp31it1kdq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp31it1kdq.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp31it1kdq.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp31it1kdq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp31it1kdq.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp31it1kdq.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp31it1kdq.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp31it1kdq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5zkzowuy.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5zkzowuy.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5zkzowuy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5zkzowuy.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5zkzowuy.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5zkzowuy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5zkzowuy.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5zkzowuy.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5zkzowuy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5zkzowuy.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5zkzowuy.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5zkzowuy.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5zkzowuy.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplf_vb_fy.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplf_vb_fy.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplf_vb_fy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplf_vb_fy.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplf_vb_fy.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplf_vb_fy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplf_vb_fy.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplf_vb_fy.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplf_vb_fy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplf_vb_fy.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplf_vb_fy.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplf_vb_fy.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplf_vb_fy.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0drxrhul.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0drxrhul.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0drxrhul.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp0drxrhul.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0drxrhul.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0drxrhul.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp0drxrhul.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0drxrhul.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0drxrhul.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0drxrhul.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqj9smjtz.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqj9smjtz.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqj9smjtz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqj9smjtz.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqj9smjtz.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqj9smjtz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqj9smjtz.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqj9smjtz.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqj9smjtz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqj9smjtz.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqj9smjtz.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqj9smjtz.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqj9smjtz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpue3tc0nj.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpue3tc0nj.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpue3tc0nj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpue3tc0nj.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpue3tc0nj.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpue3tc0nj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpue3tc0nj.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpue3tc0nj.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpue3tc0nj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpue3tc0nj.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpue3tc0nj.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpue3tc0nj.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpue3tc0nj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmwd5l3wd.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmwd5l3wd.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmwd5l3wd.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmwd5l3wd.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmwd5l3wd.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmwd5l3wd.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmwd5l3wd.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmwd5l3wd.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmwd5l3wd.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmwd5l3wd.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppxqkqpud.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppxqkqpud.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppxqkqpud.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppxqkqpud.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppxqkqpud.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppxqkqpud.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppxqkqpud.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppxqkqpud.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppxqkqpud.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppxqkqpud.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppxqkqpud.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppxqkqpud.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppxqkqpud.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoullnjm7.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoullnjm7.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoullnjm7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpoullnjm7.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoullnjm7.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoullnjm7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpoullnjm7.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoullnjm7.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoullnjm7.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoullnjm7.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptgfapfa3.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptgfapfa3.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptgfapfa3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptgfapfa3.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptgfapfa3.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptgfapfa3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptgfapfa3.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptgfapfa3.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptgfapfa3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptgfapfa3.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptgfapfa3.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptgfapfa3.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptgfapfa3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnmx0fj42.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnmx0fj42.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnmx0fj42.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnmx0fj42.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnmx0fj42.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnmx0fj42.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnmx0fj42.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnmx0fj42.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnmx0fj42.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnmx0fj42.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnmx0fj42.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnmx0fj42.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnmx0fj42.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3fls42ow.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3fls42ow.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3fls42ow.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3fls42ow.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3fls42ow.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3fls42ow.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3fls42ow.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3fls42ow.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3fls42ow.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3fls42ow.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3fls42ow.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3fls42ow.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3fls42ow.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp34y8zuu0.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp34y8zuu0.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp34y8zuu0.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp34y8zuu0.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp34y8zuu0.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp34y8zuu0.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp34y8zuu0.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp34y8zuu0.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp34y8zuu0.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp34y8zuu0.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4nw_kml4.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4nw_kml4.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4nw_kml4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4nw_kml4.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4nw_kml4.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4nw_kml4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4nw_kml4.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4nw_kml4.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4nw_kml4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4nw_kml4.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4nw_kml4.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4nw_kml4.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4nw_kml4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5ms59b8v.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5ms59b8v.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ms59b8v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5ms59b8v.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5ms59b8v.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ms59b8v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5ms59b8v.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5ms59b8v.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ms59b8v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5ms59b8v.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5ms59b8v.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ms59b8v.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5ms59b8v.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiu61wpwm.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiu61wpwm.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiu61wpwm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiu61wpwm.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiu61wpwm.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiu61wpwm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiu61wpwm.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiu61wpwm.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiu61wpwm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiu61wpwm.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiu61wpwm.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiu61wpwm.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiu61wpwm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpst5_spyf.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpst5_spyf.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpst5_spyf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpst5_spyf.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpst5_spyf.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpst5_spyf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpst5_spyf.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpst5_spyf.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpst5_spyf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpst5_spyf.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpst5_spyf.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpst5_spyf.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpst5_spyf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps_x8j3gr.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps_x8j3gr.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps_x8j3gr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps_x8j3gr.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps_x8j3gr.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps_x8j3gr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps_x8j3gr.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps_x8j3gr.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps_x8j3gr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps_x8j3gr.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps_x8j3gr.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps_x8j3gr.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps_x8j3gr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x % 2 == 0\n        return x\n\
    \    else\n        return x + 1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3vux267a.jl:21\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3vux267a.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3vux267a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3vux267a.jl:22\n  Expression: candidate(13, 12) == -1\n  \
    \ Evaluated: 14 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3vux267a.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3vux267a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3vux267a.jl:23\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3vux267a.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3vux267a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3vux267a.jl:24\n  Expression: candidate(5234, 5233) == -1\n\
    \   Evaluated: 5234 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3vux267a.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3vux267a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3vux267a.jl:25\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3vux267a.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3vux267a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3vux267a.jl:26\n  Expression: candidate(27, 10) == -1\n  \
    \ Evaluated: 28 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3vux267a.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/us"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3vux267a.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv51xsmgy.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv51xsmgy.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv51xsmgy.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpv51xsmgy.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv51xsmgy.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv51xsmgy.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpv51xsmgy.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv51xsmgy.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv51xsmgy.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv51xsmgy.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    for i in x:y\n        if i % 2 == 0\n            return i\n      \
    \  end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpay4l9as3.jl:25\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpay4l9as3.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpay4l9as3.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpay4l9as3.jl:27\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpay4l9as3.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpay4l9as3.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpay4l9as3.jl:29\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpay4l9as3.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpay4l9as3.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpay4l9as3.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\nfunction\
    \ choose_num(x::Int64, y::Int64)::Int64 \n    if x > y\n        return -1\n  \
    \  end\n    if x % 2 == 0\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpij63bkfq.jl:24\n  Expression: candidate(12,\
    \ 15) == 14\n   Evaluated: 12 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpij63bkfq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpij63bkfq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpij63bkfq.jl:26\n  Expression: candidate(33, 12354) == 12354\n\
    \   Evaluated: 34 == 12354\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpij63bkfq.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpij63bkfq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpij63bkfq.jl:28\n  Expression: candidate(6, 29) == 28\n   Evaluated:\
    \ 6 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpij63bkfq.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpij63bkfq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpij63bkfq.jl:30\n  Expression: candidate(7, 7) == -1\n   Evaluated:\
    \ 8 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpij63bkfq.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpij63bkfq.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpij63bkfq.jl:21\n"
  exit_code: 1
  status: SyntaxError
