name: HumanEval_46_fib4
language: julia
results:
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 1:n-3\n        a,b,c,d\
    \ = b,c,d,a+b+c+d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\n\
    candidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t\
    @test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i = 4:n\n\
    \            temp = a + b + c + d\n            a = b\n            b = c\n    \
    \        c = d\n            d = temp\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqemsrt1t.jl:37\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqemsrt1t.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqemsrt1t.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqemsrt1t.jl:38\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 88 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqemsrt1t.jl:38 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqemsrt1t.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpqemsrt1t.jl:39\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 298 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqemsrt1t.jl:39 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqemsrt1t.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqemsrt1t.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be non-negative\")\n    end\n    if n\
    \ == 0\n        return 0\n    end\n    if n == 1\n        return 0\n    end\n\
    \    if n == 2\n        return 2\n    end\n    if n == 3\n        return 0\n \
    \   end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n      \
    \  a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    a, b, c, d = 0, 0, 2, 0\n    for i in 1:n-3\n        a, b, c, d = b, c,\
    \ d, a+b+c+d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10)\
    \ == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        throw(ArgumentError(\"n must be non-negative\"))\n \
    \   end\n    if n == 0\n        return 0\n    end\n    if n == 1\n        return\
    \ 0\n    end\n    if n == 2\n        return 2\n    end\n    if n == 3\n      \
    \  return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in\
    \ 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\n\
    using Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\
    \t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 1:n-2\n        d = a + b + c\n        a = b\n       \
    \ b = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx0pi9vrn.jl:36\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx0pi9vrn.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0pi9vrn.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx0pi9vrn.jl:37\n  Expression: candidate(8) == 28\n   Evaluated:\
    \ 48 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx0pi9vrn.jl:37 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0pi9vrn.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx0pi9vrn.jl:38\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 162 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx0pi9vrn.jl:38 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0pi9vrn.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx0pi9vrn.jl:39\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 548 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx0pi9vrn.jl:39 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0pi9vrn.jl:35\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx0pi9vrn.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be non-negative\")\n    end\n    if n\
    \ == 0\n        return 0\n    end\n    if n == 1\n        return 0\n    end\n\
    \    if n == 2\n        return 2\n    end\n    if n == 3\n        return 0\n \
    \   end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n      \
    \  a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            temp = a + b + c + d\n            a = b\n            b = c\n\
    \            c = d\n            d = temp\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 1:n-3\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf531jkkg.jl:34\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf531jkkg.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf531jkkg.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpf531jkkg.jl:35\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 88 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf531jkkg.jl:35 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf531jkkg.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpf531jkkg.jl:36\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 298 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf531jkkg.jl:36 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf531jkkg.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf531jkkg.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk69w1gmy.jl:37\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk69w1gmy.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk69w1gmy.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpk69w1gmy.jl:38\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 88 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk69w1gmy.jl:38 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk69w1gmy.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpk69w1gmy.jl:39\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 298 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk69w1gmy.jl:39 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk69w1gmy.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk69w1gmy.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 1:n-3\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4cywx2j4.jl:34\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4cywx2j4.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4cywx2j4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4cywx2j4.jl:35\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 88 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4cywx2j4.jl:35 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4cywx2j4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4cywx2j4.jl:36\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 298 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4cywx2j4.jl:36 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4cywx2j4.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4cywx2j4.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 3:n\n        a, b, c, d = b, c, d, a + b + c + d\n  \
    \  end\n    return d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\
    \t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10)\
    \ == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd1hupyx_.jl:33\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd1hupyx_.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd1hupyx_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpd1hupyx_.jl:34\n  Expression: candidate(8) == 28\n   Evaluated:\
    \ 54 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd1hupyx_.jl:34 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd1hupyx_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpd1hupyx_.jl:35\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 200 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd1hupyx_.jl:35 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd1hupyx_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpd1hupyx_.jl:36\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 744 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd1hupyx_.jl:36 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd1hupyx_.jl:32\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd1hupyx_.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 3:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgt_u94nk.jl:36\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgt_u94nk.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgt_u94nk.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgt_u94nk.jl:37\n  Expression: candidate(8) == 28\n   Evaluated:\
    \ 48 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgt_u94nk.jl:37 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgt_u94nk.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgt_u94nk.jl:38\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 162 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgt_u94nk.jl:38 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgt_u94nk.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgt_u94nk.jl:39\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 548 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgt_u94nk.jl:39 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgt_u94nk.jl:35\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgt_u94nk.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return -1\n    end\n    if n == 0\n        return 0\n\
    \    end\n    if n == 1\n        return 0\n    end\n    if n == 2\n        return\
    \ 2\n    end\n    if n == 3\n        return 0\n    end\n    a = 0\n    b = 0\n\
    \    c = 2\n    d = 0\n    for i in 4:n\n        a = b\n        b = c\n      \
    \  c = d\n        d = a + b + c\n    end\n    return d\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy7hpp37f.jl:49\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 22 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7hpp37f.jl:49\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7hpp37f.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpy7hpp37f.jl:50\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 74 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7hpp37f.jl:50 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7hpp37f.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpy7hpp37f.jl:51\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 250 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7hpp37f.jl:51 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7hpp37f.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy7hpp37f.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 3\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 3:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_a0q_50_.jl:36\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_a0q_50_.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a0q_50_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_a0q_50_.jl:37\n  Expression: candidate(8) == 28\n   Evaluated:\
    \ 48 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_a0q_50_.jl:37 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a0q_50_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_a0q_50_.jl:38\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 162 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_a0q_50_.jl:38 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a0q_50_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_a0q_50_.jl:39\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 548 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_a0q_50_.jl:39 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a0q_50_.jl:35\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_a0q_50_.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be non-negative\")\n    end\n    if n\
    \ == 0\n        return 0\n    end\n    if n == 1\n        return 0\n    end\n\
    \    if n == 2\n        return 2\n    end\n    if n == 3\n        return 0\n \
    \   end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n      \
    \  a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            temp = a + b + c + d\n            a = b\n            b = c\n\
    \            c = d\n            d = temp\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i = 4:n\n\
    \            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpov1xga9e.jl:37\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpov1xga9e.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpov1xga9e.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpov1xga9e.jl:38\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 88 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpov1xga9e.jl:38 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpov1xga9e.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpov1xga9e.jl:39\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 298 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpov1xga9e.jl:39 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpov1xga9e.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpov1xga9e.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i = 4:n\n\
    \            temp = a + b + c + d\n            a = b\n            b = c\n    \
    \        c = d\n            d = temp\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 1:n-3\n        a,b,c,d\
    \ = b,c,d,a+b+c+d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\n\
    candidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t\
    @test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a = b + c + d\n            b = c\n            c = d\n     \
    \       d = a\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv1_59ozb.jl:44\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 22 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv1_59ozb.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv1_59ozb.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpv1_59ozb.jl:45\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 74 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv1_59ozb.jl:45 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv1_59ozb.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpv1_59ozb.jl:46\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 250 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv1_59ozb.jl:46 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv1_59ozb.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv1_59ozb.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            temp = a + b + c + d\n            a = b\n            b = c\n\
    \            c = d\n            d = temp\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            temp = a + b + c + d\n            a = b\n            b = c\n\
    \            c = d\n            d = temp\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        throw(ArgumentError(\"n must be non-negative\"))\n \
    \   end\n    if n == 0\n        return 0\n    end\n    if n == 1\n        return\
    \ 0\n    end\n    if n == 2\n        return 2\n    end\n    if n == 3\n      \
    \  return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in\
    \ 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\n\
    using Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\
    \t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0 \n        return 0\n    elseif n == 1 \n        return 0\n \
    \   elseif n == 2 \n        return 2\n    elseif n == 3 \n        return 0\n \
    \   else \n        a = 0\n        b = 0\n        c = 2\n        d = 0\n      \
    \  for i in 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n\
    \        return d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\
    \t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10)\
    \ == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be positive\")\n    end\n    if n ==\
    \ 0\n        return 0\n    end\n    if n == 1\n        return 0\n    end\n   \
    \ if n == 2\n        return 2\n    end\n    if n == 3\n        return 0\n    end\n\
    \    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be non-negative\")\n    end\n    if n\
    \ == 0\n        return 0\n    end\n    if n == 1\n        return 0\n    end\n\
    \    if n == 2\n        return 2\n    end\n    if n == 3\n        return 0\n \
    \   end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n      \
    \  a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsnuybl5d.jl:37\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsnuybl5d.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsnuybl5d.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsnuybl5d.jl:38\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 88 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsnuybl5d.jl:38 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsnuybl5d.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsnuybl5d.jl:39\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 298 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsnuybl5d.jl:39 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsnuybl5d.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsnuybl5d.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        throw(ArgumentError(\"n must be non-negative\"))\n \
    \   end\n    if n == 0\n        return 0\n    end\n    if n == 1\n        return\
    \ 0\n    end\n    if n == 2\n        return 2\n    end\n    if n == 3\n      \
    \  return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in\
    \ 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\n\
    using Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\
    \t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    if n == 0\n        return 0\n\
    \    end\n    if n == 1\n        return 0\n    end\n    if n == 2\n        return\
    \ 2\n    end\n    if n == 3\n        return 0\n    end\n    a = 0\n    b = 0\n\
    \    c = 2\n    d = 0\n    for i in 4:n\n        a, b, c, d = b, c, d, a + b +\
    \ c + d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10)\
    \ == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    if n == 0\n        return 0\n\
    \    end\n    if n == 1\n        return 0\n    end\n    if n == 2\n        return\
    \ 2\n    end\n    if n == 3\n        return 0\n    end\n    a = 0\n    b = 0\n\
    \    c = 2\n    d = 0\n    for i in 4:n\n        e = a + b + c + d\n        a\
    \ = b\n        b = c\n        c = d\n        d = e\n    end\n    return d\nend\n\
    using Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\
    \t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n <= 0\n        return 0\n    end\n    if n == 1\n        return 0\n\
    \    end\n    if n == 2\n        return 2\n    end\n    if n == 3\n        return\
    \ 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n \
    \       a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t\
    @test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be a positive integer\")\n    end\n \
    \   if n == 0\n        return 0\n    end\n    if n == 1\n        return 0\n  \
    \  end\n    if n == 2\n        return 2\n    end\n    if n == 3\n        return\
    \ 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n \
    \       a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t\
    @test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be a non-negative integer\")\n    end\n\
    \    if n == 0\n        return 0\n    end\n    if n == 1\n        return 0\n \
    \   end\n    if n == 2\n        return 2\n    end\n    if n == 3\n        return\
    \ 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n \
    \       a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t\
    @test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5qujf71f.jl:37\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5qujf71f.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5qujf71f.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5qujf71f.jl:38\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 88 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5qujf71f.jl:38 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5qujf71f.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5qujf71f.jl:39\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 298 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5qujf71f.jl:39 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5qujf71f.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5qujf71f.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 3:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp611fzbr8.jl:36\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp611fzbr8.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp611fzbr8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp611fzbr8.jl:37\n  Expression: candidate(8) == 28\n   Evaluated:\
    \ 48 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp611fzbr8.jl:37 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp611fzbr8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp611fzbr8.jl:38\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 162 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp611fzbr8.jl:38 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp611fzbr8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp611fzbr8.jl:39\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 548 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp611fzbr8.jl:39 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp611fzbr8.jl:35\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp611fzbr8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            temp = a + b + c + d\n            a = b\n            b = c\n\
    \            c = d\n            d = temp\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n <= 0\n        return 0\n    end\n    if n == 1\n        return 0\n\
    \    end\n    if n == 2\n        return 2\n    end\n    if n == 3\n        return\
    \ 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n \
    \       a = b\n        b = c\n        c = d\n        d = a + b + c + d\n    end\n\
    \    return d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphjbt711z.jl:45\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 6 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphjbt711z.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjbt711z.jl:44\ntest set: Test\
    \ Failed at /tmp/tmphjbt711z.jl:46\n  Expression: candidate(8) == 28\n   Evaluated:\
    \ 92 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphjbt711z.jl:46 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjbt711z.jl:44\ntest set: Test\
    \ Failed at /tmp/tmphjbt711z.jl:47\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 596 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphjbt711z.jl:47 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjbt711z.jl:44\ntest set: Test\
    \ Failed at /tmp/tmphjbt711z.jl:48\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 3866 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphjbt711z.jl:48\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjbt711z.jl:44\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphjbt711z.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    if n == 0\n        return 0\n\
    \    end\n    if n == 1\n        return 0\n    end\n    if n == 2\n        return\
    \ 2\n    end\n    if n == 3\n        return 0\n    end\n    n1 = 0\n    n2 = 0\n\
    \    n3 = 2\n    n4 = 0\n    for i in 4:n\n        n5 = n1 + n2 + n3 + n4\n  \
    \      n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = n5\n    end\n \
    \   return n4\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1k72sx_m.jl:37\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1k72sx_m.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1k72sx_m.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp1k72sx_m.jl:38\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 88 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1k72sx_m.jl:38 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1k72sx_m.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp1k72sx_m.jl:39\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 298 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1k72sx_m.jl:39 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1k72sx_m.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1k72sx_m.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    if n == 0\n        return 0\n\
    \    end\n    if n == 1\n        return 0\n    end\n    if n == 2\n        return\
    \ 2\n    end\n    if n == 3\n        return 0\n    end\n    a = 0\n    b = 0\n\
    \    c = 2\n    d = 0\n    for i in 4:n\n        a, b, c, d = b, c, d, a + b +\
    \ c + d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10)\
    \ == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a, b, c, d = 0, 0, 2, 0\n        for i in 4:n\n            a, b, c, d\
    \ = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t\
    @test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd3san8mt.jl:37\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd3san8mt.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd3san8mt.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd3san8mt.jl:38\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 88 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd3san8mt.jl:38 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd3san8mt.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpd3san8mt.jl:39\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 298 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd3san8mt.jl:39 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd3san8mt.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd3san8mt.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be a non-negative integer\")\n    end\n\
    \    if n == 0\n        return 0\n    end\n    if n == 1\n        return 0\n \
    \   end\n    if n == 2\n        return 2\n    end\n    if n == 3\n        return\
    \ 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n \
    \       a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t\
    @test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        throw(ArgumentError(\"n must be non-negative\"))\n \
    \   end\n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c\
    \ = 2\n    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n   \
    \     b = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1fesnkzv.jl:40\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1fesnkzv.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1fesnkzv.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1fesnkzv.jl:41\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 88 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1fesnkzv.jl:41 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1fesnkzv.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1fesnkzv.jl:42\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 298 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1fesnkzv.jl:42 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1fesnkzv.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1fesnkzv.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 5:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp28lr7mlx.jl:30\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28lr7mlx.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28lr7mlx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp28lr7mlx.jl:31\n  Expression: candidate(8) == 28\n   Evaluated:\
    \ 14 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28lr7mlx.jl:31 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28lr7mlx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp28lr7mlx.jl:32\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 54 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28lr7mlx.jl:32 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28lr7mlx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp28lr7mlx.jl:33\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 200 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28lr7mlx.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28lr7mlx.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp28lr7mlx.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be non-negative\")\n    end\n    if n\
    \ == 0\n        return 0\n    end\n    if n == 1\n        return 0\n    end\n\
    \    if n == 2\n        return 2\n    end\n    if n == 3\n        return 0\n \
    \   end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n      \
    \  a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be positive\")\n    end\n    if n < 4\n\
    \        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n    for i in 4:n\n  \
    \      a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t\
    @test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        throw(ArgumentError(\"n must be non-negative\"))\n \
    \   end\n    if n == 0\n        return 0\n    end\n    if n == 1\n        return\
    \ 0\n    end\n    if n == 2\n        return 2\n    end\n    if n == 3\n      \
    \  return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in\
    \ 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\n\
    using Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\
    \t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n <= 1\n        return 0\n    elseif n == 2\n        return 2\n   \
    \ elseif n == 3\n        return 0\n    else\n        a = 0\n        b = 0\n  \
    \      c = 2\n        d = 0\n        for i in 4:n\n            e = a + b + c +\
    \ d\n            a = b\n            b = c\n            c = d\n            d =\
    \ e\n        end\n        return d\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    if n == 0\n        return 0\n\
    \    end\n    if n == 1\n        return 0\n    end\n    if n == 2\n        return\
    \ 2\n    end\n    if n == 3\n        return 0\n    end\n    a = 0\n    b = 0\n\
    \    c = 2\n    d = 0\n    for i in 4:n\n        a = b + c + d\n        b = c\n\
    \        c = d\n        d = a\n    end\n    return a\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpycc6gnfm.jl:49\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 22 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpycc6gnfm.jl:49\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpycc6gnfm.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpycc6gnfm.jl:50\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 74 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpycc6gnfm.jl:50 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpycc6gnfm.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpycc6gnfm.jl:51\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 250 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpycc6gnfm.jl:51 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpycc6gnfm.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpycc6gnfm.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 1:n-2\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz6as1e2n.jl:33\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz6as1e2n.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz6as1e2n.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpz6as1e2n.jl:34\n  Expression: candidate(8) == 28\n   Evaluated:\
    \ 48 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz6as1e2n.jl:34 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz6as1e2n.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpz6as1e2n.jl:35\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 162 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz6as1e2n.jl:35 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz6as1e2n.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpz6as1e2n.jl:36\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 548 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz6as1e2n.jl:36 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz6as1e2n.jl:32\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz6as1e2n.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 1:n-3\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4h5hfth8.jl:34\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4h5hfth8.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4h5hfth8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4h5hfth8.jl:35\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 88 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4h5hfth8.jl:35 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4h5hfth8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4h5hfth8.jl:36\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 298 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4h5hfth8.jl:36 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4h5hfth8.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4h5hfth8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 3:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbrqilcs3.jl:36\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbrqilcs3.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrqilcs3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbrqilcs3.jl:37\n  Expression: candidate(8) == 28\n   Evaluated:\
    \ 48 == 28\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbrqilcs3.jl:37 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrqilcs3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbrqilcs3.jl:38\n  Expression: candidate(10) == 104\n   Evaluated:\
    \ 162 == 104\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbrqilcs3.jl:38 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrqilcs3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbrqilcs3.jl:39\n  Expression: candidate(12) == 386\n   Evaluated:\
    \ 548 == 386\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbrqilcs3.jl:39 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrqilcs3.jl:35\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbrqilcs3.jl:33\n"
  exit_code: 1
  status: SyntaxError
