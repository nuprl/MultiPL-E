name: HumanEval_125_split_words
language: julia
results:
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf1kvwrws.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: no method matching occursin(::String, ::Char)\\n  Closest candidates\
    \ are:\\n    occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at strings/search.jl:621\\n    occursin(::Any) at strings/search.jl:635\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpf1kvwrws.jl:11\\\
    n   [2] macro expansion\\n     @ /tmp/tmpf1kvwrws.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf1kvwrws.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpf1kvwrws.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\\n  Closest candidates are:\\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at strings/search.jl:621\\n    occursin(::Any)\
    \ at strings/search.jl:635\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpf1kvwrws.jl:11\\n   [2] macro expansion\\n     @ /tmp/tmpf1kvwrws.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf1kvwrws.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpf1kvwrws.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\\n  Closest candidates are:\\n  \
    \  occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString) at\
    \ strings/search.jl:621\\n    occursin(::Any) at strings/search.jl:635\\n  Stacktrace:\\\
    n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpf1kvwrws.jl:11\\n   [2]\
    \ macro expansion\\n     @ /tmp/tmpf1kvwrws.jl:26 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ length(filter(x -> x % 2 == 1, map(x -> Int(x) - Int('a'), collect(txt))))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2jux2xnc.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp2jux2xnc.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp2jux2xnc.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2jux2xnc.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp2jux2xnc.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp2jux2xnc.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp2jux2xnc.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2jux2xnc.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp2jux2xnc.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp2jux2xnc.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp2jux2xnc.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.(collect(lowercase(txt)) .- 'a'))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwk4a793h.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpwk4a793h.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpwk4a793h.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwk4a793h.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpwk4a793h.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpwk4a793h.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpwk4a793h.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwk4a793h.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpwk4a793h.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpwk4a793h.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpwk4a793h.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsdrm6q8i.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpsdrm6q8i.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpsdrm6q8i.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsdrm6q8i.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpsdrm6q8i.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpsdrm6q8i.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpsdrm6q8i.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsdrm6q8i.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpsdrm6q8i.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpsdrm6q8i.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpsdrm6q8i.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in lowercase(txt)])\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvpdecluv.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpvpdecluv.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpvpdecluv.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvpdecluv.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpvpdecluv.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpvpdecluv.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpvpdecluv.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvpdecluv.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpvpdecluv.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpvpdecluv.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpvpdecluv.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(x) - ord('a') for x in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv5x0ccek.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpv5x0ccek.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpv5x0ccek.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv5x0ccek.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpv5x0ccek.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpv5x0ccek.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpv5x0ccek.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv5x0ccek.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpv5x0ccek.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpv5x0ccek.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpv5x0ccek.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ count(islower, txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjczswy02.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpjczswy02.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjczswy02.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjczswy02.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpjczswy02.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpjczswy02.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpjczswy02.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjczswy02.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpjczswy02.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpjczswy02.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpjczswy02.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3wr92wmy.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp3wr92wmy.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3wr92wmy.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3wr92wmy.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp3wr92wmy.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp3wr92wmy.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp3wr92wmy.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3wr92wmy.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp3wr92wmy.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp3wr92wmy.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp3wr92wmy.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwdqpursi.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpwdqpursi.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpwdqpursi.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwdqpursi.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpwdqpursi.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpwdqpursi.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpwdqpursi.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwdqpursi.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpwdqpursi.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpwdqpursi.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpwdqpursi.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(r\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.(collect(txt) .- 'a'))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8kw4p2gb.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp8kw4p2gb.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp8kw4p2gb.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8kw4p2gb.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp8kw4p2gb.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp8kw4p2gb.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp8kw4p2gb.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8kw4p2gb.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp8kw4p2gb.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp8kw4p2gb.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp8kw4p2gb.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ length(filter(x -> x % 2 == 1, map(x -> Int(x) - Int('a'), collect(txt))))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfz4_llnq.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpfz4_llnq.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfz4_llnq.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfz4_llnq.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpfz4_llnq.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpfz4_llnq.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpfz4_llnq.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfz4_llnq.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpfz4_llnq.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpfz4_llnq.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpfz4_llnq.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw_v7nruc.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpw_v7nruc.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpw_v7nruc.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw_v7nruc.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpw_v7nruc.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpw_v7nruc.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpw_v7nruc.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw_v7nruc.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpw_v7nruc.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpw_v7nruc.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpw_v7nruc.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmmy24f7f.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpmmy24f7f.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpmmy24f7f.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmmy24f7f.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpmmy24f7f.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpmmy24f7f.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpmmy24f7f.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmmy24f7f.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpmmy24f7f.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpmmy24f7f.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpmmy24f7f.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.(collect(lowercase(txt)) .- 'a'))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwqn1gt_z.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpwqn1gt_z.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpwqn1gt_z.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwqn1gt_z.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpwqn1gt_z.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpwqn1gt_z.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpwqn1gt_z.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwqn1gt_z.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpwqn1gt_z.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpwqn1gt_z.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpwqn1gt_z.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt) && !occursin(\",\", txt)\n        return\
    \ sum(occursin(lowercase[i], txt) for i in 1:26)\n    elseif !occursin(\" \",\
    \ txt)\n        return split(txt, \",\")\n    else\n        return split(txt,\
    \ \" \")\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzr67p010.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpzr67p010.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpzr67p010.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzr67p010.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpzr67p010.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpzr67p010.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpzr67p010.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzr67p010.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpzr67p010.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpzr67p010.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpzr67p010.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8ssedt80.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp8ssedt80.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp8ssedt80.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8ssedt80.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp8ssedt80.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp8ssedt80.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp8ssedt80.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8ssedt80.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp8ssedt80.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp8ssedt80.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp8ssedt80.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprtn94tza.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmprtn94tza.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmprtn94tza.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprtn94tza.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmprtn94tza.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmprtn94tza.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmprtn94tza.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprtn94tza.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmprtn94tza.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmprtn94tza.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmprtn94tza.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt)\n        return split(txt, \" \")\n   \
    \ elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp48cb02hw.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp48cb02hw.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp48cb02hw.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp48cb02hw.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp48cb02hw.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp48cb02hw.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp48cb02hw.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp48cb02hw.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp48cb02hw.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp48cb02hw.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp48cb02hw.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return count(x -> x in 'a':'z' && isodd(x - 'a'), txt)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk8un8pt2.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpk8un8pt2.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpk8un8pt2.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk8un8pt2.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpk8un8pt2.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpk8un8pt2.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpk8un8pt2.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk8un8pt2.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpk8un8pt2.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpk8un8pt2.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpk8un8pt2.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj1_ebe1d.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpj1_ebe1d.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpj1_ebe1d.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj1_ebe1d.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpj1_ebe1d.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpj1_ebe1d.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpj1_ebe1d.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj1_ebe1d.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpj1_ebe1d.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpj1_ebe1d.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpj1_ebe1d.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ count(x -> x in 'abcdefghijklmnopqrstuvwxyz' && x == 'a' || x == 'c' || x ==\
    \ 'e' || x == 'g' || x == 'i' || x == 'k' || x == 'm' || x == 'o' || x == 'q'\
    \ || x == 's' || x == 'u' || x == 'w' || x == 'y', txt)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpcgw9f6wi.jl:16\nin expression\
    \ starting at /tmp/tmpcgw9f6wi.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return count(x -> x in\
    \ 'acegikmoqsuwy' , txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpkiv95sv8.jl:16\nin expression\
    \ starting at /tmp/tmpkiv95sv8.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_celoh0o.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp_celoh0o.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_celoh0o.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_celoh0o.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_celoh0o.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp_celoh0o.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp_celoh0o.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_celoh0o.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_celoh0o.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp_celoh0o.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp_celoh0o.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprkesth9_.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmprkesth9_.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmprkesth9_.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprkesth9_.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmprkesth9_.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmprkesth9_.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmprkesth9_.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprkesth9_.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmprkesth9_.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmprkesth9_.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmprkesth9_.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.(collect(txt) .- 'a'))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp87jxbe_n.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: no method matching occursin(::String, ::Char)\\n  Closest candidates\
    \ are:\\n    occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at strings/search.jl:621\\n    occursin(::Any) at strings/search.jl:635\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp87jxbe_n.jl:11\\\
    n   [2] macro expansion\\n     @ /tmp/tmp87jxbe_n.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp87jxbe_n.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp87jxbe_n.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\\n  Closest candidates are:\\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at strings/search.jl:621\\n    occursin(::Any)\
    \ at strings/search.jl:635\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp87jxbe_n.jl:11\\n   [2] macro expansion\\n     @ /tmp/tmp87jxbe_n.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp87jxbe_n.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp87jxbe_n.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\\n  Closest candidates are:\\n  \
    \  occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString) at\
    \ strings/search.jl:621\\n    occursin(::Any) at strings/search.jl:635\\n  Stacktrace:\\\
    n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp87jxbe_n.jl:11\\n   [2]\
    \ macro expansion\\n     @ /tmp/tmp87jxbe_n.jl:26 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return length(filter(x -> islower(x) && x == 'a' + mod(x - 'a', 2), txt))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgcsoym8s.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpgcsoym8s.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgcsoym8s.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgcsoym8s.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpgcsoym8s.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpgcsoym8s.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpgcsoym8s.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgcsoym8s.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpgcsoym8s.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpgcsoym8s.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpgcsoym8s.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(occursin.(lowercase(txt), \"a\"::String))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3_4j4oat.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp3_4j4oat.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3_4j4oat.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3_4j4oat.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp3_4j4oat.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp3_4j4oat.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp3_4j4oat.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3_4j4oat.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp3_4j4oat.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp3_4j4oat.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp3_4j4oat.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return count(x -> x in\
    \ 'abcdefghijklmnopqrstuvwxyz' && isodd(Int(x) - Int('a')), txt)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpqn83z20n.jl:16\nin expression\
    \ starting at /tmp/tmpqn83z20n.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe2bpbm7k.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpe2bpbm7k.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpe2bpbm7k.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe2bpbm7k.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpe2bpbm7k.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpe2bpbm7k.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpe2bpbm7k.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe2bpbm7k.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpe2bpbm7k.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpe2bpbm7k.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpe2bpbm7k.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt) && !occursin(',', txt)\n        return sum(occursin(lowercase[i],\
    \ txt) for i in 1:26)\n    elseif !occursin(' ', txt)\n        return split(txt,\
    \ ',')\n    else\n        return split(txt, ' ')\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpidv69mdg.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpidv69mdg.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpidv69mdg.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpidv69mdg.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpidv69mdg.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpidv69mdg.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpidv69mdg.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpidv69mdg.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpidv69mdg.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpidv69mdg.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpidv69mdg.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0ycmmfi0.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp0ycmmfi0.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp0ycmmfi0.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0ycmmfi0.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp0ycmmfi0.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp0ycmmfi0.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp0ycmmfi0.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0ycmmfi0.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp0ycmmfi0.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp0ycmmfi0.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp0ycmmfi0.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt) && !occursin(',', txt)\n        return sum(occursin(lowercase[i],\
    \ txt) for i in 1:26)\n    elseif !occursin(' ', txt)\n        return split(txt,\
    \ ',')\n    else\n        return split(txt, ' ')\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6ep__8v3.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp6ep__8v3.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6ep__8v3.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6ep__8v3.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp6ep__8v3.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp6ep__8v3.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp6ep__8v3.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6ep__8v3.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp6ep__8v3.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp6ep__8v3.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp6ep__8v3.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(r\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpd4x3mtpp.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpd4x3mtpp.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpd4x3mtpp.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpd4x3mtpp.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpd4x3mtpp.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpd4x3mtpp.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpd4x3mtpp.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpd4x3mtpp.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpd4x3mtpp.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpd4x3mtpp.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpd4x3mtpp.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt) && !occursin(',', txt)\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    elseif !occursin(' ', txt)\n        return split(txt,\
    \ ',')\n    else\n        return split(txt, ' ')\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppmr6tidv.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmppmr6tidv.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmppmr6tidv.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppmr6tidv.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmppmr6tidv.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmppmr6tidv.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmppmr6tidv.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppmr6tidv.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmppmr6tidv.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmppmr6tidv.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmppmr6tidv.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp26z53bq2.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp26z53bq2.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp26z53bq2.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp26z53bq2.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp26z53bq2.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp26z53bq2.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp26z53bq2.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp26z53bq2.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp26z53bq2.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp26z53bq2.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp26z53bq2.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.(collect(lowercase(txt)) .- 'a'))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg_nbesq0.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpg_nbesq0.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpg_nbesq0.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg_nbesq0.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpg_nbesq0.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpg_nbesq0.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpg_nbesq0.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg_nbesq0.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpg_nbesq0.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpg_nbesq0.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpg_nbesq0.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5isrjwht.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp5isrjwht.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5isrjwht.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5isrjwht.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5isrjwht.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5isrjwht.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp5isrjwht.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5isrjwht.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5isrjwht.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5isrjwht.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp5isrjwht.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt) && !occursin(\",\", txt)\n        return\
    \ sum(isodd.(collect(txt) .- 'a'))\n    elseif !occursin(\" \", txt)\n       \
    \ return split(txt, \",\")\n    else\n        return split(txt, \" \")\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqo5eev3l.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpqo5eev3l.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpqo5eev3l.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqo5eev3l.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpqo5eev3l.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpqo5eev3l.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpqo5eev3l.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqo5eev3l.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpqo5eev3l.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpqo5eev3l.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpqo5eev3l.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.(collect(lowercase(txt)) .- 'a'))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphrulwgnf.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmphrulwgnf.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmphrulwgnf.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphrulwgnf.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmphrulwgnf.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmphrulwgnf.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmphrulwgnf.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphrulwgnf.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmphrulwgnf.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmphrulwgnf.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmphrulwgnf.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.(collect(txt) .- 'a'))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpksczcqec.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: no method matching occursin(::String, ::Char)\\n  Closest candidates\
    \ are:\\n    occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at strings/search.jl:621\\n    occursin(::Any) at strings/search.jl:635\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpksczcqec.jl:11\\\
    n   [2] macro expansion\\n     @ /tmp/tmpksczcqec.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpksczcqec.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpksczcqec.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\\n  Closest candidates are:\\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at strings/search.jl:621\\n    occursin(::Any)\
    \ at strings/search.jl:635\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpksczcqec.jl:11\\n   [2] macro expansion\\n     @ /tmp/tmpksczcqec.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpksczcqec.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpksczcqec.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\\n  Closest candidates are:\\n  \
    \  occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString) at\
    \ strings/search.jl:621\\n    occursin(::Any) at strings/search.jl:635\\n  Stacktrace:\\\
    n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpksczcqec.jl:11\\n   [2]\
    \ macro expansion\\n     @ /tmp/tmpksczcqec.jl:26 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_vy11obc.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp_vy11obc.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_vy11obc.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_vy11obc.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_vy11obc.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp_vy11obc.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp_vy11obc.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_vy11obc.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_vy11obc.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp_vy11obc.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp_vy11obc.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp42pg3f09.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp42pg3f09.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp42pg3f09.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp42pg3f09.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp42pg3f09.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp42pg3f09.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp42pg3f09.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp42pg3f09.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp42pg3f09.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp42pg3f09.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp42pg3f09.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt)\n        return split(txt, \" \")\n   \
    \ elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.(collect(lowercase(txt)) .- 'a'))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj9t5fnq5.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpj9t5fnq5.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpj9t5fnq5.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj9t5fnq5.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpj9t5fnq5.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpj9t5fnq5.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpj9t5fnq5.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj9t5fnq5.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpj9t5fnq5.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpj9t5fnq5.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpj9t5fnq5.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"[\\s]\", txt)\n        return split(txt, r\"[\\\
    s]\")\n    elseif occursin(r\"[,]\", txt)\n        return split(txt, r\"[,]\"\
    )\n    else\n        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_o5tkuec.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp_o5tkuec.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_o5tkuec.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_o5tkuec.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_o5tkuec.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp_o5tkuec.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp_o5tkuec.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_o5tkuec.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_o5tkuec.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp_o5tkuec.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp_o5tkuec.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, \" \")\n    elseif\
    \ occursin(',', txt)\n        return split(txt, \",\")\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2dxitle_.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp2dxitle_.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp2dxitle_.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2dxitle_.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp2dxitle_.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp2dxitle_.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp2dxitle_.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2dxitle_.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp2dxitle_.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp2dxitle_.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp2dxitle_.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.(collect(txt) .- 'a'))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_9t800wq.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at strings/search.jl:621\n    occursin(::Any) at strings/search.jl:635\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp_9t800wq.jl:11\n   [2] macro\
    \ expansion\n     @ /tmp/tmp_9t800wq.jl:24 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_9t800wq.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp_9t800wq.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at strings/search.jl:621\n    occursin(::Any)\
    \ at strings/search.jl:635\n  Stacktrace:\n   [1] split_words(txt::String)\n \
    \    @ Main /tmp/tmp_9t800wq.jl:11\n   [2] macro expansion\n     @ /tmp/tmp_9t800wq.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_9t800wq.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp_9t800wq.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at strings/search.jl:621\n    occursin(::Any)\
    \ at strings/search.jl:635\n  Stacktrace:\n   [1] split_words(txt::String)\n \
    \    @ Main /tmp/tmp_9t800wq.jl:11\n   [2] macro expansion\n     @ /tmp/tmp_9t800wq.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:11"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_9t800wq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl0i4_d5e.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpl0i4_d5e.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpl0i4_d5e.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl0i4_d5e.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpl0i4_d5e.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpl0i4_d5e.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpl0i4_d5e.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl0i4_d5e.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpl0i4_d5e.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpl0i4_d5e.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpl0i4_d5e.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(x) - ord('a')) for x in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjapkgk32.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpjapkgk32.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjapkgk32.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjapkgk32.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpjapkgk32.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpjapkgk32.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpjapkgk32.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjapkgk32.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpjapkgk32.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpjapkgk32.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpjapkgk32.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt)\n        return split(txt, \" \")\n   \
    \ elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpezlwurmk.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpezlwurmk.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpezlwurmk.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpezlwurmk.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpezlwurmk.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpezlwurmk.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpezlwurmk.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpezlwurmk.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpezlwurmk.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpezlwurmk.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpezlwurmk.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv7r89_kk.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpv7r89_kk.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpv7r89_kk.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv7r89_kk.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpv7r89_kk.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpv7r89_kk.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpv7r89_kk.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv7r89_kk.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpv7r89_kk.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpv7r89_kk.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpv7r89_kk.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt)\n        return split(txt, \" \")\n   \
    \ elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi3y5p_8e.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpi3y5p_8e.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpi3y5p_8e.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi3y5p_8e.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpi3y5p_8e.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpi3y5p_8e.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpi3y5p_8e.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi3y5p_8e.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpi3y5p_8e.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpi3y5p_8e.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpi3y5p_8e.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(occursin.(lowercase.(txt), r\"\\w\"))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp26x0_fpn.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp26x0_fpn.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp26x0_fpn.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp26x0_fpn.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp26x0_fpn.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp26x0_fpn.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp26x0_fpn.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp26x0_fpn.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp26x0_fpn.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp26x0_fpn.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp26x0_fpn.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptrlco744.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmptrlco744.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmptrlco744.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptrlco744.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmptrlco744.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmptrlco744.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmptrlco744.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptrlco744.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmptrlco744.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmptrlco744.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmptrlco744.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.(collect(txt) .- 'a'))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpei0svjjp.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpei0svjjp.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpei0svjjp.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpei0svjjp.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpei0svjjp.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpei0svjjp.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpei0svjjp.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpei0svjjp.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpei0svjjp.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpei0svjjp.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpei0svjjp.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return count(i -> isodd(i),\
    \ [ord(i) - ord('a') for i in txt])\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmple9rtxfa.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmple9rtxfa.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmple9rtxfa.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmple9rtxfa.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmple9rtxfa.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmple9rtxfa.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmple9rtxfa.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmple9rtxfa.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmple9rtxfa.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmple9rtxfa.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmple9rtxfa.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return length(filter(x -> x % 2 == 1, [ord(x) - 96 for x in txt]))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjkilem5l.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpjkilem5l.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjkilem5l.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjkilem5l.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpjkilem5l.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpjkilem5l.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpjkilem5l.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjkilem5l.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpjkilem5l.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpjkilem5l.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpjkilem5l.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt805rhja.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpt805rhja.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpt805rhja.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpt805rhja.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpt805rhja.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpt805rhja.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpt805rhja.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpt805rhja.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpt805rhja.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpt805rhja.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpt805rhja.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0xnd1hmb.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp0xnd1hmb.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp0xnd1hmb.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0xnd1hmb.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp0xnd1hmb.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp0xnd1hmb.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp0xnd1hmb.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0xnd1hmb.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp0xnd1hmb.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp0xnd1hmb.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp0xnd1hmb.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptuqvohk_.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at strings/search.jl:621\n    occursin(::Any) at strings/search.jl:635\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmptuqvohk_.jl:11\n   [2] macro\
    \ expansion\n     @ /tmp/tmptuqvohk_.jl:24 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptuqvohk_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmptuqvohk_.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at strings/search.jl:621\n    occursin(::Any)\
    \ at strings/search.jl:635\n  Stacktrace:\n   [1] split_words(txt::String)\n \
    \    @ Main /tmp/tmptuqvohk_.jl:11\n   [2] macro expansion\n     @ /tmp/tmptuqvohk_.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptuqvohk_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmptuqvohk_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at strings/search.jl:621\n    occursin(::Any)\
    \ at strings/search.jl:635\n  Stacktrace:\n   [1] split_words(txt::String)\n \
    \    @ Main /tmp/tmptuqvohk_.jl:11\n   [2] macro expansion\n     @ /tmp/tmptuqvohk_.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:11"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptuqvohk_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp77mi84d5.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp77mi84d5.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp77mi84d5.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp77mi84d5.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp77mi84d5.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp77mi84d5.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp77mi84d5.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp77mi84d5.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp77mi84d5.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp77mi84d5.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp77mi84d5.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq4s6_n8s.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpq4s6_n8s.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpq4s6_n8s.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpq4s6_n8s.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpq4s6_n8s.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpq4s6_n8s.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpq4s6_n8s.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpq4s6_n8s.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpq4s6_n8s.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpq4s6_n8s.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpq4s6_n8s.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return length(filter(x -> x in 'abcdefghijklmnopqrstuvwxyz', txt))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp09_9lj6j.jl:16\nin expression\
    \ starting at /tmp/tmp09_9lj6j.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprnfd2zub.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmprnfd2zub.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmprnfd2zub.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprnfd2zub.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmprnfd2zub.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmprnfd2zub.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmprnfd2zub.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprnfd2zub.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmprnfd2zub.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmprnfd2zub.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmprnfd2zub.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdmp00_6y.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at strings/search.jl:621\n    occursin(::Any) at strings/search.jl:635\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpdmp00_6y.jl:11\n   [2] macro\
    \ expansion\n     @ /tmp/tmpdmp00_6y.jl:24 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdmp00_6y.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpdmp00_6y.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at strings/search.jl:621\n    occursin(::Any)\
    \ at strings/search.jl:635\n  Stacktrace:\n   [1] split_words(txt::String)\n \
    \    @ Main /tmp/tmpdmp00_6y.jl:11\n   [2] macro expansion\n     @ /tmp/tmpdmp00_6y.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdmp00_6y.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpdmp00_6y.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at strings/search.jl:621\n    occursin(::Any)\
    \ at strings/search.jl:635\n  Stacktrace:\n   [1] split_words(txt::String)\n \
    \    @ Main /tmp/tmpdmp00_6y.jl:11\n   [2] macro expansion\n     @ /tmp/tmpdmp00_6y.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:11"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdmp00_6y.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt)\n        return split(txt, \" \")\n   \
    \ elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n  \
    \      return count(x -> x in 'abcdefghijklmnopqrstuvwxyz' && isodd(Int(x) - 97),\
    \ txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpl_aog0dt.jl:16\nin expression\
    \ starting at /tmp/tmpl_aog0dt.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return length(filter(x -> x % 2 == 1, [ord(c) - ord('a') for c in txt]))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfpp1oz09.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpfpp1oz09.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfpp1oz09.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfpp1oz09.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpfpp1oz09.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpfpp1oz09.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpfpp1oz09.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfpp1oz09.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpfpp1oz09.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpfpp1oz09.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpfpp1oz09.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4nv1fr9x.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp4nv1fr9x.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp4nv1fr9x.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4nv1fr9x.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp4nv1fr9x.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp4nv1fr9x.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp4nv1fr9x.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4nv1fr9x.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp4nv1fr9x.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp4nv1fr9x.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp4nv1fr9x.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return count(x -> x in 'abcdefghijklmnopqrstuvwxyz' && isodd(Int(x) -\
    \ Int('a')), txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp0phjqq33.jl:16\nin expression\
    \ starting at /tmp/tmp0phjqq33.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return count(isodd, [ord(c) for c in txt])\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_po_9hq5.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp_po_9hq5.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_po_9hq5.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_po_9hq5.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_po_9hq5.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp_po_9hq5.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp_po_9hq5.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_po_9hq5.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_po_9hq5.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp_po_9hq5.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp_po_9hq5.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(r\",\", txt)\n        return split(txt, r\",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgdx4k7he.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpgdx4k7he.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgdx4k7he.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgdx4k7he.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpgdx4k7he.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpgdx4k7he.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpgdx4k7he.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgdx4k7he.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpgdx4k7he.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpgdx4k7he.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpgdx4k7he.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5hy0q11n.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp5hy0q11n.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5hy0q11n.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5hy0q11n.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5hy0q11n.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5hy0q11n.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp5hy0q11n.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5hy0q11n.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5hy0q11n.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5hy0q11n.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp5hy0q11n.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg_1g4as9.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpg_1g4as9.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpg_1g4as9.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg_1g4as9.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpg_1g4as9.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpg_1g4as9.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpg_1g4as9.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg_1g4as9.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpg_1g4as9.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpg_1g4as9.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpg_1g4as9.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.(collect(txt) .- 'a'))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9t6smewr.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp9t6smewr.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp9t6smewr.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9t6smewr.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp9t6smewr.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp9t6smewr.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp9t6smewr.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9t6smewr.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp9t6smewr.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp9t6smewr.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp9t6smewr.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvhp4z3m3.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpvhp4z3m3.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpvhp4z3m3.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvhp4z3m3.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpvhp4z3m3.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpvhp4z3m3.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpvhp4z3m3.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvhp4z3m3.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpvhp4z3m3.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpvhp4z3m3.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpvhp4z3m3.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return count(x -> x in 'abcdefghijklmnopqrstuvwxyz' && isodd(Int(x) -\
    \ 97), txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmprwd71zgk.jl:16\nin expression\
    \ starting at /tmp/tmprwd71zgk.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.(collect(lowercase(txt)) .- 'a'))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq5q7708q.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpq5q7708q.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpq5q7708q.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpq5q7708q.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpq5q7708q.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpq5q7708q.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpq5q7708q.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpq5q7708q.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpq5q7708q.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpq5q7708q.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpq5q7708q.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(r\",\", txt)\n        return split(txt, r\",\")\n    else\n\
    \        return sum(isodd.([ord(c) for c in txt]))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpumzumjej.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpumzumjej.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpumzumjej.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpumzumjej.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpumzumjej.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpumzumjej.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpumzumjej.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpumzumjej.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpumzumjej.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpumzumjej.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpumzumjej.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt)\n        if !occursin(',', txt)\n      \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n        else\n  \
    \          return split(txt, ',')\n        end\n    else\n        return split(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw5d83llb.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpw5d83llb.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpw5d83llb.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw5d83llb.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpw5d83llb.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpw5d83llb.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpw5d83llb.jl:27\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw5d83llb.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpw5d83llb.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpw5d83llb.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmpw5d83llb.jl:28\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(x) for x in txt]))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_4q0p6rn.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp_4q0p6rn.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_4q0p6rn.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_4q0p6rn.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_4q0p6rn.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp_4q0p6rn.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp_4q0p6rn.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_4q0p6rn.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_4q0p6rn.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp_4q0p6rn.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp_4q0p6rn.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(occursin.(lowercase, txt))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo969akb_.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpo969akb_.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpo969akb_.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo969akb_.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpo969akb_.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpo969akb_.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpo969akb_.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo969akb_.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpo969akb_.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpo969akb_.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpo969akb_.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpml83otyj.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpml83otyj.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpml83otyj.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpml83otyj.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpml83otyj.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpml83otyj.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpml83otyj.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpml83otyj.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpml83otyj.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpml83otyj.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpml83otyj.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(occursin(lowercase(txt), c) for c in 'acegikmoqsuwy')\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpnqeecr4w.jl:16\nin expression\
    \ starting at /tmp/tmpnqeecr4w.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(r\",\", txt)\n        return split(txt, r\",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuspq5jat.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpuspq5jat.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpuspq5jat.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuspq5jat.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpuspq5jat.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpuspq5jat.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpuspq5jat.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuspq5jat.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpuspq5jat.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpuspq5jat.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpuspq5jat.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt)\n        if !occursin(\",\", txt)\n  \
    \          return count(c -> c in 'a':'z' && isodd(Int(c) - Int('a')), txt)\n\
    \        else\n            return split(txt, \",\")\n        end\n    else\n \
    \       return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptb_jicgv.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmptb_jicgv.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmptb_jicgv.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptb_jicgv.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmptb_jicgv.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmptb_jicgv.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmptb_jicgv.jl:27\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptb_jicgv.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmptb_jicgv.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmptb_jicgv.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmptb_jicgv.jl:28\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(r\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi2wmuxkc.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpi2wmuxkc.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpi2wmuxkc.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi2wmuxkc.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpi2wmuxkc.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpi2wmuxkc.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpi2wmuxkc.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi2wmuxkc.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpi2wmuxkc.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpi2wmuxkc.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpi2wmuxkc.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) == 0\n        return 0\n    end\n    if length(split(txt,\
    \ \" \")) > 1\n        return split(txt, \" \")\n    elseif length(split(txt,\
    \ \",\")) > 1\n        return split(txt, \",\")\n    else\n        return count(x\
    \ -> x in 'abcdefghijklmnopqrstuvwxyz' && isodd(Int(x) - Int('a')), txt)\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpo6mncyex.jl:19\nin expression\
    \ starting at /tmp/tmpo6mncyex.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2_les_8v.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp2_les_8v.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp2_les_8v.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2_les_8v.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp2_les_8v.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp2_les_8v.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp2_les_8v.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2_les_8v.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp2_les_8v.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp2_les_8v.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp2_les_8v.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprurtiaca.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmprurtiaca.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmprurtiaca.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprurtiaca.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmprurtiaca.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmprurtiaca.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmprurtiaca.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprurtiaca.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmprurtiaca.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmprurtiaca.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmprurtiaca.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.(collect(lowercase(txt)) .- 'a'))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprpdv8fj5.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmprpdv8fj5.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmprpdv8fj5.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprpdv8fj5.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmprpdv8fj5.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmprpdv8fj5.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmprpdv8fj5.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprpdv8fj5.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmprpdv8fj5.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmprpdv8fj5.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmprpdv8fj5.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpynzbfpow.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpynzbfpow.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpynzbfpow.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpynzbfpow.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpynzbfpow.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpynzbfpow.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpynzbfpow.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpynzbfpow.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpynzbfpow.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpynzbfpow.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpynzbfpow.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2kh6tk6z.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp2kh6tk6z.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp2kh6tk6z.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2kh6tk6z.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp2kh6tk6z.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp2kh6tk6z.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp2kh6tk6z.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2kh6tk6z.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp2kh6tk6z.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp2kh6tk6z.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp2kh6tk6z.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ count(islower, txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5s16cb91.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp5s16cb91.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5s16cb91.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5s16cb91.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5s16cb91.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5s16cb91.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp5s16cb91.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5s16cb91.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5s16cb91.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5s16cb91.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp5s16cb91.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxh5q0trv.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpxh5q0trv.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpxh5q0trv.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxh5q0trv.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpxh5q0trv.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpxh5q0trv.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpxh5q0trv.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxh5q0trv.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpxh5q0trv.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpxh5q0trv.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpxh5q0trv.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ count(x -> x in 'abcdefghijklmnopqrstuvwxyz' && isodd(x - 'a'), txt)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp7cv8acsc.jl:16\nin expression\
    \ starting at /tmp/tmp7cv8acsc.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt)\n        return split(txt, \" \")\n   \
    \ elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnq_zzf8x.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpnq_zzf8x.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpnq_zzf8x.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnq_zzf8x.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpnq_zzf8x.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpnq_zzf8x.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpnq_zzf8x.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnq_zzf8x.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpnq_zzf8x.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpnq_zzf8x.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpnq_zzf8x.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt)\n        return split(txt, \" \")\n   \
    \ elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp63ms75dc.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp63ms75dc.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp63ms75dc.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp63ms75dc.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp63ms75dc.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp63ms75dc.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp63ms75dc.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp63ms75dc.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp63ms75dc.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp63ms75dc.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp63ms75dc.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt)\n        return split(txt, \" \")\n   \
    \ elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppaolgmw_.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmppaolgmw_.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmppaolgmw_.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppaolgmw_.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmppaolgmw_.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmppaolgmw_.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmppaolgmw_.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppaolgmw_.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmppaolgmw_.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmppaolgmw_.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmppaolgmw_.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvfqodhdm.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpvfqodhdm.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpvfqodhdm.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvfqodhdm.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpvfqodhdm.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpvfqodhdm.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpvfqodhdm.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvfqodhdm.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpvfqodhdm.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpvfqodhdm.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpvfqodhdm.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnckr4217.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpnckr4217.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpnckr4217.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnckr4217.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpnckr4217.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpnckr4217.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpnckr4217.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnckr4217.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpnckr4217.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpnckr4217.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpnckr4217.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp59xzikt6.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp59xzikt6.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp59xzikt6.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp59xzikt6.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp59xzikt6.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp59xzikt6.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp59xzikt6.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp59xzikt6.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp59xzikt6.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp59xzikt6.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp59xzikt6.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3m0vmgpz.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp3m0vmgpz.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3m0vmgpz.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3m0vmgpz.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp3m0vmgpz.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp3m0vmgpz.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp3m0vmgpz.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3m0vmgpz.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp3m0vmgpz.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp3m0vmgpz.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp3m0vmgpz.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) for c in txt]))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpitagided.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpitagided.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpitagided.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpitagided.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpitagided.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpitagided.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpitagided.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpitagided.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpitagided.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpitagided.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpitagided.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.(collect(lowercase(txt)) .- 'a'))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbo3yhhvy.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: no method matching occursin(::String, ::Char)\\n  Closest candidates\
    \ are:\\n    occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at strings/search.jl:621\\n    occursin(::Any) at strings/search.jl:635\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpbo3yhhvy.jl:11\\\
    n   [2] macro expansion\\n     @ /tmp/tmpbo3yhhvy.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbo3yhhvy.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpbo3yhhvy.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\\n  Closest candidates are:\\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at strings/search.jl:621\\n    occursin(::Any)\
    \ at strings/search.jl:635\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpbo3yhhvy.jl:11\\n   [2] macro expansion\\n     @ /tmp/tmpbo3yhhvy.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbo3yhhvy.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpbo3yhhvy.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\\n  Closest candidates are:\\n  \
    \  occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString) at\
    \ strings/search.jl:621\\n    occursin(::Any) at strings/search.jl:635\\n  Stacktrace:\\\
    n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpbo3yhhvy.jl:11\\n   [2]\
    \ macro expansion\\n     @ /tmp/tmpbo3yhhvy.jl:26 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppl_xojjb.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmppl_xojjb.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmppl_xojjb.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppl_xojjb.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmppl_xojjb.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmppl_xojjb.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmppl_xojjb.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppl_xojjb.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmppl_xojjb.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmppl_xojjb.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmppl_xojjb.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) == 0\n        return 0\n    end\n    if length(txt)\
    \ == 1\n        return 1\n    end\n    if length(txt) == 2\n        return 2\n\
    \    end\n    if length(txt) == 3\n        return 3\n    end\n    if length(txt)\
    \ == 4\n        return 4\n    end\n    if length(txt) == 5\n        return 5\n\
    \    end\n    if length(txt) == 6\n        return 6\n    end\n    if length(txt)\
    \ == 7\n        return 7\n    end\n    if length(txt) == 8\n        return 8\n\
    \    end\n    if length(txt) == 9\n        return 9\n    end\n    if length(txt)\
    \ == 10\n        return 10\n    end\n    if length(txt) == 11\n        return\
    \ 11\n    end\n    if length(txt) == 12\n        return 12\n    end\n    if length(txt)\
    \ == 13\n        return 13\n    end\n    if length(txt) == 14\n        return\
    \ 14\n    end\n    if length(txt) == 15\n        return 15\n    end\n    if length(txt)\
    \ == 16\n        return 16\n    end\n    if length(txt) == 17\n        return\
    \ 17\n    end\n    if length(txt) == 18\n        return 18\n    end\n    if length(txt)\
    \ == 19\n        return 19\n    end\n    if length(txt) == 20\n        return\
    \ 20\n    end\n    if length(txt) == 21\n        return 21\n    end\n    if length(txt)\
    \ == 22\n        return 22\n    end\n    if length(txt) == 23\n        return\
    \ 23\n    end\n    if length(txt) == 24\n        return 24\n    end\n    if length(txt)\
    \ == 25\n        return 25\n    end\n    if length(txt) == 26\n        return\
    \ 26\n    end\n    if length(txt) == 27\n        return 27\n    end\n    if length(txt)\
    \ == 28\n        return 28\n    end\n    if length(txt) == 29\n        return\
    \ 29\n    end\n    if length(txt) == 30\n        return 30\n    end\n    if length(txt)\
    \ == 31\n        return 31\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1962au2e.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1962au2e.jl:1\n\
    in expression starting at /tmp/tmp1962au2e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(r\",\", txt)\n        return split(txt, r\",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfoiso0at.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpfoiso0at.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfoiso0at.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfoiso0at.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpfoiso0at.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpfoiso0at.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpfoiso0at.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfoiso0at.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpfoiso0at.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpfoiso0at.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpfoiso0at.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.(collect(lowercase(txt)) .- 'a'))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf8zy9rif.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpf8zy9rif.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpf8zy9rif.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf8zy9rif.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpf8zy9rif.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpf8zy9rif.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpf8zy9rif.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf8zy9rif.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpf8zy9rif.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpf8zy9rif.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpf8zy9rif.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7m053day.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp7m053day.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7m053day.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7m053day.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp7m053day.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp7m053day.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp7m053day.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7m053day.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp7m053day.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp7m053day.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp7m053day.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return count(x -> x in 'abcdefghijklmnopqrstuvwxyz' && isodd(Int(x) -\
    \ Int('a')), txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp1xi2ir9t.jl:16\nin expression\
    \ starting at /tmp/tmp1xi2ir9t.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return count(isodd, [ord(c) for c in txt])\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp79k3of2.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpp79k3of2.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpp79k3of2.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp79k3of2.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpp79k3of2.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpp79k3of2.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpp79k3of2.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp79k3of2.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpp79k3of2.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpp79k3of2.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpp79k3of2.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdla09dow.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpdla09dow.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpdla09dow.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdla09dow.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpdla09dow.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpdla09dow.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpdla09dow.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdla09dow.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpdla09dow.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpdla09dow.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpdla09dow.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0_u1fzeu.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp0_u1fzeu.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp0_u1fzeu.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0_u1fzeu.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp0_u1fzeu.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp0_u1fzeu.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp0_u1fzeu.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0_u1fzeu.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp0_u1fzeu.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp0_u1fzeu.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp0_u1fzeu.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(r\",\", txt)\n        return split(txt, r\",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0_rhr785.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp0_rhr785.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp0_rhr785.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0_rhr785.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp0_rhr785.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp0_rhr785.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp0_rhr785.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0_rhr785.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp0_rhr785.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp0_rhr785.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp0_rhr785.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"[\\s]\", txt)\n        return split(txt, r\"[\\\
    s]\")\n    elseif occursin(r\"[,]\", txt)\n        return split(txt, r\"[,]\"\
    )\n    else\n        return sum(isodd.([ord(c) for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk__dlbzy.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpk__dlbzy.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpk__dlbzy.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk__dlbzy.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpk__dlbzy.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpk__dlbzy.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpk__dlbzy.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk__dlbzy.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpk__dlbzy.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpk__dlbzy.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpk__dlbzy.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"[^a-zA-Z, ]\", txt)\n        return 0\n    elseif\
    \ occursin(r\"[, ]\", txt)\n        return split(txt, r\"[, ]\")\n    else\n \
    \       return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpj93xrz_z.jl:24\\n  Expression: candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"]\\n   Evaluated: 0 == [\"Hello\", \"\
    world!\"]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpj93xrz_z.jl:24 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpj93xrz_z.jl:23\\ntest set: Test\
    \ Failed at /tmp/tmpj93xrz_z.jl:25\\n  Expression: candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"]\\n   Evaluated: 0 == [\"Hello\", \"world!\"]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpj93xrz_z.jl:25 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpj93xrz_z.jl:23\\ntest set: Test\
    \ Failed at /tmp/tmpj93xrz_z.jl:26\\n  Expression: candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"]\\n   Evaluated: 0 == [\"Hello\", \"world,!\"]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpj93xrz_z.jl:26 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpj93xrz_z.jl:23\\ntest set: Test\
    \ Failed at /tmp/tmpj93xrz_z.jl:27\\n  Expression: candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"]\\n   Evaluated: 0 == [\"Hello,Hello,world\"\
    , \"!\"]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpj93xrz_z.jl:27 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpj93xrz_z.jl:23\\ntest set: Error\
    \ During Test at /tmp/tmpj93xrz_z.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcdef\") == 3\\n  UndefVarError: ord not defined\\n  Stacktrace:\\\
    n   [1] (::var\"#1#2\")(c::Char)\\n     @ Main ./none:0\\n   [2] iterate\\n  \
    \   @ ./generator.jl:47 [inlined]\\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\\n     @ Base ./array.jl:681\\n   [4] split_words(txt::String)\\\
    n"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.(collect(txt) .- 'a'))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbgujrx88.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpbgujrx88.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpbgujrx88.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbgujrx88.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpbgujrx88.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpbgujrx88.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpbgujrx88.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbgujrx88.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpbgujrx88.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpbgujrx88.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpbgujrx88.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if findfirst(txt, \" \") != nothing\n        return split(txt,\
    \ \" \")\n    elseif findfirst(txt, \",\") != nothing\n        return split(txt,\
    \ \",\")\n    else\n        return count(x -> x in 'abcdefghijklmnopqrstuvwxyz'\
    \ && isodd(Int(x) - Int('a')), txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmphal9195v.jl:16\nin expression\
    \ starting at /tmp/tmphal9195v.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.(map(x -> Int(x) - Int('a'), collect(txt))))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfh03zhtt.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpfh03zhtt.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfh03zhtt.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfh03zhtt.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpfh03zhtt.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpfh03zhtt.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpfh03zhtt.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfh03zhtt.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpfh03zhtt.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpfh03zhtt.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpfh03zhtt.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ count(x -> x in 'abcdefghijklmnopqrstuvwxyz' && isodd(x - 'a'), txt)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp57uun8ml.jl:16\nin expression\
    \ starting at /tmp/tmp57uun8ml.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv5ckk6z2.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpv5ckk6z2.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpv5ckk6z2.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv5ckk6z2.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpv5ckk6z2.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpv5ckk6z2.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpv5ckk6z2.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv5ckk6z2.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpv5ckk6z2.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpv5ckk6z2.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpv5ckk6z2.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5ai502si.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp5ai502si.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5ai502si.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5ai502si.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5ai502si.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5ai502si.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp5ai502si.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5ai502si.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5ai502si.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5ai502si.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp5ai502si.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_z55l35c.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at strings/search.jl:621\n    occursin(::Any) at strings/search.jl:635\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp_z55l35c.jl:11\n   [2] macro\
    \ expansion\n     @ /tmp/tmp_z55l35c.jl:24 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_z55l35c.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp_z55l35c.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at strings/search.jl:621\n    occursin(::Any)\
    \ at strings/search.jl:635\n  Stacktrace:\n   [1] split_words(txt::String)\n \
    \    @ Main /tmp/tmp_z55l35c.jl:11\n   [2] macro expansion\n     @ /tmp/tmp_z55l35c.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_z55l35c.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp_z55l35c.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at strings/search.jl:621\n    occursin(::Any)\
    \ at strings/search.jl:635\n  Stacktrace:\n   [1] split_words(txt::String)\n \
    \    @ Main /tmp/tmp_z55l35c.jl:11\n   [2] macro expansion\n     @ /tmp/tmp_z55l35c.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:11"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_z55l35c.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt)\n        return split(txt, \" \")\n   \
    \ elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpricj8w3b.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpricj8w3b.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpricj8w3b.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpricj8w3b.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpricj8w3b.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpricj8w3b.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpricj8w3b.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpricj8w3b.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpricj8w3b.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpricj8w3b.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpricj8w3b.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(r\",\", txt)\n        return split(txt, r\",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo8os2mvl.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpo8os2mvl.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpo8os2mvl.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo8os2mvl.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpo8os2mvl.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpo8os2mvl.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpo8os2mvl.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo8os2mvl.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpo8os2mvl.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpo8os2mvl.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpo8os2mvl.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(x) - ord('a')) for x in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzb9y2w03.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmpzb9y2w03.jl:12\n   [2] macro expansion\n     @ /tmp/tmpzb9y2w03.jl:24\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzb9y2w03.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzb9y2w03.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmpzb9y2w03.jl:14\n   [2] macro expansion\n     @ /tmp/tmpzb9y2w03.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzb9y2w03.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzb9y2w03.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmpzb9y2w03.jl:12\n   [2] macro expansion\n     @ /tmp/tmpzb9y2w03.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzb9y2w03.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd(ord(x) - ord('a')) for x in txt)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4q8zvi3g.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp4q8zvi3g.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp4q8zvi3g.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4q8zvi3g.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp4q8zvi3g.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp4q8zvi3g.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp4q8zvi3g.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4q8zvi3g.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp4q8zvi3g.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp4q8zvi3g.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp4q8zvi3g.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt)\n        if !occursin(',', txt)\n      \
    \      return sum(occursin(lowercase[i], txt) for i in 1:26)\n        else\n \
    \           return split(txt, ',')\n        end\n    else\n        return split(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsk4hze11.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpsk4hze11.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpsk4hze11.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsk4hze11.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpsk4hze11.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpsk4hze11.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpsk4hze11.jl:27\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsk4hze11.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpsk4hze11.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpsk4hze11.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmpsk4hze11.jl:28\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, \" \")\n    elseif\
    \ occursin(',', txt)\n        return split(txt, \",\")\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_9eulpi2.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp_9eulpi2.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_9eulpi2.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_9eulpi2.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_9eulpi2.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp_9eulpi2.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp_9eulpi2.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_9eulpi2.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_9eulpi2.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp_9eulpi2.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp_9eulpi2.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return count(lowercase(txt) .== 'a':'z')\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpej22629z.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpej22629z.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpej22629z.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpej22629z.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpej22629z.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpej22629z.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpej22629z.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpej22629z.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpej22629z.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpej22629z.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpej22629z.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc18y9y_k.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpc18y9y_k.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpc18y9y_k.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc18y9y_k.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpc18y9y_k.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpc18y9y_k.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpc18y9y_k.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc18y9y_k.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpc18y9y_k.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpc18y9y_k.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpc18y9y_k.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdvh79iq6.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpdvh79iq6.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpdvh79iq6.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdvh79iq6.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpdvh79iq6.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpdvh79iq6.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpdvh79iq6.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdvh79iq6.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpdvh79iq6.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpdvh79iq6.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpdvh79iq6.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return count(x -> islower(x) && isodd(Int(x) - Int('a')), txt)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3l5metsx.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp3l5metsx.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3l5metsx.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3l5metsx.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp3l5metsx.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp3l5metsx.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp3l5metsx.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3l5metsx.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp3l5metsx.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp3l5metsx.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp3l5metsx.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgim8ukw0.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpgim8ukw0.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgim8ukw0.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgim8ukw0.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpgim8ukw0.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpgim8ukw0.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpgim8ukw0.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgim8ukw0.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpgim8ukw0.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpgim8ukw0.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpgim8ukw0.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"[a-z]\", txt)\n        if occursin(r\"\\s\", txt)\n\
    \            return split(txt)\n        elseif occursin(r\",\", txt)\n       \
    \     return split(txt, \",\")\n        else\n            return sum(isodd.([ord(i)\
    \ for i in txt]))\n        end\n    else\n        return txt\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxekcl1cx.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpxekcl1cx.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpxekcl1cx.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxekcl1cx.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpxekcl1cx.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpxekcl1cx.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpxekcl1cx.jl:29\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxekcl1cx.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpxekcl1cx.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpxekcl1cx.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpxekcl1cx.jl:30\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7ary76ef.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp7ary76ef.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7ary76ef.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7ary76ef.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp7ary76ef.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp7ary76ef.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp7ary76ef.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7ary76ef.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp7ary76ef.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp7ary76ef.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp7ary76ef.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjlmbvn5y.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at strings/search.jl:621\n    occursin(::Any) at strings/search.jl:635\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpjlmbvn5y.jl:11\n   [2] macro\
    \ expansion\n     @ /tmp/tmpjlmbvn5y.jl:24 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjlmbvn5y.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpjlmbvn5y.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at strings/search.jl:621\n    occursin(::Any)\
    \ at strings/search.jl:635\n  Stacktrace:\n   [1] split_words(txt::String)\n \
    \    @ Main /tmp/tmpjlmbvn5y.jl:11\n   [2] macro expansion\n     @ /tmp/tmpjlmbvn5y.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjlmbvn5y.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpjlmbvn5y.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at strings/search.jl:621\n    occursin(::Any)\
    \ at strings/search.jl:635\n  Stacktrace:\n   [1] split_words(txt::String)\n \
    \    @ Main /tmp/tmpjlmbvn5y.jl:11\n   [2] macro expansion\n     @ /tmp/tmpjlmbvn5y.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:11"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjlmbvn5y.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(r\",\", txt)\n        return split(txt, r\",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi6p4e9p6.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpi6p4e9p6.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpi6p4e9p6.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi6p4e9p6.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpi6p4e9p6.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpi6p4e9p6.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpi6p4e9p6.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi6p4e9p6.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpi6p4e9p6.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpi6p4e9p6.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpi6p4e9p6.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiwk51syl.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpiwk51syl.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpiwk51syl.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpiwk51syl.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpiwk51syl.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpiwk51syl.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpiwk51syl.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpiwk51syl.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpiwk51syl.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpiwk51syl.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpiwk51syl.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return length(filter(x -> islower(x) && isodd(Int(x) - Int('a')), txt))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpd0cdqm71.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpd0cdqm71.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpd0cdqm71.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpd0cdqm71.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpd0cdqm71.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpd0cdqm71.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpd0cdqm71.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpd0cdqm71.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpd0cdqm71.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpd0cdqm71.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpd0cdqm71.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"[\\s]\", txt)\n        return split(txt, r\"[\\\
    s]\")\n    elseif occursin(r\"[,]\", txt)\n        return split(txt, r\"[,]\"\
    )\n    else\n        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvhhzliw6.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpvhhzliw6.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpvhhzliw6.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvhhzliw6.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpvhhzliw6.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpvhhzliw6.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpvhhzliw6.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvhhzliw6.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpvhhzliw6.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpvhhzliw6.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpvhhzliw6.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"[\\s]\", txt)\n        return split(txt, r\"[\\\
    s]\")\n    elseif occursin(r\"[,]\", txt)\n        return split(txt, r\"[,]\"\
    )\n    else\n        return sum(occursin.(r\"[a-z]\", txt))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp22w3zvdi.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp22w3zvdi.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp22w3zvdi.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp22w3zvdi.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp22w3zvdi.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp22w3zvdi.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp22w3zvdi.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp22w3zvdi.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp22w3zvdi.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp22w3zvdi.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp22w3zvdi.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1h97rb07.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp1h97rb07.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp1h97rb07.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1h97rb07.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp1h97rb07.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp1h97rb07.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp1h97rb07.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1h97rb07.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp1h97rb07.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp1h97rb07.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp1h97rb07.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp70icrlej.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp70icrlej.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp70icrlej.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp70icrlej.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp70icrlej.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp70icrlej.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp70icrlej.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp70icrlej.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp70icrlej.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp70icrlej.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp70icrlej.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ count(x -> x in 'abcdefghijklmnopqrstuvwxyz' && x in 'acegikmoqsuwy' , txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp1pb_c043.jl:16\nin expression\
    \ starting at /tmp/tmp1pb_c043.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt) && !occursin(\",\", txt)\n        return\
    \ sum(occursin(lowercase[i], txt) for i in 1:26) % 2 == 1\n    elseif !occursin(\"\
    \ \", txt)\n        return split(txt, \",\")\n    else\n        return split(txt,\
    \ \" \")\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpb2hay1dp.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpb2hay1dp.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpb2hay1dp.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb2hay1dp.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpb2hay1dp.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpb2hay1dp.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpb2hay1dp.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb2hay1dp.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpb2hay1dp.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpb2hay1dp.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpb2hay1dp.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return count(islower, txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfcs9k47l.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpfcs9k47l.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfcs9k47l.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfcs9k47l.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpfcs9k47l.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpfcs9k47l.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpfcs9k47l.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfcs9k47l.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpfcs9k47l.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpfcs9k47l.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpfcs9k47l.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptkce70qi.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmptkce70qi.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmptkce70qi.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptkce70qi.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmptkce70qi.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmptkce70qi.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmptkce70qi.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptkce70qi.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmptkce70qi.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmptkce70qi.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmptkce70qi.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxpkonj9b.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpxpkonj9b.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpxpkonj9b.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxpkonj9b.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpxpkonj9b.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpxpkonj9b.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpxpkonj9b.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxpkonj9b.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpxpkonj9b.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpxpkonj9b.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpxpkonj9b.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp3n1x0iw.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpp3n1x0iw.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpp3n1x0iw.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp3n1x0iw.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpp3n1x0iw.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpp3n1x0iw.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpp3n1x0iw.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp3n1x0iw.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpp3n1x0iw.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpp3n1x0iw.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpp3n1x0iw.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt)\n        return split(txt, \" \")\n   \
    \ elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.(collect(txt) .- 'a'))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjwiwoshw.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpjwiwoshw.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjwiwoshw.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjwiwoshw.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpjwiwoshw.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpjwiwoshw.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpjwiwoshw.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjwiwoshw.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpjwiwoshw.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpjwiwoshw.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpjwiwoshw.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in lowercase(txt)]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxoo890yu.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpxoo890yu.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpxoo890yu.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxoo890yu.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpxoo890yu.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpxoo890yu.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpxoo890yu.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxoo890yu.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpxoo890yu.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpxoo890yu.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpxoo890yu.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ count(x -> x in 'abcdefghijklmnopqrstuvwxyz' && x == 'a' || x == 'c' || x ==\
    \ 'e' || x == 'g' || x == 'i' || x == 'k' || x == 'm' || x == 'o' || x == 'q'\
    \ || x == 's' || x == 'u' || x == 'w' || x == 'y', txt)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpzukvf867.jl:16\nin expression\
    \ starting at /tmp/tmpzukvf867.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3p1oqx35.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp3p1oqx35.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3p1oqx35.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3p1oqx35.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp3p1oqx35.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp3p1oqx35.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp3p1oqx35.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3p1oqx35.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp3p1oqx35.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp3p1oqx35.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp3p1oqx35.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return count(x -> x in 'abcdefghijklmnopqrstuvwxyz' && isodd(Int(x) -\
    \ Int('a')), txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmprysdl9e3.jl:16\nin expression\
    \ starting at /tmp/tmprysdl9e3.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuy0mkr5u.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpuy0mkr5u.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpuy0mkr5u.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuy0mkr5u.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpuy0mkr5u.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpuy0mkr5u.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpuy0mkr5u.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuy0mkr5u.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpuy0mkr5u.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpuy0mkr5u.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpuy0mkr5u.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ length(filter(x -> islower(x) && isodd(Int(x) - Int('a')), txt))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxvsgmjei.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpxvsgmjei.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpxvsgmjei.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxvsgmjei.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpxvsgmjei.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpxvsgmjei.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpxvsgmjei.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxvsgmjei.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpxvsgmjei.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpxvsgmjei.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpxvsgmjei.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphh7ieau8.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmphh7ieau8.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmphh7ieau8.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphh7ieau8.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmphh7ieau8.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmphh7ieau8.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmphh7ieau8.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphh7ieau8.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmphh7ieau8.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmphh7ieau8.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmphh7ieau8.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(lowercase(txt)[i]) - ord('a')) for i in 1:length(txt))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5wu2r96u.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp5wu2r96u.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5wu2r96u.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5wu2r96u.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5wu2r96u.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5wu2r96u.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp5wu2r96u.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5wu2r96u.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5wu2r96u.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5wu2r96u.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp5wu2r96u.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4mej6_i5.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp4mej6_i5.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp4mej6_i5.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4mej6_i5.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp4mej6_i5.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp4mej6_i5.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp4mej6_i5.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4mej6_i5.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp4mej6_i5.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp4mej6_i5.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp4mej6_i5.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphk3yfoyy.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmphk3yfoyy.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmphk3yfoyy.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphk3yfoyy.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmphk3yfoyy.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmphk3yfoyy.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmphk3yfoyy.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphk3yfoyy.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmphk3yfoyy.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmphk3yfoyy.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmphk3yfoyy.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if findfirst(txt, ' ') != nothing\n        return split(txt, '\
    \ ')\n    elseif findfirst(txt, ',') != nothing\n        return split(txt, ',')\n\
    \    else\n        return sum(isodd.([ord(x) for x in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf0_q94oz.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: no method matching findfirst(::String, ::Char)\\n  Closest\
    \ candidates are:\\n    findfirst(!Matched::Function, ::Any) at array.jl:1902\\\
    n    findfirst(::AbstractString, !Matched::AbstractString) at strings/search.jl:104\\\
    n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpf0_q94oz.jl:11\\n   [2] macro expansion\\n     @ /tmp/tmpf0_q94oz.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf0_q94oz.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpf0_q94oz.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpf0_q94oz.jl:11\\n   [2]\
    \ macro expansion\\n     @ /tmp/tmpf0_q94oz.jl:25 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf0_q94oz.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpf0_q94oz.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: no\
    \ method matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n \
    \   findfirst(!Matched::Function, ::Any) at array.jl:1902\\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at strings/search.jl:104\\n    findfirst(::Any) at\
    \ array.jl:1818\\n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main\
    \ /tmp/tmpf0_q94oz.jl:11\\n   [2] macro expansion\\n     @ /tmp/tmp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjrx7z_1k.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpjrx7z_1k.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjrx7z_1k.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjrx7z_1k.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpjrx7z_1k.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpjrx7z_1k.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpjrx7z_1k.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjrx7z_1k.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpjrx7z_1k.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpjrx7z_1k.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpjrx7z_1k.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.(collect(lowercase(txt)) .- 'a'))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0smv8fb_.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp0smv8fb_.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp0smv8fb_.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0smv8fb_.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp0smv8fb_.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp0smv8fb_.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp0smv8fb_.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0smv8fb_.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp0smv8fb_.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp0smv8fb_.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp0smv8fb_.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"[a-z]\", txt)\n        return count(c -> c in 'acegikmoqsuwy'\
    \ , txt)\n    elseif occursin(r\"[,]\", txt)\n        return split(txt, \",\"\
    )\n    else\n        return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp9iabzvc8.jl:12\nin expression\
    \ starting at /tmp/tmp9iabzvc8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return count(x -> x in 'abcdefghijklmnopqrstuvwxyz' && isodd(Int(x) -\
    \ Int('a')), txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpgu_496j9.jl:16\nin expression\
    \ starting at /tmp/tmpgu_496j9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(x) - ord('a') for x in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyxbh560c.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpyxbh560c.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpyxbh560c.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyxbh560c.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpyxbh560c.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpyxbh560c.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpyxbh560c.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyxbh560c.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpyxbh560c.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpyxbh560c.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpyxbh560c.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt) && !occursin(',', txt)\n        return sum(occursin(lowercase[i],\
    \ txt) for i in 1:26)\n    elseif !occursin(' ', txt)\n        return split(txt,\
    \ ',')\n    else\n        return split(txt, ' ')\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3hqq28eh.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp3hqq28eh.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3hqq28eh.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3hqq28eh.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp3hqq28eh.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp3hqq28eh.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp3hqq28eh.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3hqq28eh.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp3hqq28eh.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp3hqq28eh.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp3hqq28eh.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return length(filter(x -> islower(x) && isodd(Int(x) - Int('a')), txt))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5hnnqq05.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp5hnnqq05.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5hnnqq05.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5hnnqq05.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5hnnqq05.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5hnnqq05.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp5hnnqq05.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5hnnqq05.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5hnnqq05.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5hnnqq05.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp5hnnqq05.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return count(x -> x in 'abcdefghijklmnopqrstuvwxyz' && x == 'a' || x\
    \ == 'c' || x == 'e' || x == 'g' || x == 'i' || x == 'k' || x == 'm' || x == 'o'\
    \ || x == 'q' || x == 's' || x == 'u' || x == 'w' || x == 'y', txt)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpzd5ezgm4.jl:16\nin expression\
    \ starting at /tmp/tmpzd5ezgm4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx52h5n_2.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpx52h5n_2.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpx52h5n_2.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpx52h5n_2.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpx52h5n_2.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpx52h5n_2.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpx52h5n_2.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpx52h5n_2.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpx52h5n_2.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpx52h5n_2.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpx52h5n_2.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6jh1cc1p.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp6jh1cc1p.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6jh1cc1p.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6jh1cc1p.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp6jh1cc1p.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp6jh1cc1p.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp6jh1cc1p.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6jh1cc1p.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp6jh1cc1p.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp6jh1cc1p.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp6jh1cc1p.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7gd9q07t.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp7gd9q07t.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7gd9q07t.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7gd9q07t.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp7gd9q07t.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp7gd9q07t.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp7gd9q07t.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7gd9q07t.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp7gd9q07t.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp7gd9q07t.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp7gd9q07t.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt)\n        return split(txt, \" \")\n   \
    \ elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n  \
    \      return length(filter(x -> x % 2 == 1, [ord(c) - ord('a') for c in txt]))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwgzc5s3w.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpwgzc5s3w.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpwgzc5s3w.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwgzc5s3w.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpwgzc5s3w.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpwgzc5s3w.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpwgzc5s3w.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwgzc5s3w.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpwgzc5s3w.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpwgzc5s3w.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpwgzc5s3w.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5dg34_no.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp5dg34_no.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5dg34_no.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5dg34_no.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5dg34_no.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5dg34_no.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp5dg34_no.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5dg34_no.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5dg34_no.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5dg34_no.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp5dg34_no.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt)\n        return split(txt, \" \")\n   \
    \ elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph67sd5lf.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmph67sd5lf.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmph67sd5lf.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph67sd5lf.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmph67sd5lf.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmph67sd5lf.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmph67sd5lf.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph67sd5lf.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmph67sd5lf.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmph67sd5lf.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmph67sd5lf.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt) && !occursin(',', txt)\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    elseif !occursin(' ', txt)\n        return split(txt,\
    \ ',')\n    else\n        return split(txt, ' ')\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkp9hv4k7.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpkp9hv4k7.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpkp9hv4k7.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkp9hv4k7.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpkp9hv4k7.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpkp9hv4k7.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpkp9hv4k7.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkp9hv4k7.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpkp9hv4k7.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpkp9hv4k7.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpkp9hv4k7.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxjk15voa.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpxjk15voa.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpxjk15voa.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxjk15voa.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpxjk15voa.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpxjk15voa.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpxjk15voa.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxjk15voa.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpxjk15voa.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpxjk15voa.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpxjk15voa.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp249_ugfd.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp249_ugfd.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp249_ugfd.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp249_ugfd.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp249_ugfd.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp249_ugfd.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp249_ugfd.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp249_ugfd.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp249_ugfd.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp249_ugfd.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp249_ugfd.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.(collect(txt) .- 'a'))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn173wknp.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpn173wknp.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpn173wknp.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpn173wknp.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpn173wknp.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpn173wknp.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpn173wknp.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpn173wknp.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpn173wknp.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpn173wknp.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpn173wknp.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(occursin(lowercase[i], txt) for i in 1:26)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk9xpljvi.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpk9xpljvi.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpk9xpljvi.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk9xpljvi.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpk9xpljvi.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpk9xpljvi.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpk9xpljvi.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk9xpljvi.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpk9xpljvi.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpk9xpljvi.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpk9xpljvi.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfm4nnnn3.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpfm4nnnn3.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfm4nnnn3.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfm4nnnn3.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpfm4nnnn3.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpfm4nnnn3.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpfm4nnnn3.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfm4nnnn3.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpfm4nnnn3.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpfm4nnnn3.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpfm4nnnn3.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe6x_ebqw.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpe6x_ebqw.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpe6x_ebqw.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe6x_ebqw.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpe6x_ebqw.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpe6x_ebqw.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpe6x_ebqw.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe6x_ebqw.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpe6x_ebqw.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpe6x_ebqw.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpe6x_ebqw.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcv4tnw2r.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpcv4tnw2r.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpcv4tnw2r.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcv4tnw2r.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpcv4tnw2r.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpcv4tnw2r.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpcv4tnw2r.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcv4tnw2r.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpcv4tnw2r.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpcv4tnw2r.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpcv4tnw2r.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt) && !occursin(',', txt)\n        return sum(occursin(lowercase[i],\
    \ txt) for i in 1:26)\n    elseif !occursin(' ', txt)\n        return split(txt,\
    \ ',')\n    else\n        return split(txt, ' ')\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6360uzda.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp6360uzda.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6360uzda.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6360uzda.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp6360uzda.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp6360uzda.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp6360uzda.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6360uzda.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp6360uzda.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp6360uzda.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp6360uzda.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(r\",\", txt)\n        return split(txt, r\",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkwjop6du.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpkwjop6du.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpkwjop6du.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkwjop6du.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpkwjop6du.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpkwjop6du.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpkwjop6du.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkwjop6du.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpkwjop6du.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpkwjop6du.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpkwjop6du.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(r\",\", txt)\n        return split(txt, r\",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5flnw0xd.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp5flnw0xd.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5flnw0xd.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5flnw0xd.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5flnw0xd.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5flnw0xd.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp5flnw0xd.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5flnw0xd.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5flnw0xd.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp5flnw0xd.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp5flnw0xd.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpz808buf8.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: no method matching occursin(::String, ::Char)\\n  Closest candidates\
    \ are:\\n    occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at strings/search.jl:621\\n    occursin(::Any) at strings/search.jl:635\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpz808buf8.jl:11\\\
    n   [2] macro expansion\\n     @ /tmp/tmpz808buf8.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpz808buf8.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpz808buf8.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\\n  Closest candidates are:\\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at strings/search.jl:621\\n    occursin(::Any)\
    \ at strings/search.jl:635\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpz808buf8.jl:11\\n   [2] macro expansion\\n     @ /tmp/tmpz808buf8.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpz808buf8.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpz808buf8.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\\n  Closest candidates are:\\n  \
    \  occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString) at\
    \ strings/search.jl:621\\n    occursin(::Any) at strings/search.jl:635\\n  Stacktrace:\\\
    n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpz808buf8.jl:11\\n   [2]\
    \ macro expansion\\n     @ /tmp/tmpz808buf8.jl:26 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt) && !occursin(',', txt)\n        return count(c\
    \ -> c == 'a' || c == 'c' || c == 'e' || c == 'g' || c == 'i' || c == 'k' || c\
    \ == 'm' || c == 'o' || c == 'q' || c == 's' || c == 'u' || c == 'w' || c == 'y',\
    \ txt)\n    elseif !occursin(' ', txt)\n        return split(txt, ',')\n    else\n\
    \        return split(txt, ' ')\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpokkzmnjy.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpokkzmnjy.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpokkzmnjy.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpokkzmnjy.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpokkzmnjy.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpokkzmnjy.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpokkzmnjy.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpokkzmnjy.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpokkzmnjy.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpokkzmnjy.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpokkzmnjy.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"[^a-zA-Z]\", txt)\n        return split(txt, r\"\
    [^a-zA-Z]\")\n    else\n        return sum(isodd.([ord(c) - ord('a') for c in\
    \ txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv0aij0iv.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpv0aij0iv.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpv0aij0iv.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv0aij0iv.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpv0aij0iv.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpv0aij0iv.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpv0aij0iv.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv0aij0iv.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpv0aij0iv.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpv0aij0iv.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpv0aij0iv.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(r\",\", txt)\n        return split(txt, r\",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptn54f6rb.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmptn54f6rb.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmptn54f6rb.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptn54f6rb.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmptn54f6rb.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmptn54f6rb.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmptn54f6rb.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptn54f6rb.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmptn54f6rb.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmptn54f6rb.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmptn54f6rb.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv_t8k5md.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpv_t8k5md.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpv_t8k5md.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv_t8k5md.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpv_t8k5md.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpv_t8k5md.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpv_t8k5md.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv_t8k5md.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpv_t8k5md.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpv_t8k5md.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpv_t8k5md.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj8gt63a3.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpj8gt63a3.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpj8gt63a3.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj8gt63a3.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpj8gt63a3.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpj8gt63a3.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpj8gt63a3.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj8gt63a3.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpj8gt63a3.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpj8gt63a3.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpj8gt63a3.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2fyy4e1l.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp2fyy4e1l.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp2fyy4e1l.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2fyy4e1l.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp2fyy4e1l.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp2fyy4e1l.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp2fyy4e1l.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2fyy4e1l.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp2fyy4e1l.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp2fyy4e1l.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp2fyy4e1l.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzjvab3e4.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpzjvab3e4.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpzjvab3e4.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzjvab3e4.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpzjvab3e4.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpzjvab3e4.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpzjvab3e4.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzjvab3e4.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpzjvab3e4.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpzjvab3e4.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpzjvab3e4.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpa2pi4xcf.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpa2pi4xcf.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpa2pi4xcf.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpa2pi4xcf.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpa2pi4xcf.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpa2pi4xcf.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpa2pi4xcf.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpa2pi4xcf.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpa2pi4xcf.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpa2pi4xcf.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpa2pi4xcf.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(r\",\", txt)\n        return split(txt, r\",\")\n    else\n\
    \        return count(x -> x in 'abcdefghijklmnopqrstuvwxyz' && isodd(Int(x) -\
    \ Int('a')), txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpq9nmjbr9.jl:16\nin expression\
    \ starting at /tmp/tmpq9nmjbr9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr5cvn08h.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpr5cvn08h.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpr5cvn08h.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpr5cvn08h.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpr5cvn08h.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpr5cvn08h.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpr5cvn08h.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpr5cvn08h.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpr5cvn08h.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpr5cvn08h.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpr5cvn08h.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsweby89b.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpsweby89b.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpsweby89b.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsweby89b.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpsweby89b.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpsweby89b.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpsweby89b.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsweby89b.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpsweby89b.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmpsweby89b.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpsweby89b.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt)\n        return split(txt, \" \")\n   \
    \ elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4nc33xea.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:205\\n \
    \ Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp4nc33xea.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmp4nc33xea.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4nc33xea.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp4nc33xea.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp4nc33xea.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp4nc33xea.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4nc33xea.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp4nc33xea.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n  Stacktrace:\\n   [1] split_words(txt::String)\\\
    n     @ Main /tmp/tmp4nc33xea.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp4nc33xea.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdli"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmxbatngh.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmpmxbatngh.jl:12\n   [2] macro expansion\n     @ /tmp/tmpmxbatngh.jl:24\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmxbatngh.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpmxbatngh.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmpmxbatngh.jl:14\n   [2] macro expansion\n     @ /tmp/tmpmxbatngh.jl:25\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpmxbatngh.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpmxbatngh.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmpmxbatngh.jl:12\n   [2] macro expansion\n     @ /tmp/tmpmxbatngh.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmxbatngh.jl:21\n"
  exit_code: 1
  status: SyntaxError
