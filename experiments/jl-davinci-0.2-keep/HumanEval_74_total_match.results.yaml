name: HumanEval_74_total_match
language: julia
results:
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 || length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == length(lst2)\n    \
    \    return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\n    return lst1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqfqar5o2.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqfqar5o2.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfqar5o2.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpqfqar5o2.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqfqar5o2.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfqar5o2.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpqfqar5o2.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqfqar5o2.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfqar5o2.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqfqar5o2.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpshvrzq62.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpshvrzq62.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpshvrzq62.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpshvrzq62.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpshvrzq62.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpshvrzq62.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpshvrzq62.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6m86ajw3.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6m86ajw3.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6m86ajw3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6m86ajw3.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6m86ajw3.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6m86ajw3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6m86ajw3.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6m86ajw3.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6m86ajw3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6m86ajw3.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6m86ajw3.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6m86ajw3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6m86ajw3.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp6m86ajw3.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6m86ajw3.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq4k603w1.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq4k603w1.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq4k603w1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq4k603w1.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq4k603w1.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq4k603w1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq4k603w1.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpq4k603w1.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq4k603w1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq4k603w1.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpq4k603w1.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq4k603w1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq4k603w1.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpq4k603w1.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq4k603w1.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe4t8hbp_.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpe4t8hbp_.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe4t8hbp_.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpe4t8hbp_.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpe4t8hbp_.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe4t8hbp_.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe4t8hbp_.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc_d33nhe.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpc_d33nhe.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_d33nhe.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpc_d33nhe.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpc_d33nhe.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_d33nhe.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc_d33nhe.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpup2dy99d.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpup2dy99d.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpup2dy99d.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpup2dy99d.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpup2dy99d.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpup2dy99d.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpup2dy99d.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpup2dy99d.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpup2dy99d.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpup2dy99d.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8gd00s29.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8gd00s29.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8gd00s29.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8gd00s29.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8gd00s29.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8gd00s29.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8gd00s29.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8gd00s29.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8gd00s29.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8gd00s29.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8gd00s29.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8gd00s29.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8gd00s29.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp8gd00s29.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8gd00s29.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptzcxff79.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptzcxff79.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptzcxff79.jl:38\ntest set: Test\
    \ Failed at /tmp/tmptzcxff79.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptzcxff79.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptzcxff79.jl:38\ntest set: Test\
    \ Failed at /tmp/tmptzcxff79.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptzcxff79.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptzcxff79.jl:38\ntest set: Test\
    \ Failed at /tmp/tmptzcxff79.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptzcxff79.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptzcxff79.jl:38\ntest set: Test\
    \ Failed at /tmp/tmptzcxff79.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmptzcxff79.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptzcxff79.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqbv5s58j.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqbv5s58j.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqbv5s58j.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqbv5s58j.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqbv5s58j.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqbv5s58j.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqbv5s58j.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqbv5s58j.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqbv5s58j.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqbv5s58j.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqbv5s58j.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqbv5s58j.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqbv5s58j.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpqbv5s58j.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqbv5s58j.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmpc6bmhl.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmpc6bmhl.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmpc6bmhl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpmpc6bmhl.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmpc6bmhl.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmpc6bmhl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpmpc6bmhl.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmpc6bmhl.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmpc6bmhl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpmpc6bmhl.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpmpc6bmhl.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmpc6bmhl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpmpc6bmhl.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpmpc6bmhl.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmpc6bmhl.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppqs44if7.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppqs44if7.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppqs44if7.jl:33\ntest set: Test\
    \ Failed at /tmp/tmppqs44if7.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppqs44if7.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppqs44if7.jl:33\ntest set: Test\
    \ Failed at /tmp/tmppqs44if7.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppqs44if7.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppqs44if7.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppqs44if7.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1ep03n15.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1ep03n15.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ep03n15.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1ep03n15.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1ep03n15.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ep03n15.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1ep03n15.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1ep03n15.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ep03n15.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1ep03n15.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1ep03n15.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ep03n15.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1ep03n15.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp1ep03n15.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ep03n15.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_len = sum([length(x) for x\
    \ in lst1])\n    lst2_len = sum([length(x) for x in lst2])\n    if lst1_len ==\
    \ lst2_len\n        return lst1\n    elseif lst1_len < lst2_len\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoo6s8o4c.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoo6s8o4c.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoo6s8o4c.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpoo6s8o4c.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoo6s8o4c.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoo6s8o4c.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpoo6s8o4c.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpoo6s8o4c.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoo6s8o4c.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoo6s8o4c.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1aqnuzad.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1aqnuzad.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1aqnuzad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1aqnuzad.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1aqnuzad.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1aqnuzad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1aqnuzad.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1aqnuzad.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1aqnuzad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1aqnuzad.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1aqnuzad.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1aqnuzad.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1aqnuzad.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp1aqnuzad.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1aqnuzad.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgx6ahsv6.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgx6ahsv6.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgx6ahsv6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpgx6ahsv6.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpgx6ahsv6.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgx6ahsv6.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgx6ahsv6.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ sum(length.(lst1)) == sum(length.(lst2))\n        return lst1\n    end\n   \
    \ if sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    end\n \
    \   return lst2\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_length = 0\n    lst2_length\
    \ = 0\n    for i in lst1\n        lst1_length += length(i)\n    end\n    for i\
    \ in lst2\n        lst2_length += length(i)\n    end\n    if lst1_length == lst2_length\n\
    \        return lst1\n    elseif lst1_length < lst2_length\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    sum1 = 0\n    sum2 = 0\n    for\
    \ i in lst1\n        sum1 += length(i)\n    end\n    for i in lst2\n        sum2\
    \ += length(i)\n    end\n    if sum1 == sum2\n        return lst1\n    elseif\
    \ sum1 < sum2\n        return lst1\n    else\n        return lst2\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp57l3_907.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp57l3_907.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp57l3_907.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp57l3_907.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp57l3_907.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp57l3_907.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp57l3_907.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp57l3_907.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp57l3_907.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp57l3_907.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp57l3_907.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp57l3_907.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp57l3_907.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp57l3_907.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp57l3_907.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n   \
    \     return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyxo1ilvp.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyxo1ilvp.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyxo1ilvp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpyxo1ilvp.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyxo1ilvp.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyxo1ilvp.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpyxo1ilvp.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyxo1ilvp.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyxo1ilvp.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyxo1ilvp.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptm4sd39j.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptm4sd39j.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptm4sd39j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptm4sd39j.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptm4sd39j.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptm4sd39j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptm4sd39j.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptm4sd39j.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptm4sd39j.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptm4sd39j.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprrmjob9v.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprrmjob9v.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprrmjob9v.jl:33\ntest set: Test\
    \ Failed at /tmp/tmprrmjob9v.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprrmjob9v.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprrmjob9v.jl:33\ntest set: Test\
    \ Failed at /tmp/tmprrmjob9v.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprrmjob9v.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprrmjob9v.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprrmjob9v.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp_5n3ohb.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp_5n3ohb.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp_5n3ohb.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpp_5n3ohb.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp_5n3ohb.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp_5n3ohb.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpp_5n3ohb.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpp_5n3ohb.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp_5n3ohb.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpp_5n3ohb.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpp_5n3ohb.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp_5n3ohb.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpp_5n3ohb.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpp_5n3ohb.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp_5n3ohb.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpawv2iauj.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpawv2iauj.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpawv2iauj.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpawv2iauj.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpawv2iauj.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpawv2iauj.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpawv2iauj.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpawv2iauj.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpawv2iauj.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpawv2iauj.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpawv2iauj.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpawv2iauj.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpawv2iauj.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpawv2iauj.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpawv2iauj.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp66n513il.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp66n513il.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp66n513il.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp66n513il.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp66n513il.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp66n513il.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp66n513il.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp66n513il.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp66n513il.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp66n513il.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp66n513il.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp66n513il.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp66n513il.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp66n513il.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp66n513il.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps36_trdq.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps36_trdq.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps36_trdq.jl:33\ntest set: Test\
    \ Failed at /tmp/tmps36_trdq.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps36_trdq.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps36_trdq.jl:33\ntest set: Test\
    \ Failed at /tmp/tmps36_trdq.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps36_trdq.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps36_trdq.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps36_trdq.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpia3dkx96.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpia3dkx96.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpia3dkx96.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpia3dkx96.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpia3dkx96.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpia3dkx96.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpia3dkx96.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpia3dkx96.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpia3dkx96.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpia3dkx96.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpia3dkx96.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpia3dkx96.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpia3dkx96.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpia3dkx96.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpia3dkx96.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqewwgm7e.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqewwgm7e.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqewwgm7e.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqewwgm7e.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqewwgm7e.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqewwgm7e.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqewwgm7e.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqewwgm7e.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqewwgm7e.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqewwgm7e.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt7et6cok.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt7et6cok.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt7et6cok.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpt7et6cok.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt7et6cok.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt7et6cok.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpt7et6cok.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt7et6cok.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt7et6cok.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpt7et6cok.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpt7et6cok.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt7et6cok.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpt7et6cok.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpt7et6cok.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt7et6cok.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_sum\
    \ = sum(length.(lst1))\n    lst2_sum = sum(length.(lst2))\n    if lst1_sum ==\
    \ lst2_sum\n        return lst1\n    end\n    if lst1_sum < lst2_sum\n       \
    \ return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpud65durd.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpud65durd.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpud65durd.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpud65durd.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpud65durd.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpud65durd.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpud65durd.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoineu89l.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoineu89l.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoineu89l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpoineu89l.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoineu89l.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoineu89l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpoineu89l.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpoineu89l.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoineu89l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpoineu89l.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpoineu89l.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoineu89l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpoineu89l.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpoineu89l.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoineu89l.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total > lst2_total\n        return lst2\n    elseif lst1_total < lst2_total\n\
    \        return lst1\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3qi4x3hg.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3qi4x3hg.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3qi4x3hg.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp3qi4x3hg.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp3qi4x3hg.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3qi4x3hg.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3qi4x3hg.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeb0ff7rx.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeb0ff7rx.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeb0ff7rx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpeb0ff7rx.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeb0ff7rx.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeb0ff7rx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpeb0ff7rx.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpeb0ff7rx.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeb0ff7rx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpeb0ff7rx.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpeb0ff7rx.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeb0ff7rx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpeb0ff7rx.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpeb0ff7rx.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeb0ff7rx.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcozjgyss.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcozjgyss.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcozjgyss.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpcozjgyss.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcozjgyss.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcozjgyss.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpcozjgyss.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcozjgyss.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcozjgyss.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpcozjgyss.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcozjgyss.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcozjgyss.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpcozjgyss.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpcozjgyss.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcozjgyss.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6grdfq74.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6grdfq74.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6grdfq74.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp6grdfq74.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6grdfq74.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6grdfq74.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp6grdfq74.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6grdfq74.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6grdfq74.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6grdfq74.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj8xg6i28.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj8xg6i28.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj8xg6i28.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpj8xg6i28.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj8xg6i28.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj8xg6i28.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpj8xg6i28.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpj8xg6i28.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj8xg6i28.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj8xg6i28.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp01n69w_1.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp01n69w_1.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01n69w_1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp01n69w_1.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp01n69w_1.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01n69w_1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp01n69w_1.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp01n69w_1.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01n69w_1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp01n69w_1.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp01n69w_1.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01n69w_1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp01n69w_1.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp01n69w_1.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp01n69w_1.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc7ii3vb4.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc7ii3vb4.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc7ii3vb4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpc7ii3vb4.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc7ii3vb4.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc7ii3vb4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpc7ii3vb4.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc7ii3vb4.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc7ii3vb4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpc7ii3vb4.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpc7ii3vb4.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc7ii3vb4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpc7ii3vb4.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpc7ii3vb4.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc7ii3vb4.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpci6hehlo.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpci6hehlo.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpci6hehlo.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpci6hehlo.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpci6hehlo.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpci6hehlo.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpci6hehlo.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpci6hehlo.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpci6hehlo.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpci6hehlo.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpci6hehlo.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpci6hehlo.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpci6hehlo.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpci6hehlo.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpci6hehlo.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf4t2yoa_.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf4t2yoa_.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf4t2yoa_.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpf4t2yoa_.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf4t2yoa_.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf4t2yoa_.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpf4t2yoa_.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf4t2yoa_.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf4t2yoa_.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpf4t2yoa_.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpf4t2yoa_.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf4t2yoa_.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpf4t2yoa_.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpf4t2yoa_.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf4t2yoa_.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcqsbhjm5.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcqsbhjm5.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcqsbhjm5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpcqsbhjm5.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpcqsbhjm5.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcqsbhjm5.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcqsbhjm5.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfa7pd2rm.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfa7pd2rm.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfa7pd2rm.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpfa7pd2rm.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfa7pd2rm.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfa7pd2rm.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpfa7pd2rm.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfa7pd2rm.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfa7pd2rm.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpfa7pd2rm.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfa7pd2rm.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfa7pd2rm.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpfa7pd2rm.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpfa7pd2rm.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfa7pd2rm.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqcs_6ez_.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqcs_6ez_.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqcs_6ez_.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqcs_6ez_.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqcs_6ez_.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqcs_6ez_.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqcs_6ez_.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqcs_6ez_.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqcs_6ez_.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqcs_6ez_.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx0jpsds5.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx0jpsds5.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0jpsds5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpx0jpsds5.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx0jpsds5.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0jpsds5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpx0jpsds5.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx0jpsds5.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0jpsds5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpx0jpsds5.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpx0jpsds5.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0jpsds5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpx0jpsds5.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpx0jpsds5.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx0jpsds5.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplenzbjop.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplenzbjop.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplenzbjop.jl:36\ntest set: Test\
    \ Failed at /tmp/tmplenzbjop.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmplenzbjop.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplenzbjop.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplenzbjop.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjp71l0gd.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjp71l0gd.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjp71l0gd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjp71l0gd.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjp71l0gd.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjp71l0gd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjp71l0gd.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjp71l0gd.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjp71l0gd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjp71l0gd.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjp71l0gd.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjp71l0gd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpjp71l0gd.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpjp71l0gd.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjp71l0gd.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyxabmbry.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyxabmbry.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyxabmbry.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpyxabmbry.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyxabmbry.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyxabmbry.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpyxabmbry.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyxabmbry.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyxabmbry.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpyxabmbry.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyxabmbry.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyxabmbry.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpyxabmbry.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpyxabmbry.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyxabmbry.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj06mn1fg.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj06mn1fg.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj06mn1fg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj06mn1fg.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj06mn1fg.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj06mn1fg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj06mn1fg.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpj06mn1fg.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj06mn1fg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj06mn1fg.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpj06mn1fg.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj06mn1fg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj06mn1fg.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpj06mn1fg.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj06mn1fg.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw3xjz0bl.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw3xjz0bl.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw3xjz0bl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw3xjz0bl.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw3xjz0bl.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw3xjz0bl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw3xjz0bl.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpw3xjz0bl.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw3xjz0bl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw3xjz0bl.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpw3xjz0bl.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw3xjz0bl.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw3xjz0bl.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpw3xjz0bl.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw3xjz0bl.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5nqicrzo.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5nqicrzo.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5nqicrzo.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp5nqicrzo.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5nqicrzo.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5nqicrzo.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5nqicrzo.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf2g5_249.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf2g5_249.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2g5_249.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpf2g5_249.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf2g5_249.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2g5_249.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpf2g5_249.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf2g5_249.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2g5_249.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf2g5_249.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkeh7mb4v.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkeh7mb4v.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkeh7mb4v.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpkeh7mb4v.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkeh7mb4v.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkeh7mb4v.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpkeh7mb4v.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkeh7mb4v.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkeh7mb4v.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpkeh7mb4v.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkeh7mb4v.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkeh7mb4v.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpkeh7mb4v.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpkeh7mb4v.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkeh7mb4v.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy3hbew2d.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy3hbew2d.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy3hbew2d.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpy3hbew2d.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpy3hbew2d.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy3hbew2d.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy3hbew2d.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n   \
    \     return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeo14_32l.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeo14_32l.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeo14_32l.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpeo14_32l.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeo14_32l.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeo14_32l.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpeo14_32l.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpeo14_32l.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeo14_32l.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeo14_32l.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total == lst2_total\n        return lst1\n    end\n    if lst1_total <\
    \ lst2_total\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp97x3aeug.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp97x3aeug.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp97x3aeug.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp97x3aeug.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp97x3aeug.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp97x3aeug.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp97x3aeug.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphjnfujp8.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphjnfujp8.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjnfujp8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmphjnfujp8.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphjnfujp8.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjnfujp8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmphjnfujp8.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphjnfujp8.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjnfujp8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmphjnfujp8.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphjnfujp8.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjnfujp8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmphjnfujp8.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmphjnfujp8.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphjnfujp8.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb4ksfgot.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb4ksfgot.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb4ksfgot.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpb4ksfgot.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb4ksfgot.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb4ksfgot.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpb4ksfgot.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb4ksfgot.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb4ksfgot.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpb4ksfgot.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpb4ksfgot.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb4ksfgot.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpb4ksfgot.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpb4ksfgot.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb4ksfgot.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_len = 0\n    lst2_len = 0\n\
    \    for i in lst1\n        lst1_len += length(i)\n    end\n    for i in lst2\n\
    \        lst2_len += length(i)\n    end\n    if lst1_len == lst2_len\n       \
    \ return lst1\n    elseif lst1_len < lst2_len\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3vt3nru_.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3vt3nru_.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3vt3nru_.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp3vt3nru_.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp3vt3nru_.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3vt3nru_.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3vt3nru_.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3oirlvjw.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3oirlvjw.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3oirlvjw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp3oirlvjw.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp3oirlvjw.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3oirlvjw.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3oirlvjw.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe4m4lult.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe4m4lult.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe4m4lult.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpe4m4lult.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe4m4lult.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe4m4lult.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpe4m4lult.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe4m4lult.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe4m4lult.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpe4m4lult.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpe4m4lult.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe4m4lult.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpe4m4lult.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpe4m4lult.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe4m4lult.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxomwxgo_.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxomwxgo_.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxomwxgo_.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxomwxgo_.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxomwxgo_.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxomwxgo_.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxomwxgo_.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxomwxgo_.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxomwxgo_.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxomwxgo_.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxomwxgo_.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxomwxgo_.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxomwxgo_.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpxomwxgo_.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxomwxgo_.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj8e4fmky.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj8e4fmky.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj8e4fmky.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj8e4fmky.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj8e4fmky.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj8e4fmky.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj8e4fmky.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpj8e4fmky.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj8e4fmky.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj8e4fmky.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpj8e4fmky.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj8e4fmky.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj8e4fmky.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpj8e4fmky.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj8e4fmky.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvsivsikp.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvsivsikp.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvsivsikp.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpvsivsikp.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvsivsikp.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvsivsikp.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpvsivsikp.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvsivsikp.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvsivsikp.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpvsivsikp.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvsivsikp.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvsivsikp.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpvsivsikp.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpvsivsikp.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvsivsikp.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp1bvactd.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp1bvactd.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp1bvactd.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpp1bvactd.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp1bvactd.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp1bvactd.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpp1bvactd.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpp1bvactd.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp1bvactd.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp1bvactd.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq56bu1ai.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq56bu1ai.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq56bu1ai.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq56bu1ai.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq56bu1ai.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq56bu1ai.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq56bu1ai.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpq56bu1ai.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq56bu1ai.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq56bu1ai.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpq56bu1ai.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq56bu1ai.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq56bu1ai.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpq56bu1ai.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq56bu1ai.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqomru39l.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqomru39l.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqomru39l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqomru39l.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqomru39l.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqomru39l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqomru39l.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqomru39l.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqomru39l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqomru39l.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqomru39l.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqomru39l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqomru39l.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpqomru39l.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqomru39l.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(length.(lst1)) < sum(length.(lst2))\n\
    \        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n   \
    \     return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5q00ylt1.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5q00ylt1.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5q00ylt1.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp5q00ylt1.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5q00ylt1.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5q00ylt1.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5q00ylt1.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if sum(length.(lst1)) < sum(length.(lst2))\n\
    \        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n   \
    \     return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) < length(lst2)\n     \
    \   return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppvezmciq.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppvezmciq.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppvezmciq.jl:30\ntest set: Test\
    \ Failed at /tmp/tmppvezmciq.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppvezmciq.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppvezmciq.jl:30\ntest set: Test\
    \ Failed at /tmp/tmppvezmciq.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppvezmciq.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppvezmciq.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppvezmciq.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7bf5ctr0.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7bf5ctr0.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7bf5ctr0.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp7bf5ctr0.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp7bf5ctr0.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7bf5ctr0.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7bf5ctr0.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1gd5_83j.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1gd5_83j.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1gd5_83j.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp1gd5_83j.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp1gd5_83j.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1gd5_83j.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1gd5_83j.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgjwfhfhd.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgjwfhfhd.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgjwfhfhd.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpgjwfhfhd.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgjwfhfhd.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgjwfhfhd.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpgjwfhfhd.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgjwfhfhd.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgjwfhfhd.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpgjwfhfhd.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgjwfhfhd.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgjwfhfhd.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpgjwfhfhd.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpgjwfhfhd.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgjwfhfhd.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 || length(lst2)\
    \ == 0\n        return []\n    end\n    if sum(length.(lst1)) < sum(length.(lst2))\n\
    \        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n   \
    \     return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ sum(length.(lst1)) == sum(length.(lst2))\n        return lst1\n    end\n   \
    \ if sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    end\n \
    \   return lst2\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq4io8d6i.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq4io8d6i.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq4io8d6i.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpq4io8d6i.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq4io8d6i.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq4io8d6i.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpq4io8d6i.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpq4io8d6i.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq4io8d6i.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq4io8d6i.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuupcr4qh.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuupcr4qh.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuupcr4qh.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpuupcr4qh.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuupcr4qh.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuupcr4qh.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpuupcr4qh.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpuupcr4qh.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuupcr4qh.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpuupcr4qh.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpuupcr4qh.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuupcr4qh.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpuupcr4qh.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpuupcr4qh.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuupcr4qh.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp64exodb_.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp64exodb_.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp64exodb_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp64exodb_.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp64exodb_.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp64exodb_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp64exodb_.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp64exodb_.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp64exodb_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp64exodb_.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp64exodb_.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp64exodb_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp64exodb_.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp64exodb_.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp64exodb_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwbscgw_d.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwbscgw_d.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwbscgw_d.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpwbscgw_d.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwbscgw_d.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwbscgw_d.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpwbscgw_d.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwbscgw_d.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwbscgw_d.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpwbscgw_d.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwbscgw_d.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwbscgw_d.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpwbscgw_d.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpwbscgw_d.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwbscgw_d.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpop8gglew.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpop8gglew.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpop8gglew.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpop8gglew.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpop8gglew.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpop8gglew.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpop8gglew.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpop8gglew.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpop8gglew.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpop8gglew.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpop8gglew.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpop8gglew.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpop8gglew.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpop8gglew.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpop8gglew.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) < length(lst2)\n        return lst1\n    end\n    if length(lst2)\
    \ < length(lst1)\n        return lst2\n    end\n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdk2x8few.jl:37\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdk2x8few.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdk2x8few.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdk2x8few.jl:40\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdk2x8few.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdk2x8few.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdk2x8few.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdk2x8few.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdk2x8few.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdk2x8few.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) < length(lst2)\n     \
    \   return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_snz2uw3.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_snz2uw3.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_snz2uw3.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_snz2uw3.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_snz2uw3.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_snz2uw3.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp_snz2uw3.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_snz2uw3.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_snz2uw3.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_snz2uw3.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp97ngyra5.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp97ngyra5.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp97ngyra5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp97ngyra5.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp97ngyra5.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp97ngyra5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp97ngyra5.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp97ngyra5.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp97ngyra5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp97ngyra5.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp97ngyra5.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp97ngyra5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp97ngyra5.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp97ngyra5.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp97ngyra5.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6ibp_fda.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6ibp_fda.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ibp_fda.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6ibp_fda.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp6ibp_fda.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ibp_fda.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ibp_fda.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6pw_66hv.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6pw_66hv.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6pw_66hv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6pw_66hv.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6pw_66hv.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6pw_66hv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6pw_66hv.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6pw_66hv.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6pw_66hv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6pw_66hv.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6pw_66hv.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6pw_66hv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6pw_66hv.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp6pw_66hv.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6pw_66hv.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzii9sqr4.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzii9sqr4.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzii9sqr4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpzii9sqr4.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzii9sqr4.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzii9sqr4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpzii9sqr4.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzii9sqr4.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzii9sqr4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpzii9sqr4.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpzii9sqr4.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzii9sqr4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpzii9sqr4.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpzii9sqr4.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzii9sqr4.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpavmmp2iz.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpavmmp2iz.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpavmmp2iz.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpavmmp2iz.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpavmmp2iz.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpavmmp2iz.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpavmmp2iz.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaqzpb8eq.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaqzpb8eq.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaqzpb8eq.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpaqzpb8eq.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaqzpb8eq.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaqzpb8eq.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpaqzpb8eq.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpaqzpb8eq.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaqzpb8eq.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaqzpb8eq.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwc5h9avt.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwc5h9avt.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwc5h9avt.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpwc5h9avt.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwc5h9avt.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwc5h9avt.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpwc5h9avt.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwc5h9avt.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwc5h9avt.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpwc5h9avt.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwc5h9avt.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwc5h9avt.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpwc5h9avt.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpwc5h9avt.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwc5h9avt.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    len1 = sum([length(x) for x in lst1])\n\
    \    len2 = sum([length(x) for x in lst2])\n    if len1 == len2\n        return\
    \ lst1\n    elseif len1 < len2\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj_sxx1pv.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj_sxx1pv.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj_sxx1pv.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj_sxx1pv.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj_sxx1pv.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj_sxx1pv.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj_sxx1pv.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpj_sxx1pv.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj_sxx1pv.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj_sxx1pv.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpj_sxx1pv.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj_sxx1pv.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj_sxx1pv.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpj_sxx1pv.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj_sxx1pv.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxidxejhd.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxidxejhd.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxidxejhd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxidxejhd.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpxidxejhd.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxidxejhd.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxidxejhd.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5c8ueos8.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5c8ueos8.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5c8ueos8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5c8ueos8.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5c8ueos8.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5c8ueos8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5c8ueos8.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5c8ueos8.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5c8ueos8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5c8ueos8.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5c8ueos8.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5c8ueos8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5c8ueos8.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5c8ueos8.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5c8ueos8.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpko4yhf_5.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpko4yhf_5.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpko4yhf_5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpko4yhf_5.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpko4yhf_5.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpko4yhf_5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpko4yhf_5.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpko4yhf_5.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpko4yhf_5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpko4yhf_5.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpko4yhf_5.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpko4yhf_5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpko4yhf_5.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpko4yhf_5.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpko4yhf_5.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnp8slsgm.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpnp8slsgm.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnp8slsgm.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpnp8slsgm.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpnp8slsgm.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnp8slsgm.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnp8slsgm.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_8jtciik.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_8jtciik.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_8jtciik.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_8jtciik.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_8jtciik.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_8jtciik.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_8jtciik.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_8jtciik.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_8jtciik.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_8jtciik.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_8jtciik.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_8jtciik.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_8jtciik.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp_8jtciik.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_8jtciik.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp65tbaqi8.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp65tbaqi8.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp65tbaqi8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp65tbaqi8.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp65tbaqi8.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp65tbaqi8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp65tbaqi8.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp65tbaqi8.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp65tbaqi8.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp65tbaqi8.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp70e_1ftq.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp70e_1ftq.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp70e_1ftq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp70e_1ftq.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp70e_1ftq.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp70e_1ftq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp70e_1ftq.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp70e_1ftq.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp70e_1ftq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp70e_1ftq.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp70e_1ftq.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp70e_1ftq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp70e_1ftq.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp70e_1ftq.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp70e_1ftq.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3ffdzko4.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3ffdzko4.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3ffdzko4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp3ffdzko4.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp3ffdzko4.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3ffdzko4.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ffdzko4.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5rypi_j2.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5rypi_j2.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5rypi_j2.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5rypi_j2.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5rypi_j2.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5rypi_j2.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5rypi_j2.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5rypi_j2.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5rypi_j2.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5rypi_j2.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5rypi_j2.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5rypi_j2.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5rypi_j2.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5rypi_j2.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5rypi_j2.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0 && length(lst2)\
    \ != 0\n        return lst2\n    end\n    if length(lst1) != 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) != 0 && length(lst2)\
    \ != 0\n        if length(lst1) < length(lst2)\n            return lst1\n    \
    \    elseif length(lst1) > length(lst2)\n            return lst2\n        else\n\
    \            return lst1\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi2kise2v.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi2kise2v.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi2kise2v.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpi2kise2v.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi2kise2v.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi2kise2v.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpi2kise2v.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpi2kise2v.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi2kise2v.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpi2kise2v.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpi2kise2v.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi2kise2v.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpi2kise2v.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpi2kise2v.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi2kise2v.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpynvvv9yp.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpynvvv9yp.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpynvvv9yp.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpynvvv9yp.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpynvvv9yp.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpynvvv9yp.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpynvvv9yp.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpynvvv9yp.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpynvvv9yp.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpynvvv9yp.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpynvvv9yp.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpynvvv9yp.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpynvvv9yp.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpynvvv9yp.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpynvvv9yp.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj7n4817r.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj7n4817r.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7n4817r.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj7n4817r.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj7n4817r.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7n4817r.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj7n4817r.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpj7n4817r.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7n4817r.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj7n4817r.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpj7n4817r.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7n4817r.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpj7n4817r.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpj7n4817r.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj7n4817r.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu64lpk7v.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu64lpk7v.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu64lpk7v.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpu64lpk7v.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu64lpk7v.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu64lpk7v.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpu64lpk7v.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpu64lpk7v.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu64lpk7v.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpu64lpk7v.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpu64lpk7v.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu64lpk7v.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpu64lpk7v.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpu64lpk7v.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu64lpk7v.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) < length(lst2)\n     \
    \   return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7jugudpn.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7jugudpn.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7jugudpn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp7jugudpn.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7jugudpn.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7jugudpn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp7jugudpn.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7jugudpn.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7jugudpn.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7jugudpn.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpimt5lr1k.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpimt5lr1k.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpimt5lr1k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpimt5lr1k.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpimt5lr1k.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpimt5lr1k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpimt5lr1k.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpimt5lr1k.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpimt5lr1k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpimt5lr1k.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpimt5lr1k.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpimt5lr1k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpimt5lr1k.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpimt5lr1k.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpimt5lr1k.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo34ugfzc.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo34ugfzc.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo34ugfzc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpo34ugfzc.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo34ugfzc.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo34ugfzc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpo34ugfzc.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo34ugfzc.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo34ugfzc.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo34ugfzc.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa6noyg0l.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpa6noyg0l.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa6noyg0l.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpa6noyg0l.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpa6noyg0l.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa6noyg0l.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa6noyg0l.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    lst1_total\
    \ = sum(length.(lst1))\n    lst2_total = sum(length.(lst2))\n    if lst1_total\
    \ < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n    \
    \    return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9m__g9mq.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9m__g9mq.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9m__g9mq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp9m__g9mq.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9m__g9mq.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9m__g9mq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp9m__g9mq.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9m__g9mq.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9m__g9mq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp9m__g9mq.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9m__g9mq.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9m__g9mq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp9m__g9mq.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp9m__g9mq.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9m__g9mq.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptx4vx5c6.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptx4vx5c6.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptx4vx5c6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptx4vx5c6.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptx4vx5c6.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptx4vx5c6.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptx4vx5c6.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptx4vx5c6.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptx4vx5c6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptx4vx5c6.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp942fmugd.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp942fmugd.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp942fmugd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp942fmugd.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp942fmugd.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp942fmugd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp942fmugd.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp942fmugd.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp942fmugd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp942fmugd.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp942fmugd.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp942fmugd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp942fmugd.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp942fmugd.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp942fmugd.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    len1 = sum([length(x) for x in lst1])\n\
    \    len2 = sum([length(x) for x in lst2])\n    if len1 < len2\n        return\
    \ lst1\n    elseif len1 > len2\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2vlh2nbt.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2vlh2nbt.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2vlh2nbt.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp2vlh2nbt.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2vlh2nbt.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2vlh2nbt.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp2vlh2nbt.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2vlh2nbt.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2vlh2nbt.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp2vlh2nbt.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2vlh2nbt.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2vlh2nbt.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp2vlh2nbt.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp2vlh2nbt.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2vlh2nbt.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total_chars_lst1 = sum([length(x)\
    \ for x in lst1])\n    total_chars_lst2 = sum([length(x) for x in lst2])\n   \
    \ if total_chars_lst1 < total_chars_lst2\n        return lst1\n    elseif total_chars_lst1\
    \ > total_chars_lst2\n        return lst2\n    else\n        return lst1\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4936jnb_.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4936jnb_.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4936jnb_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4936jnb_.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4936jnb_.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4936jnb_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4936jnb_.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4936jnb_.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4936jnb_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4936jnb_.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4936jnb_.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4936jnb_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4936jnb_.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp4936jnb_.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4936jnb_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpahlc9xmd.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpahlc9xmd.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpahlc9xmd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpahlc9xmd.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpahlc9xmd.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpahlc9xmd.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpahlc9xmd.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2u87d5vt.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2u87d5vt.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2u87d5vt.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2u87d5vt.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp2u87d5vt.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2u87d5vt.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2u87d5vt.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ == sum(length.(lst2))\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    end\n    return lst2\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpka31f4rc.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpka31f4rc.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpka31f4rc.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpka31f4rc.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpka31f4rc.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpka31f4rc.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpka31f4rc.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4dcy3k8l.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4dcy3k8l.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4dcy3k8l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4dcy3k8l.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4dcy3k8l.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4dcy3k8l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4dcy3k8l.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4dcy3k8l.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4dcy3k8l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4dcy3k8l.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4dcy3k8l.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4dcy3k8l.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4dcy3k8l.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp4dcy3k8l.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4dcy3k8l.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_jk7afgx.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_jk7afgx.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_jk7afgx.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_jk7afgx.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_jk7afgx.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_jk7afgx.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_jk7afgx.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_jk7afgx.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_jk7afgx.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_jk7afgx.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp89sjd90q.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp89sjd90q.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp89sjd90q.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp89sjd90q.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp89sjd90q.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp89sjd90q.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp89sjd90q.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6vb1q62e.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6vb1q62e.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6vb1q62e.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6vb1q62e.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6vb1q62e.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6vb1q62e.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6vb1q62e.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6vb1q62e.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6vb1q62e.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6vb1q62e.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6vb1q62e.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6vb1q62e.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6vb1q62e.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp6vb1q62e.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6vb1q62e.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) < length(lst2)\n     \
    \   return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwpmseq2t.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwpmseq2t.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwpmseq2t.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwpmseq2t.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwpmseq2t.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwpmseq2t.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwpmseq2t.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwpmseq2t.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwpmseq2t.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwpmseq2t.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdy4pfab1.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdy4pfab1.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdy4pfab1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpdy4pfab1.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdy4pfab1.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdy4pfab1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpdy4pfab1.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdy4pfab1.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdy4pfab1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpdy4pfab1.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdy4pfab1.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdy4pfab1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpdy4pfab1.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpdy4pfab1.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdy4pfab1.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_total = sum(length.(lst1))\n\
    \    lst2_total = sum(length.(lst2))\n    if lst1_total == lst2_total\n      \
    \  return lst1\n    elseif lst1_total < lst2_total\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    elseif total_lst1 > total_lst2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqq65c4to.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqq65c4to.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqq65c4to.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpqq65c4to.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpqq65c4to.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqq65c4to.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqq65c4to.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n   \
    \     return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5ob_ls6y.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5ob_ls6y.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ob_ls6y.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5ob_ls6y.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5ob_ls6y.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ob_ls6y.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5ob_ls6y.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5ob_ls6y.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5ob_ls6y.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5ob_ls6y.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0zvpwxup.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0zvpwxup.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0zvpwxup.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0zvpwxup.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp0zvpwxup.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0zvpwxup.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0zvpwxup.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6x7my61q.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6x7my61q.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6x7my61q.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6x7my61q.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6x7my61q.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6x7my61q.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6x7my61q.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6x7my61q.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6x7my61q.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6x7my61q.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6x7my61q.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6x7my61q.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp6x7my61q.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp6x7my61q.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6x7my61q.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpamumduvd.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpamumduvd.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpamumduvd.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpamumduvd.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpamumduvd.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpamumduvd.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpamumduvd.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpamumduvd.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpamumduvd.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpamumduvd.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphyrwgkz_.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphyrwgkz_.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphyrwgkz_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphyrwgkz_.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmphyrwgkz_.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphyrwgkz_.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphyrwgkz_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n   \
    \     return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqtvc5xab.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqtvc5xab.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqtvc5xab.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpqtvc5xab.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqtvc5xab.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqtvc5xab.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpqtvc5xab.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqtvc5xab.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqtvc5xab.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqtvc5xab.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp30nx5cwo.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp30nx5cwo.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp30nx5cwo.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp30nx5cwo.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp30nx5cwo.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp30nx5cwo.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp30nx5cwo.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp30nx5cwo.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp30nx5cwo.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp30nx5cwo.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp30nx5cwo.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp30nx5cwo.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp30nx5cwo.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp30nx5cwo.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp30nx5cwo.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf7ikrgl4.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf7ikrgl4.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf7ikrgl4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpf7ikrgl4.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf7ikrgl4.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf7ikrgl4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpf7ikrgl4.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf7ikrgl4.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf7ikrgl4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpf7ikrgl4.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpf7ikrgl4.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf7ikrgl4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpf7ikrgl4.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpf7ikrgl4.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf7ikrgl4.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl23mz89h.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl23mz89h.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl23mz89h.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpl23mz89h.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl23mz89h.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl23mz89h.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpl23mz89h.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpl23mz89h.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl23mz89h.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl23mz89h.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_total = sum(length.(lst1))\n\
    \    lst2_total = sum(length.(lst2))\n    if lst1_total == lst2_total\n      \
    \  return lst1\n    elseif lst1_total < lst2_total\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1l16s9k5.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1l16s9k5.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1l16s9k5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1l16s9k5.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1l16s9k5.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1l16s9k5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1l16s9k5.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1l16s9k5.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1l16s9k5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1l16s9k5.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1l16s9k5.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1l16s9k5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1l16s9k5.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp1l16s9k5.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1l16s9k5.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsmhpycc1.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsmhpycc1.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsmhpycc1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpsmhpycc1.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsmhpycc1.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsmhpycc1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpsmhpycc1.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsmhpycc1.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsmhpycc1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpsmhpycc1.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsmhpycc1.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsmhpycc1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpsmhpycc1.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpsmhpycc1.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsmhpycc1.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyp1dadr4.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyp1dadr4.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyp1dadr4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyp1dadr4.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyp1dadr4.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyp1dadr4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyp1dadr4.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyp1dadr4.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyp1dadr4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyp1dadr4.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyp1dadr4.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyp1dadr4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyp1dadr4.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpyp1dadr4.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyp1dadr4.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_total = sum(length.(lst1))\n\
    \    lst2_total = sum(length.(lst2))\n    if lst1_total == lst2_total\n      \
    \  return lst1\n    elseif lst1_total < lst2_total\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(length.(lst1)) < sum(length.(lst2))\n\
    \        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n   \
    \     return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in lst1\n        total_chars_lst1 +=\
    \ length(i)\n    end\n    for i in lst2\n        total_chars_lst2 += length(i)\n\
    \    end\n    if total_chars_lst1 < total_chars_lst2\n        return lst1\n  \
    \  elseif total_chars_lst1 > total_chars_lst2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5zj4yxw3.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5zj4yxw3.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5zj4yxw3.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp5zj4yxw3.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5zj4yxw3.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5zj4yxw3.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5zj4yxw3.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiy80jx_7.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiy80jx_7.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiy80jx_7.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpiy80jx_7.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiy80jx_7.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiy80jx_7.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpiy80jx_7.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpiy80jx_7.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiy80jx_7.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpiy80jx_7.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpiy80jx_7.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiy80jx_7.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpiy80jx_7.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpiy80jx_7.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiy80jx_7.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphqecgfb0.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphqecgfb0.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphqecgfb0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmphqecgfb0.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphqecgfb0.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphqecgfb0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmphqecgfb0.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphqecgfb0.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphqecgfb0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmphqecgfb0.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphqecgfb0.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphqecgfb0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmphqecgfb0.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmphqecgfb0.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphqecgfb0.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) > length(lst2)\n        return lst2\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvi_t99rg.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvi_t99rg.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvi_t99rg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpvi_t99rg.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvi_t99rg.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvi_t99rg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpvi_t99rg.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvi_t99rg.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvi_t99rg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpvi_t99rg.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvi_t99rg.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvi_t99rg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpvi_t99rg.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpvi_t99rg.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvi_t99rg.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdan5bxhg.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdan5bxhg.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdan5bxhg.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdan5bxhg.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdan5bxhg.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdan5bxhg.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdan5bxhg.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdan5bxhg.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdan5bxhg.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdan5bxhg.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdan5bxhg.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdan5bxhg.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdan5bxhg.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpdan5bxhg.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdan5bxhg.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2xsrm60u.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2xsrm60u.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2xsrm60u.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp2xsrm60u.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2xsrm60u.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2xsrm60u.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp2xsrm60u.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2xsrm60u.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2xsrm60u.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp2xsrm60u.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2xsrm60u.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2xsrm60u.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp2xsrm60u.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp2xsrm60u.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2xsrm60u.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_len = sum([length(i) for i\
    \ in lst1])\n    lst2_len = sum([length(i) for i in lst2])\n    if lst1_len <\
    \ lst2_len\n        return lst1\n    elseif lst1_len > lst2_len\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwolrshcl.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwolrshcl.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwolrshcl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwolrshcl.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwolrshcl.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwolrshcl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwolrshcl.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwolrshcl.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwolrshcl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwolrshcl.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwolrshcl.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwolrshcl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwolrshcl.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpwolrshcl.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwolrshcl.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcnvjdlgz.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcnvjdlgz.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcnvjdlgz.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpcnvjdlgz.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcnvjdlgz.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcnvjdlgz.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpcnvjdlgz.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcnvjdlgz.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcnvjdlgz.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpcnvjdlgz.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcnvjdlgz.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcnvjdlgz.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpcnvjdlgz.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpcnvjdlgz.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcnvjdlgz.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n   \
    \     return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpomii5z19.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpomii5z19.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpomii5z19.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpomii5z19.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpomii5z19.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpomii5z19.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpomii5z19.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpomii5z19.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpomii5z19.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpomii5z19.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7fgtdwyf.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7fgtdwyf.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7fgtdwyf.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fgtdwyf.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7fgtdwyf.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7fgtdwyf.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fgtdwyf.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7fgtdwyf.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7fgtdwyf.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fgtdwyf.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7fgtdwyf.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7fgtdwyf.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fgtdwyf.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp7fgtdwyf.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7fgtdwyf.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa9z84ijg.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpa9z84ijg.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa9z84ijg.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpa9z84ijg.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpa9z84ijg.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa9z84ijg.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa9z84ijg.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) < length(lst2)\n     \
    \   return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptlac5_be.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptlac5_be.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptlac5_be.jl:30\ntest set: Test\
    \ Failed at /tmp/tmptlac5_be.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptlac5_be.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptlac5_be.jl:30\ntest set: Test\
    \ Failed at /tmp/tmptlac5_be.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptlac5_be.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptlac5_be.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptlac5_be.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqw3aebz5.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqw3aebz5.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqw3aebz5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqw3aebz5.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqw3aebz5.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqw3aebz5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqw3aebz5.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqw3aebz5.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqw3aebz5.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqw3aebz5.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ufuz805.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4ufuz805.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ufuz805.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4ufuz805.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4ufuz805.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ufuz805.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4ufuz805.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4ufuz805.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ufuz805.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4ufuz805.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4ufuz805.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ufuz805.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4ufuz805.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp4ufuz805.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ufuz805.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw8bz0tkp.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw8bz0tkp.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw8bz0tkp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpw8bz0tkp.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw8bz0tkp.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw8bz0tkp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpw8bz0tkp.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpw8bz0tkp.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw8bz0tkp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpw8bz0tkp.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpw8bz0tkp.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw8bz0tkp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpw8bz0tkp.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpw8bz0tkp.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw8bz0tkp.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr0565ra8.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpr0565ra8.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr0565ra8.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpr0565ra8.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpr0565ra8.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr0565ra8.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr0565ra8.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_total = sum(length.(lst1))\n\
    \    lst2_total = sum(length.(lst2))\n    if lst1_total == lst2_total\n      \
    \  return lst1\n    elseif lst1_total < lst2_total\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm4c3pd5k.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm4c3pd5k.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm4c3pd5k.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpm4c3pd5k.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm4c3pd5k.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm4c3pd5k.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpm4c3pd5k.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpm4c3pd5k.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm4c3pd5k.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpm4c3pd5k.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpm4c3pd5k.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm4c3pd5k.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpm4c3pd5k.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpm4c3pd5k.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm4c3pd5k.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmsdj2w1m.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpmsdj2w1m.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmsdj2w1m.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpmsdj2w1m.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpmsdj2w1m.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmsdj2w1m.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmsdj2w1m.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe674ce5a.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe674ce5a.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe674ce5a.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpe674ce5a.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe674ce5a.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe674ce5a.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpe674ce5a.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe674ce5a.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe674ce5a.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpe674ce5a.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpe674ce5a.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe674ce5a.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpe674ce5a.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpe674ce5a.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe674ce5a.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx0iuoygs.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpx0iuoygs.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0iuoygs.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpx0iuoygs.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpx0iuoygs.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0iuoygs.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx0iuoygs.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkbe4__a6.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkbe4__a6.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbe4__a6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpkbe4__a6.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkbe4__a6.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbe4__a6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpkbe4__a6.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkbe4__a6.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbe4__a6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpkbe4__a6.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkbe4__a6.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbe4__a6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpkbe4__a6.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpkbe4__a6.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkbe4__a6.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    sum1 = 0\n\
    \    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n    end\n    for\
    \ i in lst2\n        sum2 += length(i)\n    end\n    if sum1 > sum2\n        return\
    \ lst2\n    elseif sum1 < sum2\n        return lst1\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo7sfhqk3.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpo7sfhqk3.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo7sfhqk3.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpo7sfhqk3.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpo7sfhqk3.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo7sfhqk3.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo7sfhqk3.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc9mn55zs.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc9mn55zs.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc9mn55zs.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpc9mn55zs.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc9mn55zs.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc9mn55zs.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpc9mn55zs.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc9mn55zs.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc9mn55zs.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpc9mn55zs.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpc9mn55zs.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc9mn55zs.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpc9mn55zs.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpc9mn55zs.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc9mn55zs.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_len = sum([length(x) for x\
    \ in lst1])\n    lst2_len = sum([length(x) for x in lst2])\n    if lst1_len ==\
    \ lst2_len\n        return lst1\n    elseif lst1_len < lst2_len\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw9gj8va3.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw9gj8va3.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9gj8va3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw9gj8va3.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw9gj8va3.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9gj8va3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw9gj8va3.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpw9gj8va3.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9gj8va3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw9gj8va3.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpw9gj8va3.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9gj8va3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw9gj8va3.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpw9gj8va3.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw9gj8va3.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbmzs7nzz.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbmzs7nzz.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbmzs7nzz.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpbmzs7nzz.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbmzs7nzz.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbmzs7nzz.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpbmzs7nzz.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbmzs7nzz.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbmzs7nzz.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpbmzs7nzz.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbmzs7nzz.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbmzs7nzz.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpbmzs7nzz.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpbmzs7nzz.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbmzs7nzz.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwnrvu6wr.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwnrvu6wr.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnrvu6wr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpwnrvu6wr.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwnrvu6wr.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnrvu6wr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpwnrvu6wr.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwnrvu6wr.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnrvu6wr.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwnrvu6wr.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxv4exc6y.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxv4exc6y.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxv4exc6y.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxv4exc6y.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxv4exc6y.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxv4exc6y.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxv4exc6y.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxv4exc6y.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxv4exc6y.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxv4exc6y.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxv4exc6y.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxv4exc6y.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxv4exc6y.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpxv4exc6y.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxv4exc6y.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) < length(lst2)\n        return lst1\n    end\n    if length(lst2)\
    \ < length(lst1)\n        return lst2\n    end\n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpujlfyf6b.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpujlfyf6b.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpujlfyf6b.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpujlfyf6b.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpujlfyf6b.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpujlfyf6b.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpujlfyf6b.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpujlfyf6b.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpujlfyf6b.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpujlfyf6b.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpujlfyf6b.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpujlfyf6b.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpujlfyf6b.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpujlfyf6b.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpujlfyf6b.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp28hbbcog.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28hbbcog.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28hbbcog.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp28hbbcog.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28hbbcog.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28hbbcog.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp28hbbcog.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp28hbbcog.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28hbbcog.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp28hbbcog.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp28hbbcog.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28hbbcog.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp28hbbcog.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp28hbbcog.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp28hbbcog.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    l1 = length(lst1)\n    l2 = length(lst2)\n\
    \    if l1 == 0 && l2 == 0\n        return []\n    end\n    if l1 == 0\n     \
    \   return lst2\n    end\n    if l2 == 0\n        return lst1\n    end\n    if\
    \ l1 == l2\n        return lst1\n    end\n    if l1 > l2\n        return lst2\n\
    \    end\n    return lst1\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmputpt6l2e.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmputpt6l2e.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputpt6l2e.jl:38\ntest set: Test\
    \ Failed at /tmp/tmputpt6l2e.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmputpt6l2e.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputpt6l2e.jl:38\ntest set: Test\
    \ Failed at /tmp/tmputpt6l2e.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmputpt6l2e.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputpt6l2e.jl:38\ntest set: Test\
    \ Failed at /tmp/tmputpt6l2e.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmputpt6l2e.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputpt6l2e.jl:38\ntest set: Test\
    \ Failed at /tmp/tmputpt6l2e.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmputpt6l2e.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmputpt6l2e.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprhpko_t5.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprhpko_t5.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhpko_t5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmprhpko_t5.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprhpko_t5.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhpko_t5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmprhpko_t5.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprhpko_t5.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhpko_t5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmprhpko_t5.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprhpko_t5.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhpko_t5.jl:38\ntest set: Test\
    \ Failed at /tmp/tmprhpko_t5.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmprhpko_t5.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprhpko_t5.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) < length(lst2)\n     \
    \   return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkd3p7sqw.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkd3p7sqw.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkd3p7sqw.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpkd3p7sqw.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkd3p7sqw.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkd3p7sqw.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpkd3p7sqw.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkd3p7sqw.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkd3p7sqw.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkd3p7sqw.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphjqip88v.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphjqip88v.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjqip88v.jl:44\ntest set: Test\
    \ Failed at /tmp/tmphjqip88v.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmphjqip88v.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphjqip88v.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphjqip88v.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgbvjmuon.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgbvjmuon.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgbvjmuon.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpgbvjmuon.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgbvjmuon.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgbvjmuon.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpgbvjmuon.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgbvjmuon.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgbvjmuon.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpgbvjmuon.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgbvjmuon.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgbvjmuon.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpgbvjmuon.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpgbvjmuon.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgbvjmuon.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb0aky3u7.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpb0aky3u7.jl:52 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb0aky3u7.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpb0aky3u7.jl:53\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpb0aky3u7.jl:53 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb0aky3u7.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb0aky3u7.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_sum = sum(length.(lst1))\n\
    \    lst2_sum = sum(length.(lst2))\n    if lst1_sum == lst2_sum\n        return\
    \ lst1\n    elseif lst1_sum < lst2_sum\n        return lst1\n    else\n      \
    \  return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo6ni5oh3.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpo6ni5oh3.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo6ni5oh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpo6ni5oh3.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpo6ni5oh3.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo6ni5oh3.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo6ni5oh3.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppo1d4tmk.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppo1d4tmk.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppo1d4tmk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmppo1d4tmk.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppo1d4tmk.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppo1d4tmk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmppo1d4tmk.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppo1d4tmk.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppo1d4tmk.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppo1d4tmk.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp72d82goz.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp72d82goz.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp72d82goz.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp72d82goz.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp72d82goz.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp72d82goz.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp72d82goz.jl:42\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp72d82goz.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp72d82goz.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp72d82goz.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp72d82goz.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp72d82goz.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp72d82goz.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp72d82goz.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp72d82goz.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxwtnluzg.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxwtnluzg.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxwtnluzg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxwtnluzg.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxwtnluzg.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxwtnluzg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxwtnluzg.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxwtnluzg.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxwtnluzg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxwtnluzg.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxwtnluzg.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxwtnluzg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpxwtnluzg.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpxwtnluzg.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxwtnluzg.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm3duf_k4.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm3duf_k4.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm3duf_k4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpm3duf_k4.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm3duf_k4.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm3duf_k4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpm3duf_k4.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpm3duf_k4.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm3duf_k4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpm3duf_k4.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpm3duf_k4.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm3duf_k4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpm3duf_k4.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpm3duf_k4.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm3duf_k4.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd9895zjn.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd9895zjn.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9895zjn.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpd9895zjn.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd9895zjn.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9895zjn.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpd9895zjn.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpd9895zjn.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9895zjn.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpd9895zjn.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpd9895zjn.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9895zjn.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpd9895zjn.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpd9895zjn.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd9895zjn.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb4r92szt.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb4r92szt.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb4r92szt.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb4r92szt.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb4r92szt.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb4r92szt.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb4r92szt.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb4r92szt.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb4r92szt.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb4r92szt.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnrzlch00.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnrzlch00.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnrzlch00.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpnrzlch00.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnrzlch00.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnrzlch00.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpnrzlch00.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnrzlch00.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnrzlch00.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpnrzlch00.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpnrzlch00.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnrzlch00.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpnrzlch00.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpnrzlch00.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnrzlch00.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    sum1 = 0\n    sum2 = 0\n    for\
    \ i in lst1\n        sum1 += length(i)\n    end\n    for i in lst2\n        sum2\
    \ += length(i)\n    end\n    if sum1 < sum2\n        return lst1\n    elseif sum1\
    \ > sum2\n        return lst2\n    else\n        return lst1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_total = 0\n    lst2_total =\
    \ 0\n    for i in lst1\n        lst1_total += length(i)\n    end\n    for i in\
    \ lst2\n        lst2_total += length(i)\n    end\n    if lst1_total == lst2_total\n\
    \        return lst1\n    elseif lst1_total < lst2_total\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl8jup7iv.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpl8jup7iv.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl8jup7iv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpl8jup7iv.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpl8jup7iv.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl8jup7iv.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl8jup7iv.jl:34\n"
  exit_code: 1
  status: SyntaxError
