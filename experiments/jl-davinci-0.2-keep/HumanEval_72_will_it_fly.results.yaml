name: HumanEval_72_will_it_fly
language: julia
results:
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        if q == reverse(q)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && ispalindrome(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3b0186fg.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmp3b0186fg.jl:19\n   [2] macro expansion\n     @ /tmp/tmp3b0186fg.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3b0186fg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp3b0186fg.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp3b0186fg.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp3b0186fg.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3b0186fg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp3b0186fg.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp3b0186fg.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp3b0186fg.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3b0186fg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp3b0186fg.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp3b0186fg.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp3b0186fg.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3b0186fg.jl:29\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3b0186fg.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && ispalindrome(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc1lv2qrr.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate([3, 2, 3], 9) == true\\n  UndefVarError:\
    \ ispalindrome not defined\\n  Stacktrace:\\n   [1] will_it_fly(q::Vector{Int64},\
    \ w::Int64)\\n     @ Main /tmp/tmpc1lv2qrr.jl:19\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpc1lv2qrr.jl:30 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc1lv2qrr.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpc1lv2qrr.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2], 5) == false\\n  UndefVarError: ispalindrome not defined\\\
    n  Stacktrace:\\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\\n     @ Main\
    \ /tmp/tmpc1lv2qrr.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpc1lv2qrr.jl:31\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc1lv2qrr.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpc1lv2qrr.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate([3], 5) == true\\n  UndefVarError: ispalindrome not defined\\n  Stacktrace:\\\
    n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\\n     @ Main /tmp/tmpc1lv2qrr.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmpc1lv2qrr.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc1lv2qrr.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpc1lv2qrr.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\\n  UndefVarError: ispalindrome not defined\\\
    n  Stacktrace:\\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\\n     @ Main\
    \ /tmp/tmpc1lv2qrr.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpc1lv2qrr.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level sco"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && isequal(q, reverse(q))\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    # check\
    \ if it's balanced\n    if ispalindrome(q)\n        # check if the sum of its\
    \ elements is less than or equal the maximum possible weight w\n        if sum(q)\
    \ <= w\n            return true\n        else\n            return false\n    \
    \    end\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8757uyq_.jl:36\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmp8757uyq_.jl:20\n   [2] macro expansion\n     @ /tmp/tmp8757uyq_.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8757uyq_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8757uyq_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp8757uyq_.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmp8757uyq_.jl:37 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8757uyq_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8757uyq_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp8757uyq_.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmp8757uyq_.jl:38 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8757uyq_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8757uyq_.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3], 1) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp8757uyq_.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmp8757uyq_.jl:39 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8757uyq_.jl:35\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8757uyq_.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp51eh4jt6.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmp51eh4jt6.jl:19\n   [2] macro expansion\n     @ /tmp/tmp51eh4jt6.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp51eh4jt6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp51eh4jt6.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp51eh4jt6.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp51eh4jt6.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp51eh4jt6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp51eh4jt6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp51eh4jt6.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp51eh4jt6.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp51eh4jt6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp51eh4jt6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp51eh4jt6.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp51eh4jt6.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp51eh4jt6.jl:25\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp51eh4jt6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgzvnsgaq.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmpgzvnsgaq.jl:19\n   [2] macro expansion\n     @ /tmp/tmpgzvnsgaq.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgzvnsgaq.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgzvnsgaq.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpgzvnsgaq.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpgzvnsgaq.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgzvnsgaq.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgzvnsgaq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpgzvnsgaq.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpgzvnsgaq.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgzvnsgaq.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgzvnsgaq.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpgzvnsgaq.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpgzvnsgaq.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgzvnsgaq.jl:25\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgzvnsgaq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        if q == reverse(q)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        if q == reverse(q)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_y4rgm4r.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmp_y4rgm4r.jl:19\n   [2] macro expansion\n     @ /tmp/tmp_y4rgm4r.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_y4rgm4r.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp_y4rgm4r.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp_y4rgm4r.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp_y4rgm4r.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_y4rgm4r.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp_y4rgm4r.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp_y4rgm4r.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp_y4rgm4r.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_y4rgm4r.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp_y4rgm4r.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp_y4rgm4r.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp_y4rgm4r.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_y4rgm4r.jl:25\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_y4rgm4r.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmprnmuyy5u.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmprnmuyy5u.jl:19\n   [2] macro expansion\n     @ /tmp/tmprnmuyy5u.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprnmuyy5u.jl:25\ntest set:\
    \ Error During Test at /tmp/tmprnmuyy5u.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmprnmuyy5u.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmprnmuyy5u.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprnmuyy5u.jl:25\ntest set:\
    \ Error During Test at /tmp/tmprnmuyy5u.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmprnmuyy5u.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmprnmuyy5u.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprnmuyy5u.jl:25\ntest set:\
    \ Error During Test at /tmp/tmprnmuyy5u.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmprnmuyy5u.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmprnmuyy5u.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmprnmuyy5u.jl:25\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprnmuyy5u.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp22t4lian.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmp22t4lian.jl:19\n   [2] macro expansion\n     @ /tmp/tmp22t4lian.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp22t4lian.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp22t4lian.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp22t4lian.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp22t4lian.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp22t4lian.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp22t4lian.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp22t4lian.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp22t4lian.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp22t4lian.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp22t4lian.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp22t4lian.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp22t4lian.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp22t4lian.jl:25\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp22t4lian.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        if q == reverse(q)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpojh1ku29.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmpojh1ku29.jl:19\n   [2] macro expansion\n     @ /tmp/tmpojh1ku29.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpojh1ku29.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpojh1ku29.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpojh1ku29.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpojh1ku29.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpojh1ku29.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpojh1ku29.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpojh1ku29.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpojh1ku29.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpojh1ku29.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpojh1ku29.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpojh1ku29.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpojh1ku29.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpojh1ku29.jl:25\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpojh1ku29.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_xyx256l.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate([3, 2, 3], 9) == true\\n  UndefVarError:\
    \ ispalindrome not defined\\n  Stacktrace:\\n   [1] will_it_fly(q::Vector{Int64},\
    \ w::Int64)\\n     @ Main /tmp/tmp_xyx256l.jl:19\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp_xyx256l.jl:26 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_xyx256l.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp_xyx256l.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2], 5) == false\\n  UndefVarError: ispalindrome not defined\\\
    n  Stacktrace:\\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\\n     @ Main\
    \ /tmp/tmp_xyx256l.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmp_xyx256l.jl:27\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_xyx256l.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp_xyx256l.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate([3], 5) == true\\n  UndefVarError: ispalindrome not defined\\n  Stacktrace:\\\
    n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\\n     @ Main /tmp/tmp_xyx256l.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_xyx256l.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_xyx256l.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp_xyx256l.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\\n  UndefVarError: ispalindrome not defined\\\
    n  Stacktrace:\\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\\n     @ Main\
    \ /tmp/tmp_xyx256l.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmp_xyx256l.jl:30\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level sco"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmp_xyx256l.jl:23\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        if q == reverse(q)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        return true\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr6ezgkgr.jl:31\n  Expression: candidate([1,\
    \ 2], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpr6ezgkgr.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr6ezgkgr.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpr6ezgkgr.jl:34\n  Expression: candidate([1, 2, 3], 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr6ezgkgr.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr6ezgkgr.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr6ezgkgr.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        if q == reverse(q)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp2onpq8bi.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmp2onpq8bi.jl:19\n   [2] macro expansion\n     @ /tmp/tmp2onpq8bi.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2onpq8bi.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2onpq8bi.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp2onpq8bi.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp2onpq8bi.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2onpq8bi.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2onpq8bi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp2onpq8bi.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp2onpq8bi.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2onpq8bi.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2onpq8bi.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp2onpq8bi.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp2onpq8bi.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2onpq8bi.jl:25\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2onpq8bi.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpks0mshrx.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate([3, 2, 3], 9) == true\\n  UndefVarError:\
    \ ispalindrome not defined\\n  Stacktrace:\\n   [1] will_it_fly(q::Vector{Int64},\
    \ w::Int64)\\n     @ Main /tmp/tmpks0mshrx.jl:19\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpks0mshrx.jl:26 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpks0mshrx.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpks0mshrx.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2], 5) == false\\n  UndefVarError: ispalindrome not defined\\\
    n  Stacktrace:\\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\\n     @ Main\
    \ /tmp/tmpks0mshrx.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpks0mshrx.jl:27\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpks0mshrx.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpks0mshrx.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate([3], 5) == true\\n  UndefVarError: ispalindrome not defined\\n  Stacktrace:\\\
    n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\\n     @ Main /tmp/tmpks0mshrx.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmpks0mshrx.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpks0mshrx.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpks0mshrx.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\\n  UndefVarError: ispalindrome not defined\\\
    n  Stacktrace:\\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\\n     @ Main\
    \ /tmp/tmpks0mshrx.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpks0mshrx.jl:30\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level sco"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && ispalindrome(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6fw7blks.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmp6fw7blks.jl:19\n   [2] macro expansion\n     @ /tmp/tmp6fw7blks.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6fw7blks.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6fw7blks.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp6fw7blks.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp6fw7blks.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6fw7blks.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6fw7blks.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp6fw7blks.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp6fw7blks.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6fw7blks.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6fw7blks.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp6fw7blks.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp6fw7blks.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6fw7blks.jl:29\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6fw7blks.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && isequal(q, reverse(q))\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp493ejy_c.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmp493ejy_c.jl:19\n   [2] macro expansion\n     @ /tmp/tmp493ejy_c.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp493ejy_c.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp493ejy_c.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp493ejy_c.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp493ejy_c.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp493ejy_c.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp493ejy_c.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp493ejy_c.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp493ejy_c.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp493ejy_c.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp493ejy_c.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp493ejy_c.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp493ejy_c.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp493ejy_c.jl:25\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp493ejy_c.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        if q == reverse(q)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp8fbohapb.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmp8fbohapb.jl:19\n   [2] macro expansion\n     @ /tmp/tmp8fbohapb.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8fbohapb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp8fbohapb.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp8fbohapb.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp8fbohapb.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8fbohapb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp8fbohapb.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp8fbohapb.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp8fbohapb.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8fbohapb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp8fbohapb.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp8fbohapb.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp8fbohapb.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8fbohapb.jl:25\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8fbohapb.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3tmn3pjm.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmp3tmn3pjm.jl:19\n   [2] macro expansion\n     @ /tmp/tmp3tmn3pjm.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3tmn3pjm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp3tmn3pjm.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp3tmn3pjm.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp3tmn3pjm.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3tmn3pjm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp3tmn3pjm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp3tmn3pjm.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp3tmn3pjm.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3tmn3pjm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp3tmn3pjm.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp3tmn3pjm.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp3tmn3pjm.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3tmn3pjm.jl:25\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3tmn3pjm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3zvq7a68.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmp3zvq7a68.jl:19\n   [2] macro expansion\n     @ /tmp/tmp3zvq7a68.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3zvq7a68.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp3zvq7a68.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp3zvq7a68.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp3zvq7a68.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3zvq7a68.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp3zvq7a68.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp3zvq7a68.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp3zvq7a68.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3zvq7a68.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp3zvq7a68.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp3zvq7a68.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp3zvq7a68.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3zvq7a68.jl:25\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3zvq7a68.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && ispalindrome(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbj5423v3.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmpbj5423v3.jl:19\n   [2] macro expansion\n     @ /tmp/tmpbj5423v3.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbj5423v3.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpbj5423v3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpbj5423v3.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpbj5423v3.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbj5423v3.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpbj5423v3.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpbj5423v3.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpbj5423v3.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbj5423v3.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpbj5423v3.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpbj5423v3.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpbj5423v3.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbj5423v3.jl:29\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbj5423v3.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ ispalindrome(q) && sum(q) <= w\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkn9eeeqd.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmpkn9eeeqd.jl:19\n   [2] macro expansion\n     @ /tmp/tmpkn9eeeqd.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkn9eeeqd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpkn9eeeqd.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpkn9eeeqd.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpkn9eeeqd.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkn9eeeqd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpkn9eeeqd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpkn9eeeqd.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpkn9eeeqd.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkn9eeeqd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpkn9eeeqd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 3], 1) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmpkn9eeeqd.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpkn9eeeqd.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkn9eeeqd.jl:25\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkn9eeeqd.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp2jlkgfcf.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n\
    \     @ Main /tmp/tmp2jlkgfcf.jl:19\n   [2] macro expansion\n     @ /tmp/tmp2jlkgfcf.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2jlkgfcf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2jlkgfcf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2], 5) == false\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp2jlkgfcf.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp2jlkgfcf.jl:27 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2jlkgfcf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2jlkgfcf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([3], 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp2jlkgfcf.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp2jlkgfcf.jl:28 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2jlkgfcf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2jlkgfcf.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] will_it_fly(q::Vector{Int64}, w::Int64)\n     @ Main /tmp/tmp2jlkgfcf.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp2jlkgfcf.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2jlkgfcf.jl:25\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2jlkgfcf.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
