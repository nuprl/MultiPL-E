name: HumanEval_141_file_name_check
language: julia
results:
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 2\n        return \"No\"\
    \n    end\n    if length(file_name) == 3\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 5\n        return \"No\"\n    end\n    if length(file_name) == 6\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 7\n        return \"No\"\
    \n    end\n    if length(file_name) == 8\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 9\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 10\n        return \"No\"\n    end\n    if length(file_name) == 11\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 12\n        return \"\
    No\"\n    end\n    if length(file_name) == 13\n        return \"No\"\n    end\n\
    \    if length(file_name) == 14\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 15\n        return \"No\"\n    end\n    if length(file_name) == 16\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 17\n        return \"\
    No\"\n    end\n    if length(file_name) == 18\n        return \"No\"\n    end\n\
    \    if length(file_name) == 19\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 20\n        return \"No\"\n    end\n    if length(file_name) == 21\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 22\n        return \"\
    No\"\n    end\n    if length(file_name) == 23\n        return \"No\"\n    end\n\
    \    if length(file_name) == 24\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 25\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp46wg6wxb.jl:1\nin expression starting at /tmp/tmp46wg6wxb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7uew9vba.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp7uew9vba.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp7uew9vba.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7uew9vba.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7uew9vba.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp7uew9vba.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp7uew9vba.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7uew9vba.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7uew9vba.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmosybzs9.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpmosybzs9.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpmosybzs9.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmosybzs9.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpmosybzs9.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpmosybzs9.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpmosybzs9.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmosybzs9.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpmosybzs9.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3gq_r6bh.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp3gq_r6bh.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp3gq_r6bh.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3gq_r6bh.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp3gq_r6bh.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp3gq_r6bh.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp3gq_r6bh.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3gq_r6bh.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp3gq_r6bh.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(x->x in '0':'9',\
    \ file_name) > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if !(file_name[1] in 'a':'z' || file_name[1]\
    \ in 'A':'Z')\n        return \"No\"\n    end\n    if !(file_name[end-3:end] in\
    \ [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return \"\
    Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptn8mkuyr.jl:34\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmptn8mkuyr.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptn8mkuyr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptn8mkuyr.jl:37\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptn8mkuyr.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptn8mkuyr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptn8mkuyr.jl:38\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptn8mkuyr.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptn8mkuyr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptn8mkuyr.jl:44\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptn8mkuyr.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptn8mkuyr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptn8mkuyr.jl:50\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptn8mkuyr.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptn8mkuyr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptn8mkuyr.jl:51\n  Expression: candidate(\"Is3youfault.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptn8mkuyr.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 18 passed, 7 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptn8mkuyr.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if file_name[end] in '0':'9'\n        return \"No\"\n \
    \   end\n    if file_name[end-2:end] != \"txt\" && file_name[end-2:end] != \"\
    exe\" && file_name[end-2:end] != \"dll\"\n        return \"No\"\n    end\n   \
    \ return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1lk6h53o.jl:46\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1lk6h53o.jl:46 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1lk6h53o.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp1lk6h53o.jl:47\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1lk6h53o.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1lk6h53o.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp1lk6h53o.jl:48\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1lk6h53o.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1lk6h53o.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp1lk6h53o.jl:51\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1lk6h53o.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1lk6h53o.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp1lk6h53o.jl:53\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1lk6h53o.jl:53 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1lk6h53o.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp1lk6h53o.jl:64\n  Expression: candidate(\".txt\") == \"No\"\
    \n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1lk6h53o.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 6 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1lk6h53o.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    n = length(file_name)\n\
    \    if n < 5 || n > 12\n        return \"No\"\n    end\n    if !(file_name[1]\
    \ in 'a':'z' || file_name[1] in 'A':'Z')\n        return \"No\"\n    end\n   \
    \ if !(file_name[n-3:n] in [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\
    \n    end\n    if count(x->x in '0':'9', file_name) > 3\n        return \"No\"\
    \n    end\n    if count(x->x == '.', file_name) != 1\n        return \"No\"\n\
    \    end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprugvvi46.jl:38\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmprugvvi46.jl:38 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprugvvi46.jl:37\ntest set: Test\
    \ Failed at /tmp/tmprugvvi46.jl:41\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprugvvi46.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprugvvi46.jl:37\ntest set: Test\
    \ Failed at /tmp/tmprugvvi46.jl:42\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprugvvi46.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprugvvi46.jl:37\ntest set: Test\
    \ Failed at /tmp/tmprugvvi46.jl:48\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprugvvi46.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprugvvi46.jl:37\ntest set: Test\
    \ Failed at /tmp/tmprugvvi46.jl:54\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprugvvi46.jl:54 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprugvvi46.jl:37\ntest set: Test\
    \ Failed at /tmp/tmprugvvi46.jl:55\n  Expression: candidate(\"Is3youfault.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprugvvi46.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprugvvi46.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp05qzu8wc.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp05qzu8wc.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp05qzu8wc.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp05qzu8wc.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp05qzu8wc.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp05qzu8wc.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp05qzu8wc.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp05qzu8wc.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp05qzu8wc.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if file_name[end] in '0':'9'\n        return \"No\"\n \
    \   end\n    if file_name[end-2:end] != \"txt\" && file_name[end-2:end] != \"\
    exe\" && file_name[end-2:end] != \"dll\"\n        return \"No\"\n    end\n   \
    \ return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpdjbawsay.jl:46\\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpdjbawsay.jl:46 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpdjbawsay.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpdjbawsay.jl:47\\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpdjbawsay.jl:47 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpdjbawsay.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpdjbawsay.jl:48\\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpdjbawsay.jl:48 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpdjbawsay.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpdjbawsay.jl:51\\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpdjbawsay.jl:51 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpdjbawsay.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpdjbawsay.jl:53\\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpdjbawsay.jl:53 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpdjbawsay.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpdjbawsay.jl:64\\n  Expression: candidate(\".txt\") == \"No\"\
    \\n   Evaluated: \"Yes\" == \"No\"\\nSta"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuali5382.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpuali5382.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpuali5382.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuali5382.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpuali5382.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpuali5382.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpuali5382.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuali5382.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpuali5382.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp78dr40ma.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp78dr40ma.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp78dr40ma.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp78dr40ma.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp78dr40ma.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp78dr40ma.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp78dr40ma.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp78dr40ma.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp78dr40ma.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(match(r\"^[a-zA-Z]\", file_name).match)\n\
    \        return \"No\"\n    end\n    if !(match(r\"\\.(txt|exe|dll)$\", file_name).match)\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpryl6q40a.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching !(::SubString{String})\\n  Closest candidates are:\\n   \
    \ !(!Matched::Bool) at bool.jl:33\\n    !(!Matched::Function) at operators.jl:968\\\
    n    !(!Matched::Missing) at missing.jl:101\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpryl6q40a.jl:21\\n   [2] macro expansion\\n     @ /tmp/tmpryl6q40a.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpryl6q40a.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpryl6q40a.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  type Nothing has no field match\\\
    n  Stacktrace:\\n   [1] getproperty(x::Nothing, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] file_name_check(file_name::String)\\n     @ Main /tmp/tmpryl6q40a.jl:21\\\
    n   [3] macro expansion\\n     @ /tmp/tmpryl6q40a.jl:35 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpryl6q40a.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpryl6q40a.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: no method matching !(::SubString{String})\\\
    n  Closest candidates are:\\n    !(!Matched::Bool) at bool.jl:33\\n    !(!Matched::Function)\
    \ at operators.jl:968\\n    !(!Matched::Missing) at missing.jl:101\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpryl6q40a.jl:21\\\
    n   [2] macro expansion\\n     @ /tmp/tmpryl6q40a.jl:36 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpryl6q40a.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpryl6q40a.jl:37\\n  Test threw exception\\n  Expressio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc8borr_7.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpc8borr_7.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpc8borr_7.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc8borr_7.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpc8borr_7.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpc8borr_7.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpc8borr_7.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc8borr_7.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpc8borr_7.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphurcsa13.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmphurcsa13.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmphurcsa13.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphurcsa13.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmphurcsa13.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmphurcsa13.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmphurcsa13.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphurcsa13.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmphurcsa13.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkiy6ombm.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpkiy6ombm.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpkiy6ombm.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkiy6ombm.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpkiy6ombm.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpkiy6ombm.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpkiy6ombm.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkiy6ombm.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpkiy6ombm.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(x->x in '0':'9',\
    \ file_name) > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n     \
    \   return \"No\"\n    end\n    if file_name[end-3:end] in [\"txt\", \"exe\",\
    \ \"dll\"]\n        return \"Yes\"\n    end\n    return \"No\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3a50101j.jl:34\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp3a50101j.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3a50101j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3a50101j.jl:37\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3a50101j.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3a50101j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3a50101j.jl:38\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3a50101j.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3a50101j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3a50101j.jl:44\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3a50101j.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3a50101j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3a50101j.jl:50\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3a50101j.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3a50101j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp3a50101j.jl:51\n  Expression: candidate(\"Is3youfault.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3a50101j.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 18 passed, 7 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3a50101j.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if count(x -> x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x -> x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n     \
    \   return \"No\"\n    end\n    if file_name[end-3:end] != \".txt\" && file_name[end-3:end]\
    \ != \".exe\" && file_name[end-3:end] != \".dll\"\n        return \"No\"\n   \
    \ end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbqoqelkk.jl:43\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbqoqelkk.jl:43 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbqoqelkk.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpbqoqelkk.jl:44\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbqoqelkk.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbqoqelkk.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpbqoqelkk.jl:45\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbqoqelkk.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbqoqelkk.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpbqoqelkk.jl:50\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbqoqelkk.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbqoqelkk.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   22     4     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 22 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbqoqelkk.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if file_name[1] in 'a':'z' || file_name[1] in 'A':'Z'\n\
    \        if file_name[end-2:end] in [\"txt\", \"exe\", \"dll\"]\n            return\
    \ \"Yes\"\n        end\n    end\n    return \"No\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuh90vqf2.jl:50\n  Expression: candidate(\"\
    this_is_valid.txtexe\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpuh90vqf2.jl:50 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuh90vqf2.jl:38\ntest set: Error\
    \ During Test at /tmp/tmpuh90vqf2.jl:64\n  Test threw exception\n  Expression:\
    \ candidate(\"s.\") == \"No\"\n  BoundsError: attempt to access 2-codeunit String\
    \ at index [0:2]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ file_name_check(file_name::String)\n     @ Main /tmp/tmpuh90vqf2.jl:28\n   [4]\
    \ macro expansion\n     @ /tmp/tmpuh90vqf2.jl:64 [inlined]\n   [5] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuh90vqf2.jl:38\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |   24     1      1     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 24 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuh90vqf2.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(occursin(r\"^[a-zA-Z]\", file_name))\n\
    \        return \"No\"\n    end\n    if !(occursin(r\"\\.(txt|exe|dll)$\", file_name))\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if count(x -> x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x -> x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n     \
    \   return \"No\"\n    end\n    if file_name[end-3:end] != \".txt\" && file_name[end-3:end]\
    \ != \".exe\" && file_name[end-3:end] != \".dll\"\n        return \"No\"\n   \
    \ end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpysucypgs.jl:43\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpysucypgs.jl:43 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpysucypgs.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpysucypgs.jl:44\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpysucypgs.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpysucypgs.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpysucypgs.jl:45\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpysucypgs.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpysucypgs.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpysucypgs.jl:50\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpysucypgs.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpysucypgs.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   22     4     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 22 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpysucypgs.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzxajzpwd.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpzxajzpwd.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpzxajzpwd.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzxajzpwd.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpzxajzpwd.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpzxajzpwd.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpzxajzpwd.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzxajzpwd.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpzxajzpwd.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1oa_3igo.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp1oa_3igo.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp1oa_3igo.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1oa_3igo.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp1oa_3igo.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp1oa_3igo.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp1oa_3igo.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1oa_3igo.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp1oa_3igo.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw_mi8as4.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpw_mi8as4.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpw_mi8as4.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw_mi8as4.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpw_mi8as4.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpw_mi8as4.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpw_mi8as4.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw_mi8as4.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpw_mi8as4.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzw_rneb0.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpzw_rneb0.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpzw_rneb0.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzw_rneb0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpzw_rneb0.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpzw_rneb0.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpzw_rneb0.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzw_rneb0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpzw_rneb0.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code goes here\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwmv_qv9m.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpwmv_qv9m.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpwmv_qv9m.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwmv_qv9m.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpwmv_qv9m.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpwmv_qv9m.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpwmv_qv9m.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwmv_qv9m.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpwmv_qv9m.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if count(x -> x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x -> x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if !(file_name[1] in 'a':'z' || file_name[1]\
    \ in 'A':'Z')\n        return \"No\"\n    end\n    if file_name[end-3:end] !=\
    \ \".txt\" && file_name[end-3:end] != \".exe\" && file_name[end-3:end] != \".dll\"\
    \n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(x->x in '0':'9',\
    \ file_name) > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if !(file_name[1] in 'a':'z' || file_name[1]\
    \ in 'A':'Z')\n        return \"No\"\n    end\n    if !(split(file_name, '.')[2]\
    \ in [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxcb88xfe.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpxcb88xfe.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpxcb88xfe.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxcb88xfe.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpxcb88xfe.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpxcb88xfe.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpxcb88xfe.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxcb88xfe.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpxcb88xfe.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  if file_name[1] in ('a':'z', 'A':'Z')\n            return \"No\"\n        else\n\
    \            return \"No\"\n        end\n    end\n    if length(file_name) ==\
    \ 2\n        if file_name[1] in ('a':'z', 'A':'Z')\n            if file_name[2]\
    \ in ('a':'z', 'A':'Z', '0':'9')\n                return \"No\"\n            else\n\
    \                return \"No\"\n            end\n        else\n            return\
    \ \"No\"\n        end\n    end\n    if length(file_name) == 3\n        if file_name[1]\
    \ in ('a':'z', 'A':'Z')\n            if file_name[2] in ('a':'z', 'A':'Z', '0':'9')\n\
    \                if file_name[3] in ('a':'z', 'A':'Z', '0':'9')\n            \
    \        return \"No\"\n                else\n                    return \"No\"\
    \n                end\n            else\n                return \"No\"\n     \
    \       end\n        else\n            return \"No\"\n        end\n    end\n \
    \   if length(file_name) == 4\n        if file_name[1] in ('a':'z', 'A':'Z')\n\
    \            if file_name[2] in ('a':'z', 'A':'Z', '0':'9')\n                if\
    \ file_name[3] in ('a':'z', 'A':'Z', '0':'9')\n                    if file_name[4]\
    \ in ('a':'z', 'A':'Z', '0':'9')\n                        return \"No\"\n    \
    \                else\n                        return \"No\"\n               \
    \     end\n                else\n                    return \"No\"\n         \
    \       end\n            else\n                return \"No\"\n            end\n\
    \        else\n            return \"No\"\n        end\n    end\n    if length(file_name)\
    \ == 5\n        if file_name[1] in ('a':'z', 'A':'Z')\n            if\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmpmrbzyglc.jl:72\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpmrbzyglc.jl:73\nin expression\
    \ starting at /tmp/tmpmrbzyglc.jl:73\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpegzrq3v8.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpegzrq3v8.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpegzrq3v8.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpegzrq3v8.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpegzrq3v8.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpegzrq3v8.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpegzrq3v8.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpegzrq3v8.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpegzrq3v8.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if count(x -> x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x -> x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if !(file_name[1] in 'a':'z' || file_name[1]\
    \ in 'A':'Z')\n        return \"No\"\n    end\n    if file_name[end-3:end] !=\
    \ \".txt\" && file_name[end-3:end] != \".exe\" && file_name[end-3:end] != \".dll\"\
    \n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprsi2p4vi.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmprsi2p4vi.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmprsi2p4vi.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprsi2p4vi.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmprsi2p4vi.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmprsi2p4vi.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmprsi2p4vi.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprsi2p4vi.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmprsi2p4vi.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if file_name[1] in ('0':'9')\n        return \"\
    No\"\n    end\n    if file_name[1] in ('a':'z')\n        return \"Yes\"\n    end\n\
    \    if file_name[1] in ('A':'Z')\n        return \"Yes\"\n    end\n    return\
    \ \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwn6wa_op.jl:39\n  Expression: candidate(\"\
    s1sdf3.asd\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwn6wa_op.jl:39 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwn6wa_op.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwn6wa_op.jl:42\n  Expression: candidate(\"His12FILE94.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwn6wa_op.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwn6wa_op.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwn6wa_op.jl:46\n  Expression: candidate(\"this_is_valid.wow\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwn6wa_op.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwn6wa_op.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwn6wa_op.jl:48\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwn6wa_op.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwn6wa_op.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwn6wa_op.jl:51\n  Expression: candidate(\"this_is_12valid.6exe4.txt\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwn6wa_op.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwn6wa_op.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwn6wa_op.jl:52\n  Expression: candidate(\"all.exe.txt\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 16 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwn6wa_op.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpenx0v994.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpenx0v994.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpenx0v994.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpenx0v994.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpenx0v994.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpenx0v994.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpenx0v994.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpenx0v994.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpenx0v994.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if count(x -> x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x -> x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n     \
    \   return \"No\"\n    end\n    if file_name[end-3:end] != \".txt\" && file_name[end-3:end]\
    \ != \".exe\" && file_name[end-3:end] != \".dll\"\n        return \"No\"\n   \
    \ end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1ozve53k.jl:43\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1ozve53k.jl:43 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ozve53k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1ozve53k.jl:44\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1ozve53k.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ozve53k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1ozve53k.jl:45\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1ozve53k.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ozve53k.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1ozve53k.jl:50\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1ozve53k.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ozve53k.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   22     4     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 22 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ozve53k.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppg9vuhqg.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmppg9vuhqg.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmppg9vuhqg.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppg9vuhqg.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmppg9vuhqg.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmppg9vuhqg.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmppg9vuhqg.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppg9vuhqg.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmppg9vuhqg.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(occursin(r\"^[a-zA-Z]\", file_name))\n\
    \        return \"No\"\n    end\n    if !(occursin(r\"\\.(txt|exe|dll)$\", file_name))\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmklityrh.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpmklityrh.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpmklityrh.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmklityrh.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpmklityrh.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpmklityrh.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpmklityrh.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmklityrh.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpmklityrh.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsu4st72l.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpsu4st72l.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpsu4st72l.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsu4st72l.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpsu4st72l.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpsu4st72l.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpsu4st72l.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsu4st72l.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpsu4st72l.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwxote2p4.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpwxote2p4.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpwxote2p4.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwxote2p4.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpwxote2p4.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpwxote2p4.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpwxote2p4.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwxote2p4.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpwxote2p4.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if !(file_name[1] in 'a':'z' || file_name[1]\
    \ in 'A':'Z')\n        return \"No\"\n    end\n    if file_name[end-2:end] !=\
    \ \"txt\" && file_name[end-2:end] != \"exe\" && file_name[end-2:end] != \"dll\"\
    \n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpslxcv2mj.jl:48\n  Expression: candidate(\"\
    this_is_valid.txtexe\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpslxcv2mj.jl:48 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpslxcv2mj.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpslxcv2mj.jl:62\n  Test threw exception\n  Expression:\
    \ candidate(\"s.\") == \"No\"\n  BoundsError: attempt to access 2-codeunit String\
    \ at index [0:2]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ file_name_check(file_name::String)\n     @ Main /tmp/tmpslxcv2mj.jl:27\n   [4]\
    \ macro expansion\n     @ /tmp/tmpslxcv2mj.jl:62 [inlined]\n   [5] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpslxcv2mj.jl:36\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |   24     1      1     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 24 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpslxcv2mj.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(match(r\"^[a-zA-Z]\", file_name).match)\n\
    \        return \"No\"\n    end\n    if !(match(r\"\\.[a-zA-Z]{3}$\", file_name).match)\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxzzoc49p.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching !(::SubString{String})\\n  Closest candidates are:\\n   \
    \ !(!Matched::Bool) at bool.jl:33\\n    !(!Matched::Function) at operators.jl:968\\\
    n    !(!Matched::Missing) at missing.jl:101\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpxzzoc49p.jl:21\\n   [2] macro expansion\\n     @ /tmp/tmpxzzoc49p.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxzzoc49p.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpxzzoc49p.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  type Nothing has no field match\\\
    n  Stacktrace:\\n   [1] getproperty(x::Nothing, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] file_name_check(file_name::String)\\n     @ Main /tmp/tmpxzzoc49p.jl:21\\\
    n   [3] macro expansion\\n     @ /tmp/tmpxzzoc49p.jl:35 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxzzoc49p.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpxzzoc49p.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: no method matching !(::SubString{String})\\\
    n  Closest candidates are:\\n    !(!Matched::Bool) at bool.jl:33\\n    !(!Matched::Function)\
    \ at operators.jl:968\\n    !(!Matched::Missing) at missing.jl:101\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpxzzoc49p.jl:21\\\
    n   [2] macro expansion\\n     @ /tmp/tmpxzzoc49p.jl:36 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxzzoc49p.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpxzzoc49p.jl:37\\n  Test threw exception\\n  Expressio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 2\n        return \"No\"\
    \n    end\n    if length(file_name) == 3\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 5\n        return \"No\"\n    end\n    if length(file_name) == 6\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 7\n        return \"No\"\
    \n    end\n    if length(file_name) == 8\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 9\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 10\n        return \"No\"\n    end\n    if length(file_name) == 11\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 12\n        return \"\
    No\"\n    end\n    if length(file_name) == 13\n        return \"No\"\n    end\n\
    \    if length(file_name) == 14\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 15\n        return \"No\"\n    end\n    if length(file_name) == 16\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 17\n        return \"\
    No\"\n    end\n    if length(file_name) == 18\n        return \"No\"\n    end\n\
    \    if length(file_name) == 19\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 20\n        return \"No\"\n    end\n    if length(file_name) == 21\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 22\n        return \"\
    No\"\n    end\n    if length(file_name) == 23\n        return \"No\"\n    end\n\
    \    if length(file_name) == 24\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 25\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9nvap2bn.jl:1\nin expression starting at /tmp/tmp9nvap2bn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if file_name[1] in ('0':'9')\n   \
    \     return \"No\"\n    end\n    if count(x -> x in ('0':'9'), file_name) > 3\n\
    \        return \"No\"\n    end\n    if count(x -> x == '.', file_name) != 1\n\
    \        return \"No\"\n    end\n    if file_name[end] == '.'\n        return\
    \ \"No\"\n    end\n    if file_name[end-2:end] in [\"txt\", \"exe\", \"dll\"]\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqmde7gqd.jl:47\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqmde7gqd.jl:47 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqmde7gqd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqmde7gqd.jl:48\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqmde7gqd.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqmde7gqd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqmde7gqd.jl:49\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqmde7gqd.jl:49 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqmde7gqd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqmde7gqd.jl:52\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqmde7gqd.jl:52 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqmde7gqd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqmde7gqd.jl:54\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqmde7gqd.jl:54 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqmde7gqd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpqmde7gqd.jl:65\n  Expression: candidate(\".txt\") == \"No\"\
    \n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqmde7gqd.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 20 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqmde7gqd.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits = 0\n    dot\
    \ = 0\n    for i in file_name\n        if i in '0':1:9\n            digits +=\
    \ 1\n        elseif i == '.'\n            dot += 1\n        end\n    end\n   \
    \ if digits > 3 || dot != 1\n        return \"No\"\n    end\n    file_name = split(file_name,\
    \ '.')\n    if file_name[1] == \"\" || file_name[1][1] in 'a':'z' || file_name[1][1]\
    \ in 'A':'Z'\n        return \"No\"\n    end\n    if file_name[2] in [\"txt\"\
    , \"exe\", \"dll\"]\n        return \"Yes\"\n    end\n    return \"No\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptr30aghg.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching (::Colon)(::Char, ::Int64, ::Int64)\\n  Closest candidates\
    \ are:\\n    (::Colon)(!Matched::T, ::T, ::T) where T<:Real at range.jl:22\\n\
    \    (::Colon)(!Matched::T, ::Any, ::T) where T<:Real at range.jl:41\\n    (::Colon)(!Matched::A,\
    \ ::Any, ::C) where {A<:Real, C<:Real} at range.jl:10\\n    ...\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmptr30aghg.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmptr30aghg.jl:41 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptr30aghg.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmptr30aghg.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching (::Colon)(::Char,\
    \ ::Int64, ::Int64)\\n  Closest candidates are:\\n    (::Colon)(!Matched::T, ::T,\
    \ ::T) where T<:Real at range.jl:22\\n    (::Colon)(!Matched::T, ::Any, ::T) where\
    \ T<:Real at range.jl:41\\n    (::Colon)(!Matched::A, ::Any, ::C) where {A<:Real,\
    \ C<:Real} at range.jl:10\\n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmptr30aghg.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmptr30aghg.jl:42\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptr30aghg.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmptr30aghg.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: no method matching (::Colon)(::Char,\
    \ ::Int64, ::Int64)\\n  Closest candidates are:\\n    (::Colon)(!Matched::T, ::T,\
    \ ::T) where T<:Real at range.jl:22\\n    (::Colon)(!Matched::T, ::Any, ::T) where\
    \ T<:Real at range.jl:41\\n    (::Colon)(!Matched::A, ::Any, ::C) where {A<:Real,\
    \ C<:Real} at range.jl:10\\n    ...\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if file_name[1] in '0123456789'\n        return\
    \ \"No\"\n    end\n    if file_name[end] in '0123456789'\n        return \"No\"\
    \n    end\n    if file_name[end] == '.'\n        return \"No\"\n    end\n    if\
    \ file_name[1] == '.'\n        return \"No\"\n    end\n    if file_name[end-1]\
    \ == '.'\n        return \"No\"\n    end\n    if file_name[end-2] == '.'\n   \
    \     return \"No\"\n    end\n    if file_name[end-3] == '.'\n        return \"\
    No\"\n    end\n    if file_name[end-4] == '.'\n        return \"No\"\n    end\n\
    \    if file_name[end-5] == '.'\n        return \"No\"\n    end\n    if file_name[end-6]\
    \ == '.'\n        return \"No\"\n    end\n    if file_name[end-7] == '.'\n   \
    \     return \"No\"\n    end\n    if file_name[end-8] == '.'\n        return \"\
    No\"\n    end\n    if file_name[end-9] == '.'\n        return \"No\"\n    end\n\
    \    if file_name[end-10] == '.'\n        return \"No\"\n    end\n    if file_name[end-11]\
    \ == '.'\n        return \"No\"\n    end\n    if file_name[end-12] == '.'\n  \
    \      return \"No\"\n    end\n    if file_name[end-13] == '.'\n        return\
    \ \"No\"\n    end\n    if file_name[end-14] == '.'\n        return \"No\"\n  \
    \  end\n    if file_name[end-15] == '.'\n        return \"No\"\n    end\n    if\
    \ file_name[end-16] == '.'\n        return \"No\"\n    end\n    if file_name[end-17\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpqqg3ygyd.jl:21\nin expression\
    \ starting at /tmp/tmpqqg3ygyd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 2\n        return \"No\"\
    \n    end\n    if length(file_name) == 3\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 5\n        return \"No\"\n    end\n    if length(file_name) == 6\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 7\n        return \"No\"\
    \n    end\n    if length(file_name) == 8\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 9\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 10\n        return \"No\"\n    end\n    if length(file_name) == 11\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 12\n        return \"\
    No\"\n    end\n    if length(file_name) == 13\n        return \"No\"\n    end\n\
    \    if length(file_name) == 14\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 15\n        return \"No\"\n    end\n    if length(file_name) == 16\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 17\n        return \"\
    No\"\n    end\n    if length(file_name) == 18\n        return \"No\"\n    end\n\
    \    if length(file_name) == 19\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 20\n        return \"No\"\n    end\n    if length(file_name) == 21\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 22\n        return \"\
    No\"\n    end\n    if length(file_name) == 23\n        return \"No\"\n    end\n\
    \    if length(file_name) == 24\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 25\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7q8awd7r.jl:1\nin expression starting at /tmp/tmp7q8awd7r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgrlbdxuf.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpgrlbdxuf.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpgrlbdxuf.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgrlbdxuf.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpgrlbdxuf.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpgrlbdxuf.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpgrlbdxuf.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgrlbdxuf.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpgrlbdxuf.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  if file_name[1] in ('a'-'z', 'A'-'Z')\n            return \"No\"\n        else\n\
    \            return \"Yes\"\n        end\n    end\n    if length(file_name) ==\
    \ 2\n        if file_name[1] in ('a'-'z', 'A'-'Z') && file_name[2] == '.'\n  \
    \          return \"No\"\n        else\n            return \"Yes\"\n        end\n\
    \    end\n    if length(file_name) == 3\n        if file_name[1] in ('a'-'z',\
    \ 'A'-'Z') && file_name[2] == '.' && file_name[3] in ('a'-'z', 'A'-'Z')\n    \
    \        return \"No\"\n        else\n            return \"Yes\"\n        end\n\
    \    end\n    if length(file_name) == 4\n        if file_name[1] in ('a'-'z',\
    \ 'A'-'Z') && file_name[2] == '.' && file_name[3] in ('a'-'z', 'A'-'Z') && file_name[4]\
    \ in ('a'-'z', 'A'-'Z')\n            return \"No\"\n        else\n           \
    \ return \"Yes\"\n        end\n    end\n    if length(file_name) == 5\n      \
    \  if file_name[1] in ('a'-'z', 'A'-'Z') && file_name[2] == '.' && file_name[3]\
    \ in ('a'-'z', 'A'-'Z') && file_name[4] in ('a'-'z', 'A'-'Z') && file_name[5]\
    \ in ('a'-'z', 'A'-'Z')\n            return \"No\"\n        else\n           \
    \ return \"Yes\"\n        end\n    end\n    if length(file_name) == 6\n      \
    \  if file_name[1] in ('a'-'z', 'A'-'Z') && file_name[2] == '.' && file_name[3]\
    \ in ('a'-'z', 'A'-'Z\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpwj5m_a4i.jl:60\nin expression starting at /tmp/tmpwj5m_a4i.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 2\n        return \"No\"\
    \n    end\n    if length(file_name) == 3\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 5\n        return \"No\"\n    end\n    if length(file_name) == 6\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 7\n        return \"No\"\
    \n    end\n    if length(file_name) == 8\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 9\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 10\n        return \"No\"\n    end\n    if length(file_name) == 11\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 12\n        return \"\
    No\"\n    end\n    if length(file_name) == 13\n        return \"No\"\n    end\n\
    \    if length(file_name) == 14\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 15\n        return \"No\"\n    end\n    if length(file_name) == 16\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 17\n        return \"\
    No\"\n    end\n    if length(file_name) == 18\n        return \"No\"\n    end\n\
    \    if length(file_name) == 19\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 20\n        return \"No\"\n    end\n    if length(file_name) == 21\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 22\n        return \"\
    No\"\n    end\n    if length(file_name) == 23\n        return \"No\"\n    end\n\
    \    if length(file_name) == 24\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 25\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqa_kvskr.jl:1\nin expression starting at /tmp/tmpqa_kvskr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2ljt9pum.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp2ljt9pum.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp2ljt9pum.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2ljt9pum.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp2ljt9pum.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp2ljt9pum.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp2ljt9pum.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2ljt9pum.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp2ljt9pum.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpni2lhp0g.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpni2lhp0g.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpni2lhp0g.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpni2lhp0g.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpni2lhp0g.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpni2lhp0g.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpni2lhp0g.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpni2lhp0g.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpni2lhp0g.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if file_name[1] in 'a':'z' || file_name[1] in 'A':'Z'\n\
    \        if file_name[end-3:end] in [\"txt\", \"exe\", \"dll\"]\n            return\
    \ \"Yes\"\n        end\n    end\n    return \"No\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5d2ospj0.jl:39\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5d2ospj0.jl:39 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5d2ospj0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5d2ospj0.jl:42\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5d2ospj0.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5d2ospj0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5d2ospj0.jl:43\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5d2ospj0.jl:43 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5d2ospj0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5d2ospj0.jl:49\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5d2ospj0.jl:49 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5d2ospj0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5d2ospj0.jl:55\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5d2ospj0.jl:55 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5d2ospj0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5d2ospj0.jl:56\n  Expression: candidate(\"Is3youfault.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5d2ospj0.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 18 passed, 7 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5d2ospj0.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4kp75wrk.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp4kp75wrk.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp4kp75wrk.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4kp75wrk.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp4kp75wrk.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp4kp75wrk.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp4kp75wrk.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4kp75wrk.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp4kp75wrk.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\n \
    \   return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaujhxn_q.jl:24\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpaujhxn_q.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaujhxn_q.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaujhxn_q.jl:25\n  Expression: candidate(\"s1sdf3.asd\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpaujhxn_q.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaujhxn_q.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaujhxn_q.jl:28\n  Expression: candidate(\"His12FILE94.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpaujhxn_q.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaujhxn_q.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaujhxn_q.jl:29\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpaujhxn_q.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaujhxn_q.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaujhxn_q.jl:30\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpaujhxn_q.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaujhxn_q.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpaujhxn_q.jl:31\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpaujhxn_q.jl:31 [inl"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 19 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaujhxn_q.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfn616d9m.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpfn616d9m.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpfn616d9m.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfn616d9m.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpfn616d9m.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpfn616d9m.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpfn616d9m.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfn616d9m.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpfn616d9m.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbn7mocne.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpbn7mocne.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpbn7mocne.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbn7mocne.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpbn7mocne.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpbn7mocne.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpbn7mocne.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbn7mocne.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpbn7mocne.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo92sz9uj.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpo92sz9uj.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpo92sz9uj.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo92sz9uj.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpo92sz9uj.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpo92sz9uj.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpo92sz9uj.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo92sz9uj.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpo92sz9uj.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt3bdi9_o.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpt3bdi9_o.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpt3bdi9_o.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpt3bdi9_o.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpt3bdi9_o.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpt3bdi9_o.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpt3bdi9_o.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpt3bdi9_o.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpt3bdi9_o.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if count(x->x in 'a':'z' || x in 'A':'Z',\
    \ file_name) == 0\n        return \"No\"\n    end\n    if count(x->x in 'a':'z'\
    \ || x in 'A':'Z', file_name) == 0\n        return \"No\"\n    end\n    if !(file_name[end-2:end]\
    \ in [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8mx10pg3.jl:41\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp8mx10pg3.jl:41 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8mx10pg3.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp8mx10pg3.jl:46\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp8mx10pg3.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8mx10pg3.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp8mx10pg3.jl:47\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8mx10pg3.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8mx10pg3.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp8mx10pg3.jl:48\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8mx10pg3.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8mx10pg3.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp8mx10pg3.jl:51\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8mx10pg3.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8mx10pg3.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp8mx10pg3.jl:53\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8mx1"
  stderr: "ERROR: LoadError: Some tests did not pass: 18 passed, 7 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8mx10pg3.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code goes here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbo2_gsf0.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpbo2_gsf0.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpbo2_gsf0.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbo2_gsf0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpbo2_gsf0.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpbo2_gsf0.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpbo2_gsf0.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbo2_gsf0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpbo2_gsf0.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if count(x -> x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x -> x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if !(file_name[1] in 'a':'z' || file_name[1]\
    \ in 'A':'Z')\n        return \"No\"\n    end\n    if !(file_name[end-3:end] in\
    \ [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return \"\
    Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0xhxkwyx.jl:37\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp0xhxkwyx.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0xhxkwyx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0xhxkwyx.jl:40\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0xhxkwyx.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0xhxkwyx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0xhxkwyx.jl:41\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0xhxkwyx.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0xhxkwyx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0xhxkwyx.jl:47\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0xhxkwyx.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0xhxkwyx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0xhxkwyx.jl:53\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0xhxkwyx.jl:53 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0xhxkwyx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp0xhxkwyx.jl:54\n  Expression: candidate(\"Is3youfault.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0xhxkwyx.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0xhxkwyx.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcfj3ckbj.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpcfj3ckbj.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpcfj3ckbj.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcfj3ckbj.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpcfj3ckbj.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpcfj3ckbj.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpcfj3ckbj.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcfj3ckbj.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpcfj3ckbj.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxl_drm6c.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpxl_drm6c.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpxl_drm6c.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxl_drm6c.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpxl_drm6c.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpxl_drm6c.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpxl_drm6c.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxl_drm6c.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpxl_drm6c.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(occursin(r\"^[a-zA-Z]\", file_name))\n\
    \        return \"No\"\n    end\n    if !(occursin(r\"\\.(txt|exe|dll)$\", file_name))\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if !(file_name[1] in 'a':'z' || file_name[1]\
    \ in 'A':'Z')\n        return \"No\"\n    end\n    if !(file_name[end-2:end] in\
    \ [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return \"\
    Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyzaj1qed.jl:48\n  Expression: candidate(\"\
    this_is_valid.txtexe\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyzaj1qed.jl:48 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyzaj1qed.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpyzaj1qed.jl:62\n  Test threw exception\n  Expression:\
    \ candidate(\"s.\") == \"No\"\n  BoundsError: attempt to access 2-codeunit String\
    \ at index [0:2]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ file_name_check(file_name::String)\n     @ Main /tmp/tmpyzaj1qed.jl:27\n   [4]\
    \ macro expansion\n     @ /tmp/tmpyzaj1qed.jl:62 [inlined]\n   [5] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyzaj1qed.jl:36\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |   24     1      1     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 24 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyzaj1qed.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if file_name[1] in '0123456789'\n        return\
    \ \"No\"\n    end\n    if file_name[end] in '0123456789'\n        return \"No\"\
    \n    end\n    if file_name[end] in 'abcdefghijklmnopqrstuvwxyz'\n        return\
    \ \"No\"\n    end\n    if file_name[end] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n   \
    \     return \"No\"\n    end\n    if file_name[end] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \        return \"No\"\n    end\n    if file_name[end] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \        return \"No\"\n    end\n    if file_name[end] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \        return \"No\"\n    end\n    if file_name[end] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \        return \"No\"\n    end\n    if file_name[end] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \        return \"No\"\n    end\n    if file_name[end] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \        return \"No\"\n    end\n    if file_name[end] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \        return \"No\"\n    end\n    if file_name[end] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \        return \"No\"\n    end\n    if file_name[end] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \        return \"No\"\n    end\n    if file_name[end] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \        return\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp4ok3593f.jl:21\nin expression\
    \ starting at /tmp/tmp4ok3593f.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  if file_name[1] in ('a':'z', 'A':'Z')\n            return \"No\"\n        else\n\
    \            return \"No\"\n        end\n    end\n    if length(file_name) ==\
    \ 2\n        if file_name[1] in ('a':'z', 'A':'Z')\n            if file_name[2]\
    \ == '.'\n                return \"No\"\n            else\n                return\
    \ \"No\"\n            end\n        else\n            return \"No\"\n        end\n\
    \    end\n    if length(file_name) == 3\n        if file_name[1] in ('a':'z',\
    \ 'A':'Z')\n            if file_name[2] == '.'\n                if file_name[3]\
    \ in ('a':'z', 'A':'Z')\n                    return \"No\"\n                else\n\
    \                    return \"No\"\n                end\n            else\n  \
    \              return \"No\"\n            end\n        else\n            return\
    \ \"No\"\n        end\n    end\n    if length(file_name) == 4\n        if file_name[1]\
    \ in ('a':'z', 'A':'Z')\n            if file_name[2] == '.'\n                if\
    \ file_name[3] in ('a':'z', 'A':'Z')\n                    if file_name[4] in ('a':'z',\
    \ 'A':'Z')\n                        return \"No\"\n                    else\n\
    \                        return \"No\"\n                    end\n            \
    \    else\n                    return \"No\"\n                end\n          \
    \  else\n                return \"No\"\n            end\n        else\n      \
    \      return \"No\"\n        end\n    end\n    if length(file_name) == 5\n  \
    \      if file_name[1] in ('a':'z', 'A':'Z')\n            if file_name[2] == '.'\n\
    \                if file_name[3] in ('a':'z', 'A':'Z')\n                    if\
    \ file_name[4] in ('a':'z', 'A':'Z')\n                        if file_name[5]\
    \ in ('a':\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpztcupzr2.jl:78\nin expression starting at\
    \ /tmp/tmpztcupzr2.jl:78\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 2\n        return \"No\"\
    \n    end\n    if length(file_name) == 3\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 5\n        return \"No\"\n    end\n    if length(file_name) == 6\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 7\n        return \"No\"\
    \n    end\n    if length(file_name) == 8\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 9\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 10\n        return \"No\"\n    end\n    if length(file_name) == 11\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 12\n        return \"\
    No\"\n    end\n    if length(file_name) == 13\n        return \"No\"\n    end\n\
    \    if length(file_name) == 14\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 15\n        return \"No\"\n    end\n    if length(file_name) == 16\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 17\n        return \"\
    No\"\n    end\n    if length(file_name) == 18\n        return \"No\"\n    end\n\
    \    if length(file_name) == 19\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 20\n        return \"No\"\n    end\n    if length(file_name) == 21\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 22\n        return \"\
    No\"\n    end\n    if length(file_name) == 23\n        return \"No\"\n    end\n\
    \    if length(file_name) == 24\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 25\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdf33m4z0.jl:1\nin expression starting at /tmp/tmpdf33m4z0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 2\n        return \"No\"\
    \n    end\n    if length(file_name) == 3\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 5\n        return \"No\"\n    end\n    if length(file_name) == 6\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 7\n        return \"No\"\
    \n    end\n    if length(file_name) == 8\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 9\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 10\n        return \"No\"\n    end\n    if length(file_name) == 11\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 12\n        return \"\
    No\"\n    end\n    if length(file_name) == 13\n        return \"No\"\n    end\n\
    \    if length(file_name) == 14\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 15\n        return \"No\"\n    end\n    if length(file_name) == 16\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 17\n        return \"\
    No\"\n    end\n    if length(file_name) == 18\n        return \"No\"\n    end\n\
    \    if length(file_name) == 19\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 20\n        return \"No\"\n    end\n    if length(file_name) == 21\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 22\n        return \"\
    No\"\n    end\n    if length(file_name) == 23\n        return \"No\"\n    end\n\
    \    if length(file_name) == 24\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 25\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpej6ullgz.jl:1\nin expression starting at /tmp/tmpej6ullgz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwco4jcrf.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpwco4jcrf.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpwco4jcrf.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwco4jcrf.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpwco4jcrf.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpwco4jcrf.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpwco4jcrf.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwco4jcrf.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpwco4jcrf.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  if file_name[1] in ('a':'z', 'A':'Z')\n            return \"No\"\n        else\n\
    \            return \"No\"\n        end\n    end\n    if length(file_name) ==\
    \ 2\n        if file_name[1] in ('a':'z', 'A':'Z')\n            if file_name[2]\
    \ == '.'\n                return \"No\"\n            else\n                return\
    \ \"No\"\n            end\n        else\n            return \"No\"\n        end\n\
    \    end\n    if length(file_name) == 3\n        if file_name[1] in ('a':'z',\
    \ 'A':'Z')\n            if file_name[2] == '.'\n                if file_name[3]\
    \ in ('a':'z', 'A':'Z')\n                    return \"No\"\n                else\n\
    \                    return \"No\"\n                end\n            else\n  \
    \              return \"No\"\n            end\n        else\n            return\
    \ \"No\"\n        end\n    end\n    if length(file_name) == 4\n        if file_name[1]\
    \ in ('a':'z', 'A':'Z')\n            if file_name[2] == '.'\n                if\
    \ file_name[3] in ('a':'z', 'A':'Z')\n                    if file_name[4] in ('a':'z',\
    \ 'A':'Z')\n                        return \"No\"\n                    else\n\
    \                        return \"No\"\n                    end\n            \
    \    else\n                    return \"No\"\n                end\n          \
    \  else\n                return \"No\"\n            end\n        else\n      \
    \      return \"No\"\n        end\n    end\n    if length(file_name) == 5\n  \
    \      if file_name[1] in ('a':'z', 'A':'Z')\n            if file_name[2] == '.'\n\
    \                if file_name[3] in ('a':'z', 'A':'Z')\n                    if\
    \ file_name[4] in ('a':'z', 'A':'Z')\n                        if file_name[5]\
    \ in ('a':\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyjx4gpoi.jl:78\nin expression starting at\
    \ /tmp/tmpyjx4gpoi.jl:78\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if count(x -> x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x -> x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if !(file_name[1] in 'a':'z' || file_name[1]\
    \ in 'A':'Z')\n        return \"No\"\n    end\n    if file_name[end-3:end] !=\
    \ \".txt\" && file_name[end-3:end] != \".exe\" && file_name[end-3:end] != \".dll\"\
    \n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits = 0\n    dot\
    \ = false\n    for c in file_name\n        if c in '0'::9\n            digits\
    \ += 1\n        elseif c == '.'\n            dot = true\n        end\n    end\n\
    \    if digits > 3 || !dot\n        return \"No\"\n    end\n    file_name = split(file_name,\
    \ '.')\n    if file_name[1] == \"\" || file_name[1][1] in '0'::9\n        return\
    \ \"No\"\n    end\n    if file_name[2] != \"txt\" && file_name[2] != \"exe\" &&\
    \ file_name[2] != \"dll\"\n        return \"No\"\n    end\n    return \"Yes\"\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbo0hdvv1.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  TypeError:\
    \ in typeassert, expected Type, got a value of type Int64\\n  Stacktrace:\\n \
    \  [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpbo0hdvv1.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpbo0hdvv1.jl:41 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbo0hdvv1.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpbo0hdvv1.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpbo0hdvv1.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmpbo0hdvv1.jl:42\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbo0hdvv1.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpbo0hdvv1.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  TypeError: in typeassert, expected Type,\
    \ got a value of type Int64\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpbo0hdvv1.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmpbo0hdvv1.jl:43\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbo0hdvv1.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpbo0hdvv1.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\\n  TypeError: in typeassert, expected Type,\
    \ got a value of type Int64\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpbo0hdvv1.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmpbo0hdvv1.jl:44\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(match(r\"^[a-zA-Z]\", file_name).match\
    \ == file_name[1])\n        return \"No\"\n    end\n    if !(match(r\"\\.[a-zA-Z]+$\"\
    , file_name).match == file_name[end-3:end])\n        return \"No\"\n    end\n\
    \    if !(match(r\"\\.[a-zA-Z]+$\", file_name).match in [\"txt\", \"exe\", \"\
    dll\"])\n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpu0gxy5zm.jl:37\\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpu0gxy5zm.jl:37 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpu0gxy5zm.jl:36\\ntest set: Error\
    \ During Test at /tmp/tmpu0gxy5zm.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  type Nothing has no field match\\\
    n  Stacktrace:\\n   [1] getproperty(x::Nothing, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] file_name_check(file_name::String)\\n     @ Main /tmp/tmpu0gxy5zm.jl:21\\\
    n   [3] macro expansion\\n     @ /tmp/tmpu0gxy5zm.jl:38 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpu0gxy5zm.jl:36\\ntest set:\
    \ Test Failed at /tmp/tmpu0gxy5zm.jl:40\\n  Expression: candidate(\"K.dll\") ==\
    \ \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpu0gxy5zm.jl:40 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpu0gxy5zm.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpu0gxy5zm.jl:41\\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpu0gxy5zm.jl:41 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpu0gxy5zm.jl:36\\ntest set: Error\
    \ During Test at /tmp/tmpu0gxy5zm.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(\"_Y.txt\") == \"No\"\\n  type Nothing has no field match\\n  Stacktrace:\\\
    n   [1] getproperty(x::Nothing, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ file_name_check(file_name::String)\\n     @ Main /tmp/tmpu0gxy5zm.jl:21\\n \
    \  ["
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n     \
    \   return \"No\"\n    end\n    if length(file_name) == 1\n        return \"No\"\
    \n    end\n    if file_name[2] in '0':'9'\n        return \"No\"\n    end\n  \
    \  if length(file_name) == 2\n        return \"No\"\n    end\n    if file_name[3]\
    \ in '0':'9'\n        return \"No\"\n    end\n    if length(file_name) == 3\n\
    \        return \"No\"\n    end\n    if file_name[4] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if length(file_name) == 4\n        return \"No\"\n    end\n\
    \    if file_name[5] in '0':'9'\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 5\n        return \"No\"\n    end\n    if file_name[6] in '0':'9'\n     \
    \   return \"No\"\n    end\n    if length(file_name) == 6\n        return \"No\"\
    \n    end\n    if file_name[7] in '0':'9'\n        return \"No\"\n    end\n  \
    \  if length(file_name) == 7\n        return \"No\"\n    end\n    if file_name[8]\
    \ in '0':'9'\n        return \"No\"\n    end\n    if length(file_name) == 8\n\
    \        return \"No\"\n    end\n    if file_name[9] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if length(file_name) == 9\n        return \"No\"\n    end\n\
    \    if file_name[10] in '0':'9'\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 10\n        return \"No\"\n    end\n    if file_name[11] in '0':'9'\n   \
    \     return \"No\"\n    end\n    if length(file_name) == 11\n        return \"\
    No\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptpitnj2_.jl:1\nin expression starting at /tmp/tmptpitnj2_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp26r87gw8.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp26r87gw8.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp26r87gw8.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp26r87gw8.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp26r87gw8.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp26r87gw8.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp26r87gw8.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp26r87gw8.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp26r87gw8.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpty51gnb9.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpty51gnb9.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpty51gnb9.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpty51gnb9.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpty51gnb9.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpty51gnb9.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpty51gnb9.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpty51gnb9.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpty51gnb9.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0zagf9ch.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp0zagf9ch.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp0zagf9ch.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0zagf9ch.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp0zagf9ch.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp0zagf9ch.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp0zagf9ch.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0zagf9ch.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp0zagf9ch.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkmnkicw9.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpkmnkicw9.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpkmnkicw9.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkmnkicw9.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpkmnkicw9.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpkmnkicw9.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpkmnkicw9.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkmnkicw9.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpkmnkicw9.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptzj98rp0.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmptzj98rp0.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmptzj98rp0.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptzj98rp0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmptzj98rp0.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmptzj98rp0.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmptzj98rp0.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptzj98rp0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmptzj98rp0.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwg0mjvic.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpwg0mjvic.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpwg0mjvic.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwg0mjvic.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpwg0mjvic.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpwg0mjvic.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpwg0mjvic.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwg0mjvic.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpwg0mjvic.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(occursin(r\"^[a-zA-Z]\", file_name))\n\
    \        return \"No\"\n    end\n    if !(occursin(r\"\\.[a-zA-Z]{3}$\", file_name))\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpygfsa9yj.jl:36\n  Expression: candidate(\"\
    s1sdf3.asd\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpygfsa9yj.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygfsa9yj.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpygfsa9yj.jl:43\n  Expression: candidate(\"this_is_valid.wow\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpygfsa9yj.jl:43 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygfsa9yj.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   24     2     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 24 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpygfsa9yj.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(match(r\"^[a-zA-Z]+\", file_name) !=\
    \ nothing)\n        return \"No\"\n    end\n    if !(match(r\"\\.(txt|exe|dll)$\"\
    , file_name) != nothing)\n        return \"No\"\n    end\n    return \"Yes\"\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if count(x -> x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x -> x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n     \
    \   return \"No\"\n    end\n    if file_name[end-3:end] != \".txt\" && file_name[end-3:end]\
    \ != \".exe\" && file_name[end-3:end] != \".dll\"\n        return \"No\"\n   \
    \ end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx1q6y9h4.jl:43\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpx1q6y9h4.jl:43 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1q6y9h4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpx1q6y9h4.jl:44\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx1q6y9h4.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1q6y9h4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpx1q6y9h4.jl:45\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx1q6y9h4.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1q6y9h4.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpx1q6y9h4.jl:50\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx1q6y9h4.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1q6y9h4.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   22     4     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 22 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx1q6y9h4.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(match(r\"^[a-zA-Z]\", file_name).match)\n\
    \        return \"No\"\n    end\n    if !(match(r\"\\.(txt|exe|dll)$\", file_name).match)\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw34m24ly.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching !(::SubString{String})\\n  Closest candidates are:\\n   \
    \ !(!Matched::Bool) at bool.jl:33\\n    !(!Matched::Function) at operators.jl:968\\\
    n    !(!Matched::Missing) at missing.jl:101\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpw34m24ly.jl:21\\n   [2] macro expansion\\n     @ /tmp/tmpw34m24ly.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw34m24ly.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpw34m24ly.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  type Nothing has no field match\\\
    n  Stacktrace:\\n   [1] getproperty(x::Nothing, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] file_name_check(file_name::String)\\n     @ Main /tmp/tmpw34m24ly.jl:21\\\
    n   [3] macro expansion\\n     @ /tmp/tmpw34m24ly.jl:35 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpw34m24ly.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpw34m24ly.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: no method matching !(::SubString{String})\\\
    n  Closest candidates are:\\n    !(!Matched::Bool) at bool.jl:33\\n    !(!Matched::Function)\
    \ at operators.jl:968\\n    !(!Matched::Missing) at missing.jl:101\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpw34m24ly.jl:21\\\
    n   [2] macro expansion\\n     @ /tmp/tmpw34m24ly.jl:36 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw34m24ly.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpw34m24ly.jl:37\\n  Test threw exception\\n  Expressio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n     \
    \   return \"No\"\n    end\n    if count(x->x in '0':'9', file_name) > 3\n   \
    \     return \"No\"\n    end\n    if count(x->x == '.', file_name) != 1\n    \
    \    return \"No\"\n    end\n    if file_name[end-2:end] != \"txt\" && file_name[end-2:end]\
    \ != \"exe\" && file_name[end-2:end] != \"dll\"\n        return \"No\"\n    end\n\
    \    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgobvbb1j.jl:43\\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpgobvbb1j.jl:43 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgobvbb1j.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpgobvbb1j.jl:44\\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpgobvbb1j.jl:44 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgobvbb1j.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpgobvbb1j.jl:45\\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpgobvbb1j.jl:45 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgobvbb1j.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpgobvbb1j.jl:48\\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpgobvbb1j.jl:48 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgobvbb1j.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpgobvbb1j.jl:50\\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpgobvbb1j.jl:50 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgobvbb1j.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpgobvbb1j.jl:61\\n  Expression: candidate(\".txt\") == \"No\"\
    \\n   Evaluated: \"Yes\" == \"No\"\\nSta"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # check if the file\
    \ name contains more than three digits\n    if length(filter(x -> x in '0':'9',\
    \ file_name)) > 3\n        return \"No\"\n    end\n    # check if the file name\
    \ contains exactly one dot\n    if length(filter(x -> x == '.', file_name)) !=\
    \ 1\n        return \"No\"\n    end\n    # check if the substring before the dot\
    \ is not empty, and it starts with a letter from the latin alphapet\n    if !(file_name[1]\
    \ in 'a':'z' || file_name[1] in 'A':'Z')\n        return \"No\"\n    end\n   \
    \ # check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\
    \    if !(file_name[end-2:end] in [\"txt\", \"exe\", \"dll\"])\n        return\
    \ \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpi4v_et4c.jl:49\\n  Expression: candidate(\"\
    this_is_valid.txtexe\") == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpi4v_et4c.jl:49 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpi4v_et4c.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpi4v_et4c.jl:63\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s.\") == \"No\"\\n  BoundsError: attempt to access 2-codeunit String\
    \ at index [0:2]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] getindex\\n     @ ./strings/string.jl:261 [inlined]\\n  \
    \ [3] file_name_check(file_name::String)\\n     @ Main /tmp/tmpi4v_et4c.jl:28\\\
    n   [4] macro expansion\\n     @ /tmp/tmpi4v_et4c.jl:63 [inlined]\\n   [5] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpi4v_et4c.jl:37\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |   24     1      1     26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if count(x -> x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x -> x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n     \
    \   return \"No\"\n    end\n    if file_name[end-3:end] != \".txt\" && file_name[end-3:end]\
    \ != \".exe\" && file_name[end-3:end] != \".dll\"\n        return \"No\"\n   \
    \ end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpngpnzpeq.jl:43\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpngpnzpeq.jl:43 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpngpnzpeq.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpngpnzpeq.jl:44\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpngpnzpeq.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpngpnzpeq.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpngpnzpeq.jl:45\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpngpnzpeq.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpngpnzpeq.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpngpnzpeq.jl:50\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpngpnzpeq.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpngpnzpeq.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   22     4     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 22 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpngpnzpeq.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjlybet9_.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpjlybet9_.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpjlybet9_.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjlybet9_.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpjlybet9_.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpjlybet9_.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpjlybet9_.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjlybet9_.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpjlybet9_.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4kw78uv0.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp4kw78uv0.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp4kw78uv0.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4kw78uv0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp4kw78uv0.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp4kw78uv0.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp4kw78uv0.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4kw78uv0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp4kw78uv0.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpizc42fno.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpizc42fno.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpizc42fno.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpizc42fno.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpizc42fno.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpizc42fno.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpizc42fno.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpizc42fno.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpizc42fno.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp185z0x_8.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp185z0x_8.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp185z0x_8.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp185z0x_8.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp185z0x_8.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp185z0x_8.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp185z0x_8.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp185z0x_8.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp185z0x_8.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if count(x -> x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x -> x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n     \
    \   return \"No\"\n    end\n    if file_name[end-3:end] != \".txt\" && file_name[end-3:end]\
    \ != \".exe\" && file_name[end-3:end] != \".dll\"\n        return \"No\"\n   \
    \ end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvvdie39w.jl:43\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvvdie39w.jl:43 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvvdie39w.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvvdie39w.jl:44\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvvdie39w.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvvdie39w.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvvdie39w.jl:45\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvvdie39w.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvvdie39w.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvvdie39w.jl:50\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvvdie39w.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvvdie39w.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   22     4     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 22 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvvdie39w.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if file_name[end] in '0':'9'\n        return \"No\"\n \
    \   end\n    if file_name[end-2:end] != \"txt\" && file_name[end-2:end] != \"\
    exe\" && file_name[end-2:end] != \"dll\"\n        return \"No\"\n    end\n   \
    \ return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplgb3gy0f.jl:46\\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmplgb3gy0f.jl:46 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmplgb3gy0f.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmplgb3gy0f.jl:47\\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmplgb3gy0f.jl:47 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmplgb3gy0f.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmplgb3gy0f.jl:48\\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmplgb3gy0f.jl:48 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmplgb3gy0f.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmplgb3gy0f.jl:51\\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmplgb3gy0f.jl:51 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmplgb3gy0f.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmplgb3gy0f.jl:53\\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmplgb3gy0f.jl:53 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmplgb3gy0f.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmplgb3gy0f.jl:64\\n  Expression: candidate(\".txt\") == \"No\"\
    \\n   Evaluated: \"Yes\" == \"No\"\\nSta"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    n = length(file_name)\n\
    \    if n < 5\n        return \"No\"\n    end\n    if file_name[end-3:end] !=\
    \ \".txt\" && file_name[end-3:end] != \".exe\" && file_name[end-3:end] != \".dll\"\
    \n        return \"No\"\n    end\n    if file_name[1] == \".\" || file_name[end]\
    \ == \".\"\n        return \"No\"\n    end\n    if file_name[1] == \"0\" || file_name[1]\
    \ == \"1\" || file_name[1] == \"2\" || file_name[1] == \"3\" || file_name[1] ==\
    \ \"4\" || file_name[1] == \"5\" || file_name[1] == \"6\" || file_name[1] == \"\
    7\" || file_name[1] == \"8\" || file_name[1] == \"9\"\n        return \"No\"\n\
    \    end\n    if file_name[2] == \"0\" || file_name[2] == \"1\" || file_name[2]\
    \ == \"2\" || file_name[2] == \"3\" || file_name[2] == \"4\" || file_name[2] ==\
    \ \"5\" || file_name[2] == \"6\" || file_name[2] == \"7\" || file_name[2] == \"\
    8\" || file_name[2] == \"9\"\n        return \"No\"\n    end\n    if file_name[3]\
    \ == \"0\" || file_name[3] == \"1\" || file_name[3] == \"2\" || file_name[3] ==\
    \ \"3\" || file_name[3] == \"4\" || file_name[3] == \"5\" || file_name[3] == \"\
    6\" || file_name[3] == \"7\" || file_name[3] == \"8\" || file_name[3] == \"9\"\
    \n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpec1cuivw.jl:42\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpec1cuivw.jl:42 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpec1cuivw.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpec1cuivw.jl:46\n  Expression: candidate(\"His12FILE94.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpec1cuivw.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpec1cuivw.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpec1cuivw.jl:47\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpec1cuivw.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpec1cuivw.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpec1cuivw.jl:48\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpec1cuivw.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpec1cuivw.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpec1cuivw.jl:49\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpec1cuivw.jl:49 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpec1cuivw.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpec1cuivw.jl:54\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpec1cuivw."
  stderr: "ERROR: LoadError: Some tests did not pass: 16 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpec1cuivw.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code goes here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl11gk01o.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpl11gk01o.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpl11gk01o.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl11gk01o.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpl11gk01o.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpl11gk01o.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpl11gk01o.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl11gk01o.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpl11gk01o.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if file_name[end-3:end] != \".txt\"\
    \ && file_name[end-3:end] != \".exe\" && file_name[end-3:end] != \".dll\"\n  \
    \      return \"No\"\n    end\n    if file_name[1] < \"a\" || file_name[1] > \"\
    z\"\n        return \"No\"\n    end\n    if count(x -> x >= \"0\" && x <= \"9\"\
    , file_name) > 3\n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzb2m_6os.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching isless(::Char, ::String)\\n  Closest candidates are:\\n \
    \   isless(!Matched::AbstractString, ::AbstractString) at strings/basic.jl:344\\\
    n    isless(::Char, !Matched::Char) at char.jl:209\\n    isless(::AbstractChar,\
    \ !Matched::AbstractChar) at char.jl:216\\n    ...\\n  Stacktrace:\\n   [1] <(x::Char,\
    \ y::String)\\n     @ Base ./operators.jl:279\\n   [2] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpzb2m_6os.jl:21\\n   [3] macro expansion\\n     @ /tmp/tmpzb2m_6os.jl:34\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzb2m_6os.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpzb2m_6os.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching isless(::Char,\
    \ ::String)\\n  Closest candidates are:\\n    isless(!Matched::AbstractString,\
    \ ::AbstractString) at strings/basic.jl:344\\n    isless(::Char, !Matched::Char)\
    \ at char.jl:209\\n    isless(::AbstractChar, !Matched::AbstractChar) at char.jl:216\\\
    n    ...\\n  Stacktrace:\\n   [1] <(x::Char, y::String)\\n     @ Base ./operators.jl:279\\\
    n   [2] file_name_check(file_name::String)\\n     @ Main /tmp/tmpzb2m_6os.jl:21\\\
    n   [3] macro expansion\\n     @ /tmp/tmpzb2m_6os.jl:35 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzb2m_6os.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpzb2m_6os.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\\n  MethodError: no method matching isless(::Char,\
    \ ::String)\\n  Closest candidates are:\\n    isless(!Matched::AbstractString,\
    \ ::AbstractString) at strings/basic.jl:344\\n    isless(::Char, !Matched::Char)\
    \ at char.jl:209\\n    isless(::AbstractChar, !Matched::Abstr"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpovv9snqm.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpovv9snqm.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpovv9snqm.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpovv9snqm.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpovv9snqm.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpovv9snqm.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpovv9snqm.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpovv9snqm.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpovv9snqm.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if count(x -> x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x -> x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if !(file_name[1] in 'a':'z' || file_name[1]\
    \ in 'A':'Z')\n        return \"No\"\n    end\n    if !(file_name[end-3:end] in\
    \ [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return \"\
    Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1bffvhpp.jl:37\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp1bffvhpp.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1bffvhpp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1bffvhpp.jl:40\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1bffvhpp.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1bffvhpp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1bffvhpp.jl:41\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1bffvhpp.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1bffvhpp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1bffvhpp.jl:47\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1bffvhpp.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1bffvhpp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1bffvhpp.jl:53\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1bffvhpp.jl:53 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1bffvhpp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1bffvhpp.jl:54\n  Expression: candidate(\"Is3youfault.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1bffvhpp.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1bffvhpp.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5fr52cvd.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp5fr52cvd.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp5fr52cvd.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5fr52cvd.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp5fr52cvd.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp5fr52cvd.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp5fr52cvd.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5fr52cvd.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp5fr52cvd.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if file_name[1] in '0123456789'\n        return\
    \ \"No\"\n    end\n    if file_name[end] in '0123456789'\n        return \"No\"\
    \n    end\n    if file_name[end] in 'abcdefghijklmnopqrstuvwxyz'\n        return\
    \ \"No\"\n    end\n    if file_name[end] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n   \
    \     return \"No\"\n    end\n    if file_name[end] != '.'\n        return \"\
    No\"\n    end\n    if file_name[end-1] in '0123456789'\n        return \"No\"\n\
    \    end\n    if file_name[end-2] in '0123456789'\n        return \"No\"\n   \
    \ end\n    if file_name[end-3] in '0123456789'\n        return \"No\"\n    end\n\
    \    if file_name[end-4] in '0123456789'\n        return \"No\"\n    end\n   \
    \ if file_name[end-5] in '0123456789'\n        return \"No\"\n    end\n    if\
    \ file_name[end-6] in '0123456789'\n        return \"No\"\n    end\n    if file_name[end-7]\
    \ in '0123456789'\n        return \"No\"\n    end\n    if file_name[end-8] in\
    \ '0123456789'\n        return \"No\"\n    end\n    if file_name[end-9] in '0123456789'\n\
    \        return \"No\"\n    end\n    if file_name[end-10] in '0123456789'\n  \
    \      return \"No\"\n    end\n    if file_name[end-11] in '0123456789'\n    \
    \    return \"No\"\n    end\n    if file_name[end-12] in '0123456789'\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpp38mts1q.jl:21\nin expression\
    \ starting at /tmp/tmpp38mts1q.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpddl1eib2.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpddl1eib2.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpddl1eib2.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpddl1eib2.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpddl1eib2.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpddl1eib2.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpddl1eib2.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpddl1eib2.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpddl1eib2.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(match(r\"^[a-zA-Z]\", file_name).match\
    \ == \"\")\n        return \"No\"\n    end\n    if !(match(r\"\\.(txt|exe|dll)$\"\
    , file_name).match == \"\")\n        return \"No\"\n    end\n    return \"Yes\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0skfn7dg.jl:34\\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp0skfn7dg.jl:34 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0skfn7dg.jl:33\\ntest set: Error\
    \ During Test at /tmp/tmp0skfn7dg.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  type Nothing has no field match\\\
    n  Stacktrace:\\n   [1] getproperty(x::Nothing, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] file_name_check(file_name::String)\\n     @ Main /tmp/tmp0skfn7dg.jl:21\\\
    n   [3] macro expansion\\n     @ /tmp/tmp0skfn7dg.jl:35 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0skfn7dg.jl:33\\ntest set:\
    \ Test Failed at /tmp/tmp0skfn7dg.jl:37\\n  Expression: candidate(\"K.dll\") ==\
    \ \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp0skfn7dg.jl:37 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0skfn7dg.jl:33\\ntest set: Test\
    \ Failed at /tmp/tmp0skfn7dg.jl:38\\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp0skfn7dg.jl:38 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0skfn7dg.jl:33\\ntest set: Error\
    \ During Test at /tmp/tmp0skfn7dg.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"_Y.txt\") == \"No\"\\n  type Nothing has no field match\\n  Stacktrace:\\\
    n   [1] getproperty(x::Nothing, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ file_name_check(file_name::String)\\n     @ Main /tmp/tmp0skfn7dg.jl:21\\n \
    \  ["
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 2\n        return \"No\"\
    \n    end\n    if length(file_name) == 3\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 5\n        return \"No\"\n    end\n    if length(file_name) == 6\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 7\n        return \"No\"\
    \n    end\n    if length(file_name) == 8\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 9\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 10\n        return \"No\"\n    end\n    if length(file_name) == 11\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 12\n        return \"\
    No\"\n    end\n    if length(file_name) == 13\n        return \"No\"\n    end\n\
    \    if length(file_name) == 14\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 15\n        return \"No\"\n    end\n    if length(file_name) == 16\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 17\n        return \"\
    No\"\n    end\n    if length(file_name) == 18\n        return \"No\"\n    end\n\
    \    if length(file_name) == 19\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 20\n        return \"No\"\n    end\n    if length(file_name) == 21\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 22\n        return \"\
    No\"\n    end\n    if length(file_name) == 23\n        return \"No\"\n    end\n\
    \    if length(file_name) == 24\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 25\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeumredqf.jl:1\nin expression starting at /tmp/tmpeumredqf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n     \
    \   return \"No\"\n    end\n    if count(x->x in '0':'9', file_name) > 3\n   \
    \     return \"No\"\n    end\n    if count(x->x == '.', file_name) != 1\n    \
    \    return \"No\"\n    end\n    if file_name[end-2:end] != \"txt\" && file_name[end-2:end]\
    \ != \"exe\" && file_name[end-2:end] != \"dll\"\n        return \"No\"\n    end\n\
    \    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ifimnw3.jl:43\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8ifimnw3.jl:43 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ifimnw3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8ifimnw3.jl:44\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8ifimnw3.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ifimnw3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8ifimnw3.jl:45\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8ifimnw3.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ifimnw3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8ifimnw3.jl:48\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8ifimnw3.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ifimnw3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8ifimnw3.jl:50\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8ifimnw3.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ifimnw3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8ifimnw3.jl:61\n  Expression: candidate(\".txt\") == \"No\"\
    \n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8ifimnw3.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 6 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ifimnw3.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if file_name[end] in '0':'9'\n        return \"No\"\n \
    \   end\n    if file_name[end-2:end] in [\"txt\", \"exe\", \"dll\"]\n        return\
    \ \"Yes\"\n    end\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzjhaztz8.jl:46\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzjhaztz8.jl:46 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzjhaztz8.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpzjhaztz8.jl:47\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzjhaztz8.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzjhaztz8.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpzjhaztz8.jl:48\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzjhaztz8.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzjhaztz8.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpzjhaztz8.jl:51\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzjhaztz8.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzjhaztz8.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpzjhaztz8.jl:53\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzjhaztz8.jl:53 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzjhaztz8.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpzjhaztz8.jl:64\n  Expression: candidate(\".txt\") == \"No\"\
    \n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzjhaztz8.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 6 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzjhaztz8.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl6501ohz.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpl6501ohz.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpl6501ohz.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl6501ohz.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpl6501ohz.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpl6501ohz.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpl6501ohz.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl6501ohz.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpl6501ohz.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp71ew5j4x.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp71ew5j4x.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp71ew5j4x.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp71ew5j4x.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp71ew5j4x.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp71ew5j4x.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp71ew5j4x.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp71ew5j4x.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp71ew5j4x.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(match(r\"^[a-zA-Z]\", file_name).match)\n\
    \        return \"No\"\n    end\n    if !(match(r\"\\.(txt|exe|dll)$\", file_name).match)\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjutgfiyv.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching !(::SubString{String})\\n  Closest candidates are:\\n   \
    \ !(!Matched::Bool) at bool.jl:33\\n    !(!Matched::Function) at operators.jl:968\\\
    n    !(!Matched::Missing) at missing.jl:101\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpjutgfiyv.jl:21\\n   [2] macro expansion\\n     @ /tmp/tmpjutgfiyv.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjutgfiyv.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpjutgfiyv.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  type Nothing has no field match\\\
    n  Stacktrace:\\n   [1] getproperty(x::Nothing, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] file_name_check(file_name::String)\\n     @ Main /tmp/tmpjutgfiyv.jl:21\\\
    n   [3] macro expansion\\n     @ /tmp/tmpjutgfiyv.jl:35 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjutgfiyv.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpjutgfiyv.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: no method matching !(::SubString{String})\\\
    n  Closest candidates are:\\n    !(!Matched::Bool) at bool.jl:33\\n    !(!Matched::Function)\
    \ at operators.jl:968\\n    !(!Matched::Missing) at missing.jl:101\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpjutgfiyv.jl:21\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjutgfiyv.jl:36 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjutgfiyv.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpjutgfiyv.jl:37\\n  Test threw exception\\n  Expressio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8o7u5rn7.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp8o7u5rn7.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp8o7u5rn7.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8o7u5rn7.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp8o7u5rn7.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp8o7u5rn7.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp8o7u5rn7.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8o7u5rn7.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp8o7u5rn7.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # check if the file\
    \ name contains more than three digits\n    if length(filter(x -> x in '0':'9',\
    \ file_name)) > 3\n        return \"No\"\n    end\n    # check if the file name\
    \ contains exactly one dot\n    if length(filter(x -> x == '.', file_name)) !=\
    \ 1\n        return \"No\"\n    end\n    # check if the substring before the dot\
    \ is empty or not\n    if length(split(file_name, '.')[1]) == 0\n        return\
    \ \"No\"\n    end\n    # check if the substring before the dot starts with a latin\
    \ alphapet letter\n    if !(split(file_name, '.')[1][1] in 'a':'z' || split(file_name,\
    \ '.')[1][1] in 'A':'Z')\n        return \"No\"\n    end\n    # check if the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n    if split(file_name,\
    \ '.')[2] != \"txt\" && split(file_name, '.')[2] != \"exe\" && split(file_name,\
    \ '.')[2] != \"dll\"\n        return \"No\"\n    end\n    return \"Yes\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if file_name[1] in '0'::9\n      \
    \  return \"No\"\n    end\n    if file_name[end] in '0'::9\n        return \"\
    No\"\n    end\n    if count(x -> x in '0'::9, file_name) > 3\n        return \"\
    No\"\n    end\n    if count(x -> x == '.', file_name) != 1\n        return \"\
    No\"\n    end\n    if file_name[1] in 'a'::'z' || file_name[1] in 'A'::'Z'\n \
    \       if file_name[end-2:end] in [\"txt\", \"exe\", \"dll\"]\n            return\
    \ \"Yes\"\n        end\n    end\n    return \"No\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi4cgv3lm.jl:42\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  TypeError:\
    \ in typeassert, expected Type, got a value of type Int64\\n  Stacktrace:\\n \
    \  [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpi4cgv3lm.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpi4cgv3lm.jl:42 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi4cgv3lm.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmpi4cgv3lm.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpi4cgv3lm.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmpi4cgv3lm.jl:43\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi4cgv3lm.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmpi4cgv3lm.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  TypeError: in typeassert, expected Type,\
    \ got a value of type Int64\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpi4cgv3lm.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmpi4cgv3lm.jl:44\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi4cgv3lm.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmpi4cgv3lm.jl:45\\n  Test threw exception\\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\\n  TypeError: in typeassert, expected Type,\
    \ got a value of type Int64\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpi4cgv3lm.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmpi4cgv3lm.jl:45\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  if file_name in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n\
    \            return \"No\"\n        else\n            return \"No\"\n        end\n\
    \    end\n    if length(file_name) == 2\n        if file_name[1] in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n\
    \            if file_name[2] in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n\
    \                return \"No\"\n            else\n                return \"No\"\
    \n            end\n        else\n            return \"No\"\n        end\n    end\n\
    \    if length(file_name) == 3\n        if file_name[1] in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpca_8v92i.jl:43\nin expression starting at /tmp/tmpca_8v92i.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits = 0\n    dot_count\
    \ = 0\n    for i in 1:length(file_name)\n        if '0' <= file_name[i] <= '9'\n\
    \            digits += 1\n        end\n        if file_name[i] == '.'\n      \
    \      dot_count += 1\n        end\n    end\n    if digits > 3 || dot_count !=\
    \ 1\n        return \"No\"\n    end\n    dot_index = findfirst(file_name, '.')\n\
    \    if dot_index == 1\n        return \"No\"\n    end\n    if !('a' <= file_name[1]\
    \ <= 'z' || 'A' <= file_name[1] <= 'Z')\n        return \"No\"\n    end\n    if\
    \ file_name[dot_index+1:end] != \"txt\" && file_name[dot_index+1:end] != \"exe\"\
    \ && file_name[dot_index+1:end] != \"dll\"\n        return \"No\"\n    end\n \
    \   return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpz6s4eofo.jl:45\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching findfirst(::String, ::Char)\\n  Closest candidates are:\\\
    n    findfirst(!Matched::Function, ::Any) at array.jl:1902\\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at strings/search.jl:104\\n    findfirst(::Any) at\
    \ array.jl:1818\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpz6s4eofo.jl:28\\n   [2] macro expansion\\n     @ /tmp/tmpz6s4eofo.jl:45\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpz6s4eofo.jl:44\\ntest set:\
    \ Error During Test at /tmp/tmpz6s4eofo.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpz6s4eofo.jl:28\\\
    n   [2] macro expansion\\n     @ /tmp/tmpz6s4eofo.jl:46 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpz6s4eofo.jl:44\\ntest set:\
    \ Error During Test at /tmp/tmpz6s4eofo.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpz6s4eofo.jl:28\\\
    n   [2] macro expansion\\n     @ /tmp/tmpz6s4eofo.jl:47 [inl"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if file_name[end] in '0':'9'\n        return \"No\"\n \
    \   end\n    if file_name[end-2:end] != \"txt\" && file_name[end-2:end] != \"\
    exe\" && file_name[end-2:end] != \"dll\"\n        return \"No\"\n    end\n   \
    \ return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpdeke_4ms.jl:46\\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpdeke_4ms.jl:46 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpdeke_4ms.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpdeke_4ms.jl:47\\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpdeke_4ms.jl:47 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpdeke_4ms.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpdeke_4ms.jl:48\\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpdeke_4ms.jl:48 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpdeke_4ms.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpdeke_4ms.jl:51\\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpdeke_4ms.jl:51 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpdeke_4ms.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpdeke_4ms.jl:53\\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpdeke_4ms.jl:53 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpdeke_4ms.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpdeke_4ms.jl:64\\n  Expression: candidate(\".txt\") == \"No\"\
    \\n   Evaluated: \"Yes\" == \"No\"\\nSta"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code goes here\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj1e7x62p.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpj1e7x62p.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpj1e7x62p.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj1e7x62p.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpj1e7x62p.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpj1e7x62p.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpj1e7x62p.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj1e7x62p.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpj1e7x62p.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    digits = 0\n    dot\
    \ = 0\n    for i in file_name\n        if i in '0123456789'\n            digits\
    \ += 1\n        end\n        if i == '.'\n            dot += 1\n        end\n\
    \    end\n    if digits > 3 || dot != 1\n        return \"No\"\n    end\n    if\
    \ file_name[1] in '0123456789'\n        return \"No\"\n    end\n    if file_name[end-2:end]\
    \ in [\"txt\", \"exe\", \"dll\"]\n        return \"Yes\"\n    end\n    return\
    \ \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpexkqh96z.jl:18\nin expression\
    \ starting at /tmp/tmpexkqh96z.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx_sboybj.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpx_sboybj.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpx_sboybj.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpx_sboybj.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpx_sboybj.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpx_sboybj.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpx_sboybj.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpx_sboybj.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpx_sboybj.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if count(x -> x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x -> x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n     \
    \   return \"No\"\n    end\n    if file_name[end-3:end] != \".txt\" && file_name[end-3:end]\
    \ != \".exe\" && file_name[end-3:end] != \".dll\"\n        return \"No\"\n   \
    \ end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkqf222c_.jl:43\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkqf222c_.jl:43 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkqf222c_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpkqf222c_.jl:44\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkqf222c_.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkqf222c_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpkqf222c_.jl:45\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkqf222c_.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkqf222c_.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpkqf222c_.jl:50\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkqf222c_.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkqf222c_.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   22     4     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 22 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkqf222c_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if file_name[end] in '0':'9'\n        return \"No\"\n \
    \   end\n    if file_name[end-3:end] != \".txt\" && file_name[end-3:end] != \"\
    .exe\" && file_name[end-3:end] != \".dll\"\n        return \"No\"\n    end\n \
    \   return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpja74m3au.jl:46\\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpja74m3au.jl:46 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpja74m3au.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpja74m3au.jl:47\\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpja74m3au.jl:47 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpja74m3au.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpja74m3au.jl:48\\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpja74m3au.jl:48 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpja74m3au.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpja74m3au.jl:53\\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpja74m3au.jl:53 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpja74m3au.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpja74m3au.jl:64\\n  Expression: candidate(\".txt\") == \"No\"\
    \\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpja74m3au.jl:64 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpja74m3au.jl:39\\ntest set: Error\
    \ During Test at /tmp/tmpja74m3au.jl:65\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s.\") == \"No\"\\n  BoundsError: attem"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if file_name[1] in '0123456789'\n        return\
    \ \"No\"\n    end\n    if file_name[end] in '0123456789'\n        return \"No\"\
    \n    end\n    if file_name[end] == '.'\n        return \"No\"\n    end\n    if\
    \ file_name[1] == '.'\n        return \"No\"\n    end\n    if file_name[1] in\
    \ 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n        if file_name[end]\
    \ in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            return\
    \ \"No\"\n        end\n    end\n    if file_name[1] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \        if file_name[end] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            return \"No\"\n        end\n    end\n    if file_name[1] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \        if file_name[end] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            return \"No\"\n        end\n    end\n    if file_name[1] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \        if file_name[end] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            return \"No\"\n        end\n    end\n   \nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpwwi4_308.jl:21\nin expression\
    \ starting at /tmp/tmpwwi4_308.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3eu8mxsu.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp3eu8mxsu.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp3eu8mxsu.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3eu8mxsu.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp3eu8mxsu.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp3eu8mxsu.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp3eu8mxsu.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3eu8mxsu.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp3eu8mxsu.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprasfn89b.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmprasfn89b.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmprasfn89b.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprasfn89b.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmprasfn89b.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmprasfn89b.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmprasfn89b.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprasfn89b.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmprasfn89b.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # write your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7ds_xbsv.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp7ds_xbsv.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp7ds_xbsv.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7ds_xbsv.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7ds_xbsv.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp7ds_xbsv.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp7ds_xbsv.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7ds_xbsv.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7ds_xbsv.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpa8juy84x.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpa8juy84x.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpa8juy84x.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpa8juy84x.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpa8juy84x.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpa8juy84x.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpa8juy84x.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpa8juy84x.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpa8juy84x.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 2\n        return \"No\"\
    \n    end\n    if length(file_name) == 3\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 5\n        return \"No\"\n    end\n    if length(file_name) == 6\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 7\n        return \"No\"\
    \n    end\n    if length(file_name) == 8\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 9\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 10\n        return \"No\"\n    end\n    if length(file_name) == 11\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 12\n        return \"\
    No\"\n    end\n    if length(file_name) == 13\n        return \"No\"\n    end\n\
    \    if length(file_name) == 14\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 15\n        return \"No\"\n    end\n    if length(file_name) == 16\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 17\n        return \"\
    No\"\n    end\n    if length(file_name) == 18\n        return \"No\"\n    end\n\
    \    if length(file_name) == 19\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 20\n        return \"No\"\n    end\n    if length(file_name) == 21\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 22\n        return \"\
    No\"\n    end\n    if length(file_name) == 23\n        return \"No\"\n    end\n\
    \    if length(file_name) == 24\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 25\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7j2iffhk.jl:1\nin expression starting at /tmp/tmp7j2iffhk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf7tlczz1.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpf7tlczz1.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpf7tlczz1.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf7tlczz1.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpf7tlczz1.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpf7tlczz1.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpf7tlczz1.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf7tlczz1.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpf7tlczz1.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    count = 0\n    for i\
    \ in file_name\n        if i in '0123456789'\n            count += 1\n       \
    \ end\n    end\n    if count > 3\n        return \"No\"\n    end\n    if count\
    \ == 0\n        return \"No\"\n    end\n    if count == 1\n        return \"Yes\"\
    \n    end\n    if count == 2\n        return \"Yes\"\n    end\n    if count ==\
    \ 3\n        return \"Yes\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpeue_lfc4.jl:17\nin expression\
    \ starting at /tmp/tmpeue_lfc4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqnxnxxme.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpqnxnxxme.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpqnxnxxme.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqnxnxxme.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpqnxnxxme.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpqnxnxxme.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpqnxnxxme.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqnxnxxme.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpqnxnxxme.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code goes here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf845b7m8.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpf845b7m8.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpf845b7m8.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf845b7m8.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpf845b7m8.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpf845b7m8.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpf845b7m8.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf845b7m8.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpf845b7m8.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if file_name[end] in '0':'9'\n        return \"No\"\n \
    \   end\n    if file_name[end-2:end] != \"txt\" && file_name[end-2:end] != \"\
    exe\" && file_name[end-2:end] != \"dll\"\n        return \"No\"\n    end\n   \
    \ return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgvme_upd.jl:46\\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpgvme_upd.jl:46 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgvme_upd.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpgvme_upd.jl:47\\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpgvme_upd.jl:47 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgvme_upd.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpgvme_upd.jl:48\\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpgvme_upd.jl:48 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgvme_upd.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpgvme_upd.jl:51\\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpgvme_upd.jl:51 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgvme_upd.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpgvme_upd.jl:53\\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpgvme_upd.jl:53 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgvme_upd.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmpgvme_upd.jl:64\\n  Expression: candidate(\".txt\") == \"No\"\
    \\n   Evaluated: \"Yes\" == \"No\"\\nSta"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    num_digits = 0\n   \
    \ num_dots = 0\n    for i in 1:length(file_name)\n        if file_name[i] in '0':'9'\n\
    \            num_digits += 1\n        elseif file_name[i] == '.'\n           \
    \ num_dots += 1\n        end\n    end\n    if num_digits > 3 || num_dots != 1\n\
    \        return \"No\"\n    end\n    if file_name[1] in 'a':'z' || file_name[1]\
    \ in 'A':'Z'\n        dot_index = findfirst(file_name, '.')\n        if file_name[dot_index+1:end]\
    \ in [\"txt\", \"exe\", \"dll\"]\n            return \"Yes\"\n        end\n  \
    \  end\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpoevjv9_x.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching findfirst(::String, ::Char)\\n  Closest candidates are:\\\
    n    findfirst(!Matched::Function, ::Any) at array.jl:1902\\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at strings/search.jl:104\\n    findfirst(::Any) at\
    \ array.jl:1818\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmpoevjv9_x.jl:28\\n   [2] macro expansion\\n     @ /tmp/tmpoevjv9_x.jl:40\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoevjv9_x.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpoevjv9_x.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpoevjv9_x.jl:28\\\
    n   [2] macro expansion\\n     @ /tmp/tmpoevjv9_x.jl:42 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoevjv9_x.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpoevjv9_x.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmpoevjv9_x.jl:28\\\
    n   [2] macro expansion\\n     @ /tmp/tmpoevjv9_x.jl:43 [inlined]\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(match(r\"^[a-zA-Z]\", file_name).match\
    \ == file_name[1])\n        return \"No\"\n    end\n    if !(match(r\"\\.[a-zA-Z]{3}$\"\
    , file_name).match == file_name[end-2:end])\n        return \"No\"\n    end\n\
    \    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbq7fvx5l.jl:34\\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpbq7fvx5l.jl:34 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpbq7fvx5l.jl:33\\ntest set: Error\
    \ During Test at /tmp/tmpbq7fvx5l.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  type Nothing has no field match\\\
    n  Stacktrace:\\n   [1] getproperty(x::Nothing, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] file_name_check(file_name::String)\\n     @ Main /tmp/tmpbq7fvx5l.jl:21\\\
    n   [3] macro expansion\\n     @ /tmp/tmpbq7fvx5l.jl:35 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbq7fvx5l.jl:33\\ntest set:\
    \ Test Failed at /tmp/tmpbq7fvx5l.jl:37\\n  Expression: candidate(\"K.dll\") ==\
    \ \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpbq7fvx5l.jl:37 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpbq7fvx5l.jl:33\\ntest set: Test\
    \ Failed at /tmp/tmpbq7fvx5l.jl:38\\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpbq7fvx5l.jl:38 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpbq7fvx5l.jl:33\\ntest set: Error\
    \ During Test at /tmp/tmpbq7fvx5l.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"_Y.txt\") == \"No\"\\n  type Nothing has no field match\\n  Stacktrace:\\\
    n   [1] getproperty(x::Nothing, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ file_name_check(file_name::String)\\n     @ Main /tmp/tmpbq7fvx5l.jl:21\\n \
    \  ["
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if count(x->x in 'a':'z' || x in 'A':'Z',\
    \ file_name) == 0\n        return \"No\"\n    end\n    if !(file_name[end-2:end]\
    \ in [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfrwloen3.jl:38\\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpfrwloen3.jl:38 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfrwloen3.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpfrwloen3.jl:43\\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpfrwloen3.jl:43 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfrwloen3.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpfrwloen3.jl:44\\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpfrwloen3.jl:44 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfrwloen3.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpfrwloen3.jl:45\\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpfrwloen3.jl:45 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfrwloen3.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpfrwloen3.jl:48\\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpfrwloen3.jl:48 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfrwloen3.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpfrwloen3.jl:50\\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \""
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if file_name[1] in 'a':'z' || file_name[1] in 'A':'Z'\n\
    \        if file_name[end-3:end] in [\"txt\", \"exe\", \"dll\"]\n            return\
    \ \"Yes\"\n        end\n    end\n    return \"No\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1ikjq8ms.jl:39\\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp1ikjq8ms.jl:39 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1ikjq8ms.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmp1ikjq8ms.jl:42\\n  Expression: candidate(\"K.dll\") == \"\
    Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp1ikjq8ms.jl:42 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1ikjq8ms.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmp1ikjq8ms.jl:43\\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp1ikjq8ms.jl:43 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1ikjq8ms.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmp1ikjq8ms.jl:49\\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp1ikjq8ms.jl:49 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1ikjq8ms.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmp1ikjq8ms.jl:55\\n  Expression: candidate(\"I563_No.exe\")\
    \ == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp1ikjq8ms.jl:55 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1ikjq8ms.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmp1ikjq8ms.jl:56\\n  Expression: candidate(\"Is3youfault.txt\"\
    ) == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nSta"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9qwjyvcu.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp9qwjyvcu.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp9qwjyvcu.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9qwjyvcu.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp9qwjyvcu.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp9qwjyvcu.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp9qwjyvcu.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9qwjyvcu.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp9qwjyvcu.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if file_name[1] in '0123456789'\n\
    \        return \"No\"\n    end\n    if count(x -> x in '0123456789', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x -> x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if file_name[end] == '.'\n       \
    \ return \"No\"\n    end\n    if file_name[end-2:end] != \"txt\" && file_name[end-2:end]\
    \ != \"exe\" && file_name[end-2:end] != \"dll\"\n        return \"No\"\n    end\n\
    \    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmple3mwr9r.jl:18\nin expression\
    \ starting at /tmp/tmple3mwr9r.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if file_name[1] in 'a':'z' || file_name[1] in 'A':'Z'\n\
    \        if file_name[end-2:end] in [\"txt\", \"exe\", \"dll\"]\n            return\
    \ \"Yes\"\n        end\n    end\n    return \"No\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa9ldu93f.jl:50\n  Expression: candidate(\"\
    this_is_valid.txtexe\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpa9ldu93f.jl:50 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa9ldu93f.jl:38\ntest set: Error\
    \ During Test at /tmp/tmpa9ldu93f.jl:64\n  Test threw exception\n  Expression:\
    \ candidate(\"s.\") == \"No\"\n  BoundsError: attempt to access 2-codeunit String\
    \ at index [0:2]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ file_name_check(file_name::String)\n     @ Main /tmp/tmpa9ldu93f.jl:28\n   [4]\
    \ macro expansion\n     @ /tmp/tmpa9ldu93f.jl:64 [inlined]\n   [5] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa9ldu93f.jl:38\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |   24     1      1     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 24 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa9ldu93f.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 2\n        return \"No\"\
    \n    end\n    if length(file_name) == 3\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 5\n        return \"No\"\n    end\n    if length(file_name) == 6\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 7\n        return \"No\"\
    \n    end\n    if length(file_name) == 8\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 9\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 10\n        return \"No\"\n    end\n    if length(file_name) == 11\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 12\n        return \"\
    No\"\n    end\n    if length(file_name) == 13\n        return \"No\"\n    end\n\
    \    if length(file_name) == 14\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 15\n        return \"No\"\n    end\n    if length(file_name) == 16\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 17\n        return \"\
    No\"\n    end\n    if length(file_name) == 18\n        return \"No\"\n    end\n\
    \    if length(file_name) == 19\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 20\n        return \"No\"\n    end\n    if length(file_name) == 21\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 22\n        return \"\
    No\"\n    end\n    if length(file_name) == 23\n        return \"No\"\n    end\n\
    \    if length(file_name) == 24\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 25\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6dwce9_d.jl:1\nin expression starting at /tmp/tmp6dwce9_d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1__hud5c.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp1__hud5c.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp1__hud5c.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1__hud5c.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp1__hud5c.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp1__hud5c.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp1__hud5c.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1__hud5c.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp1__hud5c.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbghi_qks.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpbghi_qks.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpbghi_qks.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbghi_qks.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpbghi_qks.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpbghi_qks.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpbghi_qks.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbghi_qks.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpbghi_qks.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6od02gn2.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp6od02gn2.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp6od02gn2.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6od02gn2.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp6od02gn2.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp6od02gn2.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp6od02gn2.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6od02gn2.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp6od02gn2.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpippn6x0s.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpippn6x0s.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpippn6x0s.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpippn6x0s.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpippn6x0s.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpippn6x0s.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpippn6x0s.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpippn6x0s.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpippn6x0s.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvrb83vfa.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpvrb83vfa.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpvrb83vfa.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvrb83vfa.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpvrb83vfa.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpvrb83vfa.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpvrb83vfa.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvrb83vfa.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpvrb83vfa.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n     \
    \   return \"No\"\n    end\n    if length(filter(x->x in '0':'9', file_name))\
    \ > 3\n        return \"No\"\n    end\n    if length(filter(x->x == '.', file_name))\
    \ != 1\n        return \"No\"\n    end\n    if file_name[end-3:end] != \".txt\"\
    \ && file_name[end-3:end] != \".exe\" && file_name[end-3:end] != \".dll\"\n  \
    \      return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvwlrtd4a.jl:43\\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpvwlrtd4a.jl:43 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvwlrtd4a.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpvwlrtd4a.jl:44\\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpvwlrtd4a.jl:44 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvwlrtd4a.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpvwlrtd4a.jl:45\\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpvwlrtd4a.jl:45 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvwlrtd4a.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpvwlrtd4a.jl:50\\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpvwlrtd4a.jl:50 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvwlrtd4a.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpvwlrtd4a.jl:61\\n  Expression: candidate(\".txt\") == \"No\"\
    \\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpvwlrtd4a.jl:61 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvwlrtd4a.jl:36\\ntest set: Error\
    \ During Test at /tmp/tmpvwlrtd4a.jl:62\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s.\") == \"No\"\\n  BoundsError: attem"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if file_name[1] in 'a':'z' || file_name[1] in 'A':'Z'\n\
    \        if file_name[end-3:end] in [\"txt\", \"exe\", \"dll\"]\n            return\
    \ \"Yes\"\n        end\n    end\n    return \"No\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8jmhrwd8.jl:39\\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp8jmhrwd8.jl:39 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp8jmhrwd8.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmp8jmhrwd8.jl:42\\n  Expression: candidate(\"K.dll\") == \"\
    Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp8jmhrwd8.jl:42 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp8jmhrwd8.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmp8jmhrwd8.jl:43\\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp8jmhrwd8.jl:43 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp8jmhrwd8.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmp8jmhrwd8.jl:49\\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp8jmhrwd8.jl:49 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp8jmhrwd8.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmp8jmhrwd8.jl:55\\n  Expression: candidate(\"I563_No.exe\")\
    \ == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp8jmhrwd8.jl:55 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp8jmhrwd8.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmp8jmhrwd8.jl:56\\n  Expression: candidate(\"Is3youfault.txt\"\
    ) == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nSta"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return 'No'\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return 'No'\n    end\n    if count(x->x == '.', file_name) != 1\n\
    \        return 'No'\n    end\n    if file_name[1] in '0':'9'\n        return\
    \ 'No'\n    end\n    if file_name[end-3:end] in ['txt', 'exe', 'dll']\n      \
    \  return 'Yes'\n    end\n    return 'No'\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp0imhmzat.jl:16\nin expression\
    \ starting at /tmp/tmp0imhmzat.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    n = length(file_name)\n\
    \    if n < 5\n        return \"No\"\n    end\n    if file_name[1] in '0'::9\n\
    \        return \"No\"\n    end\n    if file_name[n-3:n] in [\"txt\", \"exe\"\
    , \"dll\"]\n        return \"Yes\"\n    end\n    return \"No\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0qk3int9.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  TypeError:\
    \ in typeassert, expected Type, got a value of type Int64\\n  Stacktrace:\\n \
    \  [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmp0qk3int9.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmp0qk3int9.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0qk3int9.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp0qk3int9.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  TypeError: in typeassert, expected\
    \ Type, got a value of type Int64\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmp0qk3int9.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmp0qk3int9.jl:33\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0qk3int9.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp0qk3int9.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  TypeError: in typeassert, expected Type,\
    \ got a value of type Int64\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmp0qk3int9.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmp0qk3int9.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0qk3int9.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp0qk3int9.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"K.dll\") == \"Yes\"\\n  TypeError: in typeassert, expected Type,\
    \ got a value of type Int64\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmp0qk3int9.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmp0qk3int9.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp74imwcrs.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp74imwcrs.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp74imwcrs.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp74imwcrs.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp74imwcrs.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp74imwcrs.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp74imwcrs.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp74imwcrs.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp74imwcrs.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl4yeswsu.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpl4yeswsu.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpl4yeswsu.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl4yeswsu.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpl4yeswsu.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpl4yeswsu.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpl4yeswsu.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl4yeswsu.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpl4yeswsu.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  if file_name[1] in ('a':'z', 'A':'Z')\n            return \"No\"\n        else\n\
    \            return \"No\"\n        end\n    end\n    if length(file_name) ==\
    \ 2\n        if file_name[1] in ('a':'z', 'A':'Z')\n            if file_name[2]\
    \ in ('a':'z', 'A':'Z', '0':'9')\n                return \"No\"\n            else\n\
    \                return \"No\"\n            end\n        else\n            return\
    \ \"No\"\n        end\n    end\n    if length(file_name) == 3\n        if file_name[1]\
    \ in ('a':'z', 'A':'Z')\n            if file_name[2] in ('a':'z', 'A':'Z', '0':'9')\n\
    \                if file_name[3] in ('a':'z', 'A':'Z', '0':'9')\n            \
    \        return \"No\"\n                else\n                    return \"No\"\
    \n                end\n            else\n                return \"No\"\n     \
    \       end\n        else\n            return \"No\"\n        end\n    end\n \
    \   if length(file_name) == 4\n        if file_name[1] in ('a':'z', 'A':'Z')\n\
    \            if file_name[2] in ('a':'z', 'A':'Z', '0':'9')\n                if\
    \ file_name[3] in ('a':'z', 'A':'Z', '0':'9')\n                    if file_name[4]\
    \ in ('a':'z', 'A':'Z', '0':'9')\n                        return \"No\"\n    \
    \                else\n                        return \"No\"\n               \
    \     end\n                else\n                    return \"No\"\n         \
    \       end\n            else\n                return \"No\"\n            end\n\
    \        else\n            return \"No\"\n        end\n    end\n    if length(file_name)\
    \ == 5\n        if file_name[1] in ('a':'z', 'A':'Z')\n            if\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmp80zny2r6.jl:72\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp80zny2r6.jl:73\nin expression\
    \ starting at /tmp/tmp80zny2r6.jl:73\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(occursin(r\"^[a-zA-Z]\", file_name))\n\
    \        return \"No\"\n    end\n    if !(occursin(r\"\\.(txt|exe|dll)$\", file_name))\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw9pr7n2a.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpw9pr7n2a.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpw9pr7n2a.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw9pr7n2a.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpw9pr7n2a.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpw9pr7n2a.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpw9pr7n2a.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw9pr7n2a.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpw9pr7n2a.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn8skxudt.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpn8skxudt.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpn8skxudt.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpn8skxudt.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpn8skxudt.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpn8skxudt.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpn8skxudt.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpn8skxudt.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpn8skxudt.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if count(x -> x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x -> x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n     \
    \   return \"No\"\n    end\n    if file_name[end-3:end] != \".txt\" && file_name[end-3:end]\
    \ != \".exe\" && file_name[end-3:end] != \".dll\"\n        return \"No\"\n   \
    \ end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqewms8zc.jl:43\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqewms8zc.jl:43 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqewms8zc.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqewms8zc.jl:44\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqewms8zc.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqewms8zc.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqewms8zc.jl:45\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqewms8zc.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqewms8zc.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqewms8zc.jl:50\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqewms8zc.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqewms8zc.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   22     4     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 22 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqewms8zc.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(match(r\"^[a-zA-Z]\", file_name).match\
    \ != \"\")\n        return \"No\"\n    end\n    if !(match(r\"\\.[a-zA-Z]{3}$\"\
    , file_name).match != \"\")\n        return \"No\"\n    end\n    return \"Yes\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpue1v9ngr.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"1example.dll\") == \"No\"\\n  type Nothing\
    \ has no field match\\n  Stacktrace:\\n   [1] getproperty(x::Nothing, f::Symbol)\\\
    n     @ Base ./Base.jl:33\\n   [2] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpue1v9ngr.jl:21\\n   [3] macro expansion\\n     @ /tmp/tmpue1v9ngr.jl:35\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpue1v9ngr.jl:33\\ntest set:\
    \ Test Failed at /tmp/tmpue1v9ngr.jl:36\\n  Expression: candidate(\"s1sdf3.asd\"\
    ) == \"No\"\\n   Evaluated: \"Yes\" == \"No\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpue1v9ngr.jl:36 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpue1v9ngr.jl:33\\ntest set: Error\
    \ During Test at /tmp/tmpue1v9ngr.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"_Y.txt\") == \"No\"\\n  type Nothing has no field match\\n  Stacktrace:\\\
    n   [1] getproperty(x::Nothing, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ file_name_check(file_name::String)\\n     @ Main /tmp/tmpue1v9ngr.jl:21\\n \
    \  [3] macro expansion\\n     @ /tmp/tmpue1v9ngr.jl:40 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpue1v9ngr.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpue1v9ngr.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(\"?aREYA.exe\") == \"No\"\\n  type Nothing has no field match\\n \
    \ Stacktrace:\\n   [1] getproperty(x::Nothing, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] file_name_check(file_name::String)\\n     @ Main /tmp/tmpue1v9ngr.jl:21\\\
    n   [3] macro expansion\\n     @ /tmp/tmpue1v9ngr.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6qctul1i.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp6qctul1i.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp6qctul1i.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6qctul1i.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp6qctul1i.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp6qctul1i.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp6qctul1i.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6qctul1i.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp6qctul1i.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 2\n        return \"No\"\
    \n    end\n    if length(file_name) == 3\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 5\n        return \"No\"\n    end\n    if length(file_name) == 6\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 7\n        return \"No\"\
    \n    end\n    if length(file_name) == 8\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 9\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 10\n        return \"No\"\n    end\n    if length(file_name) == 11\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 12\n        return \"\
    No\"\n    end\n    if length(file_name) == 13\n        return \"No\"\n    end\n\
    \    if length(file_name) == 14\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 15\n        return \"No\"\n    end\n    if length(file_name) == 16\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 17\n        return \"\
    No\"\n    end\n    if length(file_name) == 18\n        return \"No\"\n    end\n\
    \    if length(file_name) == 19\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 20\n        return \"No\"\n    end\n    if length(file_name) == 21\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 22\n        return \"\
    No\"\n    end\n    if length(file_name) == 23\n        return \"No\"\n    end\n\
    \    if length(file_name) == 24\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 25\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi9xour4z.jl:1\nin expression starting at /tmp/tmpi9xour4z.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 2\n        return \"No\"\
    \n    end\n    if length(file_name) == 3\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 5\n        return \"No\"\n    end\n    if length(file_name) == 6\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 7\n        return \"No\"\
    \n    end\n    if length(file_name) == 8\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 9\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 10\n        return \"No\"\n    end\n    if length(file_name) == 11\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 12\n        return \"\
    No\"\n    end\n    if length(file_name) == 13\n        return \"No\"\n    end\n\
    \    if length(file_name) == 14\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 15\n        return \"No\"\n    end\n    if length(file_name) == 16\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 17\n        return \"\
    No\"\n    end\n    if length(file_name) == 18\n        return \"No\"\n    end\n\
    \    if length(file_name) == 19\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 20\n        return \"No\"\n    end\n    if length(file_name) == 21\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 22\n        return \"\
    No\"\n    end\n    if length(file_name) == 23\n        return \"No\"\n    end\n\
    \    if length(file_name) == 24\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 25\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoa_htqr8.jl:1\nin expression starting at /tmp/tmpoa_htqr8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    n = length(file_name)\n\
    \    if n < 5\n        return \"No\"\n    end\n    if count(x -> x in '0':'9',\
    \ file_name) > 3\n        return \"No\"\n    end\n    if count(x -> x == '.',\
    \ file_name) != 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n\
    \        return \"No\"\n    end\n    if file_name[n-3:n] != \".txt\" && file_name[n-3:n]\
    \ != \".exe\" && file_name[n-3:n] != \".dll\"\n        return \"No\"\n    end\n\
    \    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmmo8hg6t.jl:44\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmmo8hg6t.jl:44 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmmo8hg6t.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpmmo8hg6t.jl:45\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmmo8hg6t.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmmo8hg6t.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpmmo8hg6t.jl:46\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmmo8hg6t.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmmo8hg6t.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpmmo8hg6t.jl:51\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmmo8hg6t.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmmo8hg6t.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   22     4     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 22 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmmo8hg6t.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !(match(r\"^[a-zA-Z]\", file_name).match\
    \ != \"\")\n        return \"No\"\n    end\n    if !(match(r\"\\.(txt|exe|dll)$\"\
    , file_name).match != \"\")\n        return \"No\"\n    end\n    return \"Yes\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc8jcuee5.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"1example.dll\") == \"No\"\n  type Nothing has no field\
    \ match\n  Stacktrace:\n   [1] getproperty(x::Nothing, f::Symbol)\n     @ Base\
    \ ./Base.jl:33\n   [2] file_name_check(file_name::String)\n     @ Main /tmp/tmpc8jcuee5.jl:21\n\
    \   [3] macro expansion\n     @ /tmp/tmpc8jcuee5.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc8jcuee5.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpc8jcuee5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\n  type Nothing has no field match\n  Stacktrace:\n\
    \   [1] getproperty(x::Nothing, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmpc8jcuee5.jl:24\n   [3] macro expansion\n     @ /tmp/tmpc8jcuee5.jl:36\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc8jcuee5.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpc8jcuee5.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"_Y.txt\") == \"No\"\n  type Nothing has no field match\n  Stacktrace:\n\
    \   [1] getproperty(x::Nothing, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmpc8jcuee5.jl:21\n   [3] macro expansion\n     @ /tmp/tmpc8jcuee5.jl:40\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc8jcuee5.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpc8jcuee5.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"?aREYA.exe\") == \"No\"\n  type Nothing has no field match\n  Stacktrace:\n\
    \   [1] getproperty(x::Nothing, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] file_name_check(file_name::String)\n\
    \     @ Main /tmp/tmpc8jcuee5.jl:21\n   [3] macro expansion\n     @ /tmp/tmpc8jcuee5"
  stderr: "ERROR: LoadError: Some tests did not pass: 15 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc8jcuee5.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if !(file_name[1] in 'a':'z' || file_name[1]\
    \ in 'A':'Z')\n        return \"No\"\n    end\n    if !(file_name[end-2:end] in\
    \ [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return \"\
    Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0843xpe4.jl:48\n  Expression: candidate(\"\
    this_is_valid.txtexe\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0843xpe4.jl:48 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0843xpe4.jl:36\ntest set: Error\
    \ During Test at /tmp/tmp0843xpe4.jl:62\n  Test threw exception\n  Expression:\
    \ candidate(\"s.\") == \"No\"\n  BoundsError: attempt to access 2-codeunit String\
    \ at index [0:2]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ file_name_check(file_name::String)\n     @ Main /tmp/tmp0843xpe4.jl:27\n   [4]\
    \ macro expansion\n     @ /tmp/tmp0843xpe4.jl:62 [inlined]\n   [5] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0843xpe4.jl:36\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |   24     1      1     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 24 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0843xpe4.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code goes here\n\
    \    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm8z7w6y1.jl:24\n  Expression: candidate(\"\
    1example.dll\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpm8z7w6y1.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8z7w6y1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpm8z7w6y1.jl:25\n  Expression: candidate(\"s1sdf3.asd\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpm8z7w6y1.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8z7w6y1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpm8z7w6y1.jl:28\n  Expression: candidate(\"His12FILE94.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpm8z7w6y1.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8z7w6y1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpm8z7w6y1.jl:29\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpm8z7w6y1.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8z7w6y1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpm8z7w6y1.jl:30\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpm8z7w6y1.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8z7w6y1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpm8z7w6y1.jl:31\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpm8z7w6y1.jl:31 [inl"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 19 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm8z7w6y1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(x->x in '0':'9',\
    \ file_name) > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if !(file_name[1] in 'a':'z' || file_name[1]\
    \ in 'A':'Z')\n        return \"No\"\n    end\n    if !(split(file_name, '.')[2]\
    \ in [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpusk7s538.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpusk7s538.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpusk7s538.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpusk7s538.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpusk7s538.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpusk7s538.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpusk7s538.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpusk7s538.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpusk7s538.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxurs4h12.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpxurs4h12.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpxurs4h12.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxurs4h12.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpxurs4h12.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpxurs4h12.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpxurs4h12.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxurs4h12.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpxurs4h12.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpccjtocn0.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpccjtocn0.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpccjtocn0.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpccjtocn0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpccjtocn0.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpccjtocn0.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpccjtocn0.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpccjtocn0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpccjtocn0.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzatbwdip.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpzatbwdip.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpzatbwdip.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzatbwdip.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpzatbwdip.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpzatbwdip.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpzatbwdip.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzatbwdip.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpzatbwdip.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    num_digits = 0\n   \
    \ dot_found = false\n    for c in file_name\n        if '0' <= c <= '9'\n    \
    \        num_digits += 1\n        elseif c == '.'\n            dot_found = true\n\
    \        end\n    end\n    if num_digits > 3 || !dot_found\n        return \"\
    No\"\n    end\n    file_name_parts = split(file_name, '.')\n    if length(file_name_parts)\
    \ != 2 || length(file_name_parts[1]) == 0 || \n        !('a' <= file_name_parts[1][1]\
    \ <= 'z' || 'A' <= file_name_parts[1][1] <= 'Z') ||\n        !(file_name_parts[2]\
    \ in [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) < 5\n       \
    \ return \"No\"\n    end\n    if file_name[1] in '0123456789'\n        return\
    \ \"No\"\n    end\n    if file_name[end] in '0123456789'\n        return \"No\"\
    \n    end\n    if file_name[end-1] in '0123456789'\n        return \"No\"\n  \
    \  end\n    if file_name[end-2] in '0123456789'\n        return \"No\"\n    end\n\
    \    if file_name[end-3] in '0123456789'\n        return \"No\"\n    end\n   \
    \ if file_name[end-4] in '0123456789'\n        return \"No\"\n    end\n    if\
    \ file_name[end-5] in '0123456789'\n        return \"No\"\n    end\n    if file_name[end-6]\
    \ in '0123456789'\n        return \"No\"\n    end\n    if file_name[end-7] in\
    \ '0123456789'\n        return \"No\"\n    end\n    if file_name[end-8] in '0123456789'\n\
    \        return \"No\"\n    end\n    if file_name[end-9] in '0123456789'\n   \
    \     return \"No\"\n    end\n    if file_name[end-10] in '0123456789'\n     \
    \   return \"No\"\n    end\n    if file_name[end-11] in '0123456789'\n       \
    \ return \"No\"\n    end\n    if file_name[end-12] in '0123456789'\n        return\
    \ \"No\"\n    end\n    if file_name[end-13] in '0123456789'\n        return \"\
    No\"\n    end\n    if file_name[end-14] in '0123456789'\n        return \"No\"\
    \n    end\n    if file_name[end-15] in '0123456789'\n        return \"No\"\n \
    \   end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpgc15pyxm.jl:21\nin expression\
    \ starting at /tmp/tmpgc15pyxm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7q32s8v1.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp7q32s8v1.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp7q32s8v1.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7q32s8v1.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7q32s8v1.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp7q32s8v1.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp7q32s8v1.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7q32s8v1.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7q32s8v1.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 2\n        return \"No\"\
    \n    end\n    if length(file_name) == 3\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 5\n        return \"No\"\n    end\n    if length(file_name) == 6\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 7\n        return \"No\"\
    \n    end\n    if length(file_name) == 8\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 9\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 10\n        return \"No\"\n    end\n    if length(file_name) == 11\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 12\n        return \"\
    No\"\n    end\n    if length(file_name) == 13\n        return \"No\"\n    end\n\
    \    if length(file_name) == 14\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 15\n        return \"No\"\n    end\n    if length(file_name) == 16\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 17\n        return \"\
    No\"\n    end\n    if length(file_name) == 18\n        return \"No\"\n    end\n\
    \    if length(file_name) == 19\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 20\n        return \"No\"\n    end\n    if length(file_name) == 21\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 22\n        return \"\
    No\"\n    end\n    if length(file_name) == 23\n        return \"No\"\n    end\n\
    \    if length(file_name) == 24\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 25\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg2y3xovd.jl:1\nin expression starting at /tmp/tmpg2y3xovd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  if isalpha(file_name[1])\n            return \"No\"\n        else\n       \
    \     return \"No\"\n        end\n    end\n    if length(file_name) == 2\n   \
    \     if isalpha(file_name[1]) && file_name[2] == '.'\n            return \"No\"\
    \n        else\n            return \"No\"\n        end\n    end\n    if length(file_name)\
    \ == 3\n        if isalpha(file_name[1]) && file_name[2] == '.' && file_name[3]\
    \ == 't'\n            return \"Yes\"\n        else\n            return \"No\"\n\
    \        end\n    end\n    if length(file_name) == 4\n        if isalpha(file_name[1])\
    \ && file_name[2] == '.' && file_name[3] == 't' && file_name[4] == 'x'\n     \
    \       return \"Yes\"\n        else\n            return \"No\"\n        end\n\
    \    end\n    if length(file_name) == 5\n        if isalpha(file_name[1]) && file_name[2]\
    \ == '.' && file_name[3] == 't' && file_name[4] == 'x' && file_name[5] == 't'\n\
    \            return \"Yes\"\n        else\n            return \"No\"\n       \
    \ end\n    end\n    if length(file_name) == 6\n        if isalpha(file_name[1])\
    \ && file_name[2] == '.' && file_name[3] == 'e' && file_name[4] == 'x' && file_name[5]\
    \ == 'e'\n            return \"Yes\"\n        else\n            return \"No\"\n\
    \        end\n    end\n    if length(file_name) == 7\n        if isalpha(file_name[1])\
    \ && file_name[2] == '.' && file_name[3] == 'd' && file_name[4] == 'l' && file_name[5]\
    \ == 'l'\n            return \"Yes\"\n        else\n            return \"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgd217a02.jl:70\nin expression starting at\
    \ /tmp/tmpgd217a02.jl:70\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if count(x -> x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x -> x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n     \
    \   return \"No\"\n    end\n    if file_name[end-3:end] != \".txt\" && file_name[end-3:end]\
    \ != \".exe\" && file_name[end-3:end] != \".dll\"\n        return \"No\"\n   \
    \ end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa_8dt6qj.jl:43\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpa_8dt6qj.jl:43 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa_8dt6qj.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpa_8dt6qj.jl:44\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa_8dt6qj.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa_8dt6qj.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpa_8dt6qj.jl:45\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa_8dt6qj.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa_8dt6qj.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpa_8dt6qj.jl:50\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa_8dt6qj.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa_8dt6qj.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   22     4     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 22 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_8dt6qj.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if length(file_name) > 15\n       \
    \ return \"No\"\n    end\n    if count(x -> x in '0':'9', file_name) > 3\n   \
    \     return \"No\"\n    end\n    if count(x -> x == '.', file_name) != 1\n  \
    \      return \"No\"\n    end\n    if !(file_name[1] in 'a':'z' || file_name[1]\
    \ in 'A':'Z')\n        return \"No\"\n    end\n    if !(file_name[end-3:end] in\
    \ [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return \"\
    Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptmaoyf4q.jl:40\n  Expression: candidate(\"\
    example.txt\") == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmptmaoyf4q.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmaoyf4q.jl:39\ntest set: Test\
    \ Failed at /tmp/tmptmaoyf4q.jl:43\n  Expression: candidate(\"K.dll\") == \"Yes\"\
    \n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptmaoyf4q.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmaoyf4q.jl:39\ntest set: Test\
    \ Failed at /tmp/tmptmaoyf4q.jl:44\n  Expression: candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptmaoyf4q.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmaoyf4q.jl:39\ntest set: Test\
    \ Failed at /tmp/tmptmaoyf4q.jl:50\n  Expression: candidate(\"this_is_valid.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptmaoyf4q.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmaoyf4q.jl:39\ntest set: Test\
    \ Failed at /tmp/tmptmaoyf4q.jl:56\n  Expression: candidate(\"I563_No.exe\") ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptmaoyf4q.jl:56 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmaoyf4q.jl:39\ntest set: Test\
    \ Failed at /tmp/tmptmaoyf4q.jl:57\n  Expression: candidate(\"Is3youfault.txt\"\
    ) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptmaoyf4q.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptmaoyf4q.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpai6t5gcz.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpai6t5gcz.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpai6t5gcz.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpai6t5gcz.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpai6t5gcz.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpai6t5gcz.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpai6t5gcz.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpai6t5gcz.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpai6t5gcz.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ < 5\n        return \"No\"\n    end\n    if file_name[end-3:end] != \".txt\"\
    \ && file_name[end-3:end] != \".exe\" && file_name[end-3:end] != \".dll\"\n  \
    \      return \"No\"\n    end\n    if file_name[1] == \".\" || file_name[end]\
    \ == \".\"\n        return \"No\"\n    end\n    if file_name[1] == \"0\" || file_name[1]\
    \ == \"1\" || file_name[1] == \"2\" || file_name[1] == \"3\" || file_name[1] ==\
    \ \"4\" || file_name[1] == \"5\" || file_name[1] == \"6\" || file_name[1] == \"\
    7\" || file_name[1] == \"8\" || file_name[1] == \"9\"\n        return \"No\"\n\
    \    end\n    if file_name[2] == \"0\" || file_name[2] == \"1\" || file_name[2]\
    \ == \"2\" || file_name[2] == \"3\" || file_name[2] == \"4\" || file_name[2] ==\
    \ \"5\" || file_name[2] == \"6\" || file_name[2] == \"7\" || file_name[2] == \"\
    8\" || file_name[2] == \"9\"\n        return \"No\"\n    end\n    if file_name[3]\
    \ == \"0\" || file_name[3] == \"1\" || file_name[3] == \"2\" || file_name[3] ==\
    \ \"3\" || file_name[3] == \"4\" || file_name[3] == \"5\" || file_name[3] == \"\
    6\" || file_name[3] == \"7\" || file_name[3] == \"8\" || file_name[3] == \"9\"\
    \n        return \"No\"\n    end\n    if file_name[4] == \"0\" || file_name[4]\
    \ == \"1\" || file_name[4] == \"2\" || file_name[4]\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6bspa98z.jl:1\nin expression starting at /tmp/tmp6bspa98z.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1jngakcq.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp1jngakcq.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp1jngakcq.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1jngakcq.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp1jngakcq.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp1jngakcq.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp1jngakcq.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1jngakcq.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp1jngakcq.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 2\n        return \"No\"\
    \n    end\n    if length(file_name) == 3\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 5\n        return \"No\"\n    end\n    if length(file_name) == 6\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 7\n        return \"No\"\
    \n    end\n    if length(file_name) == 8\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 9\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 10\n        return \"No\"\n    end\n    if length(file_name) == 11\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 12\n        return \"\
    No\"\n    end\n    if length(file_name) == 13\n        return \"No\"\n    end\n\
    \    if length(file_name) == 14\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 15\n        return \"No\"\n    end\n    if length(file_name) == 16\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 17\n        return \"\
    No\"\n    end\n    if length(file_name) == 18\n        return \"No\"\n    end\n\
    \    if length(file_name) == 19\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 20\n        return \"No\"\n    end\n    if length(file_name) == 21\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 22\n        return \"\
    No\"\n    end\n    if length(file_name) == 23\n        return \"No\"\n    end\n\
    \    if length(file_name) == 24\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 25\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1f3bv6g1.jl:1\nin expression starting at /tmp/tmp1f3bv6g1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp75xe0n_6.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp75xe0n_6.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp75xe0n_6.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp75xe0n_6.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp75xe0n_6.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp75xe0n_6.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp75xe0n_6.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp75xe0n_6.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp75xe0n_6.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 2\n        return \"No\"\
    \n    end\n    if length(file_name) == 3\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 5\n        return \"No\"\n    end\n    if length(file_name) == 6\n      \
    \  return \"No\"\n    end\n    if length(file_name) == 7\n        return \"No\"\
    \n    end\n    if length(file_name) == 8\n        return \"No\"\n    end\n   \
    \ if length(file_name) == 9\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 10\n        return \"No\"\n    end\n    if length(file_name) == 11\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 12\n        return \"\
    No\"\n    end\n    if length(file_name) == 13\n        return \"No\"\n    end\n\
    \    if length(file_name) == 14\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 15\n        return \"No\"\n    end\n    if length(file_name) == 16\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 17\n        return \"\
    No\"\n    end\n    if length(file_name) == 18\n        return \"No\"\n    end\n\
    \    if length(file_name) == 19\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 20\n        return \"No\"\n    end\n    if length(file_name) == 21\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 22\n        return \"\
    No\"\n    end\n    if length(file_name) == 23\n        return \"No\"\n    end\n\
    \    if length(file_name) == 24\n        return \"No\"\n    end\n    if length(file_name)\
    \ == 25\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnm7jczxc.jl:1\nin expression starting at /tmp/tmpnm7jczxc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if file_name[1] in ('0':'9')\n   \
    \     return \"No\"\n    end\n    if length(split(file_name, '.')) != 2\n    \
    \    return \"No\"\n    end\n    if length(split(file_name, '.')[1]) == 0\n  \
    \      return \"No\"\n    end\n    if length(split(file_name, '.')[2]) != 3\n\
    \        return \"No\"\n    end\n    if split(file_name, '.')[2] in [\"txt\",\
    \ \"exe\", \"dll\"]\n        return \"Yes\"\n    end\n    return \"No\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph70pt160.jl:45\n  Expression: candidate(\"\
    His12FILE94.exe\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmph70pt160.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph70pt160.jl:39\ntest set: Test\
    \ Failed at /tmp/tmph70pt160.jl:46\n  Expression: candidate(\"_Y.txt\") == \"\
    No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmph70pt160.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph70pt160.jl:39\ntest set: Test\
    \ Failed at /tmp/tmph70pt160.jl:47\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmph70pt160.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph70pt160.jl:39\ntest set: Test\
    \ Failed at /tmp/tmph70pt160.jl:48\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmph70pt160.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph70pt160.jl:39\ntest set: Test\
    \ Failed at /tmp/tmph70pt160.jl:53\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmph70pt160.jl:53 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph70pt160.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   21     5     26\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 21 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph70pt160.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphlhm46m9.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmphlhm46m9.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmphlhm46m9.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphlhm46m9.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmphlhm46m9.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmphlhm46m9.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmphlhm46m9.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphlhm46m9.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmphlhm46m9.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0ettib0d.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp0ettib0d.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp0ettib0d.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0ettib0d.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp0ettib0d.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp0ettib0d.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp0ettib0d.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0ettib0d.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp0ettib0d.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if file_name[1] in '0123456789'\n\
    \        return \"No\"\n    end\n    if !(file_name[end] in ['t', 'e', 'd'])\n\
    \        return \"No\"\n    end\n    if !(file_name[end-1] in ['x', 'l'])\n  \
    \      return \"No\"\n    end\n    if !(file_name[end-2] in ['t', 'l'])\n    \
    \    return \"No\"\n    end\n    if !(file_name[end-3] == '.')\n        return\
    \ \"No\"\n    end\n    if !(file_name[end-4] in '0123456789')\n        return\
    \ \"No\"\n    end\n    if !(file_name[end-5] in '0123456789')\n        return\
    \ \"No\"\n    end\n    if !(file_name[end-6] in '0123456789')\n        return\
    \ \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpjrs2ug43.jl:18\nin expression\
    \ starting at /tmp/tmpjrs2ug43.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if file_name[end] == '.'\n        return \"No\"\n    end\n\
    \    if file_name[end-2:end] != \"txt\" && file_name[end-2:end] != \"exe\" &&\
    \ file_name[end-2:end] != \"dll\"\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphv77ny09.jl:46\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphv77ny09.jl:46 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv77ny09.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphv77ny09.jl:47\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphv77ny09.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv77ny09.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphv77ny09.jl:48\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphv77ny09.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv77ny09.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphv77ny09.jl:51\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphv77ny09.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv77ny09.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphv77ny09.jl:53\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphv77ny09.jl:53 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv77ny09.jl:39\ntest set: Test\
    \ Failed at /tmp/tmphv77ny09.jl:64\n  Expression: candidate(\".txt\") == \"No\"\
    \n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphv77ny09.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 20 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphv77ny09.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    num_digits = 0\n   \
    \ num_dots = 0\n    for c in file_name\n        if c in '0123456789'\n       \
    \     num_digits += 1\n        elseif c == '.'\n            num_dots += 1\n  \
    \      end\n    end\n    if num_digits > 3 || num_dots != 1\n        return \"\
    No\"\n    end\n    file_name_parts = split(file_name, '.')\n    if length(file_name_parts[1])\
    \ == 0 || !(file_name_parts[1][1] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\
    \        return \"No\"\n    end\n    if file_name_parts[2] in [\"txt\", \"exe\"\
    , \"dll\"]\n        return \"Yes\"\n    else\n        return \"No\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpmi8sgw5j.jl:18\nin expression\
    \ starting at /tmp/tmpmi8sgw5j.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4w1n1of7.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp4w1n1of7.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp4w1n1of7.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4w1n1of7.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp4w1n1of7.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp4w1n1of7.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp4w1n1of7.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4w1n1of7.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp4w1n1of7.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  if isletter(file_name[1])\n            return \"No\"\n        else\n      \
    \      return \"No\"\n        end\n    end\n    if length(file_name) == 2\n  \
    \      if isletter(file_name[1]) && file_name[2] == '.'\n            return \"\
    No\"\n        else\n            return \"No\"\n        end\n    end\n    if length(file_name)\
    \ == 3\n        if isletter(file_name[1]) && file_name[2] == '.' && file_name[3]\
    \ == 't'\n            return \"Yes\"\n        else\n            return \"No\"\n\
    \        end\n    end\n    if length(file_name) == 4\n        if isletter(file_name[1])\
    \ && file_name[2] == '.' && file_name[3] == 't' && file_name[4] == 'x'\n     \
    \       return \"Yes\"\n        else\n            return \"No\"\n        end\n\
    \    end\n    if length(file_name) == 5\n        if isletter(file_name[1]) &&\
    \ file_name[2] == '.' && file_name[3] == 't' && file_name[4] == 'x' && file_name[5]\
    \ == 't'\n            return \"Yes\"\n        else\n            return \"No\"\n\
    \        end\n    end\n    if length(file_name) == 6\n        if isletter(file_name[1])\
    \ && file_name[2] == '.' && file_name[3] == 'e' && file_name[4] == 'x' && file_name[5]\
    \ == 'e'\n            return \"Yes\"\n        else\n            return \"No\"\n\
    \        end\n    end\n    if length(file_name) == 7\n        if isletter(file_name[1])\
    \ && file_name[2] == '.' && file_name[3] == 'd' && file_name[4] == 'l' && file_name[5]\
    \ == 'l'\n            return \"Yes\"\n        else\n            return \"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiw83m2pn.jl:70\nin expression starting at\
    \ /tmp/tmpiw83m2pn.jl:70\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if !match(r\"^[a-zA-Z]\", file_name)\n  \
    \      return \"No\"\n    end\n    if !match(r\"\\.(txt|exe|dll)$\", file_name)\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp43iy8kh4.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ no method matching !(::RegexMatch)\\n  Closest candidates are:\\n    !(!Matched::Bool)\
    \ at bool.jl:33\\n    !(!Matched::Function) at operators.jl:968\\n    !(!Matched::Missing)\
    \ at missing.jl:101\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\\
    n     @ Main /tmp/tmp43iy8kh4.jl:21\\n   [2] macro expansion\\n     @ /tmp/tmp43iy8kh4.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp43iy8kh4.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp43iy8kh4.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: no method matching !(::Nothing)\\\
    n  Closest candidates are:\\n    !(!Matched::Bool) at bool.jl:33\\n    !(!Matched::Function)\
    \ at operators.jl:968\\n    !(!Matched::Missing) at missing.jl:101\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmp43iy8kh4.jl:21\\\
    n   [2] macro expansion\\n     @ /tmp/tmp43iy8kh4.jl:35 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp43iy8kh4.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp43iy8kh4.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: no method matching !(::RegexMatch)\\\
    n  Closest candidates are:\\n    !(!Matched::Bool) at bool.jl:33\\n    !(!Matched::Function)\
    \ at operators.jl:968\\n    !(!Matched::Missing) at missing.jl:101\\n  Stacktrace:\\\
    n   [1] file_name_check(file_name::String)\\n     @ Main /tmp/tmp43iy8kh4.jl:21\\\
    n   [2] macro expansion\\n     @ /tmp/tmp43iy8kh4.jl:36 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp43iy8kh4.jl:33\\ntest "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9fxk5d1n.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp9fxk5d1n.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp9fxk5d1n.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9fxk5d1n.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp9fxk5d1n.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp9fxk5d1n.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp9fxk5d1n.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9fxk5d1n.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp9fxk5d1n.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp95ldh396.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp95ldh396.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp95ldh396.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp95ldh396.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp95ldh396.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp95ldh396.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp95ldh396.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp95ldh396.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp95ldh396.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxcnxdykq.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpxcnxdykq.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpxcnxdykq.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxcnxdykq.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpxcnxdykq.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpxcnxdykq.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpxcnxdykq.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxcnxdykq.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpxcnxdykq.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxrfnbjjm.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpxrfnbjjm.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpxrfnbjjm.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxrfnbjjm.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpxrfnbjjm.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpxrfnbjjm.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpxrfnbjjm.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxrfnbjjm.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpxrfnbjjm.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkjywqjng.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpkjywqjng.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpkjywqjng.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkjywqjng.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpkjywqjng.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmpkjywqjng.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmpkjywqjng.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkjywqjng.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpkjywqjng.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4v4btv3m.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"example.txt\") == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp4v4btv3m.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp4v4btv3m.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4v4btv3m.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp4v4btv3m.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"1example.dll\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] file_name_check(file_name::String)\\n     @\
    \ Main /tmp/tmp4v4btv3m.jl:16\\n   [2] macro expansion\\n     @ /tmp/tmp4v4btv3m.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4v4btv3m.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp4v4btv3m.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"s1sdf3.asd\") == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) wh"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if count(x->x in '0':'9', file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name) !=\
    \ 1\n        return \"No\"\n    end\n    if file_name[1] in '0':'9'\n        return\
    \ \"No\"\n    end\n    if file_name[end] in '0':'9'\n        return \"No\"\n \
    \   end\n    if file_name[end-2:end] != \"txt\" && file_name[end-2:end] != \"\
    exe\" && file_name[end-2:end] != \"dll\"\n        return \"No\"\n    end\n   \
    \ return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqfg6zrvd.jl:46\n  Expression: candidate(\"\
    _Y.txt\") == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqfg6zrvd.jl:46 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfg6zrvd.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpqfg6zrvd.jl:47\n  Expression: candidate(\"?aREYA.exe\") ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqfg6zrvd.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfg6zrvd.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpqfg6zrvd.jl:48\n  Expression: candidate(\"/this_is_valid.dll\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqfg6zrvd.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfg6zrvd.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpqfg6zrvd.jl:51\n  Expression: candidate(\"this_is_valid.txtexe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqfg6zrvd.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfg6zrvd.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpqfg6zrvd.jl:53\n  Expression: candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqfg6zrvd.jl:53 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfg6zrvd.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpqfg6zrvd.jl:64\n  Expression: candidate(\".txt\") == \"No\"\
    \n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqfg6zrvd.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 19 passed, 6 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqfg6zrvd.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if length(file_name) == 1\n      \
    \  if file_name[1] in ('a':'z', 'A':'Z')\n            return \"No\"\n        else\n\
    \            return \"No\"\n        end\n    end\n    if length(file_name) ==\
    \ 2\n        if file_name[1] in ('a':'z', 'A':'Z') && file_name[2] == '.'\n  \
    \          return \"No\"\n        else\n            return \"No\"\n        end\n\
    \    end\n    if length(file_name) == 3\n        if file_name[1] in ('a':'z',\
    \ 'A':'Z') && file_name[2] == '.' && file_name[3] in ('a':'z', 'A':'Z')\n    \
    \        return \"No\"\n        else\n            return \"No\"\n        end\n\
    \    end\n    if length(file_name) == 4\n        if file_name[1] in ('a':'z',\
    \ 'A':'Z') && file_name[2] == '.' && file_name[3] in ('a':'z', 'A':'Z') && file_name[4]\
    \ in ('a':'z', 'A':'Z')\n            return \"No\"\n        else\n           \
    \ return \"No\"\n        end\n    end\n    if length(file_name) == 5\n       \
    \ if file_name[1] in ('a':'z', 'A':'Z') && file_name[2] == '.' && file_name[3]\
    \ in ('a':'z', 'A':'Z') && file_name[4] in ('a':'z', 'A':'Z') && file_name[5]\
    \ in ('a':'z', 'A':'Z')\n            return \"No\"\n        else\n           \
    \ return \"No\"\n        end\n    end\n    if length(file_name) == 6\n       \
    \ if file_name[1] in ('a':'z', 'A':'Z') && file_name[2] == '.' && file_name[3]\
    \ in ('a':'z', 'A':'Z\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpf5nbga5s.jl:60\nin expression starting at /tmp/tmpf5nbga5s.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    if length(file_name)\
    \ == 0\n        return \"No\"\n    end\n    if !(file_name[1] in 'a':'z' || file_name[1]\
    \ in 'A':'Z')\n        return \"No\"\n    end\n    if count(x -> x in '0':'9',\
    \ file_name) > 3\n        return \"No\"\n    end\n    if count(x -> x == '.',\
    \ file_name) != 1\n        return \"No\"\n    end\n    if split(file_name, '.')[2]\
    \ != \"txt\" && split(file_name, '.')[2] != \"exe\" && split(file_name, '.')[2]\
    \ != \"dll\"\n        return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   26     26\n"
  exit_code: 0
  status: OK
