name: HumanEval_25_factorize
language: julia
results:
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n > 1\n        for i in 2:n\n            if n % i == 0\n     \
    \           push!(factors, i)\n                n = n / i\n                break\n\
    \            end\n        end\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:sqrt(n)\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    for i in 2:n\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:sqrt(n)\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    i = 3\n    while i <= n\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 2\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    i = 3\n    while i <= sqrt(n)\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 2\n    end\n    if n > 2\n\
    \        push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuybfavdf.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpuybfavdf.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpuybfavdf.jl:19 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuybfavdf.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpuybfavdf.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:532\\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpuybfavdf.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpuybfavdf.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuybfavdf.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpuybfavdf.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  MethodError: Cannot `convert` an object of type"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n \
    \   end\n    for i in 3:2:floor(Int64, sqrt(n))\n        while n % i == 0\n  \
    \          push!(factors, i)\n            n /= i\n        end\n    end\n    if\
    \ n > 2\n        push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n != 1\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n > 1\n        for i in 2:n\n            if n % i == 0\n     \
    \           push!(factors, i)\n                n = n / i\n                break\n\
    \            end\n        end\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    i = 3\n    while i <= sqrt(n)\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 2\n    end\n    if n > 2\n\
    \        push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:sqrt(n)\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpviy26vm2.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpviy26vm2.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpviy26vm2.jl:19 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpviy26vm2.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpviy26vm2.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:532\\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpviy26vm2.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpviy26vm2.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpviy26vm2.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpviy26vm2.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  MethodError: Cannot `convert` an object of type"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    i = 3\n    while i <= sqrt(n)\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 2\n    end\n    if n > 2\n\
    \        push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2\n\
    \        return []\n    end\n    factors = []\n    for i in 2:n\n        while\
    \ n % i == 0\n            push!(factors, i)\n            n /= i\n        end\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsw87vl2v.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpsw87vl2v.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpsw87vl2v.jl:19 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsw87vl2v.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpsw87vl2v.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:532\\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpsw87vl2v.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpsw87vl2v.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsw87vl2v.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpsw87vl2v.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  MethodError: Cannot `convert` an object of type"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n > 1\n        for i in 2:n\n            if n % i == 0\n     \
    \           push!(factors, i)\n                n = n / i\n                break\n\
    \            end\n        end\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:sqrt(n)\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    for i in 2:n\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:sqrt(n)\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:sqrt(n)\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i = 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while i <= n\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfyew2awf.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpfyew2awf.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfyew2awf.jl:19 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfyew2awf.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpfyew2awf.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:532\\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpfyew2awf.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfyew2awf.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfyew2awf.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpfyew2awf.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  MethodError: Cannot `convert` an object of type"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i = 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        if n % i == 0\n            push!(factors, i)\n\
    \            n = n / i\n            i = i - 1\n        end\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb2l0y86c.jl:28\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb2l0y86c.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb2l0y86c.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb2l0y86c.jl:29\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb2l0y86c.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb2l0y86c.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb2l0y86c.jl:31\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb2l0y86c.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb2l0y86c.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb2l0y86c.jl:32\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpb2l0y86c.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb2l0y86c.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb2l0y86c.jl:33\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpb2l0y86c.jl:33 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb2l0y86c.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb2l0y86c.jl:34\n  Expression: candidate(18) == [2, 3, 3]\n\
    \   Evaluated: [2, 3] == [2, 3, 3]\nStackt"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb2l0y86c.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg5us1jeb.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpg5us1jeb.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpg5us1jeb.jl:19 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg5us1jeb.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpg5us1jeb.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:532\\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpg5us1jeb.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpg5us1jeb.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg5us1jeb.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpg5us1jeb.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  MethodError: Cannot `convert` an object of type"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:sqrt(n)\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i = 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n > 1\n        for i in 2:n\n            if n % i == 0\n     \
    \           push!(factors, i)\n                n = n / i\n                break\n\
    \            end\n        end\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    while n % 3 == 0\n        push!(factors, 3)\n        n /= 3\n    end\n  \
    \  i = 5\n    while i * i <= n\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 2\n    end\n    if n > 1\n\
    \        push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while i <= n\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    while n % 3 == 0\n        push!(factors, 3)\n        n /= 3\n    end\n  \
    \  i = 5\n    while i * i <= n\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 2\n    end\n    if n > 1\n\
    \        push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        if n % i == 0\n            push!(factors, i)\n\
    \            n = n / i\n            i = i - 1\n        end\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoa5mzbns.jl:28\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpoa5mzbns.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoa5mzbns.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpoa5mzbns.jl:29\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoa5mzbns.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoa5mzbns.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpoa5mzbns.jl:31\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpoa5mzbns.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoa5mzbns.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpoa5mzbns.jl:32\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpoa5mzbns.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoa5mzbns.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpoa5mzbns.jl:33\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpoa5mzbns.jl:33 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoa5mzbns.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpoa5mzbns.jl:34\n  Expression: candidate(18) == [2, 3, 3]\n\
    \   Evaluated: [2, 3] == [2, 3, 3]\nStackt"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoa5mzbns.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i = 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n > 1\n        for i in 2:n\n            if n % i == 0\n     \
    \           push!(factors, i)\n                n = n / i\n                break\n\
    \            end\n        end\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i = 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        if n % i == 0\n            push!(factors, i)\n\
    \            n = n / i\n            i = i - 1\n        end\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp68j8eae0.jl:28\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp68j8eae0.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp68j8eae0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp68j8eae0.jl:29\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp68j8eae0.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp68j8eae0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp68j8eae0.jl:31\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp68j8eae0.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp68j8eae0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp68j8eae0.jl:32\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp68j8eae0.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp68j8eae0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp68j8eae0.jl:33\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp68j8eae0.jl:33 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp68j8eae0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp68j8eae0.jl:34\n  Expression: candidate(18) == [2, 3, 3]\n\
    \   Evaluated: [2, 3] == [2, 3, 3]\nStackt"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp68j8eae0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    for i in 3:2:floor(sqrt(n))\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n > 1\n        for i in 2:n\n            if n % i == 0\n     \
    \           push!(factors, i)\n                n = n / i\n                break\n\
    \            end\n        end\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2\n\
    \        return []\n    end\n    factors = []\n    i = 2\n    while n > 1\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n        i += 1\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    i = 3\n    while i <= sqrt(n)\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 2\n    end\n    if n > 2\n\
    \        push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
