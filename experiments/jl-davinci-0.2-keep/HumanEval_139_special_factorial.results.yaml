name: HumanEval_139_special_factorial
language: julia
results:
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmprvgu5wmg.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmprvgu5wmg.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprvgu5wmg.jl:23\\ntest set: Test Failed at /tmp/tmprvgu5wmg.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmprvgu5wmg.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprvgu5wmg.jl:23\\ntest set: Test Failed at /tmp/tmprvgu5wmg.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmprvgu5wmg.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprvgu5wmg.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6we559ti.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp6we559ti.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6we559ti.jl:23\ntest set: Test Failed at /tmp/tmp6we559ti.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6we559ti.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6we559ti.jl:23\ntest set: Test Failed at /tmp/tmp6we559ti.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6we559ti.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6we559ti.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6we559ti.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpx3fr3l_9.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpx3fr3l_9.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx3fr3l_9.jl:23\\ntest set: Test Failed at /tmp/tmpx3fr3l_9.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpx3fr3l_9.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx3fr3l_9.jl:23\\ntest set: Test Failed at /tmp/tmpx3fr3l_9.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpx3fr3l_9.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx3fr3l_9.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpezumip5h.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpezumip5h.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpezumip5h.jl:23\\ntest set: Test Failed at /tmp/tmpezumip5h.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpezumip5h.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpezumip5h.jl:23\\ntest set: Test Failed at /tmp/tmpezumip5h.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpezumip5h.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpezumip5h.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg7j11rkh.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpg7j11rkh.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg7j11rkh.jl:23\ntest set: Test Failed at /tmp/tmpg7j11rkh.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg7j11rkh.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg7j11rkh.jl:23\ntest set: Test Failed at /tmp/tmpg7j11rkh.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpg7j11rkh.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg7j11rkh.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg7j11rkh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphxt3j13v.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmphxt3j13v.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphxt3j13v.jl:23\ntest set: Test Failed at /tmp/tmphxt3j13v.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphxt3j13v.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphxt3j13v.jl:23\ntest set: Test Failed at /tmp/tmphxt3j13v.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphxt3j13v.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphxt3j13v.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphxt3j13v.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpedcir2zu.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpedcir2zu.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpedcir2zu.jl:23\ntest set: Test Failed at /tmp/tmpedcir2zu.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpedcir2zu.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpedcir2zu.jl:23\ntest set: Test Failed at /tmp/tmpedcir2zu.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpedcir2zu.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpedcir2zu.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpedcir2zu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiz2p7hjg.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpiz2p7hjg.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiz2p7hjg.jl:23\ntest set: Test Failed at /tmp/tmpiz2p7hjg.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiz2p7hjg.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiz2p7hjg.jl:23\ntest set: Test Failed at /tmp/tmpiz2p7hjg.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiz2p7hjg.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiz2p7hjg.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiz2p7hjg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_o2yjldz.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp_o2yjldz.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_o2yjldz.jl:23\ntest set: Test Failed at /tmp/tmp_o2yjldz.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_o2yjldz.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_o2yjldz.jl:23\ntest set: Test Failed at /tmp/tmp_o2yjldz.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_o2yjldz.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_o2yjldz.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_o2yjldz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjds710o1.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpjds710o1.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjds710o1.jl:23\ntest set: Test Failed at /tmp/tmpjds710o1.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjds710o1.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjds710o1.jl:23\ntest set: Test Failed at /tmp/tmpjds710o1.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjds710o1.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjds710o1.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjds710o1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ return 0\n    end\n    if n == 0\n        return 1\n    end\n    return n *\
    \ special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy3ynjlnz.jl:26\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpy3ynjlnz.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy3ynjlnz.jl:25\ntest set: Test Failed at /tmp/tmpy3ynjlnz.jl:27\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy3ynjlnz.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy3ynjlnz.jl:25\ntest set: Test Failed at /tmp/tmpy3ynjlnz.jl:28\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy3ynjlnz.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy3ynjlnz.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy3ynjlnz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6k2igwi4.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp6k2igwi4.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6k2igwi4.jl:23\ntest set: Test Failed at /tmp/tmp6k2igwi4.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6k2igwi4.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6k2igwi4.jl:23\ntest set: Test Failed at /tmp/tmp6k2igwi4.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6k2igwi4.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6k2igwi4.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6k2igwi4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpk5txrrq7.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpk5txrrq7.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpk5txrrq7.jl:23\\ntest set: Test Failed at /tmp/tmpk5txrrq7.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpk5txrrq7.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpk5txrrq7.jl:23\\ntest set: Test Failed at /tmp/tmpk5txrrq7.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpk5txrrq7.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpk5txrrq7.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvle_uiwk.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpvle_uiwk.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvle_uiwk.jl:23\ntest set: Test Failed at /tmp/tmpvle_uiwk.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvle_uiwk.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvle_uiwk.jl:23\ntest set: Test Failed at /tmp/tmpvle_uiwk.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvle_uiwk.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvle_uiwk.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvle_uiwk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbjsz_ask.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpbjsz_ask.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbjsz_ask.jl:23\ntest set: Test Failed at /tmp/tmpbjsz_ask.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbjsz_ask.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbjsz_ask.jl:23\ntest set: Test Failed at /tmp/tmpbjsz_ask.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbjsz_ask.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbjsz_ask.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbjsz_ask.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp9nnajm3.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpp9nnajm3.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp9nnajm3.jl:23\ntest set: Test Failed at /tmp/tmpp9nnajm3.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp9nnajm3.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp9nnajm3.jl:23\ntest set: Test Failed at /tmp/tmpp9nnajm3.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpp9nnajm3.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp9nnajm3.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp9nnajm3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpuxeaxxhg.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpuxeaxxhg.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuxeaxxhg.jl:23\\ntest set: Test Failed at /tmp/tmpuxeaxxhg.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpuxeaxxhg.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuxeaxxhg.jl:23\\ntest set: Test Failed at /tmp/tmpuxeaxxhg.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpuxeaxxhg.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuxeaxxhg.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt2humx6b.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpt2humx6b.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt2humx6b.jl:23\ntest set: Test Failed at /tmp/tmpt2humx6b.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt2humx6b.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt2humx6b.jl:23\ntest set: Test Failed at /tmp/tmpt2humx6b.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpt2humx6b.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt2humx6b.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt2humx6b.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ return 0\n    end\n    if n == 0\n        return 1\n    end\n    return n *\
    \ special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwdqbdfea.jl:26\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpwdqbdfea.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwdqbdfea.jl:25\ntest set: Test Failed at /tmp/tmpwdqbdfea.jl:27\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwdqbdfea.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwdqbdfea.jl:25\ntest set: Test Failed at /tmp/tmpwdqbdfea.jl:28\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwdqbdfea.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwdqbdfea.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwdqbdfea.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8e8svpwi.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp8e8svpwi.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8e8svpwi.jl:23\ntest set: Test Failed at /tmp/tmp8e8svpwi.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8e8svpwi.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8e8svpwi.jl:23\ntest set: Test Failed at /tmp/tmp8e8svpwi.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8e8svpwi.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8e8svpwi.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8e8svpwi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1cxib2qo.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp1cxib2qo.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1cxib2qo.jl:23\ntest set: Test Failed at /tmp/tmp1cxib2qo.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1cxib2qo.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1cxib2qo.jl:23\ntest set: Test Failed at /tmp/tmp1cxib2qo.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1cxib2qo.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1cxib2qo.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1cxib2qo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    factorial = 1\n  \
    \  for i in 1:n\n        factorial *= i\n    end\n    return factorial\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_ihzaj17.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp_ihzaj17.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_ihzaj17.jl:23\ntest set: Test Failed at /tmp/tmp_ihzaj17.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_ihzaj17.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_ihzaj17.jl:23\ntest set: Test Failed at /tmp/tmp_ihzaj17.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_ihzaj17.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_ihzaj17.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ihzaj17.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph09tc8fp.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmph09tc8fp.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph09tc8fp.jl:23\ntest set: Test Failed at /tmp/tmph09tc8fp.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph09tc8fp.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph09tc8fp.jl:23\ntest set: Test Failed at /tmp/tmph09tc8fp.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph09tc8fp.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph09tc8fp.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph09tc8fp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc_siexon.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpc_siexon.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc_siexon.jl:23\ntest set: Test Failed at /tmp/tmpc_siexon.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc_siexon.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc_siexon.jl:23\ntest set: Test Failed at /tmp/tmpc_siexon.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpc_siexon.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc_siexon.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc_siexon.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpej5b_5zb.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpej5b_5zb.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpej5b_5zb.jl:23\ntest set: Test Failed at /tmp/tmpej5b_5zb.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpej5b_5zb.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpej5b_5zb.jl:23\ntest set: Test Failed at /tmp/tmpej5b_5zb.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpej5b_5zb.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpej5b_5zb.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpej5b_5zb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpcv_wx2cf.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcv_wx2cf.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcv_wx2cf.jl:23\\ntest set: Test Failed at /tmp/tmpcv_wx2cf.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpcv_wx2cf.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcv_wx2cf.jl:23\\ntest set: Test Failed at /tmp/tmpcv_wx2cf.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpcv_wx2cf.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcv_wx2cf.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptth31qtt.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmptth31qtt.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptth31qtt.jl:23\ntest set: Test Failed at /tmp/tmptth31qtt.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptth31qtt.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptth31qtt.jl:23\ntest set: Test Failed at /tmp/tmptth31qtt.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptth31qtt.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptth31qtt.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptth31qtt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptdrbr55g.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmptdrbr55g.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptdrbr55g.jl:23\ntest set: Test Failed at /tmp/tmptdrbr55g.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptdrbr55g.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptdrbr55g.jl:23\ntest set: Test Failed at /tmp/tmptdrbr55g.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptdrbr55g.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptdrbr55g.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptdrbr55g.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplo5gb_z5.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmplo5gb_z5.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplo5gb_z5.jl:23\ntest set: Test Failed at /tmp/tmplo5gb_z5.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplo5gb_z5.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplo5gb_z5.jl:23\ntest set: Test Failed at /tmp/tmplo5gb_z5.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplo5gb_z5.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplo5gb_z5.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplo5gb_z5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1zhq9xfu.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmp1zhq9xfu.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1zhq9xfu.jl:23\\ntest set: Test Failed at /tmp/tmp1zhq9xfu.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp1zhq9xfu.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1zhq9xfu.jl:23\\ntest set: Test Failed at /tmp/tmp1zhq9xfu.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp1zhq9xfu.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1zhq9xfu.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpoh5e4wkc.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpoh5e4wkc.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpoh5e4wkc.jl:23\\ntest set: Test Failed at /tmp/tmpoh5e4wkc.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpoh5e4wkc.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpoh5e4wkc.jl:23\\ntest set: Test Failed at /tmp/tmpoh5e4wkc.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpoh5e4wkc.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpoh5e4wkc.jl:23\\nTest Summary: | Pass  Fail \
    \ '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnyz08cfd.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpnyz08cfd.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnyz08cfd.jl:23\ntest set: Test Failed at /tmp/tmpnyz08cfd.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnyz08cfd.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnyz08cfd.jl:23\ntest set: Test Failed at /tmp/tmpnyz08cfd.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnyz08cfd.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnyz08cfd.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnyz08cfd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    # YOUR CODE HERE\n\
    \    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoehmrpsn.jl:21\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 0 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpoehmrpsn.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoehmrpsn.jl:20\ntest set: Test Failed at /tmp/tmpoehmrpsn.jl:22\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 0 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoehmrpsn.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoehmrpsn.jl:20\ntest set: Test Failed at /tmp/tmpoehmrpsn.jl:23\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 0 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpoehmrpsn.jl:23\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoehmrpsn.jl:20\ntest set: Test Failed at /tmp/tmpoehmrpsn.jl:24\n\
    \  Expression: candidate(1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpoehmrpsn.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoehmrpsn.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoehmrpsn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpcqa7kgd7.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcqa7kgd7.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcqa7kgd7.jl:23\\ntest set: Test Failed at /tmp/tmpcqa7kgd7.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpcqa7kgd7.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcqa7kgd7.jl:23\\ntest set: Test Failed at /tmp/tmpcqa7kgd7.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpcqa7kgd7.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcqa7kgd7.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjyi9dxka.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpjyi9dxka.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjyi9dxka.jl:23\\ntest set: Test Failed at /tmp/tmpjyi9dxka.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpjyi9dxka.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjyi9dxka.jl:23\\ntest set: Test Failed at /tmp/tmpjyi9dxka.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpjyi9dxka.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjyi9dxka.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4cs826fw.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4cs826fw.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4cs826fw.jl:23\\ntest set: Test Failed at /tmp/tmp4cs826fw.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4cs826fw.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4cs826fw.jl:23\\ntest set: Test Failed at /tmp/tmp4cs826fw.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp4cs826fw.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4cs826fw.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfcc0kdwl.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpfcc0kdwl.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfcc0kdwl.jl:23\ntest set: Test Failed at /tmp/tmpfcc0kdwl.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfcc0kdwl.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfcc0kdwl.jl:23\ntest set: Test Failed at /tmp/tmpfcc0kdwl.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfcc0kdwl.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfcc0kdwl.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfcc0kdwl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    factorial = 1\n  \
    \  for i in 1:n\n        factorial *= i\n    end\n    return factorial\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa3sbfr7p.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpa3sbfr7p.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa3sbfr7p.jl:23\ntest set: Test Failed at /tmp/tmpa3sbfr7p.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa3sbfr7p.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa3sbfr7p.jl:23\ntest set: Test Failed at /tmp/tmpa3sbfr7p.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpa3sbfr7p.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa3sbfr7p.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa3sbfr7p.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 0\n    end\n    result = 1\n    for i in 1:n\n        result *= i\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkd54lzyh.jl:27\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpkd54lzyh.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkd54lzyh.jl:26\ntest set: Test Failed at /tmp/tmpkd54lzyh.jl:28\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkd54lzyh.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkd54lzyh.jl:26\ntest set: Test Failed at /tmp/tmpkd54lzyh.jl:29\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkd54lzyh.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkd54lzyh.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkd54lzyh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8u4al894.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp8u4al894.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8u4al894.jl:23\ntest set: Test Failed at /tmp/tmp8u4al894.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8u4al894.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8u4al894.jl:23\ntest set: Test Failed at /tmp/tmp8u4al894.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8u4al894.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8u4al894.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8u4al894.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn84bgych.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpn84bgych.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn84bgych.jl:23\ntest set: Test Failed at /tmp/tmpn84bgych.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn84bgych.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn84bgych.jl:23\ntest set: Test Failed at /tmp/tmpn84bgych.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn84bgych.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn84bgych.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn84bgych.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp139qf4r4.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp139qf4r4.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp139qf4r4.jl:23\ntest set: Test Failed at /tmp/tmp139qf4r4.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp139qf4r4.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp139qf4r4.jl:23\ntest set: Test Failed at /tmp/tmp139qf4r4.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp139qf4r4.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp139qf4r4.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp139qf4r4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvgxkli60.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvgxkli60.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvgxkli60.jl:23\\ntest set: Test Failed at /tmp/tmpvgxkli60.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpvgxkli60.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvgxkli60.jl:23\\ntest set: Test Failed at /tmp/tmpvgxkli60.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpvgxkli60.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvgxkli60.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpteg4mlkn.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpteg4mlkn.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpteg4mlkn.jl:23\ntest set: Test Failed at /tmp/tmpteg4mlkn.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpteg4mlkn.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpteg4mlkn.jl:23\ntest set: Test Failed at /tmp/tmpteg4mlkn.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpteg4mlkn.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpteg4mlkn.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpteg4mlkn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ return 0\n    end\n    if n == 0\n        return 1\n    end\n    return n *\
    \ special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8bwyd9u2.jl:26\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp8bwyd9u2.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8bwyd9u2.jl:25\ntest set: Test Failed at /tmp/tmp8bwyd9u2.jl:27\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8bwyd9u2.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8bwyd9u2.jl:25\ntest set: Test Failed at /tmp/tmp8bwyd9u2.jl:28\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8bwyd9u2.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8bwyd9u2.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8bwyd9u2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    # YOUR CODE HERE\n\
    \    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyp9oa90n.jl:21\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 0 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpyp9oa90n.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyp9oa90n.jl:20\ntest set: Test Failed at /tmp/tmpyp9oa90n.jl:22\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 0 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyp9oa90n.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyp9oa90n.jl:20\ntest set: Test Failed at /tmp/tmpyp9oa90n.jl:23\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 0 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyp9oa90n.jl:23\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyp9oa90n.jl:20\ntest set: Test Failed at /tmp/tmpyp9oa90n.jl:24\n\
    \  Expression: candidate(1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpyp9oa90n.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyp9oa90n.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyp9oa90n.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpdj86r8pb.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpdj86r8pb.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdj86r8pb.jl:23\\ntest set: Test Failed at /tmp/tmpdj86r8pb.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpdj86r8pb.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdj86r8pb.jl:23\\ntest set: Test Failed at /tmp/tmpdj86r8pb.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpdj86r8pb.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdj86r8pb.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp81q_e4x.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpp81q_e4x.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp81q_e4x.jl:23\ntest set: Test Failed at /tmp/tmpp81q_e4x.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp81q_e4x.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp81q_e4x.jl:23\ntest set: Test Failed at /tmp/tmpp81q_e4x.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpp81q_e4x.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp81q_e4x.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp81q_e4x.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpd12gwwbx.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpd12gwwbx.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpd12gwwbx.jl:23\\ntest set: Test Failed at /tmp/tmpd12gwwbx.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpd12gwwbx.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpd12gwwbx.jl:23\\ntest set: Test Failed at /tmp/tmpd12gwwbx.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpd12gwwbx.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpd12gwwbx.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxxbcauil.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpxxbcauil.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxxbcauil.jl:23\ntest set: Test Failed at /tmp/tmpxxbcauil.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxxbcauil.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxxbcauil.jl:23\ntest set: Test Failed at /tmp/tmpxxbcauil.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxxbcauil.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxxbcauil.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxxbcauil.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpha8pylx_.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpha8pylx_.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpha8pylx_.jl:23\\ntest set: Test Failed at /tmp/tmpha8pylx_.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpha8pylx_.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpha8pylx_.jl:23\\ntest set: Test Failed at /tmp/tmpha8pylx_.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpha8pylx_.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpha8pylx_.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnfsb79sa.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpnfsb79sa.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnfsb79sa.jl:23\ntest set: Test Failed at /tmp/tmpnfsb79sa.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnfsb79sa.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnfsb79sa.jl:23\ntest set: Test Failed at /tmp/tmpnfsb79sa.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnfsb79sa.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnfsb79sa.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnfsb79sa.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp775t84aj.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp775t84aj.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp775t84aj.jl:23\ntest set: Test Failed at /tmp/tmp775t84aj.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp775t84aj.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp775t84aj.jl:23\ntest set: Test Failed at /tmp/tmp775t84aj.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp775t84aj.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp775t84aj.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp775t84aj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpi0a6ee9b.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi0a6ee9b.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi0a6ee9b.jl:23\\ntest set: Test Failed at /tmp/tmpi0a6ee9b.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpi0a6ee9b.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi0a6ee9b.jl:23\\ntest set: Test Failed at /tmp/tmpi0a6ee9b.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpi0a6ee9b.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi0a6ee9b.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_zhi8l9v.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp_zhi8l9v.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_zhi8l9v.jl:23\ntest set: Test Failed at /tmp/tmp_zhi8l9v.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_zhi8l9v.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_zhi8l9v.jl:23\ntest set: Test Failed at /tmp/tmp_zhi8l9v.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_zhi8l9v.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_zhi8l9v.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_zhi8l9v.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw0fti_s0.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpw0fti_s0.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw0fti_s0.jl:23\ntest set: Test Failed at /tmp/tmpw0fti_s0.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw0fti_s0.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw0fti_s0.jl:23\ntest set: Test Failed at /tmp/tmpw0fti_s0.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpw0fti_s0.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw0fti_s0.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw0fti_s0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv1k9y_al.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpv1k9y_al.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv1k9y_al.jl:23\ntest set: Test Failed at /tmp/tmpv1k9y_al.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv1k9y_al.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv1k9y_al.jl:23\ntest set: Test Failed at /tmp/tmpv1k9y_al.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv1k9y_al.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv1k9y_al.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv1k9y_al.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpkh8tuoyt.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkh8tuoyt.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkh8tuoyt.jl:23\\ntest set: Test Failed at /tmp/tmpkh8tuoyt.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpkh8tuoyt.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkh8tuoyt.jl:23\\ntest set: Test Failed at /tmp/tmpkh8tuoyt.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpkh8tuoyt.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkh8tuoyt.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpofn2p01b.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpofn2p01b.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpofn2p01b.jl:23\ntest set: Test Failed at /tmp/tmpofn2p01b.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpofn2p01b.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpofn2p01b.jl:23\ntest set: Test Failed at /tmp/tmpofn2p01b.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpofn2p01b.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpofn2p01b.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpofn2p01b.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp28rrr9_5.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp28rrr9_5.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp28rrr9_5.jl:23\ntest set: Test Failed at /tmp/tmp28rrr9_5.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp28rrr9_5.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp28rrr9_5.jl:23\ntest set: Test Failed at /tmp/tmp28rrr9_5.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp28rrr9_5.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp28rrr9_5.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp28rrr9_5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpah_77mnu.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpah_77mnu.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpah_77mnu.jl:23\ntest set: Test Failed at /tmp/tmpah_77mnu.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpah_77mnu.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpah_77mnu.jl:23\ntest set: Test Failed at /tmp/tmpah_77mnu.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpah_77mnu.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpah_77mnu.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpah_77mnu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf0w1yh58.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpf0w1yh58.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf0w1yh58.jl:23\ntest set: Test Failed at /tmp/tmpf0w1yh58.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf0w1yh58.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf0w1yh58.jl:23\ntest set: Test Failed at /tmp/tmpf0w1yh58.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpf0w1yh58.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf0w1yh58.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf0w1yh58.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxag8eidu.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpxag8eidu.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxag8eidu.jl:23\ntest set: Test Failed at /tmp/tmpxag8eidu.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxag8eidu.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxag8eidu.jl:23\ntest set: Test Failed at /tmp/tmpxag8eidu.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxag8eidu.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxag8eidu.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxag8eidu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    factorial = 1\n  \
    \  for i in 1:n\n        factorial *= i\n    end\n    return factorial\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmprcaf4uss.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmprcaf4uss.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprcaf4uss.jl:23\\ntest set: Test Failed at /tmp/tmprcaf4uss.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmprcaf4uss.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprcaf4uss.jl:23\\ntest set: Test Failed at /tmp/tmprcaf4uss.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmprcaf4uss.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprcaf4uss.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpza7ct3sk.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpza7ct3sk.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpza7ct3sk.jl:23\ntest set: Test Failed at /tmp/tmpza7ct3sk.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpza7ct3sk.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpza7ct3sk.jl:23\ntest set: Test Failed at /tmp/tmpza7ct3sk.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpza7ct3sk.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpza7ct3sk.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpza7ct3sk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp7cjaf74s.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmp7cjaf74s.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7cjaf74s.jl:23\\ntest set: Test Failed at /tmp/tmp7cjaf74s.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp7cjaf74s.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7cjaf74s.jl:23\\ntest set: Test Failed at /tmp/tmp7cjaf74s.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp7cjaf74s.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7cjaf74s.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    factorial = 1\n  \
    \  for i in 1:n\n        factorial *= i\n    end\n    return factorial\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptt84oxng.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmptt84oxng.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptt84oxng.jl:23\ntest set: Test Failed at /tmp/tmptt84oxng.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptt84oxng.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptt84oxng.jl:23\ntest set: Test Failed at /tmp/tmptt84oxng.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptt84oxng.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptt84oxng.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptt84oxng.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpqafv49nl.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqafv49nl.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqafv49nl.jl:23\\ntest set: Test Failed at /tmp/tmpqafv49nl.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpqafv49nl.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqafv49nl.jl:23\\ntest set: Test Failed at /tmp/tmpqafv49nl.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpqafv49nl.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqafv49nl.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1uds7lsm.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp1uds7lsm.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1uds7lsm.jl:23\ntest set: Test Failed at /tmp/tmp1uds7lsm.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1uds7lsm.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1uds7lsm.jl:23\ntest set: Test Failed at /tmp/tmp1uds7lsm.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1uds7lsm.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1uds7lsm.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1uds7lsm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppx7zk65j.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmppx7zk65j.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppx7zk65j.jl:23\ntest set: Test Failed at /tmp/tmppx7zk65j.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppx7zk65j.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppx7zk65j.jl:23\ntest set: Test Failed at /tmp/tmppx7zk65j.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppx7zk65j.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppx7zk65j.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppx7zk65j.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 0\n    end\n    factorial = 1\n    for i in 1:n\n        factorial *=\
    \ i\n    end\n    return factorial\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0kxie0mr.jl:27\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp0kxie0mr.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0kxie0mr.jl:26\ntest set: Test Failed at /tmp/tmp0kxie0mr.jl:28\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0kxie0mr.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0kxie0mr.jl:26\ntest set: Test Failed at /tmp/tmp0kxie0mr.jl:29\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0kxie0mr.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0kxie0mr.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0kxie0mr.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpsh3buw3y.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpsh3buw3y.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsh3buw3y.jl:23\\ntest set: Test Failed at /tmp/tmpsh3buw3y.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpsh3buw3y.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsh3buw3y.jl:23\\ntest set: Test Failed at /tmp/tmpsh3buw3y.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpsh3buw3y.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsh3buw3y.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprbtww2ql.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmprbtww2ql.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprbtww2ql.jl:23\ntest set: Test Failed at /tmp/tmprbtww2ql.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprbtww2ql.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprbtww2ql.jl:23\ntest set: Test Failed at /tmp/tmprbtww2ql.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprbtww2ql.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprbtww2ql.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprbtww2ql.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvawnfddr.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpvawnfddr.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvawnfddr.jl:23\ntest set: Test Failed at /tmp/tmpvawnfddr.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvawnfddr.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvawnfddr.jl:23\ntest set: Test Failed at /tmp/tmpvawnfddr.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvawnfddr.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvawnfddr.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvawnfddr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn0jkp1le.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpn0jkp1le.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn0jkp1le.jl:23\ntest set: Test Failed at /tmp/tmpn0jkp1le.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn0jkp1le.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn0jkp1le.jl:23\ntest set: Test Failed at /tmp/tmpn0jkp1le.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn0jkp1le.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn0jkp1le.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn0jkp1le.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpepvf9wa_.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpepvf9wa_.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpepvf9wa_.jl:23\ntest set: Test Failed at /tmp/tmpepvf9wa_.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpepvf9wa_.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpepvf9wa_.jl:23\ntest set: Test Failed at /tmp/tmpepvf9wa_.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpepvf9wa_.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpepvf9wa_.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpepvf9wa_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyniwjc5s.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpyniwjc5s.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyniwjc5s.jl:23\ntest set: Test Failed at /tmp/tmpyniwjc5s.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyniwjc5s.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyniwjc5s.jl:23\ntest set: Test Failed at /tmp/tmpyniwjc5s.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyniwjc5s.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyniwjc5s.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyniwjc5s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj8eil35p.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpj8eil35p.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj8eil35p.jl:23\ntest set: Test Failed at /tmp/tmpj8eil35p.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj8eil35p.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj8eil35p.jl:23\ntest set: Test Failed at /tmp/tmpj8eil35p.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj8eil35p.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj8eil35p.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj8eil35p.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa5okn812.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpa5okn812.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa5okn812.jl:23\ntest set: Test Failed at /tmp/tmpa5okn812.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa5okn812.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa5okn812.jl:23\ntest set: Test Failed at /tmp/tmpa5okn812.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpa5okn812.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa5okn812.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa5okn812.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp01o2bd92.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp01o2bd92.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp01o2bd92.jl:23\ntest set: Test Failed at /tmp/tmp01o2bd92.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp01o2bd92.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp01o2bd92.jl:23\ntest set: Test Failed at /tmp/tmp01o2bd92.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp01o2bd92.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp01o2bd92.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp01o2bd92.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 0\n    end\n    result = 1\n    for i in 1:n\n        result *= i\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_27fbcbc.jl:27\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp_27fbcbc.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_27fbcbc.jl:26\ntest set: Test Failed at /tmp/tmp_27fbcbc.jl:28\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_27fbcbc.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_27fbcbc.jl:26\ntest set: Test Failed at /tmp/tmp_27fbcbc.jl:29\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_27fbcbc.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_27fbcbc.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_27fbcbc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7w03uew6.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp7w03uew6.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7w03uew6.jl:23\ntest set: Test Failed at /tmp/tmp7w03uew6.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7w03uew6.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7w03uew6.jl:23\ntest set: Test Failed at /tmp/tmp7w03uew6.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7w03uew6.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7w03uew6.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7w03uew6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpch3e_s46.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpch3e_s46.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpch3e_s46.jl:23\ntest set: Test Failed at /tmp/tmpch3e_s46.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpch3e_s46.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpch3e_s46.jl:23\ntest set: Test Failed at /tmp/tmpch3e_s46.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpch3e_s46.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpch3e_s46.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpch3e_s46.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpw8aprr9q.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw8aprr9q.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw8aprr9q.jl:23\\ntest set: Test Failed at /tmp/tmpw8aprr9q.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw8aprr9q.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw8aprr9q.jl:23\\ntest set: Test Failed at /tmp/tmpw8aprr9q.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpw8aprr9q.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw8aprr9q.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvll3yz38.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpvll3yz38.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvll3yz38.jl:23\ntest set: Test Failed at /tmp/tmpvll3yz38.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvll3yz38.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvll3yz38.jl:23\ntest set: Test Failed at /tmp/tmpvll3yz38.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvll3yz38.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvll3yz38.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvll3yz38.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfma6x9wk.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpfma6x9wk.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfma6x9wk.jl:23\ntest set: Test Failed at /tmp/tmpfma6x9wk.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfma6x9wk.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfma6x9wk.jl:23\ntest set: Test Failed at /tmp/tmpfma6x9wk.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfma6x9wk.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfma6x9wk.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfma6x9wk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxytoun93.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpxytoun93.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxytoun93.jl:23\\ntest set: Test Failed at /tmp/tmpxytoun93.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxytoun93.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxytoun93.jl:23\\ntest set: Test Failed at /tmp/tmpxytoun93.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpxytoun93.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxytoun93.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpahyru14x.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpahyru14x.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpahyru14x.jl:23\ntest set: Test Failed at /tmp/tmpahyru14x.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpahyru14x.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpahyru14x.jl:23\ntest set: Test Failed at /tmp/tmpahyru14x.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpahyru14x.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpahyru14x.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpahyru14x.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpq0diy4f4.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpq0diy4f4.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpq0diy4f4.jl:23\\ntest set: Test Failed at /tmp/tmpq0diy4f4.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpq0diy4f4.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpq0diy4f4.jl:23\\ntest set: Test Failed at /tmp/tmpq0diy4f4.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpq0diy4f4.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpq0diy4f4.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    factorial = 1\n  \
    \  for i in 1:n\n        factorial *= i\n    end\n    return factorial\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjvfhrpv5.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpjvfhrpv5.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjvfhrpv5.jl:23\ntest set: Test Failed at /tmp/tmpjvfhrpv5.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjvfhrpv5.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjvfhrpv5.jl:23\ntest set: Test Failed at /tmp/tmpjvfhrpv5.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjvfhrpv5.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjvfhrpv5.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjvfhrpv5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ return 0\n    end\n    if n == 0\n        return 1\n    end\n    return n *\
    \ special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqod1nw9q.jl:26\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpqod1nw9q.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqod1nw9q.jl:25\ntest set: Test Failed at /tmp/tmpqod1nw9q.jl:27\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqod1nw9q.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqod1nw9q.jl:25\ntest set: Test Failed at /tmp/tmpqod1nw9q.jl:28\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqod1nw9q.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqod1nw9q.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqod1nw9q.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyle75li8.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpyle75li8.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyle75li8.jl:23\ntest set: Test Failed at /tmp/tmpyle75li8.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyle75li8.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyle75li8.jl:23\ntest set: Test Failed at /tmp/tmpyle75li8.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyle75li8.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyle75li8.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyle75li8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmdbjssey.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpmdbjssey.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmdbjssey.jl:23\ntest set: Test Failed at /tmp/tmpmdbjssey.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmdbjssey.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmdbjssey.jl:23\ntest set: Test Failed at /tmp/tmpmdbjssey.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmdbjssey.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmdbjssey.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmdbjssey.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnnlh6dh9.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpnnlh6dh9.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnnlh6dh9.jl:23\ntest set: Test Failed at /tmp/tmpnnlh6dh9.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnnlh6dh9.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnnlh6dh9.jl:23\ntest set: Test Failed at /tmp/tmpnnlh6dh9.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnnlh6dh9.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnnlh6dh9.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnnlh6dh9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppweuqppc.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmppweuqppc.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppweuqppc.jl:23\ntest set: Test Failed at /tmp/tmppweuqppc.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppweuqppc.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppweuqppc.jl:23\ntest set: Test Failed at /tmp/tmppweuqppc.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppweuqppc.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppweuqppc.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppweuqppc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpdtph_3f5.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpdtph_3f5.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdtph_3f5.jl:23\\ntest set: Test Failed at /tmp/tmpdtph_3f5.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpdtph_3f5.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdtph_3f5.jl:23\\ntest set: Test Failed at /tmp/tmpdtph_3f5.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpdtph_3f5.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdtph_3f5.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1i9dl45x.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp1i9dl45x.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1i9dl45x.jl:23\ntest set: Test Failed at /tmp/tmp1i9dl45x.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1i9dl45x.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1i9dl45x.jl:23\ntest set: Test Failed at /tmp/tmp1i9dl45x.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1i9dl45x.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1i9dl45x.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1i9dl45x.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5lk2uprm.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp5lk2uprm.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5lk2uprm.jl:23\ntest set: Test Failed at /tmp/tmp5lk2uprm.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5lk2uprm.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5lk2uprm.jl:23\ntest set: Test Failed at /tmp/tmp5lk2uprm.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5lk2uprm.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5lk2uprm.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5lk2uprm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm00lef6u.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpm00lef6u.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm00lef6u.jl:23\ntest set: Test Failed at /tmp/tmpm00lef6u.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm00lef6u.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm00lef6u.jl:23\ntest set: Test Failed at /tmp/tmpm00lef6u.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm00lef6u.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm00lef6u.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm00lef6u.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp240zxx12.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmp240zxx12.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp240zxx12.jl:23\\ntest set: Test Failed at /tmp/tmp240zxx12.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp240zxx12.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp240zxx12.jl:23\\ntest set: Test Failed at /tmp/tmp240zxx12.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp240zxx12.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp240zxx12.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5xf1k7ia.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp5xf1k7ia.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5xf1k7ia.jl:23\ntest set: Test Failed at /tmp/tmp5xf1k7ia.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5xf1k7ia.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5xf1k7ia.jl:23\ntest set: Test Failed at /tmp/tmp5xf1k7ia.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5xf1k7ia.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5xf1k7ia.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5xf1k7ia.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx55y5c7t.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpx55y5c7t.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx55y5c7t.jl:23\ntest set: Test Failed at /tmp/tmpx55y5c7t.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx55y5c7t.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx55y5c7t.jl:23\ntest set: Test Failed at /tmp/tmpx55y5c7t.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpx55y5c7t.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx55y5c7t.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx55y5c7t.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwvmkymae.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpwvmkymae.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvmkymae.jl:23\ntest set: Test Failed at /tmp/tmpwvmkymae.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwvmkymae.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvmkymae.jl:23\ntest set: Test Failed at /tmp/tmpwvmkymae.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwvmkymae.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvmkymae.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwvmkymae.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmproj7vnny.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmproj7vnny.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmproj7vnny.jl:23\\ntest set: Test Failed at /tmp/tmproj7vnny.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmproj7vnny.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmproj7vnny.jl:23\\ntest set: Test Failed at /tmp/tmproj7vnny.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmproj7vnny.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmproj7vnny.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp7f1c4ast.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmp7f1c4ast.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7f1c4ast.jl:23\\ntest set: Test Failed at /tmp/tmp7f1c4ast.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp7f1c4ast.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7f1c4ast.jl:23\\ntest set: Test Failed at /tmp/tmp7f1c4ast.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp7f1c4ast.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7f1c4ast.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3rcbce5l.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp3rcbce5l.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3rcbce5l.jl:23\ntest set: Test Failed at /tmp/tmp3rcbce5l.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3rcbce5l.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3rcbce5l.jl:23\ntest set: Test Failed at /tmp/tmp3rcbce5l.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3rcbce5l.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3rcbce5l.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3rcbce5l.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgowyrj2s.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpgowyrj2s.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgowyrj2s.jl:23\\ntest set: Test Failed at /tmp/tmpgowyrj2s.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpgowyrj2s.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgowyrj2s.jl:23\\ntest set: Test Failed at /tmp/tmpgowyrj2s.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpgowyrj2s.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgowyrj2s.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2dbxauuo.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp2dbxauuo.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2dbxauuo.jl:23\ntest set: Test Failed at /tmp/tmp2dbxauuo.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2dbxauuo.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2dbxauuo.jl:23\ntest set: Test Failed at /tmp/tmp2dbxauuo.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2dbxauuo.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2dbxauuo.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2dbxauuo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5ndjyb_m.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp5ndjyb_m.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5ndjyb_m.jl:23\ntest set: Test Failed at /tmp/tmp5ndjyb_m.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5ndjyb_m.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5ndjyb_m.jl:23\ntest set: Test Failed at /tmp/tmp5ndjyb_m.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5ndjyb_m.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5ndjyb_m.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5ndjyb_m.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnulw45zc.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnulw45zc.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnulw45zc.jl:23\\ntest set: Test Failed at /tmp/tmpnulw45zc.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpnulw45zc.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnulw45zc.jl:23\\ntest set: Test Failed at /tmp/tmpnulw45zc.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpnulw45zc.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnulw45zc.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpwrz7luzf.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpwrz7luzf.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwrz7luzf.jl:23\\ntest set: Test Failed at /tmp/tmpwrz7luzf.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpwrz7luzf.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwrz7luzf.jl:23\\ntest set: Test Failed at /tmp/tmpwrz7luzf.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpwrz7luzf.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwrz7luzf.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8rdk4vux.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp8rdk4vux.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8rdk4vux.jl:23\ntest set: Test Failed at /tmp/tmp8rdk4vux.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8rdk4vux.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8rdk4vux.jl:23\ntest set: Test Failed at /tmp/tmp8rdk4vux.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8rdk4vux.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8rdk4vux.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8rdk4vux.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmdf7jxcm.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpmdf7jxcm.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmdf7jxcm.jl:23\ntest set: Test Failed at /tmp/tmpmdf7jxcm.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmdf7jxcm.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmdf7jxcm.jl:23\ntest set: Test Failed at /tmp/tmpmdf7jxcm.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmdf7jxcm.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmdf7jxcm.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmdf7jxcm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ return 0\n    end\n    if n == 0\n        return 1\n    end\n    return n *\
    \ special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkrvdnyce.jl:26\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpkrvdnyce.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkrvdnyce.jl:25\ntest set: Test Failed at /tmp/tmpkrvdnyce.jl:27\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkrvdnyce.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkrvdnyce.jl:25\ntest set: Test Failed at /tmp/tmpkrvdnyce.jl:28\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkrvdnyce.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkrvdnyce.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkrvdnyce.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0l9yst54.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp0l9yst54.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0l9yst54.jl:23\ntest set: Test Failed at /tmp/tmp0l9yst54.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0l9yst54.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0l9yst54.jl:23\ntest set: Test Failed at /tmp/tmp0l9yst54.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0l9yst54.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0l9yst54.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0l9yst54.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8804v092.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp8804v092.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8804v092.jl:23\ntest set: Test Failed at /tmp/tmp8804v092.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8804v092.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8804v092.jl:23\ntest set: Test Failed at /tmp/tmp8804v092.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8804v092.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8804v092.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8804v092.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuzmdq8u9.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpuzmdq8u9.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuzmdq8u9.jl:23\ntest set: Test Failed at /tmp/tmpuzmdq8u9.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuzmdq8u9.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuzmdq8u9.jl:23\ntest set: Test Failed at /tmp/tmpuzmdq8u9.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpuzmdq8u9.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuzmdq8u9.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuzmdq8u9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpudtdyf_l.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpudtdyf_l.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpudtdyf_l.jl:23\ntest set: Test Failed at /tmp/tmpudtdyf_l.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpudtdyf_l.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpudtdyf_l.jl:23\ntest set: Test Failed at /tmp/tmpudtdyf_l.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpudtdyf_l.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpudtdyf_l.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpudtdyf_l.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvep3n6h8.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvep3n6h8.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvep3n6h8.jl:23\\ntest set: Test Failed at /tmp/tmpvep3n6h8.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpvep3n6h8.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvep3n6h8.jl:23\\ntest set: Test Failed at /tmp/tmpvep3n6h8.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpvep3n6h8.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvep3n6h8.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvv2wku80.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpvv2wku80.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvv2wku80.jl:23\ntest set: Test Failed at /tmp/tmpvv2wku80.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvv2wku80.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvv2wku80.jl:23\ntest set: Test Failed at /tmp/tmpvv2wku80.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvv2wku80.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvv2wku80.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvv2wku80.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxhjc_s9g.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpxhjc_s9g.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxhjc_s9g.jl:23\ntest set: Test Failed at /tmp/tmpxhjc_s9g.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxhjc_s9g.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxhjc_s9g.jl:23\ntest set: Test Failed at /tmp/tmpxhjc_s9g.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxhjc_s9g.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxhjc_s9g.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxhjc_s9g.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ return 0\n    end\n    if n == 0\n        return 1\n    end\n    return n *\
    \ special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1dzdnvu5.jl:26\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp1dzdnvu5.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1dzdnvu5.jl:25\ntest set: Test Failed at /tmp/tmp1dzdnvu5.jl:27\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1dzdnvu5.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1dzdnvu5.jl:25\ntest set: Test Failed at /tmp/tmp1dzdnvu5.jl:28\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1dzdnvu5.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1dzdnvu5.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1dzdnvu5.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwnw8scc6.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpwnw8scc6.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwnw8scc6.jl:23\ntest set: Test Failed at /tmp/tmpwnw8scc6.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwnw8scc6.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwnw8scc6.jl:23\ntest set: Test Failed at /tmp/tmpwnw8scc6.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwnw8scc6.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwnw8scc6.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwnw8scc6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5j43cgcu.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp5j43cgcu.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5j43cgcu.jl:23\ntest set: Test Failed at /tmp/tmp5j43cgcu.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5j43cgcu.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5j43cgcu.jl:23\ntest set: Test Failed at /tmp/tmp5j43cgcu.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5j43cgcu.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5j43cgcu.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5j43cgcu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj_ctjx2z.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpj_ctjx2z.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj_ctjx2z.jl:23\ntest set: Test Failed at /tmp/tmpj_ctjx2z.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj_ctjx2z.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj_ctjx2z.jl:23\ntest set: Test Failed at /tmp/tmpj_ctjx2z.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj_ctjx2z.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj_ctjx2z.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj_ctjx2z.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    factorial = 1\n  \
    \  for i in 1:n\n        factorial *= i\n    end\n    return factorial\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6oge9pmy.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6oge9pmy.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6oge9pmy.jl:23\\ntest set: Test Failed at /tmp/tmp6oge9pmy.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp6oge9pmy.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6oge9pmy.jl:23\\ntest set: Test Failed at /tmp/tmp6oge9pmy.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp6oge9pmy.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6oge9pmy.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0fa7zc_w.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp0fa7zc_w.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0fa7zc_w.jl:23\ntest set: Test Failed at /tmp/tmp0fa7zc_w.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0fa7zc_w.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0fa7zc_w.jl:23\ntest set: Test Failed at /tmp/tmp0fa7zc_w.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0fa7zc_w.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0fa7zc_w.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0fa7zc_w.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwzz15lxn.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpwzz15lxn.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwzz15lxn.jl:23\ntest set: Test Failed at /tmp/tmpwzz15lxn.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwzz15lxn.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwzz15lxn.jl:23\ntest set: Test Failed at /tmp/tmpwzz15lxn.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwzz15lxn.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwzz15lxn.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwzz15lxn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxhi41oc_.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpxhi41oc_.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxhi41oc_.jl:23\ntest set: Test Failed at /tmp/tmpxhi41oc_.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxhi41oc_.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxhi41oc_.jl:23\ntest set: Test Failed at /tmp/tmpxhi41oc_.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxhi41oc_.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxhi41oc_.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxhi41oc_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcq17bj5r.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpcq17bj5r.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcq17bj5r.jl:23\ntest set: Test Failed at /tmp/tmpcq17bj5r.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcq17bj5r.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcq17bj5r.jl:23\ntest set: Test Failed at /tmp/tmpcq17bj5r.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcq17bj5r.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcq17bj5r.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcq17bj5r.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprgm7fctc.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmprgm7fctc.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprgm7fctc.jl:23\ntest set: Test Failed at /tmp/tmprgm7fctc.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprgm7fctc.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprgm7fctc.jl:23\ntest set: Test Failed at /tmp/tmprgm7fctc.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprgm7fctc.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprgm7fctc.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprgm7fctc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy2axcgrl.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpy2axcgrl.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy2axcgrl.jl:23\ntest set: Test Failed at /tmp/tmpy2axcgrl.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy2axcgrl.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy2axcgrl.jl:23\ntest set: Test Failed at /tmp/tmpy2axcgrl.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy2axcgrl.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy2axcgrl.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy2axcgrl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpoahaqh6f.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpoahaqh6f.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpoahaqh6f.jl:23\\ntest set: Test Failed at /tmp/tmpoahaqh6f.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpoahaqh6f.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpoahaqh6f.jl:23\\ntest set: Test Failed at /tmp/tmpoahaqh6f.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpoahaqh6f.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpoahaqh6f.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"n must be positive\")\n    end\n    if n == 0\n        return 1\n  \
    \  end\n    return n * special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpct00tfy0.jl:26\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpct00tfy0.jl:26\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpct00tfy0.jl:25\\ntest set: Test Failed at /tmp/tmpct00tfy0.jl:27\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpct00tfy0.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpct00tfy0.jl:25\\ntest set: Test Failed at /tmp/tmpct00tfy0.jl:28\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpct00tfy0.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpct00tfy0.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyezg5bkn.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpyezg5bkn.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyezg5bkn.jl:23\ntest set: Test Failed at /tmp/tmpyezg5bkn.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyezg5bkn.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyezg5bkn.jl:23\ntest set: Test Failed at /tmp/tmpyezg5bkn.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyezg5bkn.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyezg5bkn.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyezg5bkn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphj9ib0lw.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmphj9ib0lw.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphj9ib0lw.jl:23\\ntest set: Test Failed at /tmp/tmphj9ib0lw.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmphj9ib0lw.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphj9ib0lw.jl:23\\ntest set: Test Failed at /tmp/tmphj9ib0lw.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmphj9ib0lw.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphj9ib0lw.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv3kawmvx.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpv3kawmvx.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv3kawmvx.jl:23\ntest set: Test Failed at /tmp/tmpv3kawmvx.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv3kawmvx.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv3kawmvx.jl:23\ntest set: Test Failed at /tmp/tmpv3kawmvx.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv3kawmvx.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv3kawmvx.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv3kawmvx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppsaar3oz.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmppsaar3oz.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppsaar3oz.jl:23\ntest set: Test Failed at /tmp/tmppsaar3oz.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppsaar3oz.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppsaar3oz.jl:23\ntest set: Test Failed at /tmp/tmppsaar3oz.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppsaar3oz.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppsaar3oz.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppsaar3oz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq_4xomnf.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpq_4xomnf.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq_4xomnf.jl:23\ntest set: Test Failed at /tmp/tmpq_4xomnf.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq_4xomnf.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq_4xomnf.jl:23\ntest set: Test Failed at /tmp/tmpq_4xomnf.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq_4xomnf.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq_4xomnf.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq_4xomnf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpisge5n46.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpisge5n46.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpisge5n46.jl:23\\ntest set: Test Failed at /tmp/tmpisge5n46.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpisge5n46.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpisge5n46.jl:23\\ntest set: Test Failed at /tmp/tmpisge5n46.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpisge5n46.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpisge5n46.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2xt04en9.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp2xt04en9.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2xt04en9.jl:23\ntest set: Test Failed at /tmp/tmp2xt04en9.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2xt04en9.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2xt04en9.jl:23\ntest set: Test Failed at /tmp/tmp2xt04en9.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2xt04en9.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2xt04en9.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2xt04en9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp77l58n_d.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp77l58n_d.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp77l58n_d.jl:23\ntest set: Test Failed at /tmp/tmp77l58n_d.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp77l58n_d.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp77l58n_d.jl:23\ntest set: Test Failed at /tmp/tmp77l58n_d.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp77l58n_d.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp77l58n_d.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp77l58n_d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpn0p4n1ip.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpn0p4n1ip.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpn0p4n1ip.jl:23\\ntest set: Test Failed at /tmp/tmpn0p4n1ip.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpn0p4n1ip.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpn0p4n1ip.jl:23\\ntest set: Test Failed at /tmp/tmpn0p4n1ip.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpn0p4n1ip.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpn0p4n1ip.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6jehut5s.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6jehut5s.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6jehut5s.jl:23\\ntest set: Test Failed at /tmp/tmp6jehut5s.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp6jehut5s.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6jehut5s.jl:23\\ntest set: Test Failed at /tmp/tmp6jehut5s.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp6jehut5s.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6jehut5s.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpas6vobba.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpas6vobba.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpas6vobba.jl:23\ntest set: Test Failed at /tmp/tmpas6vobba.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpas6vobba.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpas6vobba.jl:23\ntest set: Test Failed at /tmp/tmpas6vobba.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpas6vobba.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpas6vobba.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpas6vobba.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwzecyp4i.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpwzecyp4i.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwzecyp4i.jl:23\ntest set: Test Failed at /tmp/tmpwzecyp4i.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwzecyp4i.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwzecyp4i.jl:23\ntest set: Test Failed at /tmp/tmpwzecyp4i.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwzecyp4i.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwzecyp4i.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwzecyp4i.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjbysujhx.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpjbysujhx.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjbysujhx.jl:23\ntest set: Test Failed at /tmp/tmpjbysujhx.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjbysujhx.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjbysujhx.jl:23\ntest set: Test Failed at /tmp/tmpjbysujhx.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjbysujhx.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjbysujhx.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjbysujhx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0h7qca09.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp0h7qca09.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0h7qca09.jl:23\ntest set: Test Failed at /tmp/tmp0h7qca09.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0h7qca09.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0h7qca09.jl:23\ntest set: Test Failed at /tmp/tmp0h7qca09.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0h7qca09.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0h7qca09.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0h7qca09.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpkw9huq_6.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkw9huq_6.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkw9huq_6.jl:23\\ntest set: Test Failed at /tmp/tmpkw9huq_6.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpkw9huq_6.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkw9huq_6.jl:23\\ntest set: Test Failed at /tmp/tmpkw9huq_6.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpkw9huq_6.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkw9huq_6.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphlrwvuoh.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmphlrwvuoh.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphlrwvuoh.jl:23\ntest set: Test Failed at /tmp/tmphlrwvuoh.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphlrwvuoh.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphlrwvuoh.jl:23\ntest set: Test Failed at /tmp/tmphlrwvuoh.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphlrwvuoh.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphlrwvuoh.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphlrwvuoh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbocy5_yi.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpbocy5_yi.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbocy5_yi.jl:23\\ntest set: Test Failed at /tmp/tmpbocy5_yi.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpbocy5_yi.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbocy5_yi.jl:23\\ntest set: Test Failed at /tmp/tmpbocy5_yi.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpbocy5_yi.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbocy5_yi.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprg7zzjcb.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmprg7zzjcb.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprg7zzjcb.jl:23\ntest set: Test Failed at /tmp/tmprg7zzjcb.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprg7zzjcb.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprg7zzjcb.jl:23\ntest set: Test Failed at /tmp/tmprg7zzjcb.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprg7zzjcb.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprg7zzjcb.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprg7zzjcb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps1ucj_x0.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmps1ucj_x0.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps1ucj_x0.jl:23\ntest set: Test Failed at /tmp/tmps1ucj_x0.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps1ucj_x0.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps1ucj_x0.jl:23\ntest set: Test Failed at /tmp/tmps1ucj_x0.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps1ucj_x0.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps1ucj_x0.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps1ucj_x0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ry32ny8.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp9ry32ny8.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ry32ny8.jl:23\ntest set: Test Failed at /tmp/tmp9ry32ny8.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ry32ny8.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ry32ny8.jl:23\ntest set: Test Failed at /tmp/tmp9ry32ny8.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9ry32ny8.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ry32ny8.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ry32ny8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj9npjrkr.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpj9npjrkr.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj9npjrkr.jl:23\ntest set: Test Failed at /tmp/tmpj9npjrkr.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj9npjrkr.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj9npjrkr.jl:23\ntest set: Test Failed at /tmp/tmpj9npjrkr.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj9npjrkr.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj9npjrkr.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj9npjrkr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps4gmcxkh.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmps4gmcxkh.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps4gmcxkh.jl:23\ntest set: Test Failed at /tmp/tmps4gmcxkh.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps4gmcxkh.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps4gmcxkh.jl:23\ntest set: Test Failed at /tmp/tmps4gmcxkh.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps4gmcxkh.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps4gmcxkh.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps4gmcxkh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi96bv92u.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpi96bv92u.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi96bv92u.jl:23\ntest set: Test Failed at /tmp/tmpi96bv92u.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi96bv92u.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi96bv92u.jl:23\ntest set: Test Failed at /tmp/tmpi96bv92u.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpi96bv92u.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi96bv92u.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi96bv92u.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpage5_zi_.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpage5_zi_.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpage5_zi_.jl:23\ntest set: Test Failed at /tmp/tmpage5_zi_.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpage5_zi_.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpage5_zi_.jl:23\ntest set: Test Failed at /tmp/tmpage5_zi_.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpage5_zi_.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpage5_zi_.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpage5_zi_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 0\n    end\n    if n == 1\n        return 1\n    end\n    return n *\
    \ special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxpaheyj1.jl:26\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpxpaheyj1.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxpaheyj1.jl:25\ntest set: Test Failed at /tmp/tmpxpaheyj1.jl:27\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxpaheyj1.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxpaheyj1.jl:25\ntest set: Test Failed at /tmp/tmpxpaheyj1.jl:28\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxpaheyj1.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxpaheyj1.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxpaheyj1.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpom9mxy0l.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpom9mxy0l.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpom9mxy0l.jl:23\ntest set: Test Failed at /tmp/tmpom9mxy0l.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpom9mxy0l.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpom9mxy0l.jl:23\ntest set: Test Failed at /tmp/tmpom9mxy0l.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpom9mxy0l.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpom9mxy0l.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpom9mxy0l.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprlolv4v5.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmprlolv4v5.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprlolv4v5.jl:23\ntest set: Test Failed at /tmp/tmprlolv4v5.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprlolv4v5.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprlolv4v5.jl:23\ntest set: Test Failed at /tmp/tmprlolv4v5.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprlolv4v5.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprlolv4v5.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprlolv4v5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph9hubsrf.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmph9hubsrf.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph9hubsrf.jl:23\ntest set: Test Failed at /tmp/tmph9hubsrf.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph9hubsrf.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph9hubsrf.jl:23\ntest set: Test Failed at /tmp/tmph9hubsrf.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph9hubsrf.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph9hubsrf.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9hubsrf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_aq8y8bw.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_aq8y8bw.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_aq8y8bw.jl:23\\ntest set: Test Failed at /tmp/tmp_aq8y8bw.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_aq8y8bw.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_aq8y8bw.jl:23\\ntest set: Test Failed at /tmp/tmp_aq8y8bw.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp_aq8y8bw.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_aq8y8bw.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqn85xfcy.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpqn85xfcy.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqn85xfcy.jl:23\ntest set: Test Failed at /tmp/tmpqn85xfcy.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqn85xfcy.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqn85xfcy.jl:23\ntest set: Test Failed at /tmp/tmpqn85xfcy.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqn85xfcy.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqn85xfcy.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqn85xfcy.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpty6kayuk.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpty6kayuk.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpty6kayuk.jl:23\ntest set: Test Failed at /tmp/tmpty6kayuk.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpty6kayuk.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpty6kayuk.jl:23\ntest set: Test Failed at /tmp/tmpty6kayuk.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpty6kayuk.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpty6kayuk.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpty6kayuk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2yqolvbp.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp2yqolvbp.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2yqolvbp.jl:23\ntest set: Test Failed at /tmp/tmp2yqolvbp.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2yqolvbp.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2yqolvbp.jl:23\ntest set: Test Failed at /tmp/tmp2yqolvbp.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2yqolvbp.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2yqolvbp.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2yqolvbp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpi34ftzrw.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi34ftzrw.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi34ftzrw.jl:23\\ntest set: Test Failed at /tmp/tmpi34ftzrw.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpi34ftzrw.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi34ftzrw.jl:23\\ntest set: Test Failed at /tmp/tmpi34ftzrw.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpi34ftzrw.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi34ftzrw.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi3hrcmyr.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpi3hrcmyr.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi3hrcmyr.jl:23\ntest set: Test Failed at /tmp/tmpi3hrcmyr.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi3hrcmyr.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi3hrcmyr.jl:23\ntest set: Test Failed at /tmp/tmpi3hrcmyr.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpi3hrcmyr.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi3hrcmyr.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi3hrcmyr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn80z_r_t.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpn80z_r_t.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn80z_r_t.jl:23\ntest set: Test Failed at /tmp/tmpn80z_r_t.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn80z_r_t.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn80z_r_t.jl:23\ntest set: Test Failed at /tmp/tmpn80z_r_t.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn80z_r_t.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn80z_r_t.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn80z_r_t.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7x9f7867.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp7x9f7867.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7x9f7867.jl:23\ntest set: Test Failed at /tmp/tmp7x9f7867.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7x9f7867.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7x9f7867.jl:23\ntest set: Test Failed at /tmp/tmp7x9f7867.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7x9f7867.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7x9f7867.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7x9f7867.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0tsig4x2.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp0tsig4x2.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0tsig4x2.jl:23\ntest set: Test Failed at /tmp/tmp0tsig4x2.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0tsig4x2.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0tsig4x2.jl:23\ntest set: Test Failed at /tmp/tmp0tsig4x2.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0tsig4x2.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0tsig4x2.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0tsig4x2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdohejm9z.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpdohejm9z.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdohejm9z.jl:23\ntest set: Test Failed at /tmp/tmpdohejm9z.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdohejm9z.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdohejm9z.jl:23\ntest set: Test Failed at /tmp/tmpdohejm9z.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdohejm9z.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdohejm9z.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdohejm9z.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxj8y69f4.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpxj8y69f4.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxj8y69f4.jl:23\\ntest set: Test Failed at /tmp/tmpxj8y69f4.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxj8y69f4.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxj8y69f4.jl:23\\ntest set: Test Failed at /tmp/tmpxj8y69f4.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpxj8y69f4.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxj8y69f4.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxquufnm0.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpxquufnm0.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxquufnm0.jl:23\ntest set: Test Failed at /tmp/tmpxquufnm0.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxquufnm0.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxquufnm0.jl:23\ntest set: Test Failed at /tmp/tmpxquufnm0.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxquufnm0.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxquufnm0.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxquufnm0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpmplu5vne.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpmplu5vne.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmplu5vne.jl:23\\ntest set: Test Failed at /tmp/tmpmplu5vne.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpmplu5vne.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmplu5vne.jl:23\\ntest set: Test Failed at /tmp/tmpmplu5vne.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpmplu5vne.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmplu5vne.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplmsaqcdf.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmplmsaqcdf.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmsaqcdf.jl:23\ntest set: Test Failed at /tmp/tmplmsaqcdf.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplmsaqcdf.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmsaqcdf.jl:23\ntest set: Test Failed at /tmp/tmplmsaqcdf.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplmsaqcdf.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmsaqcdf.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplmsaqcdf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm8pohzp0.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpm8pohzp0.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm8pohzp0.jl:23\ntest set: Test Failed at /tmp/tmpm8pohzp0.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm8pohzp0.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm8pohzp0.jl:23\ntest set: Test Failed at /tmp/tmpm8pohzp0.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm8pohzp0.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm8pohzp0.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm8pohzp0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz1ezg_nz.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpz1ezg_nz.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz1ezg_nz.jl:23\ntest set: Test Failed at /tmp/tmpz1ezg_nz.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz1ezg_nz.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz1ezg_nz.jl:23\ntest set: Test Failed at /tmp/tmpz1ezg_nz.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpz1ezg_nz.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz1ezg_nz.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz1ezg_nz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3th6uuhv.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp3th6uuhv.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3th6uuhv.jl:23\ntest set: Test Failed at /tmp/tmp3th6uuhv.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3th6uuhv.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3th6uuhv.jl:23\ntest set: Test Failed at /tmp/tmp3th6uuhv.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3th6uuhv.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3th6uuhv.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3th6uuhv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgnvd41rz.jl:24\\n  Expression: candidate(4)\
    \ == 288\\n   Evaluated: 24 == 288\\nStacktrace:\\n [1] top-level scope at /tmp/tmpgnvd41rz.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgnvd41rz.jl:23\\ntest set: Test Failed at /tmp/tmpgnvd41rz.jl:25\\\
    n  Expression: candidate(5) == 34560\\n   Evaluated: 120 == 34560\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpgnvd41rz.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgnvd41rz.jl:23\\ntest set: Test Failed at /tmp/tmpgnvd41rz.jl:26\\\
    n  Expression: candidate(7) == 125411328000\\n   Evaluated: 5040 == 125411328000\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpgnvd41rz.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgnvd41rz.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     3      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpehkedwi4.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpehkedwi4.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpehkedwi4.jl:23\ntest set: Test Failed at /tmp/tmpehkedwi4.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpehkedwi4.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpehkedwi4.jl:23\ntest set: Test Failed at /tmp/tmpehkedwi4.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpehkedwi4.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpehkedwi4.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpehkedwi4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphrixt0yl.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmphrixt0yl.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphrixt0yl.jl:23\ntest set: Test Failed at /tmp/tmphrixt0yl.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphrixt0yl.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphrixt0yl.jl:23\ntest set: Test Failed at /tmp/tmphrixt0yl.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphrixt0yl.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphrixt0yl.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphrixt0yl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqnoallzo.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpqnoallzo.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqnoallzo.jl:23\ntest set: Test Failed at /tmp/tmpqnoallzo.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqnoallzo.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqnoallzo.jl:23\ntest set: Test Failed at /tmp/tmpqnoallzo.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqnoallzo.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqnoallzo.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqnoallzo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpelngyzag.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpelngyzag.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpelngyzag.jl:23\ntest set: Test Failed at /tmp/tmpelngyzag.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpelngyzag.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpelngyzag.jl:23\ntest set: Test Failed at /tmp/tmpelngyzag.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpelngyzag.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpelngyzag.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpelngyzag.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfpkkbdpt.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpfpkkbdpt.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfpkkbdpt.jl:23\ntest set: Test Failed at /tmp/tmpfpkkbdpt.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfpkkbdpt.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfpkkbdpt.jl:23\ntest set: Test Failed at /tmp/tmpfpkkbdpt.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfpkkbdpt.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfpkkbdpt.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfpkkbdpt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaf7ltrtj.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpaf7ltrtj.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaf7ltrtj.jl:23\ntest set: Test Failed at /tmp/tmpaf7ltrtj.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaf7ltrtj.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaf7ltrtj.jl:23\ntest set: Test Failed at /tmp/tmpaf7ltrtj.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpaf7ltrtj.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaf7ltrtj.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaf7ltrtj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfpkts7hr.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpfpkts7hr.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfpkts7hr.jl:23\ntest set: Test Failed at /tmp/tmpfpkts7hr.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfpkts7hr.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfpkts7hr.jl:23\ntest set: Test Failed at /tmp/tmpfpkts7hr.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfpkts7hr.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfpkts7hr.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfpkts7hr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4x5i2vsp.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp4x5i2vsp.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4x5i2vsp.jl:23\ntest set: Test Failed at /tmp/tmp4x5i2vsp.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4x5i2vsp.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4x5i2vsp.jl:23\ntest set: Test Failed at /tmp/tmp4x5i2vsp.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4x5i2vsp.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4x5i2vsp.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4x5i2vsp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppxsdlhgh.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmppxsdlhgh.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppxsdlhgh.jl:23\ntest set: Test Failed at /tmp/tmppxsdlhgh.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppxsdlhgh.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppxsdlhgh.jl:23\ntest set: Test Failed at /tmp/tmppxsdlhgh.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppxsdlhgh.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppxsdlhgh.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppxsdlhgh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprx4osp2d.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmprx4osp2d.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprx4osp2d.jl:23\ntest set: Test Failed at /tmp/tmprx4osp2d.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprx4osp2d.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprx4osp2d.jl:23\ntest set: Test Failed at /tmp/tmprx4osp2d.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprx4osp2d.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprx4osp2d.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprx4osp2d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmvhk5ig5.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpmvhk5ig5.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmvhk5ig5.jl:23\ntest set: Test Failed at /tmp/tmpmvhk5ig5.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmvhk5ig5.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmvhk5ig5.jl:23\ntest set: Test Failed at /tmp/tmpmvhk5ig5.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmvhk5ig5.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmvhk5ig5.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmvhk5ig5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5ho3hsfb.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp5ho3hsfb.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5ho3hsfb.jl:23\ntest set: Test Failed at /tmp/tmp5ho3hsfb.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5ho3hsfb.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5ho3hsfb.jl:23\ntest set: Test Failed at /tmp/tmp5ho3hsfb.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5ho3hsfb.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5ho3hsfb.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5ho3hsfb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps0hgpxjn.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmps0hgpxjn.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps0hgpxjn.jl:23\ntest set: Test Failed at /tmp/tmps0hgpxjn.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps0hgpxjn.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps0hgpxjn.jl:23\ntest set: Test Failed at /tmp/tmps0hgpxjn.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps0hgpxjn.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps0hgpxjn.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps0hgpxjn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpklgf8231.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpklgf8231.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpklgf8231.jl:23\ntest set: Test Failed at /tmp/tmpklgf8231.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpklgf8231.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpklgf8231.jl:23\ntest set: Test Failed at /tmp/tmpklgf8231.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpklgf8231.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpklgf8231.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpklgf8231.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjmxnma32.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpjmxnma32.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjmxnma32.jl:23\ntest set: Test Failed at /tmp/tmpjmxnma32.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjmxnma32.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjmxnma32.jl:23\ntest set: Test Failed at /tmp/tmpjmxnma32.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjmxnma32.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjmxnma32.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjmxnma32.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplev862pk.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmplev862pk.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplev862pk.jl:23\ntest set: Test Failed at /tmp/tmplev862pk.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplev862pk.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplev862pk.jl:23\ntest set: Test Failed at /tmp/tmplev862pk.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplev862pk.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplev862pk.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplev862pk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp84g0btkp.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp84g0btkp.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp84g0btkp.jl:23\ntest set: Test Failed at /tmp/tmp84g0btkp.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp84g0btkp.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp84g0btkp.jl:23\ntest set: Test Failed at /tmp/tmp84g0btkp.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp84g0btkp.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp84g0btkp.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp84g0btkp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7h1c6mrd.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp7h1c6mrd.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7h1c6mrd.jl:23\ntest set: Test Failed at /tmp/tmp7h1c6mrd.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7h1c6mrd.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7h1c6mrd.jl:23\ntest set: Test Failed at /tmp/tmp7h1c6mrd.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7h1c6mrd.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7h1c6mrd.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7h1c6mrd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu5so7dsz.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmpu5so7dsz.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5so7dsz.jl:23\ntest set: Test Failed at /tmp/tmpu5so7dsz.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu5so7dsz.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5so7dsz.jl:23\ntest set: Test Failed at /tmp/tmpu5so7dsz.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpu5so7dsz.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5so7dsz.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu5so7dsz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8u6ttp6y.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] top-level scope at /tmp/tmp8u6ttp6y.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8u6ttp6y.jl:23\ntest set: Test Failed at /tmp/tmp8u6ttp6y.jl:25\n\
    \  Expression: candidate(5) == 34560\n   Evaluated: 120 == 34560\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8u6ttp6y.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8u6ttp6y.jl:23\ntest set: Test Failed at /tmp/tmp8u6ttp6y.jl:26\n\
    \  Expression: candidate(7) == 125411328000\n   Evaluated: 5040 == 125411328000\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8u6ttp6y.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8u6ttp6y.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8u6ttp6y.jl:21\n"
  exit_code: 1
  status: SyntaxError
