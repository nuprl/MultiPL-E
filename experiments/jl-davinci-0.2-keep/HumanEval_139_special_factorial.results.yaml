name: HumanEval_139_special_factorial
language: julia
results:
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpedr4pn75.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpedr4pn75.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpedr4pn75.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpedr4pn75.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpedr4pn75.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpedr4pn75.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpedr4pn75.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpedr4pn75.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpedr4pn75.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpedr4pn75.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_k7guirx.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_k7guirx.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_k7guirx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_k7guirx.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_k7guirx.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_k7guirx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_k7guirx.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_k7guirx.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_k7guirx.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_k7guirx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_geo2vzy.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_geo2vzy.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_geo2vzy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_geo2vzy.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_geo2vzy.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_geo2vzy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_geo2vzy.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_geo2vzy.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_geo2vzy.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_geo2vzy.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppdlt4ykz.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppdlt4ykz.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppdlt4ykz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppdlt4ykz.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppdlt4ykz.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppdlt4ykz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppdlt4ykz.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppdlt4ykz.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppdlt4ykz.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppdlt4ykz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpje5f1v_s.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpje5f1v_s.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpje5f1v_s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpje5f1v_s.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpje5f1v_s.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpje5f1v_s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpje5f1v_s.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpje5f1v_s.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpje5f1v_s.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpje5f1v_s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp8jvnpct.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp8jvnpct.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp8jvnpct.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp8jvnpct.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp8jvnpct.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp8jvnpct.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp8jvnpct.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp8jvnpct.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp8jvnpct.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp8jvnpct.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9og3xuzs.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9og3xuzs.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9og3xuzs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9og3xuzs.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9og3xuzs.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9og3xuzs.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9og3xuzs.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9og3xuzs.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9og3xuzs.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9og3xuzs.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph3s14c71.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph3s14c71.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3s14c71.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph3s14c71.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph3s14c71.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3s14c71.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph3s14c71.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph3s14c71.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3s14c71.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph3s14c71.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjjnzh13r.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjjnzh13r.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjjnzh13r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjjnzh13r.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjjnzh13r.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjjnzh13r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjjnzh13r.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjjnzh13r.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjjnzh13r.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjjnzh13r.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9t07ijak.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9t07ijak.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9t07ijak.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9t07ijak.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9t07ijak.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9t07ijak.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9t07ijak.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9t07ijak.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9t07ijak.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9t07ijak.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ return 0\n    end\n    if n == 0\n        return 1\n    end\n    return n *\
    \ special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplaf561f1.jl:26\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplaf561f1.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplaf561f1.jl:25\ntest set: Test\
    \ Failed at /tmp/tmplaf561f1.jl:27\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplaf561f1.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplaf561f1.jl:25\ntest set: Test\
    \ Failed at /tmp/tmplaf561f1.jl:28\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplaf561f1.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplaf561f1.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplaf561f1.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2brolm2y.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2brolm2y.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2brolm2y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2brolm2y.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2brolm2y.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2brolm2y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2brolm2y.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2brolm2y.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2brolm2y.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2brolm2y.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeddjg9eo.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeddjg9eo.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeddjg9eo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeddjg9eo.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeddjg9eo.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeddjg9eo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeddjg9eo.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeddjg9eo.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeddjg9eo.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeddjg9eo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9pm_fwfx.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9pm_fwfx.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9pm_fwfx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9pm_fwfx.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9pm_fwfx.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9pm_fwfx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9pm_fwfx.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9pm_fwfx.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9pm_fwfx.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9pm_fwfx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdp0qwi3e.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdp0qwi3e.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdp0qwi3e.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdp0qwi3e.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdp0qwi3e.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdp0qwi3e.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdp0qwi3e.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdp0qwi3e.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdp0qwi3e.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdp0qwi3e.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpesqk_zud.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpesqk_zud.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpesqk_zud.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpesqk_zud.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpesqk_zud.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpesqk_zud.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpesqk_zud.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpesqk_zud.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpesqk_zud.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpesqk_zud.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppl5y6d_5.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppl5y6d_5.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppl5y6d_5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppl5y6d_5.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppl5y6d_5.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppl5y6d_5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppl5y6d_5.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppl5y6d_5.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppl5y6d_5.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppl5y6d_5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk714yixn.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk714yixn.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk714yixn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk714yixn.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk714yixn.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk714yixn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk714yixn.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk714yixn.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk714yixn.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk714yixn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ return 0\n    end\n    if n == 0\n        return 1\n    end\n    return n *\
    \ special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4c_mohl2.jl:26\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4c_mohl2.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4c_mohl2.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp4c_mohl2.jl:27\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4c_mohl2.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4c_mohl2.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp4c_mohl2.jl:28\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4c_mohl2.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4c_mohl2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4c_mohl2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj0dx4drt.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj0dx4drt.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj0dx4drt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj0dx4drt.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj0dx4drt.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj0dx4drt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj0dx4drt.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj0dx4drt.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj0dx4drt.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj0dx4drt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl89uumez.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl89uumez.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl89uumez.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl89uumez.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl89uumez.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl89uumez.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl89uumez.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl89uumez.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl89uumez.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl89uumez.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    factorial = 1\n  \
    \  for i in 1:n\n        factorial *= i\n    end\n    return factorial\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp38yi6kgm.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp38yi6kgm.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp38yi6kgm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp38yi6kgm.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp38yi6kgm.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp38yi6kgm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp38yi6kgm.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp38yi6kgm.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp38yi6kgm.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp38yi6kgm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmputtsp8yu.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmputtsp8yu.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputtsp8yu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmputtsp8yu.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmputtsp8yu.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputtsp8yu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmputtsp8yu.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmputtsp8yu.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputtsp8yu.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmputtsp8yu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5_5ozglp.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5_5ozglp.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5_5ozglp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5_5ozglp.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5_5ozglp.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5_5ozglp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5_5ozglp.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5_5ozglp.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5_5ozglp.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5_5ozglp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxgs8b4p3.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxgs8b4p3.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxgs8b4p3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxgs8b4p3.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxgs8b4p3.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxgs8b4p3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxgs8b4p3.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxgs8b4p3.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxgs8b4p3.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxgs8b4p3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb55t6lye.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb55t6lye.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb55t6lye.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb55t6lye.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb55t6lye.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb55t6lye.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb55t6lye.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb55t6lye.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb55t6lye.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb55t6lye.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps2pquxw7.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps2pquxw7.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps2pquxw7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps2pquxw7.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps2pquxw7.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps2pquxw7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps2pquxw7.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps2pquxw7.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps2pquxw7.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps2pquxw7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplmk0f3i4.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplmk0f3i4.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplmk0f3i4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplmk0f3i4.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplmk0f3i4.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplmk0f3i4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplmk0f3i4.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplmk0f3i4.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplmk0f3i4.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplmk0f3i4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbn9wypgn.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbn9wypgn.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbn9wypgn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbn9wypgn.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbn9wypgn.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbn9wypgn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbn9wypgn.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbn9wypgn.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbn9wypgn.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbn9wypgn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoqn3xd69.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoqn3xd69.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoqn3xd69.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoqn3xd69.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoqn3xd69.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoqn3xd69.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoqn3xd69.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoqn3xd69.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoqn3xd69.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoqn3xd69.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0njtoo7h.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0njtoo7h.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0njtoo7h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0njtoo7h.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0njtoo7h.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0njtoo7h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0njtoo7h.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0njtoo7h.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0njtoo7h.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0njtoo7h.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpulj3ogz8.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpulj3ogz8.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpulj3ogz8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpulj3ogz8.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpulj3ogz8.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpulj3ogz8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpulj3ogz8.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpulj3ogz8.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpulj3ogz8.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpulj3ogz8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    # YOUR CODE HERE\n\
    \    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppez306a0.jl:21\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 0 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppez306a0.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppez306a0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppez306a0.jl:22\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 0 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppez306a0.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppez306a0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppez306a0.jl:23\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 0 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppez306a0.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppez306a0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppez306a0.jl:24\n  Expression: candidate(1) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppez306a0.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppez306a0.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppez306a0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps53pi8wm.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps53pi8wm.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps53pi8wm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps53pi8wm.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps53pi8wm.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps53pi8wm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps53pi8wm.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps53pi8wm.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps53pi8wm.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps53pi8wm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjkvgpdfq.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjkvgpdfq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjkvgpdfq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjkvgpdfq.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjkvgpdfq.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjkvgpdfq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjkvgpdfq.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjkvgpdfq.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjkvgpdfq.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjkvgpdfq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk1dunhmd.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk1dunhmd.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1dunhmd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk1dunhmd.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk1dunhmd.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1dunhmd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpk1dunhmd.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk1dunhmd.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1dunhmd.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk1dunhmd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkp2719w5.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkp2719w5.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkp2719w5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkp2719w5.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkp2719w5.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkp2719w5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkp2719w5.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkp2719w5.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkp2719w5.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkp2719w5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    factorial = 1\n  \
    \  for i in 1:n\n        factorial *= i\n    end\n    return factorial\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6k0u0z_y.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6k0u0z_y.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6k0u0z_y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6k0u0z_y.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6k0u0z_y.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6k0u0z_y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6k0u0z_y.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6k0u0z_y.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6k0u0z_y.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6k0u0z_y.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 0\n    end\n    result = 1\n    for i in 1:n\n        result *= i\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr1xiqx_4.jl:27\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr1xiqx_4.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr1xiqx_4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpr1xiqx_4.jl:28\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr1xiqx_4.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr1xiqx_4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpr1xiqx_4.jl:29\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr1xiqx_4.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr1xiqx_4.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr1xiqx_4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu6qfkf4r.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu6qfkf4r.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu6qfkf4r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu6qfkf4r.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu6qfkf4r.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu6qfkf4r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu6qfkf4r.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu6qfkf4r.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu6qfkf4r.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu6qfkf4r.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqewyt5vz.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqewyt5vz.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqewyt5vz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqewyt5vz.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqewyt5vz.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqewyt5vz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqewyt5vz.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqewyt5vz.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqewyt5vz.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqewyt5vz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm4b5ht3s.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm4b5ht3s.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm4b5ht3s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm4b5ht3s.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm4b5ht3s.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm4b5ht3s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpm4b5ht3s.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm4b5ht3s.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm4b5ht3s.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm4b5ht3s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaaipwn04.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaaipwn04.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaaipwn04.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaaipwn04.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaaipwn04.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaaipwn04.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaaipwn04.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaaipwn04.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaaipwn04.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaaipwn04.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprt32xwv_.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprt32xwv_.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprt32xwv_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprt32xwv_.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprt32xwv_.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprt32xwv_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprt32xwv_.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprt32xwv_.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprt32xwv_.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprt32xwv_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ return 0\n    end\n    if n == 0\n        return 1\n    end\n    return n *\
    \ special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6aabnmez.jl:26\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6aabnmez.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6aabnmez.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp6aabnmez.jl:27\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6aabnmez.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6aabnmez.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp6aabnmez.jl:28\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6aabnmez.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6aabnmez.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6aabnmez.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    # YOUR CODE HERE\n\
    \    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdcmo123t.jl:21\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 0 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdcmo123t.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdcmo123t.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdcmo123t.jl:22\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 0 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdcmo123t.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdcmo123t.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdcmo123t.jl:23\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 0 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdcmo123t.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdcmo123t.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdcmo123t.jl:24\n  Expression: candidate(1) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdcmo123t.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdcmo123t.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdcmo123t.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpblc5i66q.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpblc5i66q.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpblc5i66q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpblc5i66q.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpblc5i66q.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpblc5i66q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpblc5i66q.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpblc5i66q.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpblc5i66q.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpblc5i66q.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmdgo66gv.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmdgo66gv.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmdgo66gv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmdgo66gv.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmdgo66gv.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmdgo66gv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmdgo66gv.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmdgo66gv.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmdgo66gv.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmdgo66gv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_wixajra.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_wixajra.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_wixajra.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_wixajra.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_wixajra.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_wixajra.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_wixajra.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_wixajra.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_wixajra.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_wixajra.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1six8bqy.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1six8bqy.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1six8bqy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1six8bqy.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1six8bqy.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1six8bqy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1six8bqy.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1six8bqy.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1six8bqy.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1six8bqy.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps8v6coh8.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps8v6coh8.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps8v6coh8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps8v6coh8.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps8v6coh8.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps8v6coh8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps8v6coh8.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps8v6coh8.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps8v6coh8.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps8v6coh8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyzxeo5te.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyzxeo5te.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyzxeo5te.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyzxeo5te.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyzxeo5te.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyzxeo5te.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyzxeo5te.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyzxeo5te.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyzxeo5te.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyzxeo5te.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvnuhp_9w.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvnuhp_9w.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvnuhp_9w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvnuhp_9w.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvnuhp_9w.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvnuhp_9w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvnuhp_9w.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvnuhp_9w.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvnuhp_9w.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvnuhp_9w.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphvorz44m.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphvorz44m.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphvorz44m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphvorz44m.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphvorz44m.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphvorz44m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphvorz44m.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphvorz44m.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphvorz44m.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphvorz44m.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6vw1pg_l.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6vw1pg_l.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6vw1pg_l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6vw1pg_l.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6vw1pg_l.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6vw1pg_l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6vw1pg_l.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6vw1pg_l.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6vw1pg_l.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6vw1pg_l.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpecp8anb2.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpecp8anb2.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpecp8anb2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpecp8anb2.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpecp8anb2.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpecp8anb2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpecp8anb2.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpecp8anb2.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpecp8anb2.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpecp8anb2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmtc51cgi.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmtc51cgi.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmtc51cgi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmtc51cgi.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmtc51cgi.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmtc51cgi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmtc51cgi.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmtc51cgi.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmtc51cgi.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmtc51cgi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuf03igh1.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuf03igh1.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuf03igh1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuf03igh1.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuf03igh1.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuf03igh1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpuf03igh1.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuf03igh1.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuf03igh1.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuf03igh1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpukg340xz.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpukg340xz.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpukg340xz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpukg340xz.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpukg340xz.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpukg340xz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpukg340xz.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpukg340xz.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpukg340xz.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpukg340xz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpei6_2lkc.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpei6_2lkc.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpei6_2lkc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpei6_2lkc.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpei6_2lkc.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpei6_2lkc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpei6_2lkc.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpei6_2lkc.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpei6_2lkc.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpei6_2lkc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps43cxd__.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps43cxd__.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps43cxd__.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps43cxd__.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps43cxd__.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps43cxd__.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps43cxd__.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps43cxd__.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps43cxd__.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps43cxd__.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph9_vquno.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph9_vquno.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph9_vquno.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph9_vquno.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph9_vquno.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph9_vquno.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph9_vquno.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph9_vquno.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph9_vquno.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9_vquno.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeg8zcdx_.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeg8zcdx_.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeg8zcdx_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeg8zcdx_.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeg8zcdx_.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeg8zcdx_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeg8zcdx_.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeg8zcdx_.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeg8zcdx_.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeg8zcdx_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    factorial = 1\n  \
    \  for i in 1:n\n        factorial *= i\n    end\n    return factorial\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaxf6nena.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaxf6nena.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaxf6nena.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaxf6nena.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaxf6nena.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaxf6nena.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaxf6nena.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaxf6nena.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaxf6nena.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaxf6nena.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz91g1q2l.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz91g1q2l.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz91g1q2l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz91g1q2l.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz91g1q2l.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz91g1q2l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz91g1q2l.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz91g1q2l.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz91g1q2l.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz91g1q2l.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdw42vs85.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdw42vs85.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdw42vs85.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdw42vs85.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdw42vs85.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdw42vs85.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdw42vs85.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdw42vs85.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdw42vs85.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdw42vs85.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    factorial = 1\n  \
    \  for i in 1:n\n        factorial *= i\n    end\n    return factorial\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6w82zzpw.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6w82zzpw.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6w82zzpw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6w82zzpw.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6w82zzpw.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6w82zzpw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6w82zzpw.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6w82zzpw.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6w82zzpw.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6w82zzpw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp88h_rak6.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp88h_rak6.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp88h_rak6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp88h_rak6.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp88h_rak6.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp88h_rak6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp88h_rak6.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp88h_rak6.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp88h_rak6.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp88h_rak6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz2747pos.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz2747pos.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz2747pos.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz2747pos.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz2747pos.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz2747pos.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz2747pos.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz2747pos.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz2747pos.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz2747pos.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkzv_4d3d.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkzv_4d3d.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkzv_4d3d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkzv_4d3d.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkzv_4d3d.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkzv_4d3d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkzv_4d3d.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkzv_4d3d.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkzv_4d3d.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkzv_4d3d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 0\n    end\n    factorial = 1\n    for i in 1:n\n        factorial *=\
    \ i\n    end\n    return factorial\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpez3qs9t6.jl:27\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpez3qs9t6.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpez3qs9t6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpez3qs9t6.jl:28\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpez3qs9t6.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpez3qs9t6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpez3qs9t6.jl:29\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpez3qs9t6.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpez3qs9t6.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpez3qs9t6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpni3jreo3.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpni3jreo3.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpni3jreo3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpni3jreo3.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpni3jreo3.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpni3jreo3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpni3jreo3.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpni3jreo3.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpni3jreo3.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpni3jreo3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe3ftyncx.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe3ftyncx.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe3ftyncx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe3ftyncx.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe3ftyncx.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe3ftyncx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpe3ftyncx.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe3ftyncx.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe3ftyncx.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe3ftyncx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp79ve6q1m.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp79ve6q1m.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp79ve6q1m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp79ve6q1m.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp79ve6q1m.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp79ve6q1m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp79ve6q1m.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp79ve6q1m.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp79ve6q1m.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp79ve6q1m.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi5lqqf_2.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi5lqqf_2.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi5lqqf_2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi5lqqf_2.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi5lqqf_2.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi5lqqf_2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi5lqqf_2.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi5lqqf_2.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi5lqqf_2.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi5lqqf_2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppgos6xbj.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppgos6xbj.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppgos6xbj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppgos6xbj.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppgos6xbj.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppgos6xbj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppgos6xbj.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppgos6xbj.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppgos6xbj.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppgos6xbj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0hz31fru.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0hz31fru.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0hz31fru.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0hz31fru.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0hz31fru.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0hz31fru.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0hz31fru.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0hz31fru.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0hz31fru.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0hz31fru.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvijdts3n.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvijdts3n.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvijdts3n.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvijdts3n.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvijdts3n.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvijdts3n.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvijdts3n.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvijdts3n.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvijdts3n.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvijdts3n.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprlggy96o.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprlggy96o.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprlggy96o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprlggy96o.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprlggy96o.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprlggy96o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprlggy96o.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprlggy96o.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprlggy96o.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprlggy96o.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw3bg6olr.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw3bg6olr.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw3bg6olr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw3bg6olr.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw3bg6olr.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw3bg6olr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw3bg6olr.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw3bg6olr.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw3bg6olr.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw3bg6olr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 0\n    end\n    result = 1\n    for i in 1:n\n        result *= i\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7dift1gd.jl:27\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7dift1gd.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7dift1gd.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7dift1gd.jl:28\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7dift1gd.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7dift1gd.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7dift1gd.jl:29\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7dift1gd.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7dift1gd.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7dift1gd.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvheimq9z.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvheimq9z.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvheimq9z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvheimq9z.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvheimq9z.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvheimq9z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvheimq9z.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvheimq9z.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvheimq9z.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvheimq9z.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl529s8il.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl529s8il.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl529s8il.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl529s8il.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl529s8il.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl529s8il.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl529s8il.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl529s8il.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl529s8il.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl529s8il.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpktnss4li.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpktnss4li.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpktnss4li.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpktnss4li.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpktnss4li.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpktnss4li.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpktnss4li.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpktnss4li.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpktnss4li.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpktnss4li.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3dvicdmq.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3dvicdmq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3dvicdmq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3dvicdmq.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3dvicdmq.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3dvicdmq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3dvicdmq.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3dvicdmq.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3dvicdmq.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3dvicdmq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyj74fhxw.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyj74fhxw.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyj74fhxw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyj74fhxw.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyj74fhxw.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyj74fhxw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyj74fhxw.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyj74fhxw.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyj74fhxw.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyj74fhxw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpej0fljyi.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpej0fljyi.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpej0fljyi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpej0fljyi.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpej0fljyi.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpej0fljyi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpej0fljyi.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpej0fljyi.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpej0fljyi.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpej0fljyi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjsgvqtc3.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjsgvqtc3.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjsgvqtc3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjsgvqtc3.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjsgvqtc3.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjsgvqtc3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjsgvqtc3.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjsgvqtc3.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjsgvqtc3.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjsgvqtc3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptwkqi51q.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptwkqi51q.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptwkqi51q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptwkqi51q.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptwkqi51q.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptwkqi51q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptwkqi51q.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptwkqi51q.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptwkqi51q.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptwkqi51q.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    factorial = 1\n  \
    \  for i in 1:n\n        factorial *= i\n    end\n    return factorial\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkp4pj3vq.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkp4pj3vq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkp4pj3vq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkp4pj3vq.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkp4pj3vq.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkp4pj3vq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkp4pj3vq.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkp4pj3vq.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkp4pj3vq.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkp4pj3vq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ return 0\n    end\n    if n == 0\n        return 1\n    end\n    return n *\
    \ special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi4uhrkqm.jl:26\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi4uhrkqm.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi4uhrkqm.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpi4uhrkqm.jl:27\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi4uhrkqm.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi4uhrkqm.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpi4uhrkqm.jl:28\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi4uhrkqm.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi4uhrkqm.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi4uhrkqm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp745n0zew.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp745n0zew.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp745n0zew.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp745n0zew.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp745n0zew.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp745n0zew.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp745n0zew.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp745n0zew.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp745n0zew.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp745n0zew.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp98iw0tqa.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp98iw0tqa.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp98iw0tqa.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp98iw0tqa.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp98iw0tqa.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp98iw0tqa.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp98iw0tqa.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp98iw0tqa.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp98iw0tqa.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp98iw0tqa.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpepa_dc0e.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpepa_dc0e.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpepa_dc0e.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpepa_dc0e.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpepa_dc0e.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpepa_dc0e.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpepa_dc0e.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpepa_dc0e.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpepa_dc0e.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpepa_dc0e.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw580xpb3.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw580xpb3.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw580xpb3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw580xpb3.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw580xpb3.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw580xpb3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw580xpb3.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw580xpb3.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw580xpb3.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw580xpb3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpymkc37pb.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpymkc37pb.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpymkc37pb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymkc37pb.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpymkc37pb.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpymkc37pb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpymkc37pb.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpymkc37pb.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpymkc37pb.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpymkc37pb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpniiely08.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpniiely08.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpniiely08.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpniiely08.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpniiely08.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpniiely08.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpniiely08.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpniiely08.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpniiely08.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpniiely08.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv44w6_n6.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv44w6_n6.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv44w6_n6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv44w6_n6.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv44w6_n6.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv44w6_n6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv44w6_n6.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv44w6_n6.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv44w6_n6.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv44w6_n6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzzg8roz3.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzg8roz3.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzzg8roz3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzzg8roz3.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzg8roz3.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzzg8roz3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzzg8roz3.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzg8roz3.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzzg8roz3.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzzg8roz3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdabx5kkl.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdabx5kkl.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdabx5kkl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdabx5kkl.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdabx5kkl.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdabx5kkl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdabx5kkl.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdabx5kkl.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdabx5kkl.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdabx5kkl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeb0kyxpa.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeb0kyxpa.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeb0kyxpa.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeb0kyxpa.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeb0kyxpa.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeb0kyxpa.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeb0kyxpa.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeb0kyxpa.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeb0kyxpa.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeb0kyxpa.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpradkv6w5.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpradkv6w5.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpradkv6w5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpradkv6w5.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpradkv6w5.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpradkv6w5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpradkv6w5.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpradkv6w5.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpradkv6w5.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpradkv6w5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq7sx4wzo.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq7sx4wzo.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq7sx4wzo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq7sx4wzo.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq7sx4wzo.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq7sx4wzo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq7sx4wzo.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq7sx4wzo.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq7sx4wzo.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq7sx4wzo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_qlip_3z.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_qlip_3z.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_qlip_3z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_qlip_3z.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_qlip_3z.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_qlip_3z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_qlip_3z.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_qlip_3z.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_qlip_3z.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_qlip_3z.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvk1atovu.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvk1atovu.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvk1atovu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvk1atovu.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvk1atovu.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvk1atovu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvk1atovu.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvk1atovu.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvk1atovu.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvk1atovu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa059o0h1.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa059o0h1.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa059o0h1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa059o0h1.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa059o0h1.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa059o0h1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa059o0h1.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa059o0h1.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa059o0h1.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa059o0h1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyxnz_zkd.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyxnz_zkd.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyxnz_zkd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyxnz_zkd.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyxnz_zkd.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyxnz_zkd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyxnz_zkd.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyxnz_zkd.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyxnz_zkd.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyxnz_zkd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpawkoyh82.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpawkoyh82.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpawkoyh82.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpawkoyh82.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpawkoyh82.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpawkoyh82.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpawkoyh82.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpawkoyh82.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpawkoyh82.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpawkoyh82.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprpkhw4ik.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprpkhw4ik.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprpkhw4ik.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprpkhw4ik.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprpkhw4ik.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprpkhw4ik.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprpkhw4ik.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprpkhw4ik.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprpkhw4ik.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprpkhw4ik.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq7zwyxzg.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq7zwyxzg.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq7zwyxzg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq7zwyxzg.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq7zwyxzg.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq7zwyxzg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq7zwyxzg.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq7zwyxzg.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq7zwyxzg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq7zwyxzg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsmosjqwu.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsmosjqwu.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsmosjqwu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsmosjqwu.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsmosjqwu.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsmosjqwu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsmosjqwu.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsmosjqwu.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsmosjqwu.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsmosjqwu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzg3p5eof.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzg3p5eof.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzg3p5eof.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzg3p5eof.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzg3p5eof.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzg3p5eof.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzg3p5eof.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzg3p5eof.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzg3p5eof.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzg3p5eof.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4sqq9_fw.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4sqq9_fw.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4sqq9_fw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4sqq9_fw.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4sqq9_fw.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4sqq9_fw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4sqq9_fw.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4sqq9_fw.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4sqq9_fw.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4sqq9_fw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ return 0\n    end\n    if n == 0\n        return 1\n    end\n    return n *\
    \ special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph_39v85y.jl:26\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph_39v85y.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph_39v85y.jl:25\ntest set: Test\
    \ Failed at /tmp/tmph_39v85y.jl:27\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph_39v85y.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph_39v85y.jl:25\ntest set: Test\
    \ Failed at /tmp/tmph_39v85y.jl:28\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph_39v85y.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph_39v85y.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph_39v85y.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5f2bu2g9.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5f2bu2g9.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5f2bu2g9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5f2bu2g9.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5f2bu2g9.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5f2bu2g9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5f2bu2g9.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5f2bu2g9.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5f2bu2g9.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5f2bu2g9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsssfb10w.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsssfb10w.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsssfb10w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsssfb10w.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsssfb10w.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsssfb10w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsssfb10w.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsssfb10w.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsssfb10w.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsssfb10w.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy8n9cyr1.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy8n9cyr1.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8n9cyr1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy8n9cyr1.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy8n9cyr1.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8n9cyr1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy8n9cyr1.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy8n9cyr1.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8n9cyr1.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy8n9cyr1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq13q1t73.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq13q1t73.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq13q1t73.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq13q1t73.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq13q1t73.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq13q1t73.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq13q1t73.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq13q1t73.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq13q1t73.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq13q1t73.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzzw_g4pa.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzw_g4pa.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzzw_g4pa.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzzw_g4pa.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzw_g4pa.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzzw_g4pa.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzzw_g4pa.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzw_g4pa.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzzw_g4pa.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzzw_g4pa.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwi13l_z2.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwi13l_z2.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwi13l_z2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwi13l_z2.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwi13l_z2.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwi13l_z2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwi13l_z2.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwi13l_z2.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwi13l_z2.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwi13l_z2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5wgu2wx3.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5wgu2wx3.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5wgu2wx3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5wgu2wx3.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5wgu2wx3.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5wgu2wx3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5wgu2wx3.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5wgu2wx3.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5wgu2wx3.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5wgu2wx3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ return 0\n    end\n    if n == 0\n        return 1\n    end\n    return n *\
    \ special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8if7oppo.jl:26\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8if7oppo.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8if7oppo.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp8if7oppo.jl:27\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8if7oppo.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8if7oppo.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp8if7oppo.jl:28\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8if7oppo.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8if7oppo.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8if7oppo.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp90ez2g2p.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp90ez2g2p.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp90ez2g2p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90ez2g2p.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp90ez2g2p.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp90ez2g2p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90ez2g2p.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp90ez2g2p.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp90ez2g2p.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp90ez2g2p.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ly9q5h6.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9ly9q5h6.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9ly9q5h6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9ly9q5h6.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9ly9q5h6.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9ly9q5h6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9ly9q5h6.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9ly9q5h6.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9ly9q5h6.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ly9q5h6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp76cgobw.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp76cgobw.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp76cgobw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp76cgobw.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp76cgobw.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp76cgobw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp76cgobw.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp76cgobw.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp76cgobw.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp76cgobw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    factorial = 1\n  \
    \  for i in 1:n\n        factorial *= i\n    end\n    return factorial\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbruaimwg.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbruaimwg.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbruaimwg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbruaimwg.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbruaimwg.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbruaimwg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbruaimwg.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbruaimwg.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbruaimwg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbruaimwg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpna8try8_.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpna8try8_.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpna8try8_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpna8try8_.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpna8try8_.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpna8try8_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpna8try8_.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpna8try8_.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpna8try8_.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpna8try8_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi4oshnmw.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi4oshnmw.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi4oshnmw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi4oshnmw.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi4oshnmw.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi4oshnmw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpi4oshnmw.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi4oshnmw.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi4oshnmw.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi4oshnmw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnfvkzx15.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnfvkzx15.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnfvkzx15.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnfvkzx15.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnfvkzx15.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnfvkzx15.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnfvkzx15.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnfvkzx15.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnfvkzx15.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnfvkzx15.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzenibg_a.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzenibg_a.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzenibg_a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzenibg_a.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzenibg_a.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzenibg_a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzenibg_a.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzenibg_a.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzenibg_a.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzenibg_a.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmvtd1202.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmvtd1202.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvtd1202.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmvtd1202.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmvtd1202.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvtd1202.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmvtd1202.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmvtd1202.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvtd1202.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmvtd1202.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb24r6xz2.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb24r6xz2.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb24r6xz2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb24r6xz2.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb24r6xz2.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb24r6xz2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb24r6xz2.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb24r6xz2.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb24r6xz2.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb24r6xz2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq9oslv5o.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq9oslv5o.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq9oslv5o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq9oslv5o.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq9oslv5o.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq9oslv5o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq9oslv5o.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq9oslv5o.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq9oslv5o.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq9oslv5o.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"n must be positive\")\n    end\n    if n == 0\n        return 1\n  \
    \  end\n    return n * special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpaxebd5ig.jl:26\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaxebd5ig.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaxebd5ig.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpaxebd5ig.jl:27\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaxebd5ig.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaxebd5ig.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpaxebd5ig.jl:28\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaxebd5ig.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaxebd5ig.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaxebd5ig.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptlpn9uex.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptlpn9uex.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptlpn9uex.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptlpn9uex.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptlpn9uex.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptlpn9uex.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptlpn9uex.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptlpn9uex.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptlpn9uex.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptlpn9uex.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprgscthvf.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprgscthvf.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprgscthvf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprgscthvf.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprgscthvf.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprgscthvf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprgscthvf.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprgscthvf.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprgscthvf.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprgscthvf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjnegdcxg.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjnegdcxg.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjnegdcxg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjnegdcxg.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjnegdcxg.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjnegdcxg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjnegdcxg.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjnegdcxg.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjnegdcxg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjnegdcxg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz0jyngoe.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz0jyngoe.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz0jyngoe.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz0jyngoe.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz0jyngoe.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz0jyngoe.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz0jyngoe.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz0jyngoe.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz0jyngoe.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz0jyngoe.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp08gz7wy7.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp08gz7wy7.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp08gz7wy7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp08gz7wy7.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp08gz7wy7.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp08gz7wy7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp08gz7wy7.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp08gz7wy7.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp08gz7wy7.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp08gz7wy7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnowtjebr.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnowtjebr.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnowtjebr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnowtjebr.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnowtjebr.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnowtjebr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnowtjebr.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnowtjebr.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnowtjebr.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnowtjebr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps9b4zvb4.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps9b4zvb4.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps9b4zvb4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps9b4zvb4.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps9b4zvb4.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps9b4zvb4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps9b4zvb4.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps9b4zvb4.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps9b4zvb4.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps9b4zvb4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2d7t1dqq.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2d7t1dqq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2d7t1dqq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2d7t1dqq.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2d7t1dqq.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2d7t1dqq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2d7t1dqq.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2d7t1dqq.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2d7t1dqq.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2d7t1dqq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc4_jddpd.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc4_jddpd.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4_jddpd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc4_jddpd.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc4_jddpd.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4_jddpd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc4_jddpd.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc4_jddpd.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4_jddpd.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc4_jddpd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7r5xt83r.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7r5xt83r.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7r5xt83r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7r5xt83r.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7r5xt83r.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7r5xt83r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7r5xt83r.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7r5xt83r.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7r5xt83r.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7r5xt83r.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz4kgjgcu.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz4kgjgcu.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz4kgjgcu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz4kgjgcu.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz4kgjgcu.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz4kgjgcu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz4kgjgcu.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz4kgjgcu.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz4kgjgcu.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz4kgjgcu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx09mzul4.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx09mzul4.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx09mzul4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpx09mzul4.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx09mzul4.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx09mzul4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpx09mzul4.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx09mzul4.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx09mzul4.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx09mzul4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmaw4cslq.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmaw4cslq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmaw4cslq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmaw4cslq.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmaw4cslq.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmaw4cslq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmaw4cslq.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmaw4cslq.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmaw4cslq.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmaw4cslq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph0hmfofm.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph0hmfofm.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph0hmfofm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph0hmfofm.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph0hmfofm.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph0hmfofm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph0hmfofm.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph0hmfofm.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph0hmfofm.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph0hmfofm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy2z_s6re.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy2z_s6re.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2z_s6re.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy2z_s6re.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy2z_s6re.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2z_s6re.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy2z_s6re.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy2z_s6re.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2z_s6re.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy2z_s6re.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl2_kfex9.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl2_kfex9.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl2_kfex9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl2_kfex9.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl2_kfex9.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl2_kfex9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl2_kfex9.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl2_kfex9.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl2_kfex9.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl2_kfex9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps859foqy.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps859foqy.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps859foqy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps859foqy.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps859foqy.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps859foqy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps859foqy.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps859foqy.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps859foqy.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps859foqy.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph1cr9qz4.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph1cr9qz4.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph1cr9qz4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph1cr9qz4.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph1cr9qz4.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph1cr9qz4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmph1cr9qz4.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph1cr9qz4.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph1cr9qz4.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph1cr9qz4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwsdz1yy5.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwsdz1yy5.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwsdz1yy5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwsdz1yy5.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwsdz1yy5.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwsdz1yy5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwsdz1yy5.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwsdz1yy5.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwsdz1yy5.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwsdz1yy5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqrpdnvt5.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqrpdnvt5.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqrpdnvt5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqrpdnvt5.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqrpdnvt5.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqrpdnvt5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqrpdnvt5.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqrpdnvt5.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqrpdnvt5.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqrpdnvt5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr8x6h17i.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr8x6h17i.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr8x6h17i.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpr8x6h17i.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr8x6h17i.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr8x6h17i.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpr8x6h17i.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr8x6h17i.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr8x6h17i.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr8x6h17i.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_64owfp_.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_64owfp_.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_64owfp_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_64owfp_.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_64owfp_.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_64owfp_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_64owfp_.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_64owfp_.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_64owfp_.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_64owfp_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv429v7xg.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv429v7xg.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv429v7xg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv429v7xg.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv429v7xg.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv429v7xg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv429v7xg.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv429v7xg.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv429v7xg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv429v7xg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpey0b13ar.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpey0b13ar.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpey0b13ar.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpey0b13ar.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpey0b13ar.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpey0b13ar.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpey0b13ar.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpey0b13ar.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpey0b13ar.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpey0b13ar.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 0\n    end\n    if n == 1\n        return 1\n    end\n    return n *\
    \ special_factorial(n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi0qoc963.jl:26\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi0qoc963.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi0qoc963.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpi0qoc963.jl:27\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi0qoc963.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi0qoc963.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpi0qoc963.jl:28\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi0qoc963.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi0qoc963.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi0qoc963.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6h25jkdq.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6h25jkdq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6h25jkdq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6h25jkdq.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6h25jkdq.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6h25jkdq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6h25jkdq.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6h25jkdq.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6h25jkdq.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6h25jkdq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzxu2xi2p.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzxu2xi2p.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxu2xi2p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzxu2xi2p.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzxu2xi2p.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxu2xi2p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzxu2xi2p.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzxu2xi2p.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxu2xi2p.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzxu2xi2p.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaysaks_a.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaysaks_a.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaysaks_a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaysaks_a.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaysaks_a.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaysaks_a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaysaks_a.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaysaks_a.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaysaks_a.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaysaks_a.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqhvhg3ak.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqhvhg3ak.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqhvhg3ak.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqhvhg3ak.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqhvhg3ak.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqhvhg3ak.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqhvhg3ak.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqhvhg3ak.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqhvhg3ak.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqhvhg3ak.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdglvdcoa.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdglvdcoa.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdglvdcoa.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdglvdcoa.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdglvdcoa.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdglvdcoa.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdglvdcoa.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdglvdcoa.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdglvdcoa.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdglvdcoa.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp46ayq4i9.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp46ayq4i9.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp46ayq4i9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp46ayq4i9.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp46ayq4i9.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp46ayq4i9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp46ayq4i9.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp46ayq4i9.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp46ayq4i9.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp46ayq4i9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_c_bvi0d.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_c_bvi0d.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_c_bvi0d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_c_bvi0d.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_c_bvi0d.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_c_bvi0d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_c_bvi0d.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_c_bvi0d.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_c_bvi0d.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_c_bvi0d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfboszbrr.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfboszbrr.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfboszbrr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfboszbrr.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfboszbrr.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfboszbrr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfboszbrr.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfboszbrr.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfboszbrr.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfboszbrr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3ivd3idr.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3ivd3idr.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3ivd3idr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3ivd3idr.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3ivd3idr.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3ivd3idr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3ivd3idr.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3ivd3idr.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3ivd3idr.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ivd3idr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdoum_g3z.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdoum_g3z.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdoum_g3z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdoum_g3z.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdoum_g3z.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdoum_g3z.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdoum_g3z.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdoum_g3z.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdoum_g3z.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdoum_g3z.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8sjcq0dq.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8sjcq0dq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8sjcq0dq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8sjcq0dq.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8sjcq0dq.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8sjcq0dq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8sjcq0dq.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8sjcq0dq.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8sjcq0dq.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8sjcq0dq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp1g94024.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp1g94024.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp1g94024.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp1g94024.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp1g94024.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp1g94024.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp1g94024.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp1g94024.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp1g94024.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp1g94024.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3vc03y2b.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3vc03y2b.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3vc03y2b.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3vc03y2b.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3vc03y2b.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3vc03y2b.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3vc03y2b.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3vc03y2b.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3vc03y2b.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3vc03y2b.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp979wjozw.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp979wjozw.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp979wjozw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp979wjozw.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp979wjozw.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp979wjozw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp979wjozw.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp979wjozw.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp979wjozw.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp979wjozw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf2dy7wyt.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf2dy7wyt.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2dy7wyt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf2dy7wyt.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf2dy7wyt.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2dy7wyt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf2dy7wyt.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf2dy7wyt.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2dy7wyt.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf2dy7wyt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprdk1xab4.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprdk1xab4.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprdk1xab4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprdk1xab4.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprdk1xab4.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprdk1xab4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprdk1xab4.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprdk1xab4.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprdk1xab4.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprdk1xab4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw1_p_hul.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw1_p_hul.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw1_p_hul.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw1_p_hul.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw1_p_hul.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw1_p_hul.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw1_p_hul.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw1_p_hul.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw1_p_hul.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw1_p_hul.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpisx9zjvb.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpisx9zjvb.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpisx9zjvb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpisx9zjvb.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpisx9zjvb.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpisx9zjvb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpisx9zjvb.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpisx9zjvb.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpisx9zjvb.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpisx9zjvb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptaod7_2g.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptaod7_2g.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptaod7_2g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptaod7_2g.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptaod7_2g.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptaod7_2g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptaod7_2g.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptaod7_2g.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptaod7_2g.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptaod7_2g.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptm896wmv.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptm896wmv.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptm896wmv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptm896wmv.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptm896wmv.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptm896wmv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptm896wmv.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptm896wmv.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptm896wmv.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptm896wmv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplnakajvo.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplnakajvo.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplnakajvo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplnakajvo.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplnakajvo.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplnakajvo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplnakajvo.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplnakajvo.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplnakajvo.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplnakajvo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6ydtzf5r.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ydtzf5r.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ydtzf5r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6ydtzf5r.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ydtzf5r.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ydtzf5r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6ydtzf5r.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ydtzf5r.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ydtzf5r.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ydtzf5r.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpka8swal0.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpka8swal0.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpka8swal0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpka8swal0.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpka8swal0.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpka8swal0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpka8swal0.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpka8swal0.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpka8swal0.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpka8swal0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkac5p535.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkac5p535.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkac5p535.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkac5p535.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkac5p535.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkac5p535.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkac5p535.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkac5p535.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkac5p535.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkac5p535.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkm_e0ia4.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkm_e0ia4.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkm_e0ia4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkm_e0ia4.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkm_e0ia4.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkm_e0ia4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkm_e0ia4.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkm_e0ia4.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkm_e0ia4.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkm_e0ia4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp10zs8w3x.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp10zs8w3x.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp10zs8w3x.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp10zs8w3x.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp10zs8w3x.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp10zs8w3x.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp10zs8w3x.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp10zs8w3x.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp10zs8w3x.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp10zs8w3x.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpltrj86fi.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpltrj86fi.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpltrj86fi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpltrj86fi.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpltrj86fi.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpltrj86fi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpltrj86fi.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpltrj86fi.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpltrj86fi.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpltrj86fi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl470ncpo.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl470ncpo.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl470ncpo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl470ncpo.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl470ncpo.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl470ncpo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl470ncpo.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl470ncpo.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl470ncpo.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl470ncpo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqa9jjv19.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqa9jjv19.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqa9jjv19.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqa9jjv19.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqa9jjv19.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqa9jjv19.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqa9jjv19.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqa9jjv19.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqa9jjv19.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqa9jjv19.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkn3quu3l.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkn3quu3l.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkn3quu3l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkn3quu3l.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkn3quu3l.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkn3quu3l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkn3quu3l.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkn3quu3l.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkn3quu3l.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkn3quu3l.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq8sczmms.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq8sczmms.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq8sczmms.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq8sczmms.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq8sczmms.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq8sczmms.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq8sczmms.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq8sczmms.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq8sczmms.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq8sczmms.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6z6n7qcc.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6z6n7qcc.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6z6n7qcc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6z6n7qcc.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6z6n7qcc.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6z6n7qcc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6z6n7qcc.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6z6n7qcc.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6z6n7qcc.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6z6n7qcc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplex2nrek.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplex2nrek.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplex2nrek.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplex2nrek.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplex2nrek.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplex2nrek.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplex2nrek.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplex2nrek.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplex2nrek.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplex2nrek.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp96mbpljh.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp96mbpljh.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp96mbpljh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp96mbpljh.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp96mbpljh.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp96mbpljh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp96mbpljh.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp96mbpljh.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp96mbpljh.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp96mbpljh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp68e59of3.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp68e59of3.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp68e59of3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp68e59of3.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp68e59of3.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp68e59of3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp68e59of3.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp68e59of3.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp68e59of3.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp68e59of3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp389b7r80.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp389b7r80.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp389b7r80.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp389b7r80.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp389b7r80.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp389b7r80.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp389b7r80.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp389b7r80.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp389b7r80.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp389b7r80.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9k75_l60.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9k75_l60.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9k75_l60.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9k75_l60.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9k75_l60.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9k75_l60.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9k75_l60.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9k75_l60.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9k75_l60.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9k75_l60.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdqtt13vm.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdqtt13vm.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdqtt13vm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdqtt13vm.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdqtt13vm.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdqtt13vm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdqtt13vm.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdqtt13vm.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdqtt13vm.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdqtt13vm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp71kc57en.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp71kc57en.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp71kc57en.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp71kc57en.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp71kc57en.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp71kc57en.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp71kc57en.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp71kc57en.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp71kc57en.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp71kc57en.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbqp_ftnz.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbqp_ftnz.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbqp_ftnz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbqp_ftnz.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbqp_ftnz.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbqp_ftnz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpbqp_ftnz.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbqp_ftnz.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbqp_ftnz.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbqp_ftnz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv8cjcr5u.jl:24\n  Expression: candidate(4)\
    \ == 288\n   Evaluated: 24 == 288\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv8cjcr5u.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv8cjcr5u.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv8cjcr5u.jl:25\n  Expression: candidate(5) == 34560\n   Evaluated:\
    \ 120 == 34560\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv8cjcr5u.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv8cjcr5u.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv8cjcr5u.jl:26\n  Expression: candidate(7) == 125411328000\n\
    \   Evaluated: 5040 == 125411328000\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv8cjcr5u.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv8cjcr5u.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv8cjcr5u.jl:21\n"
  exit_code: 1
  status: SyntaxError
