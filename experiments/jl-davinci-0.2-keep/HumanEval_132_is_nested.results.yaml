name: HumanEval_132_is_nested
language: julia
results:
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0g_ey1id.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0g_ey1id.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0g_ey1id.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0g_ey1id.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0g_ey1id.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0g_ey1id.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0g_ey1id.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0g_ey1id.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0g_ey1id.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0g_ey1id.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0g_ey1id.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0g_ey1id.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0g_ey1id.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0g_ey1id.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0g_ey1id.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0g_ey1id.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0g_ey1id.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0g_ey1id.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpinxcljuk.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpinxcljuk.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpinxcljuk.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpinxcljuk.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpinxcljuk.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpinxcljuk.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpinxcljuk.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpinxcljuk.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpinxcljuk.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpinxcljuk.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpinxcljuk.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpinxcljuk.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpinxcljuk.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpinxcljuk.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpinxcljuk.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpinxcljuk.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpinxcljuk.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpinxcljuk.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string != string[1:end-1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqfz4jzc_.jl:22\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqfz4jzc_.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfz4jzc_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqfz4jzc_.jl:23\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqfz4jzc_.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfz4jzc_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqfz4jzc_.jl:24\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqfz4jzc_.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfz4jzc_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqfz4jzc_.jl:26\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpqfz4jzc_.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfz4jzc_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqfz4jzc_.jl:28\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqfz4jzc_.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfz4jzc_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqfz4jzc_.jl:29\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqfz4jzc_.jl:29\
    \ [inlined]\n [2] macro expansion\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqfz4jzc_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp30qsitv5.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp30qsitv5.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp30qsitv5.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp30qsitv5.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp30qsitv5.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp30qsitv5.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp30qsitv5.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp30qsitv5.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp30qsitv5.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp30qsitv5.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp30qsitv5.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp30qsitv5.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp30qsitv5.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"[]\"\
    \n        return false\n    end\n    for i in 1:length(string)\n        if string[i]\
    \ == \"[\"\n            for j in i+1:length(string)\n                if string[j]\
    \ == \"]\"\n                    return true\n                end\n           \
    \ end\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9odwjmam.jl:33\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9odwjmam.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9odwjmam.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9odwjmam.jl:37\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9odwjmam.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9odwjmam.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9odwjmam.jl:39\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9odwjmam.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9odwjmam.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9odwjmam.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9odwjmam.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9odwjmam.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9odwjmam.jl:43\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9odwjmam.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9odwjmam.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     5     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9odwjmam.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe4a__emw.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe4a__emw.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe4a__emw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe4a__emw.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe4a__emw.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe4a__emw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe4a__emw.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe4a__emw.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe4a__emw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe4a__emw.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe4a__emw.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe4a__emw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe4a__emw.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe4a__emw.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe4a__emw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe4a__emw.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe4a__emw.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe4a__emw.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for bracket in string\n        if bracket == '['\n            open_brackets\
    \ += 1\n        elseif bracket == ']'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets > 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiuxswo9s.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpiuxswo9s.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiuxswo9s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpiuxswo9s.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiuxswo9s.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiuxswo9s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpiuxswo9s.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiuxswo9s.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiuxswo9s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpiuxswo9s.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiuxswo9s.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiuxswo9s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpiuxswo9s.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiuxswo9s.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiuxswo9s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpiuxswo9s.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiuxswo9s.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiuxswo9s.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjhouummf.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjhouummf.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjhouummf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpjhouummf.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjhouummf.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjhouummf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpjhouummf.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjhouummf.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjhouummf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpjhouummf.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjhouummf.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjhouummf.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjhouummf.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    for\
    \ i in string\n        if i == '['\n            open += 1\n        elseif i ==\
    \ ']'\n            open -= 1\n        end\n        if open < 0\n            return\
    \ false\n        end\n    end\n    return open > 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuyk4h1ys.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpuyk4h1ys.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuyk4h1ys.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuyk4h1ys.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuyk4h1ys.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuyk4h1ys.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuyk4h1ys.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuyk4h1ys.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuyk4h1ys.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuyk4h1ys.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuyk4h1ys.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuyk4h1ys.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuyk4h1ys.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuyk4h1ys.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuyk4h1ys.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuyk4h1ys.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuyk4h1ys.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuyk4h1ys.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # if the string is\
    \ empty, return false\n    if string == \"\"\n        return false\n    end\n\
    \    # if the string is not empty, check if the first and last characters are\
    \ the same\n    if string[1] == string[end]\n        # if they are, return true\n\
    \        return true\n    else\n        # if they are not, return false\n    \
    \    return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwugulhtl.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwugulhtl.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwugulhtl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwugulhtl.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwugulhtl.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwugulhtl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwugulhtl.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwugulhtl.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwugulhtl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwugulhtl.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwugulhtl.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwugulhtl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwugulhtl.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwugulhtl.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwugulhtl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwugulhtl.jl:45\n  Expression: candidate(\"]]]]]]]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwugulhtl.jl:45\
    \ [inlined]\n [2] macro expansion\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwugulhtl.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbaxm44gm.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpbaxm44gm.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpbaxm44gm.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbaxm44gm.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpbaxm44gm.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpbaxm44gm.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpbaxm44gm.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbaxm44gm.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpbaxm44gm.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    close_brackets = 0\n    for i in string\n        if i == '['\n          \
    \  open_brackets += 1\n        elseif i == ']'\n            close_brackets +=\
    \ 1\n        end\n    end\n    return open_brackets > close_brackets\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptyumtop9.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptyumtop9.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptyumtop9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmptyumtop9.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptyumtop9.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptyumtop9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmptyumtop9.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptyumtop9.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptyumtop9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmptyumtop9.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptyumtop9.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptyumtop9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmptyumtop9.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptyumtop9.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptyumtop9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmptyumtop9.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptyumtop9.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptyumtop9.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    if open\
    \ == close\n        return false\n    else\n        return true\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcvocvz0j.jl:34\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcvocvz0j.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcvocvz0j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpcvocvz0j.jl:35\n  Expression: candidate(\"[]]]]]]][[[[[]\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpcvocvz0j.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcvocvz0j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpcvocvz0j.jl:38\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcvocvz0j.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcvocvz0j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpcvocvz0j.jl:39\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpcvocvz0j.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcvocvz0j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpcvocvz0j.jl:40\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcvocvz0j.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcvocvz0j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpcvocvz0j.jl:41\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcvocvz0j.jl:41\
    \ [inlined]\n [2] macro exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcvocvz0j.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ bracket in string\n        if bracket == '['\n            push!(stack, bracket)\n\
    \        elseif bracket == ']'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw4pwglfm.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpw4pwglfm.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw4pwglfm.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpw4pwglfm.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw4pwglfm.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw4pwglfm.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpw4pwglfm.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw4pwglfm.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw4pwglfm.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpw4pwglfm.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw4pwglfm.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw4pwglfm.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw4pwglfm.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp843x00f6.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp843x00f6.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp843x00f6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp843x00f6.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp843x00f6.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp843x00f6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp843x00f6.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp843x00f6.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp843x00f6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp843x00f6.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp843x00f6.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp843x00f6.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp843x00f6.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    close_brackets = 0\n    for i in string\n        if i == '['\n          \
    \  open_brackets += 1\n        elseif i == ']'\n            close_brackets +=\
    \ 1\n        end\n    end\n    return open_brackets > close_brackets\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb8p2z8no.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb8p2z8no.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb8p2z8no.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpb8p2z8no.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb8p2z8no.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb8p2z8no.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpb8p2z8no.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb8p2z8no.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb8p2z8no.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpb8p2z8no.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb8p2z8no.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb8p2z8no.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpb8p2z8no.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb8p2z8no.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb8p2z8no.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpb8p2z8no.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb8p2z8no.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb8p2z8no.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ c in string\n        if c == '['\n            push!(stack, c)\n        elseif\
    \ c == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprh2tst8y.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprh2tst8y.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprh2tst8y.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprh2tst8y.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprh2tst8y.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprh2tst8y.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprh2tst8y.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprh2tst8y.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprh2tst8y.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprh2tst8y.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprh2tst8y.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprh2tst8y.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprh2tst8y.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3nti9qgx.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3nti9qgx.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3nti9qgx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3nti9qgx.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3nti9qgx.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3nti9qgx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3nti9qgx.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3nti9qgx.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3nti9qgx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3nti9qgx.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3nti9qgx.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3nti9qgx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3nti9qgx.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3nti9qgx.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3nti9qgx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3nti9qgx.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3nti9qgx.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3nti9qgx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for char in string\n        if char == '['\n            open_brackets +=\
    \ 1\n        elseif char == ']'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8s8tnyf3.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8s8tnyf3.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8s8tnyf3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8s8tnyf3.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8s8tnyf3.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8s8tnyf3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8s8tnyf3.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8s8tnyf3.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8s8tnyf3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8s8tnyf3.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8s8tnyf3.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8s8tnyf3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8s8tnyf3.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8s8tnyf3.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8s8tnyf3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8s8tnyf3.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8s8tnyf3.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8s8tnyf3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ c in string\n        if c == '['\n            push!(stack, c)\n        elseif\
    \ c == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6b96bdug.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6b96bdug.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6b96bdug.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp6b96bdug.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6b96bdug.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6b96bdug.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp6b96bdug.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6b96bdug.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6b96bdug.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp6b96bdug.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6b96bdug.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6b96bdug.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6b96bdug.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpub6hw6a4.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpub6hw6a4.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpub6hw6a4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpub6hw6a4.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpub6hw6a4.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpub6hw6a4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpub6hw6a4.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpub6hw6a4.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpub6hw6a4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpub6hw6a4.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpub6hw6a4.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpub6hw6a4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpub6hw6a4.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpub6hw6a4.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpub6hw6a4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpub6hw6a4.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpub6hw6a4.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpub6hw6a4.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    close_brackets = 0\n    for i in 1:length(string)\n        if string[i] ==\
    \ '['\n            open_brackets += 1\n        elseif string[i] == ']'\n     \
    \       close_brackets += 1\n        end\n    end\n    if open_brackets > close_brackets\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps7v14atr.jl:34\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps7v14atr.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps7v14atr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmps7v14atr.jl:38\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps7v14atr.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps7v14atr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmps7v14atr.jl:40\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps7v14atr.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps7v14atr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmps7v14atr.jl:41\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps7v14atr.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps7v14atr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmps7v14atr.jl:44\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps7v14atr.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps7v14atr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmps7v14atr.jl:46\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps7v14atr.jl:46\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps7v14atr.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    closed_brackets = 0\n    for i in string\n        if i == '['\n         \
    \   open_brackets += 1\n        elseif i == ']'\n            closed_brackets +=\
    \ 1\n        end\n        if closed_brackets > open_brackets\n            return\
    \ false\n        end\n    end\n    return open_brackets > closed_brackets\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3k13zf69.jl:33\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3k13zf69.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3k13zf69.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3k13zf69.jl:37\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3k13zf69.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3k13zf69.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3k13zf69.jl:39\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3k13zf69.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3k13zf69.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3k13zf69.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3k13zf69.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3k13zf69.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3k13zf69.jl:43\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3k13zf69.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3k13zf69.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp3k13zf69.jl:45\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3k13zf69.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3k13zf69.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    bracket_stack = []\n\
    \    for bracket in string\n        if bracket == '['\n            push!(bracket_stack,\
    \ bracket)\n        elseif bracket == ']'\n            if isempty(bracket_stack)\n\
    \                return false\n            else\n                pop!(bracket_stack)\n\
    \            end\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmk_l85cj.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmk_l85cj.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmk_l85cj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmk_l85cj.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmk_l85cj.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmk_l85cj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmk_l85cj.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmk_l85cj.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmk_l85cj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmk_l85cj.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmk_l85cj.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmk_l85cj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmk_l85cj.jl:45\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmk_l85cj.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmk_l85cj.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     5     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmk_l85cj.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for char in string\n        if char == '['\n            open_brackets +=\
    \ 1\n        elseif char == ']'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyay4vk_t.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyay4vk_t.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyay4vk_t.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyay4vk_t.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyay4vk_t.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyay4vk_t.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyay4vk_t.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyay4vk_t.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyay4vk_t.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyay4vk_t.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyay4vk_t.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyay4vk_t.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyay4vk_t.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyay4vk_t.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyay4vk_t.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyay4vk_t.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyay4vk_t.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyay4vk_t.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    close_brackets = 0\n    for i in string\n        if i == '['\n          \
    \  open_brackets += 1\n        elseif i == ']'\n            close_brackets +=\
    \ 1\n        end\n    end\n    return open_brackets > close_brackets\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy932h7r6.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy932h7r6.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy932h7r6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpy932h7r6.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy932h7r6.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy932h7r6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpy932h7r6.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy932h7r6.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy932h7r6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpy932h7r6.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy932h7r6.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy932h7r6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpy932h7r6.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy932h7r6.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy932h7r6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpy932h7r6.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy932h7r6.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy932h7r6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_bracket_count\
    \ = 0\n    close_bracket_count = 0\n    for i in string\n        if i == '['\n\
    \            open_bracket_count += 1\n        elseif i == ']'\n            close_bracket_count\
    \ += 1\n        end\n    end\n    return open_bracket_count > close_bracket_count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpivc035rd.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpivc035rd.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpivc035rd.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpivc035rd.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpivc035rd.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpivc035rd.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpivc035rd.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpivc035rd.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpivc035rd.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpivc035rd.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpivc035rd.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpivc035rd.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpivc035rd.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpivc035rd.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpivc035rd.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpivc035rd.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpivc035rd.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpivc035rd.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw1deqvtg.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpw1deqvtg.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw1deqvtg.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw1deqvtg.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw1deqvtg.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw1deqvtg.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw1deqvtg.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw1deqvtg.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw1deqvtg.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw1deqvtg.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw1deqvtg.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw1deqvtg.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw1deqvtg.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw1deqvtg.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw1deqvtg.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw1deqvtg.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw1deqvtg.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw1deqvtg.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ i in string\n        if i == '['\n            count += 1\n        elseif i ==\
    \ ']'\n            count -= 1\n        end\n        if count < 0\n           \
    \ return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa71u5oqx.jl:34\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa71u5oqx.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa71u5oqx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa71u5oqx.jl:35\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa71u5oqx.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa71u5oqx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa71u5oqx.jl:41\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa71u5oqx.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa71u5oqx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa71u5oqx.jl:43\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa71u5oqx.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa71u5oqx.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa71u5oqx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > 1 && close > 1\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4oi8ap3b.jl:31\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4oi8ap3b.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4oi8ap3b.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4oi8ap3b.jl:32\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4oi8ap3b.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4oi8ap3b.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   12     2     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 12 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4oi8ap3b.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyv0yrs7_.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyv0yrs7_.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyv0yrs7_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpyv0yrs7_.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyv0yrs7_.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyv0yrs7_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpyv0yrs7_.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyv0yrs7_.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyv0yrs7_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpyv0yrs7_.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyv0yrs7_.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyv0yrs7_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpyv0yrs7_.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyv0yrs7_.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyv0yrs7_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpyv0yrs7_.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyv0yrs7_.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyv0yrs7_.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > 1 && close > 1\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyukuq4sz.jl:31\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyukuq4sz.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyukuq4sz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpyukuq4sz.jl:32\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyukuq4sz.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyukuq4sz.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   12     2     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 12 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyukuq4sz.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_hb0igsw.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_hb0igsw.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_hb0igsw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_hb0igsw.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_hb0igsw.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_hb0igsw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_hb0igsw.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_hb0igsw.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_hb0igsw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_hb0igsw.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_hb0igsw.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_hb0igsw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_hb0igsw.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_hb0igsw.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_hb0igsw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_hb0igsw.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_hb0igsw.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_hb0igsw.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_count = 0\n \
    \   close_count = 0\n    for i in string\n        if i == '['\n            open_count\
    \ += 1\n        elseif i == ']'\n            close_count += 1\n        end\n \
    \   end\n    return open_count > 1 && close_count > 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjuq58nrf.jl:31\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjuq58nrf.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjuq58nrf.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpjuq58nrf.jl:32\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjuq58nrf.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjuq58nrf.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   12     2     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 12 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjuq58nrf.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdueb36w9.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdueb36w9.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdueb36w9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdueb36w9.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdueb36w9.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdueb36w9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdueb36w9.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdueb36w9.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdueb36w9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdueb36w9.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdueb36w9.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdueb36w9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdueb36w9.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdueb36w9.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdueb36w9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdueb36w9.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdueb36w9.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdueb36w9.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string.count(\"\
    [\") == string.count(\"]\") && string.count(\"[\") != 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnr0t27pc.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  type String has no field count\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmpnr0t27pc.jl:14\n   [3]\
    \ macro expansion\n     @ /tmp/tmpnr0t27pc.jl:21 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnr0t27pc.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnr0t27pc.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  type String has no field count\n \
    \ Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmpnr0t27pc.jl:14\n   [3]\
    \ macro expansion\n     @ /tmp/tmpnr0t27pc.jl:22 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnr0t27pc.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnr0t27pc.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  type String has no field count\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmpnr0t27pc.jl:14\n   [3] macro expansion\n     @ /tmp/tmpnr0t27pc.jl:23\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnr0t27pc.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnr0t27pc.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  type String has no field count\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmpnr0t27pc.jl:14\n   [3] macro expansion\n     @ /tmp/tmpnr0t27pc.jl:24\
    \ [inlined]\n   [4] macro expansion\n     @ /buildwo"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnr0t27pc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    close_brackets = 0\n    for i in 1:length(string)\n        if string[i] ==\
    \ '['\n            open_brackets += 1\n        elseif string[i] == ']'\n     \
    \       close_brackets += 1\n        end\n    end\n    if open_brackets > close_brackets\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0iod2uf8.jl:34\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0iod2uf8.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0iod2uf8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0iod2uf8.jl:38\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0iod2uf8.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0iod2uf8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0iod2uf8.jl:40\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0iod2uf8.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0iod2uf8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0iod2uf8.jl:41\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0iod2uf8.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0iod2uf8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0iod2uf8.jl:44\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0iod2uf8.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0iod2uf8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0iod2uf8.jl:46\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0iod2uf8.jl:46\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0iod2uf8.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for char in string\n        if char == '['\n            open_brackets +=\
    \ 1\n        elseif char == ']'\n            if open_brackets > 0\n          \
    \      open_brackets -= 1\n            else\n                return false\n  \
    \          end\n        end\n    end\n    return open_brackets > 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiftg625p.jl:33\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpiftg625p.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiftg625p.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiftg625p.jl:37\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiftg625p.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiftg625p.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiftg625p.jl:39\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiftg625p.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiftg625p.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiftg625p.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiftg625p.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiftg625p.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiftg625p.jl:43\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiftg625p.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiftg625p.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiftg625p.jl:45\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiftg625p.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiftg625p.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # check if the string\
    \ contains any other characters than [ or ]\n    if !(string.match(r\"[^\\[\\\
    ]]\"))\n        # if it does, return false\n        return false\n    end\n  \
    \  # if it doesn't, return true\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwf0e85jy.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  type String has no field match\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmpwf0e85jy.jl:15\n   [3]\
    \ macro expansion\n     @ /tmp/tmpwf0e85jy.jl:27 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwf0e85jy.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwf0e85jy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  type String has no field match\n \
    \ Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmpwf0e85jy.jl:15\n   [3]\
    \ macro expansion\n     @ /tmp/tmpwf0e85jy.jl:28 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwf0e85jy.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwf0e85jy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  type String has no field match\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmpwf0e85jy.jl:15\n   [3] macro expansion\n     @ /tmp/tmpwf0e85jy.jl:29\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwf0e85jy.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwf0e85jy.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  type String has no field match\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmpwf0e85jy.jl:15\n   [3] macro expansion\n     @ /tmp/tmpwf0e85jy.jl:30\
    \ [inlined]\n   [4] macro expansion\n     @ /buildwo"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwf0e85jy.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ i in string\n        if i == '['\n            count += 1\n        elseif i ==\
    \ ']'\n            count -= 1\n        end\n        if count < 0\n           \
    \ return false\n        end\n    end\n    return count > 0 ? false : true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyjpw3ib3.jl:34\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyjpw3ib3.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjpw3ib3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyjpw3ib3.jl:35\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyjpw3ib3.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjpw3ib3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyjpw3ib3.jl:41\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyjpw3ib3.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjpw3ib3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyjpw3ib3.jl:43\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyjpw3ib3.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjpw3ib3.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyjpw3ib3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"[]\"\
    \n        return false\n    end\n    if string == \"[[]]\"\n        return true\n\
    \    end\n    if string == \"[][]\"\n        return false\n    end\n    if string\
    \ == \"[[][]]\"\n        return true\n    end\n    if string == \"[[]][[]]\"\n\
    \        return true\n    end\n    if string == \"[]]]]]]][[[[[]\"\n        return\
    \ false\n    end\n    if string == \"[[]][[]\"\n        return true\n    end\n\
    \    if string == \"[[][]]\"\n        return true\n    end\n    if string == \"\
    [[]][[]]\"\n        return true\n    end\n    if string == \"[[][]]\"\n      \
    \  return true\n    end\n    if string == \"[[]][[]]\"\n        return true\n\
    \    end\n    if string == \"[[][]]\"\n        return true\n    end\n    if string\
    \ == \"[[]][[]]\"\n        return true\n    end\n    if string == \"[[][]]\"\n\
    \        return true\n    end\n    if string == \"[[]][[]]\"\n        return true\n\
    \    end\n    if string == \"[[][]]\"\n        return true\n    end\n    if string\
    \ == \"[[]][[]]\"\n        return true\n    end\n    if string == \"[[][]]\"\n\
    \        return true\n    end\n    if string == \"[[]][[]]\"\n        return true\n\
    \    end\n    if string == \"[[][]]\"\n        return true\n    end\n    if string\
    \ == \"[[]][[]]\"\n        return true\n    end\n    if string == \"[[][]]\"\n\
    \        return true\n    end\n    if string == \"[[]][[]]\"\n        return true\n\
    \    end\n    if string == \"[[][]]\"\n        return true\n    end\n    if string\
    \ == \"[[]][[]]\"\n        return true\n    end\n    if string == \"[[][]]\"\n\
    \        return true\n    end\n    if string == \"[[]][[]]\"\n        return true\n\
    \    end\n    if string == \"[[][]]\"\n        return true\n    end\n    if string\
    \ == \"[[]][[]]\"\n        return true\n    end\n    if string == \"[[][]]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfigqey2h.jl:107\nin expression starting at\
    \ /tmp/tmpfigqey2h.jl:107\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string.count(\"\
    [\") == string.count(\"]\") && string.count(\"[\") > 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyjb07opc.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  type String has no\
    \ field count\\n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\n  \
    \   @ Base ./Base.jl:33\\n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpyjb07opc.jl:14\\\
    n   [3] macro expansion\\n     @ /tmp/tmpyjb07opc.jl:21 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyjb07opc.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpyjb07opc.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  type String has no field count\\\
    n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpyjb07opc.jl:14\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpyjb07opc.jl:22 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyjb07opc.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpyjb07opc.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  type String has no field count\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpyjb07opc.jl:14\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpyjb07opc.jl:23 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyjb07opc.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpyjb07opc.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == false\\n  type String has no field count\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpyjb07opc.jl:14\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpyjb07o"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz5sgbdju.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz5sgbdju.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz5sgbdju.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpz5sgbdju.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz5sgbdju.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz5sgbdju.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpz5sgbdju.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz5sgbdju.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz5sgbdju.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpz5sgbdju.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz5sgbdju.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz5sgbdju.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpz5sgbdju.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz5sgbdju.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz5sgbdju.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpz5sgbdju.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz5sgbdju.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz5sgbdju.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzyi7kp7b.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzyi7kp7b.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzyi7kp7b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzyi7kp7b.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzyi7kp7b.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzyi7kp7b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzyi7kp7b.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzyi7kp7b.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzyi7kp7b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzyi7kp7b.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzyi7kp7b.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzyi7kp7b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzyi7kp7b.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzyi7kp7b.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzyi7kp7b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzyi7kp7b.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzyi7kp7b.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzyi7kp7b.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe1lk5_b6.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe1lk5_b6.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe1lk5_b6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpe1lk5_b6.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe1lk5_b6.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe1lk5_b6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpe1lk5_b6.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe1lk5_b6.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe1lk5_b6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpe1lk5_b6.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe1lk5_b6.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe1lk5_b6.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe1lk5_b6.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    close_brackets = 0\n    for i in string\n        if i == '['\n          \
    \  open_brackets += 1\n        elseif i == ']'\n            close_brackets +=\
    \ 1\n        end\n    end\n    return open_brackets > 1 && close_brackets > 1\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp65av__bo.jl:31\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp65av__bo.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp65av__bo.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp65av__bo.jl:32\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp65av__bo.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp65av__bo.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   12     2     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 12 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp65av__bo.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string.count(\"\
    [\") == string.count(\"]\") && string.count(\"[\") != 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp50p_x4fm.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  type String has no field count\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmp50p_x4fm.jl:14\n   [3]\
    \ macro expansion\n     @ /tmp/tmp50p_x4fm.jl:21 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp50p_x4fm.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp50p_x4fm.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  type String has no field count\n \
    \ Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmp50p_x4fm.jl:14\n   [3]\
    \ macro expansion\n     @ /tmp/tmp50p_x4fm.jl:22 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp50p_x4fm.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp50p_x4fm.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  type String has no field count\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmp50p_x4fm.jl:14\n   [3] macro expansion\n     @ /tmp/tmp50p_x4fm.jl:23\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp50p_x4fm.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp50p_x4fm.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  type String has no field count\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmp50p_x4fm.jl:14\n   [3] macro expansion\n     @ /tmp/tmp50p_x4fm.jl:24\
    \ [inlined]\n   [4] macro expansion\n     @ /buildwo"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp50p_x4fm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdxgweh8i.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdxgweh8i.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdxgweh8i.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdxgweh8i.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdxgweh8i.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdxgweh8i.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdxgweh8i.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdxgweh8i.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdxgweh8i.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdxgweh8i.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdxgweh8i.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdxgweh8i.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdxgweh8i.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdxgweh8i.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdxgweh8i.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdxgweh8i.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdxgweh8i.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdxgweh8i.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjfhe7maz.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjfhe7maz.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjfhe7maz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpjfhe7maz.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjfhe7maz.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjfhe7maz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpjfhe7maz.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjfhe7maz.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjfhe7maz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpjfhe7maz.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjfhe7maz.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjfhe7maz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpjfhe7maz.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjfhe7maz.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjfhe7maz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpjfhe7maz.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjfhe7maz.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjfhe7maz.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Create a stack to\
    \ store the brackets\n    stack = []\n    # Loop through the string\n    for bracket\
    \ in string\n        # If the bracket is an opening bracket, push it onto the\
    \ stack\n        if bracket == '['\n            push!(stack, bracket)\n      \
    \  # If the bracket is a closing bracket, pop the stack\n        elseif bracket\
    \ == ']'\n            pop!(stack)\n        end\n    end\n    # If the stack is\
    \ empty, return true\n    if isempty(stack)\n        return true\n    # If the\
    \ stack is not empty, return false\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp36nxig7p.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[]]]]]]][[[[[]\") == false\\n  ArgumentError:\
    \ array must be non-empty\\n  Stacktrace:\\n   [1] pop!\\n     @ ./array.jl:1184\
    \ [inlined]\\n   [2] is_nested(string::String)\\n     @ Main /tmp/tmp36nxig7p.jl:23\\\
    n   [3] macro expansion\\n     @ /tmp/tmp36nxig7p.jl:40 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp36nxig7p.jl:38\\ntest set:\
    \ Test Failed at /tmp/tmp36nxig7p.jl:41\\n  Expression: candidate(\"[][]\") ==\
    \ false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n\
    \   @ /tmp/tmp36nxig7p.jl:41 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp36nxig7p.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmp36nxig7p.jl:42\\n  Expression: candidate(\"[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp36nxig7p.jl:42\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp36nxig7p.jl:38\\ntest set: Error\
    \ During Test at /tmp/tmp36nxig7p.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]]]]]\") == false\\n  ArgumentError: array must be non-empty\\\
    n  Stacktrace:\\n   [1] pop!\\n     @ ./array.jl:1184 [inlined]\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmp36nxig7p.jl:23\\n   [3] macro expansion\\n     @ /tmp/tmp36nxig7p.jl:44\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp36nxig7p.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmp36nxig7p.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]\") == false\\n  ArgumentError: array must be non-empty\\n  Stacktrace:\\\
    n   [1]"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl5yutemd.jl:23\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpl5yutemd.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl5yutemd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl5yutemd.jl:24\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl5yutemd.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl5yutemd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl5yutemd.jl:25\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl5yutemd.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl5yutemd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl5yutemd.jl:27\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpl5yutemd.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl5yutemd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl5yutemd.jl:29\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl5yutemd.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl5yutemd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl5yutemd.jl:30\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl5yutemd.jl:30\
    \ [inlined]\n [2] macro expansion\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl5yutemd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi_btrql3.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpi_btrql3.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi_btrql3.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpi_btrql3.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi_btrql3.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi_btrql3.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpi_btrql3.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi_btrql3.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi_btrql3.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpi_btrql3.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi_btrql3.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi_btrql3.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpi_btrql3.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi_btrql3.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi_btrql3.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpi_btrql3.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi_btrql3.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi_btrql3.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string.count(\"\
    [\") == string.count(\"]\") && string.count(\"[[\") != string.count(\"]]\")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpob5uvyir.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  type String has no\
    \ field count\\n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\n  \
    \   @ Base ./Base.jl:33\\n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpob5uvyir.jl:14\\\
    n   [3] macro expansion\\n     @ /tmp/tmpob5uvyir.jl:21 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpob5uvyir.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpob5uvyir.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  type String has no field count\\\
    n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpob5uvyir.jl:14\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpob5uvyir.jl:22 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpob5uvyir.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpob5uvyir.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  type String has no field count\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpob5uvyir.jl:14\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpob5uvyir.jl:23 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpob5uvyir.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpob5uvyir.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == false\\n  type String has no field count\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpob5uvyir.jl:14\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpob5uvy"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for char in string\n        if char == '['\n            open_brackets +=\
    \ 1\n        elseif char == ']'\n            if open_brackets == 0\n         \
    \       return false\n            else\n                open_brackets -= 1\n \
    \           end\n        end\n    end\n    return open_brackets > 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp7f62k_p.jl:33\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpp7f62k_p.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7f62k_p.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpp7f62k_p.jl:37\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp7f62k_p.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7f62k_p.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpp7f62k_p.jl:39\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp7f62k_p.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7f62k_p.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpp7f62k_p.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp7f62k_p.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7f62k_p.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpp7f62k_p.jl:43\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp7f62k_p.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7f62k_p.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpp7f62k_p.jl:45\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp7f62k_p.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7f62k_p.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for char in string\n        if char == '['\n            open_brackets +=\
    \ 1\n        elseif char == ']'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmahf138p.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmahf138p.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmahf138p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmahf138p.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmahf138p.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmahf138p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmahf138p.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmahf138p.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmahf138p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmahf138p.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmahf138p.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmahf138p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmahf138p.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmahf138p.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmahf138p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmahf138p.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmahf138p.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmahf138p.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpail5cdcx.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpail5cdcx.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpail5cdcx.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpail5cdcx.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpail5cdcx.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpail5cdcx.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpail5cdcx.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpail5cdcx.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpail5cdcx.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Create a stack\n\
    \    stack = []\n    # Loop through the string\n    for i in string\n        #\
    \ If the character is an opening bracket, push it to the stack\n        if i ==\
    \ '['\n            push!(stack, i)\n        # If the character is a closing bracket,\
    \ pop the stack\n        elseif i == ']'\n            pop!(stack)\n        end\n\
    \    end\n    # If the stack is empty, return true\n    if isempty(stack)\n  \
    \      return true\n    # If the stack is not empty, return false\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp818ldns6.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[]]]]]]][[[[[]\") == false\\n  ArgumentError:\
    \ array must be non-empty\\n  Stacktrace:\\n   [1] pop!\\n     @ ./array.jl:1184\
    \ [inlined]\\n   [2] is_nested(string::String)\\n     @ Main /tmp/tmp818ldns6.jl:23\\\
    n   [3] macro expansion\\n     @ /tmp/tmp818ldns6.jl:40 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp818ldns6.jl:38\\ntest set:\
    \ Test Failed at /tmp/tmp818ldns6.jl:41\\n  Expression: candidate(\"[][]\") ==\
    \ false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n\
    \   @ /tmp/tmp818ldns6.jl:41 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp818ldns6.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmp818ldns6.jl:42\\n  Expression: candidate(\"[]\") == false\\\
    n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp818ldns6.jl:42\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp818ldns6.jl:38\\ntest set: Error\
    \ During Test at /tmp/tmp818ldns6.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]]]]]\") == false\\n  ArgumentError: array must be non-empty\\\
    n  Stacktrace:\\n   [1] pop!\\n     @ ./array.jl:1184 [inlined]\\n   [2] is_nested(string::String)\\\
    n     @ Main /tmp/tmp818ldns6.jl:23\\n   [3] macro expansion\\n     @ /tmp/tmp818ldns6.jl:44\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp818ldns6.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmp818ldns6.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]\") == false\\n  ArgumentError: array must be non-empty\\n  Stacktrace:\\\
    n   [1]"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ char in string\n        if char == '['\n            push!(stack, char)\n   \
    \     elseif char == ']'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr6a9tto3.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpr6a9tto3.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr6a9tto3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr6a9tto3.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr6a9tto3.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr6a9tto3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr6a9tto3.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr6a9tto3.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr6a9tto3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr6a9tto3.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr6a9tto3.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr6a9tto3.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr6a9tto3.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph5fbix1v.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmph5fbix1v.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph5fbix1v.jl:32\ntest set: Test\
    \ Failed at /tmp/tmph5fbix1v.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph5fbix1v.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph5fbix1v.jl:32\ntest set: Test\
    \ Failed at /tmp/tmph5fbix1v.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph5fbix1v.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph5fbix1v.jl:32\ntest set: Test\
    \ Failed at /tmp/tmph5fbix1v.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph5fbix1v.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph5fbix1v.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph5fbix1v.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # TODO: Implement\
    \ your code here\n    # For example, you can write:\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzdyc85o_.jl:24\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzdyc85o_.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzdyc85o_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzdyc85o_.jl:25\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzdyc85o_.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzdyc85o_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzdyc85o_.jl:26\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzdyc85o_.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzdyc85o_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzdyc85o_.jl:28\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpzdyc85o_.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzdyc85o_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzdyc85o_.jl:30\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzdyc85o_.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzdyc85o_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpzdyc85o_.jl:31\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzdyc85o_.jl:31\
    \ [inlined]\n [2] macro expansion\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzdyc85o_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # check if there is\
    \ a nested bracket\n    # if there is a nested bracket, return true\n    # else\
    \ return false\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp582amvc4.jl:25\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp582amvc4.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp582amvc4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp582amvc4.jl:26\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp582amvc4.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp582amvc4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp582amvc4.jl:27\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp582amvc4.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp582amvc4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp582amvc4.jl:29\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp582amvc4.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp582amvc4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp582amvc4.jl:31\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp582amvc4.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp582amvc4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp582amvc4.jl:32\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp582amvc4.jl:32\
    \ [inlined]\n [2] macro expansion\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp582amvc4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr30ei8ba.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpr30ei8ba.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpr30ei8ba.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpr30ei8ba.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpr30ei8ba.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpr30ei8ba.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpr30ei8ba.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpr30ei8ba.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpr30ei8ba.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    close_brackets = 0\n    for i in string\n        if i == '['\n          \
    \  open_brackets += 1\n        elseif i == ']'\n            close_brackets +=\
    \ 1\n        end\n    end\n    return open_brackets > close_brackets\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8f148n7s.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8f148n7s.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8f148n7s.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8f148n7s.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8f148n7s.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8f148n7s.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8f148n7s.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8f148n7s.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8f148n7s.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8f148n7s.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8f148n7s.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8f148n7s.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8f148n7s.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8f148n7s.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8f148n7s.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8f148n7s.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8f148n7s.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8f148n7s.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string.count(\"\
    [\") != string.count(\"]\")\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphdku7zor.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  type String has no field count\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmphdku7zor.jl:14\n   [3]\
    \ macro expansion\n     @ /tmp/tmphdku7zor.jl:21 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphdku7zor.jl:20\ntest set:\
    \ Error During Test at /tmp/tmphdku7zor.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  type String has no field count\n \
    \ Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmphdku7zor.jl:14\n   [3]\
    \ macro expansion\n     @ /tmp/tmphdku7zor.jl:22 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphdku7zor.jl:20\ntest set:\
    \ Error During Test at /tmp/tmphdku7zor.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  type String has no field count\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmphdku7zor.jl:14\n   [3] macro expansion\n     @ /tmp/tmphdku7zor.jl:23\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphdku7zor.jl:20\ntest set:\
    \ Error During Test at /tmp/tmphdku7zor.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  type String has no field count\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmphdku7zor.jl:14\n   [3] macro expansion\n     @ /tmp/tmphdku7zor.jl:24\
    \ [inlined]\n   [4] macro expansion\n     @ /buildwo"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphdku7zor.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for char in string\n        if char == '['\n            open_brackets +=\
    \ 1\n        elseif char == ']'\n            if open_brackets == 0\n         \
    \       return false\n            else\n                open_brackets -= 1\n \
    \           end\n        end\n    end\n    return open_brackets > 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgv4ht6_t.jl:33\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgv4ht6_t.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgv4ht6_t.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgv4ht6_t.jl:37\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgv4ht6_t.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgv4ht6_t.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgv4ht6_t.jl:39\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgv4ht6_t.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgv4ht6_t.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgv4ht6_t.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgv4ht6_t.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgv4ht6_t.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgv4ht6_t.jl:43\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgv4ht6_t.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgv4ht6_t.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgv4ht6_t.jl:45\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgv4ht6_t.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgv4ht6_t.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string != string[1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpge21ny9t.jl:21\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpge21ny9t.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpge21ny9t.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpge21ny9t.jl:25\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpge21ny9t.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpge21ny9t.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpge21ny9t.jl:27\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpge21ny9t.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpge21ny9t.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpge21ny9t.jl:30\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpge21ny9t.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpge21ny9t.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpge21ny9t.jl:31\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpge21ny9t.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpge21ny9t.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     5     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpge21ny9t.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt228_r8u.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt228_r8u.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt228_r8u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt228_r8u.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt228_r8u.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt228_r8u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt228_r8u.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt228_r8u.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt228_r8u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt228_r8u.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt228_r8u.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt228_r8u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt228_r8u.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt228_r8u.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt228_r8u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt228_r8u.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt228_r8u.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt228_r8u.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvxmw99wq.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvxmw99wq.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxmw99wq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpvxmw99wq.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvxmw99wq.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxmw99wq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpvxmw99wq.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvxmw99wq.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxmw99wq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpvxmw99wq.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvxmw99wq.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxmw99wq.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvxmw99wq.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi2zlzm74.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpi2zlzm74.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi2zlzm74.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpi2zlzm74.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi2zlzm74.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi2zlzm74.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpi2zlzm74.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi2zlzm74.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi2zlzm74.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpi2zlzm74.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi2zlzm74.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi2zlzm74.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi2zlzm74.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ bracket in string\n        if bracket == '['\n            push!(stack, bracket)\n\
    \        elseif bracket == ']'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmvz8_rcm.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmvz8_rcm.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvz8_rcm.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmvz8_rcm.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmvz8_rcm.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvz8_rcm.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmvz8_rcm.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmvz8_rcm.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvz8_rcm.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpmvz8_rcm.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmvz8_rcm.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvz8_rcm.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmvz8_rcm.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ c in string\n        if c == '['\n            push!(stack, c)\n        elseif\
    \ c == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4pbixvxr.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4pbixvxr.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4pbixvxr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4pbixvxr.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4pbixvxr.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4pbixvxr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4pbixvxr.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4pbixvxr.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4pbixvxr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4pbixvxr.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4pbixvxr.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4pbixvxr.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4pbixvxr.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe2k1n38e.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe2k1n38e.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe2k1n38e.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe2k1n38e.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe2k1n38e.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe2k1n38e.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe2k1n38e.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe2k1n38e.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe2k1n38e.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe2k1n38e.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe2k1n38e.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe2k1n38e.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe2k1n38e.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe2k1n38e.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe2k1n38e.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe2k1n38e.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe2k1n38e.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe2k1n38e.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ i in string\n        if i == '['\n            count += 1\n        elseif i ==\
    \ ']'\n            count -= 1\n        end\n        if count < 0\n           \
    \ return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg8tpccv_.jl:34\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpg8tpccv_.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg8tpccv_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpg8tpccv_.jl:35\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg8tpccv_.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg8tpccv_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpg8tpccv_.jl:41\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg8tpccv_.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg8tpccv_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpg8tpccv_.jl:43\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg8tpccv_.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg8tpccv_.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg8tpccv_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgw63eg5d.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpgw63eg5d.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgw63eg5d.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgw63eg5d.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpgw63eg5d.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpgw63eg5d.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpgw63eg5d.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgw63eg5d.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpgw63eg5d.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ bracket in string\n        if bracket == '['\n            push!(stack, bracket)\n\
    \        elseif bracket == ']'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpouhvi738.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpouhvi738.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpouhvi738.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpouhvi738.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpouhvi738.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpouhvi738.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpouhvi738.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpouhvi738.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpouhvi738.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpouhvi738.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpouhvi738.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpouhvi738.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpouhvi738.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ c in string\n        if c == '['\n            push!(stack, c)\n        elseif\
    \ c == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6ty0ogq3.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6ty0ogq3.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ty0ogq3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp6ty0ogq3.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ty0ogq3.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ty0ogq3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp6ty0ogq3.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ty0ogq3.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ty0ogq3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp6ty0ogq3.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ty0ogq3.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ty0ogq3.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ty0ogq3.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq0b2d5zv.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpq0b2d5zv.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq0b2d5zv.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpq0b2d5zv.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq0b2d5zv.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq0b2d5zv.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpq0b2d5zv.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq0b2d5zv.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq0b2d5zv.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpq0b2d5zv.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq0b2d5zv.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq0b2d5zv.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpq0b2d5zv.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq0b2d5zv.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq0b2d5zv.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpq0b2d5zv.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq0b2d5zv.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq0b2d5zv.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_gmc4cry.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_gmc4cry.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gmc4cry.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_gmc4cry.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gmc4cry.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gmc4cry.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_gmc4cry.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gmc4cry.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gmc4cry.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_gmc4cry.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gmc4cry.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gmc4cry.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_gmc4cry.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    s = []\n    for c\
    \ in string\n        if c == '['\n            push!(s, c)\n        elseif c ==\
    \ ']'\n            if isempty(s)\n                return false\n            else\n\
    \                pop!(s)\n            end\n        end\n    end\n    return isempty(s)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdwpdoc7c.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdwpdoc7c.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdwpdoc7c.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpdwpdoc7c.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdwpdoc7c.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdwpdoc7c.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpdwpdoc7c.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdwpdoc7c.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdwpdoc7c.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpdwpdoc7c.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdwpdoc7c.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdwpdoc7c.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdwpdoc7c.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpotumryp1.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpotumryp1.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpotumryp1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpotumryp1.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpotumryp1.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpotumryp1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpotumryp1.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpotumryp1.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpotumryp1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpotumryp1.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpotumryp1.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpotumryp1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpotumryp1.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpotumryp1.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpotumryp1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpotumryp1.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpotumryp1.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpotumryp1.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvyjfie21.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpvyjfie21.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpvyjfie21.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvyjfie21.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpvyjfie21.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpvyjfie21.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpvyjfie21.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvyjfie21.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpvyjfie21.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    closed_brackets = 0\n    for i in string\n        if i == '['\n         \
    \   open_brackets += 1\n        elseif i == ']'\n            closed_brackets +=\
    \ 1\n        end\n    end\n    return open_brackets > closed_brackets\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvg9it5y9.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvg9it5y9.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvg9it5y9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvg9it5y9.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvg9it5y9.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvg9it5y9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvg9it5y9.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvg9it5y9.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvg9it5y9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvg9it5y9.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvg9it5y9.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvg9it5y9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvg9it5y9.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvg9it5y9.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvg9it5y9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvg9it5y9.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvg9it5y9.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvg9it5y9.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5wgj8v42.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp5wgj8v42.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5wgj8v42.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5wgj8v42.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp5wgj8v42.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmp5wgj8v42.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp5wgj8v42.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5wgj8v42.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp5wgj8v42.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string.count(\"\
    [\") == string.count(\"]\") && string.count(\"[\") != 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp859fel71.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  type String has no\
    \ field count\\n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\n  \
    \   @ Base ./Base.jl:33\\n   [2] is_nested(string::String)\\n     @ Main /tmp/tmp859fel71.jl:14\\\
    n   [3] macro expansion\\n     @ /tmp/tmp859fel71.jl:21 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp859fel71.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp859fel71.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  type String has no field count\\\
    n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] is_nested(string::String)\\n     @ Main /tmp/tmp859fel71.jl:14\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp859fel71.jl:22 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp859fel71.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp859fel71.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  type String has no field count\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmp859fel71.jl:14\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmp859fel71.jl:23 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp859fel71.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp859fel71.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == false\\n  type String has no field count\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmp859fel71.jl:14\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmp859fel"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdgqjd0m1.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdgqjd0m1.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdgqjd0m1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdgqjd0m1.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdgqjd0m1.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdgqjd0m1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdgqjd0m1.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdgqjd0m1.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdgqjd0m1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdgqjd0m1.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdgqjd0m1.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdgqjd0m1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdgqjd0m1.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdgqjd0m1.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdgqjd0m1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdgqjd0m1.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdgqjd0m1.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdgqjd0m1.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > 1 && close > 1\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0z0ldfey.jl:31\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0z0ldfey.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0z0ldfey.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp0z0ldfey.jl:32\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0z0ldfey.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0z0ldfey.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   12     2     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 12 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0z0ldfey.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1h46xypa.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp1h46xypa.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp1h46xypa.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1h46xypa.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp1h46xypa.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmp1h46xypa.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp1h46xypa.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1h46xypa.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp1h46xypa.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvskxnpt5.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvskxnpt5.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvskxnpt5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvskxnpt5.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvskxnpt5.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvskxnpt5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvskxnpt5.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvskxnpt5.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvskxnpt5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvskxnpt5.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvskxnpt5.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvskxnpt5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvskxnpt5.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvskxnpt5.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvskxnpt5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvskxnpt5.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvskxnpt5.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvskxnpt5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp27t4wz89.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp27t4wz89.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27t4wz89.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp27t4wz89.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp27t4wz89.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27t4wz89.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp27t4wz89.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp27t4wz89.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27t4wz89.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp27t4wz89.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp27t4wz89.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27t4wz89.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp27t4wz89.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp27t4wz89.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27t4wz89.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp27t4wz89.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp27t4wz89.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp27t4wz89.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuma3n0vw.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpuma3n0vw.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpuma3n0vw.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuma3n0vw.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpuma3n0vw.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpuma3n0vw.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpuma3n0vw.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuma3n0vw.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpuma3n0vw.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    closed_brackets = 0\n    for i in string\n        if i == '['\n         \
    \   open_brackets += 1\n        elseif i == ']'\n            closed_brackets +=\
    \ 1\n        end\n    end\n    return open_brackets > closed_brackets\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2twag13j.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2twag13j.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2twag13j.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp2twag13j.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2twag13j.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2twag13j.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp2twag13j.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2twag13j.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2twag13j.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp2twag13j.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2twag13j.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2twag13j.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp2twag13j.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2twag13j.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2twag13j.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp2twag13j.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2twag13j.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2twag13j.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ c in string\n        if c == '['\n            push!(stack, c)\n        elseif\
    \ c == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl7fiesr9.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpl7fiesr9.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl7fiesr9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpl7fiesr9.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl7fiesr9.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl7fiesr9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpl7fiesr9.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl7fiesr9.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl7fiesr9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpl7fiesr9.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl7fiesr9.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl7fiesr9.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl7fiesr9.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzddaxyr3.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpzddaxyr3.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpzddaxyr3.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzddaxyr3.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpzddaxyr3.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpzddaxyr3.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpzddaxyr3.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzddaxyr3.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpzddaxyr3.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp89v4818n.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp89v4818n.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp89v4818n.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp89v4818n.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp89v4818n.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmp89v4818n.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp89v4818n.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp89v4818n.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp89v4818n.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkpapudeb.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkpapudeb.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkpapudeb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkpapudeb.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkpapudeb.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkpapudeb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkpapudeb.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkpapudeb.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkpapudeb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkpapudeb.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkpapudeb.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkpapudeb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkpapudeb.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkpapudeb.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkpapudeb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkpapudeb.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkpapudeb.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkpapudeb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ c in string\n        if c == '['\n            push!(stack, c)\n        elseif\
    \ c == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4v4l2sc9.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4v4l2sc9.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4v4l2sc9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4v4l2sc9.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4v4l2sc9.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4v4l2sc9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4v4l2sc9.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4v4l2sc9.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4v4l2sc9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4v4l2sc9.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4v4l2sc9.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4v4l2sc9.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4v4l2sc9.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ c in string\n        if c == '['\n            push!(stack, c)\n        elseif\
    \ c == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa6nn3iei.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa6nn3iei.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa6nn3iei.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpa6nn3iei.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa6nn3iei.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa6nn3iei.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpa6nn3iei.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa6nn3iei.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa6nn3iei.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpa6nn3iei.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa6nn3iei.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa6nn3iei.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa6nn3iei.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm_1udags.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpm_1udags.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpm_1udags.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpm_1udags.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpm_1udags.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpm_1udags.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpm_1udags.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpm_1udags.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpm_1udags.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # check if string\
    \ is empty\n    if string == \"\"\n        return false\n    end\n    # check\
    \ if string contains only square brackets\n    if !(string.contains(\"[\")) ||\
    \ !(string.contains(\"]\"))\n        return false\n    end\n    # check if string\
    \ contains only square brackets\n    if !(string.contains(\"[\")) || !(string.contains(\"\
    ]\"))\n        return false\n    end\n    # check if string contains only square\
    \ brackets\n    if !(string.contains(\"[\")) || !(string.contains(\"]\"))\n  \
    \      return false\n    end\n    # check if string contains only square brackets\n\
    \    if !(string.contains(\"[\")) || !(string.contains(\"]\"))\n        return\
    \ false\n    end\n    # check if string contains only square brackets\n    if\
    \ !(string.contains(\"[\")) || !(string.contains(\"]\"))\n        return false\n\
    \    end\n    # check if string contains only square brackets\n    if !(string.contains(\"\
    [\")) || !(string.contains(\"]\"))\n        return false\n    end\n    # check\
    \ if string contains only square brackets\n    if !(string.contains(\"[\")) ||\
    \ !(string.contains(\"]\"))\n        return false\n    end\n    # check if string\
    \ contains only square brackets\n    if !(string.contains(\"[\")) || !(string.contains(\"\
    ]\"))\n        return false\n    end\n    # check if string contains only square\
    \ brackets\n    if !(string.contains(\"[\")) || !(string.contains(\"]\"))\n  \
    \      return false\n    end\n    # check if string contains only square brackets\n\
    \    if !(string.contains(\"[\")) || !(string.contains(\"]\"))\n        return\
    \ false\n    end\n    # check if string contains only square brackets\n    if\
    \ !(string.contains(\"[\")) || !(string.contains(\"]\"))\n        return false\n\
    \    end\n    # check if string contains only square brackets\n    if !(string.contains(\"\
    [\")) || !(string.contains(\"]\"))\n        return false\n    end\n    # check\
    \ if string contains only square brackets\n    if !(string.contains(\"[\")) ||\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppak2bw5v.jl:1\nin expression starting at /tmp/tmppak2bw5v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    if string == \"[]\"\
    \n        return false\n    end\n    if string == \"[[]]\"\n        return true\n\
    \    end\n    if string == \"[][]\"\n        return false\n    end\n    if string\
    \ == \"[[][]]\"\n        return true\n    end\n    if string == \"[[]][[]]\"\n\
    \        return true\n    end\n    if string == \"[[][]]\"\n        return true\n\
    \    end\n    if string == \"[[][]]\"\n        return true\n    end\n    if string\
    \ == \"[[][]]\"\n        return true\n    end\n    if string == \"[[][]]\"\n \
    \       return true\n    end\n    if string == \"[[][]]\"\n        return true\n\
    \    end\n    if string == \"[[][]]\"\n        return true\n    end\n    if string\
    \ == \"[[][]]\"\n        return true\n    end\n    if string == \"[[][]]\"\n \
    \       return true\n    end\n    if string == \"[[][]]\"\n        return true\n\
    \    end\n    if string == \"[[][]]\"\n        return true\n    end\n    if string\
    \ == \"[[][]]\"\n        return true\n    end\n    if string == \"[[][]]\"\n \
    \       return true\n    end\n    if string == \"[[][]]\"\n        return true\n\
    \    end\n    if string == \"[[][]]\"\n        return true\n    end\n    if string\
    \ == \"[[][]]\"\n        return true\n    end\n    if string == \"[[][]]\"\n \
    \       return true\n    end\n    if string == \"[[][]]\"\n        return true\n\
    \    end\n    if string == \"[[][]]\"\n        return true\n    end\n    if string\
    \ == \"[[][]]\"\n        return true\n    end\n    if string == \"[[][]]\"\n \
    \       return true\n    end\n    if string == \"[[][]]\"\n        return true\n\
    \    end\n    if string == \"[[][]]\"\n        return true\n    end\n    if string\
    \ == \"[[][]]\"\n        return true\n    end\n    if string == \"[[][]]\"\n \
    \       return true\n    end\n    if string == \"[[][]]\"\n        return true\n\
    \    end\n    if string == \"[[\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdcx8loki.jl:110\nin expression starting at\
    \ /tmp/tmpdcx8loki.jl:110\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn4f2yliq.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpn4f2yliq.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpn4f2yliq.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpn4f2yliq.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpn4f2yliq.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpn4f2yliq.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpn4f2yliq.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpn4f2yliq.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpn4f2yliq.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprqxndqei.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprqxndqei.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprqxndqei.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprqxndqei.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprqxndqei.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprqxndqei.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprqxndqei.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprqxndqei.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprqxndqei.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprqxndqei.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprqxndqei.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprqxndqei.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprqxndqei.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # check if string\
    \ contains only square brackets\n    if !(string.contains(\"[\") && string.contains(\"\
    ]\"))\n        return false\n    end\n    # check if string contains nested brackets\n\
    \    if string.contains(\"[][\") || string.contains(\"][\")\n        return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjv5ulcbo.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  type String has no\
    \ field contains\\n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\\
    n     @ Base ./Base.jl:33\\n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpjv5ulcbo.jl:15\\\
    n   [3] macro expansion\\n     @ /tmp/tmpjv5ulcbo.jl:29 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjv5ulcbo.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpjv5ulcbo.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  type String has no field contains\\\
    n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpjv5ulcbo.jl:15\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpjv5ulcbo.jl:30 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjv5ulcbo.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpjv5ulcbo.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  type String has no field contains\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpjv5ulcbo.jl:15\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpjv5ulcbo.jl:31 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjv5ulcbo.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpjv5ulcbo.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == false\\n  type String has no field contains\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpjv5ulcbo.jl:15\\n   [3] macro\
    \ expansion\\n     @ /t"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    close_brackets = 0\n    for i in string\n        if i == '['\n          \
    \  open_brackets += 1\n        elseif i == ']'\n            close_brackets +=\
    \ 1\n        end\n    end\n    return open_brackets > close_brackets\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvxb4ygnl.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvxb4ygnl.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxb4ygnl.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvxb4ygnl.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvxb4ygnl.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxb4ygnl.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvxb4ygnl.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvxb4ygnl.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxb4ygnl.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvxb4ygnl.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvxb4ygnl.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxb4ygnl.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvxb4ygnl.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvxb4ygnl.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxb4ygnl.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvxb4ygnl.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvxb4ygnl.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvxb4ygnl.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplsybofbd.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplsybofbd.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplsybofbd.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplsybofbd.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplsybofbd.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplsybofbd.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplsybofbd.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplsybofbd.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplsybofbd.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplsybofbd.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplsybofbd.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplsybofbd.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplsybofbd.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return length(string)\
    \ > 1 && string[1] == '[' && string[end] == ']' && is_nested(string[2:end-1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpab6g9f4h.jl:21\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpab6g9f4h.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpab6g9f4h.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpab6g9f4h.jl:25\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpab6g9f4h.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpab6g9f4h.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpab6g9f4h.jl:27\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpab6g9f4h.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpab6g9f4h.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpab6g9f4h.jl:30\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpab6g9f4h.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpab6g9f4h.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpab6g9f4h.jl:31\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpab6g9f4h.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpab6g9f4h.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     5     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpab6g9f4h.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkdu1hz4e.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpkdu1hz4e.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpkdu1hz4e.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkdu1hz4e.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpkdu1hz4e.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpkdu1hz4e.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpkdu1hz4e.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkdu1hz4e.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpkdu1hz4e.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return length(string)\
    \ > 0 && length(string) % 2 == 0 && length(filter(x -> x == ']', string)) == length(filter(x\
    \ -> x == '[', string))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4fk9chm9.jl:23\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4fk9chm9.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4fk9chm9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4fk9chm9.jl:24\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4fk9chm9.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4fk9chm9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4fk9chm9.jl:30\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4fk9chm9.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4fk9chm9.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     3     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4fk9chm9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmzc5lj5w.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmzc5lj5w.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmzc5lj5w.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmzc5lj5w.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmzc5lj5w.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmzc5lj5w.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmzc5lj5w.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmzc5lj5w.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmzc5lj5w.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmzc5lj5w.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmzc5lj5w.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmzc5lj5w.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmzc5lj5w.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmzc5lj5w.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmzc5lj5w.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmzc5lj5w.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmzc5lj5w.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmzc5lj5w.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7zra9na4.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp7zra9na4.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7zra9na4.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7zra9na4.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7zra9na4.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmp7zra9na4.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp7zra9na4.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7zra9na4.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7zra9na4.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8hqeth09.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8hqeth09.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8hqeth09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8hqeth09.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8hqeth09.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8hqeth09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8hqeth09.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8hqeth09.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8hqeth09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8hqeth09.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8hqeth09.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8hqeth09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8hqeth09.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8hqeth09.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8hqeth09.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8hqeth09.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8hqeth09.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8hqeth09.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgs7qryoe.jl:22\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgs7qryoe.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgs7qryoe.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgs7qryoe.jl:26\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgs7qryoe.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgs7qryoe.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgs7qryoe.jl:28\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgs7qryoe.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgs7qryoe.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgs7qryoe.jl:31\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgs7qryoe.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgs7qryoe.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgs7qryoe.jl:32\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgs7qryoe.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgs7qryoe.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     5     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgs7qryoe.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string.contains(\"\
    [\") && string.contains(\"]\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyc3n2tw6.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  type String has no field contains\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmpyc3n2tw6.jl:14\n   [3]\
    \ macro expansion\n     @ /tmp/tmpyc3n2tw6.jl:21 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyc3n2tw6.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpyc3n2tw6.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  type String has no field contains\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmpyc3n2tw6.jl:14\n   [3]\
    \ macro expansion\n     @ /tmp/tmpyc3n2tw6.jl:22 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyc3n2tw6.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpyc3n2tw6.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  type String has no field contains\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmpyc3n2tw6.jl:14\n   [3] macro expansion\n     @ /tmp/tmpyc3n2tw6.jl:23\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyc3n2tw6.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpyc3n2tw6.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  type String has no field contains\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmpyc3n2tw6.jl:14\n   [3] macro expansion\n     @ /tmp/tmpyc3n2tw6.jl:24\
    \ [inlined]\n   [4] macro expansion\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyc3n2tw6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    if open\
    \ == close\n        return false\n    else\n        return true\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_r8bgnu5.jl:34\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_r8bgnu5.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_r8bgnu5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_r8bgnu5.jl:35\n  Expression: candidate(\"[]]]]]]][[[[[]\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmp_r8bgnu5.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_r8bgnu5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_r8bgnu5.jl:38\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_r8bgnu5.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_r8bgnu5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_r8bgnu5.jl:39\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp_r8bgnu5.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_r8bgnu5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_r8bgnu5.jl:40\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_r8bgnu5.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_r8bgnu5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_r8bgnu5.jl:41\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_r8bgnu5.jl:41\
    \ [inlined]\n [2] macro exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_r8bgnu5.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for c in string\n        if c == '['\n            open_brackets += 1\n  \
    \      elseif c == ']'\n            if open_brackets == 0\n                return\
    \ false\n            else\n                open_brackets -= 1\n            end\n\
    \        end\n    end\n    return open_brackets > 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp772rv7tw.jl:33\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp772rv7tw.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp772rv7tw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp772rv7tw.jl:37\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp772rv7tw.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp772rv7tw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp772rv7tw.jl:39\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp772rv7tw.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp772rv7tw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp772rv7tw.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp772rv7tw.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp772rv7tw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp772rv7tw.jl:43\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp772rv7tw.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp772rv7tw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp772rv7tw.jl:45\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp772rv7tw.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp772rv7tw.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7j_iyxcr.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7j_iyxcr.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7j_iyxcr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7j_iyxcr.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7j_iyxcr.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7j_iyxcr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7j_iyxcr.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7j_iyxcr.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7j_iyxcr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7j_iyxcr.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7j_iyxcr.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7j_iyxcr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7j_iyxcr.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7j_iyxcr.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7j_iyxcr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7j_iyxcr.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7j_iyxcr.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7j_iyxcr.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphodi7bu0.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmphodi7bu0.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmphodi7bu0.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphodi7bu0.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmphodi7bu0.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmphodi7bu0.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmphodi7bu0.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphodi7bu0.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmphodi7bu0.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ char in string\n        if char == '['\n            push!(stack, char)\n   \
    \     elseif char == ']'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplib6rtb3.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplib6rtb3.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplib6rtb3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplib6rtb3.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplib6rtb3.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplib6rtb3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplib6rtb3.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplib6rtb3.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplib6rtb3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplib6rtb3.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplib6rtb3.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplib6rtb3.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplib6rtb3.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    string = replace(string,\
    \ r\"[^\\[\\]]\", \"\")\n    for i in 1:length(string)\n        if string[i] ==\
    \ '['\n            if string[end-i+1] != ']'\n                return false\n \
    \           end\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp55f39qts.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: no method\
    \ matching replace(::String, ::Regex, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\n \
    \   replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp55f39qts.jl:14\\n   [2]\
    \ macro expansion\\n     @ /tmp/tmp55f39qts.jl:29 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp55f39qts.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp55f39qts.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: no method matching replace(::String,\
    \ ::Regex, ::String)\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"\
    #s75\", B} where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\\
    n    replace(::String, !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp55f39qts.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp55f39qts.jl:30 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp55f39qts.jl:28\\ntest set:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    close_brackets = 0\n    for i in string\n        if i == '['\n          \
    \  open_brackets += 1\n        elseif i == ']'\n            close_brackets +=\
    \ 1\n        end\n        if close_brackets > open_brackets\n            return\
    \ false\n        end\n    end\n    return open_brackets > 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6ywv334a.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6ywv334a.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ywv334a.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp6ywv334a.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ywv334a.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ywv334a.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp6ywv334a.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ywv334a.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ywv334a.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp6ywv334a.jl:45\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ywv334a.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ywv334a.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ywv334a.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # check if the string\
    \ is empty\n    if string == \"\"\n        return false\n    end\n    # check\
    \ if the string contains only square brackets\n    if !(string.contains(\"[\"\
    )) || !(string.contains(\"]\"))\n        return false\n    end\n    # check if\
    \ the string contains only one square bracket\n    if string.length == 1\n   \
    \     return false\n    end\n    # check if the string contains a valid subsequence\
    \ of brackets\n    if string.contains(\"[[\") || string.contains(\"]]\")\n   \
    \     return true\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1azwf8sx.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  type String has no\
    \ field contains\\n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\\
    n     @ Base ./Base.jl:33\\n   [2] is_nested(string::String)\\n     @ Main /tmp/tmp1azwf8sx.jl:19\\\
    n   [3] macro expansion\\n     @ /tmp/tmp1azwf8sx.jl:37 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1azwf8sx.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmp1azwf8sx.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  type String has no field contains\\\
    n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] is_nested(string::String)\\n     @ Main /tmp/tmp1azwf8sx.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp1azwf8sx.jl:38 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1azwf8sx.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmp1azwf8sx.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  type String has no field contains\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmp1azwf8sx.jl:19\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmp1azwf8sx.jl:39 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1azwf8sx.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmp1azwf8sx.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == false\\n  type String has no field contains\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmp1azwf8sx.jl:19\\n   [3] macro\
    \ expansion\\n     @ /t"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # check if the string\
    \ is empty\n    if string == \"\"\n        return false\n    end\n    # check\
    \ if the string contains only square brackets\n    if !(string.contains(\"[\"\
    )) || !(string.contains(\"]\"))\n        return false\n    end\n    # check if\
    \ the string contains only one bracket\n    if string.length() == 1\n        return\
    \ false\n    end\n    # check if the string contains only one type of bracket\n\
    \    if string.contains(\"[\") && !(string.contains(\"]\"))\n        return false\n\
    \    end\n    if !(string.contains(\"[\")) && string.contains(\"]\")\n       \
    \ return false\n    end\n    # check if the string contains a valid subsequence\
    \ of brackets\n    if string.contains(\"[[\") && string.contains(\"]]\")\n   \
    \     return true\n    end\n    if string.contains(\"[[]\") && string.contains(\"\
    []]\")\n        return true\n    end\n    if string.contains(\"[[[\") && string.contains(\"\
    [[]]\")\n        return true\n    end\n    if string.contains(\"[[[\") && string.contains(\"\
    []]]\")\n        return true\n    end\n    if string.contains(\"[[[\") && string.contains(\"\
    []]]\")\n        return true\n    end\n    if string.contains(\"[[[\") && string.contains(\"\
    []]]\")\n        return true\n    end\n    if string.contains(\"[[[\") && string.contains(\"\
    []]]\")\n        return true\n    end\n    if string.contains(\"[[[\") && string.contains(\"\
    []]]\")\n        return true\n    end\n    if string.contains(\"[[[\") && string.contains(\"\
    []]]\")\n        return true\n    end\n    if string.contains(\"[[[\") && string.contains(\"\
    []]]\")\n        return true\n    end\n    if string.contains(\"[[[\") && string.contains(\"\
    []]]\")\n        return true\n    end\n    if string.contains(\"[[[\") && string.contains(\"\
    []]]\")\n        return true\n    end\n    if string.contains(\"[[[\")\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn8ejjm28.jl:1\nin expression starting at /tmp/tmpn8ejjm28.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ c in string\n        if c == '['\n            push!(stack, c)\n        elseif\
    \ c == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0kxq4bgu.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0kxq4bgu.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0kxq4bgu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0kxq4bgu.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0kxq4bgu.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0kxq4bgu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0kxq4bgu.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0kxq4bgu.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0kxq4bgu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0kxq4bgu.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0kxq4bgu.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0kxq4bgu.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0kxq4bgu.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ i in string\n        if i == '['\n            count += 1\n        elseif i ==\
    \ ']'\n            count -= 1\n        end\n        if count < 0\n           \
    \ return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9y3bc2sp.jl:34\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9y3bc2sp.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9y3bc2sp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9y3bc2sp.jl:35\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9y3bc2sp.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9y3bc2sp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9y3bc2sp.jl:41\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9y3bc2sp.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9y3bc2sp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9y3bc2sp.jl:43\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9y3bc2sp.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9y3bc2sp.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9y3bc2sp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # TODO: Implement\
    \ your code here\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn82v3u9t.jl:22\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpn82v3u9t.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn82v3u9t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn82v3u9t.jl:26\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn82v3u9t.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn82v3u9t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn82v3u9t.jl:28\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn82v3u9t.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn82v3u9t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn82v3u9t.jl:31\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn82v3u9t.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn82v3u9t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn82v3u9t.jl:32\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn82v3u9t.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn82v3u9t.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     5     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn82v3u9t.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr177hbay.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpr177hbay.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpr177hbay.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpr177hbay.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpr177hbay.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpr177hbay.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpr177hbay.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpr177hbay.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpr177hbay.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ c in string\n        if c == '['\n            push!(stack, c)\n        elseif\
    \ c == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphaqnlspa.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphaqnlspa.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphaqnlspa.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphaqnlspa.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphaqnlspa.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphaqnlspa.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphaqnlspa.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphaqnlspa.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphaqnlspa.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphaqnlspa.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphaqnlspa.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphaqnlspa.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphaqnlspa.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ i in string\n        if i == '['\n            count += 1\n        elseif i ==\
    \ ']'\n            count -= 1\n        end\n        if count < 0\n           \
    \ return false\n        end\n    end\n    return count > 0 ? false : true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphzni8hre.jl:34\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphzni8hre.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzni8hre.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphzni8hre.jl:35\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphzni8hre.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzni8hre.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphzni8hre.jl:41\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphzni8hre.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzni8hre.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphzni8hre.jl:43\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphzni8hre.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzni8hre.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphzni8hre.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe4haxv4z.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpe4haxv4z.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpe4haxv4z.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe4haxv4z.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpe4haxv4z.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpe4haxv4z.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpe4haxv4z.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe4haxv4z.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpe4haxv4z.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    if open\
    \ > close\n        return false\n    else\n        return true\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeyrh8gt0.jl:35\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpeyrh8gt0.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeyrh8gt0.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpeyrh8gt0.jl:36\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeyrh8gt0.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeyrh8gt0.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpeyrh8gt0.jl:37\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeyrh8gt0.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeyrh8gt0.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpeyrh8gt0.jl:39\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpeyrh8gt0.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeyrh8gt0.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpeyrh8gt0.jl:42\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeyrh8gt0.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeyrh8gt0.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpeyrh8gt0.jl:43\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeyrh8gt0.jl:43\
    \ [inlined]\n [2] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeyrh8gt0.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string.contains(\"\
    []\")\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpar026z6h.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  type String has no\
    \ field contains\\n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\\
    n     @ Base ./Base.jl:33\\n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpar026z6h.jl:14\\\
    n   [3] macro expansion\\n     @ /tmp/tmpar026z6h.jl:21 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpar026z6h.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpar026z6h.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  type String has no field contains\\\
    n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpar026z6h.jl:14\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpar026z6h.jl:22 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpar026z6h.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpar026z6h.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  type String has no field contains\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpar026z6h.jl:14\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpar026z6h.jl:23 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpar026z6h.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpar026z6h.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == false\\n  type String has no field contains\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpar026z6h.jl:14\\n   [3] macro\
    \ expansion\\n     @ /t"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpar026z6h.jl:18\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ c in string\n        if c == '['\n            push!(stack, c)\n        elseif\
    \ c == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4lu4jnhh.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4lu4jnhh.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4lu4jnhh.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4lu4jnhh.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4lu4jnhh.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4lu4jnhh.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4lu4jnhh.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4lu4jnhh.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4lu4jnhh.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4lu4jnhh.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4lu4jnhh.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4lu4jnhh.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4lu4jnhh.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbrq39k76.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbrq39k76.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrq39k76.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpbrq39k76.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbrq39k76.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrq39k76.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpbrq39k76.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbrq39k76.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrq39k76.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpbrq39k76.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbrq39k76.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrq39k76.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpbrq39k76.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbrq39k76.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrq39k76.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpbrq39k76.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbrq39k76.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbrq39k76.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ char in string\n        if char == '['\n            push!(stack, char)\n   \
    \     elseif char == ']'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx0lbgmzn.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx0lbgmzn.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0lbgmzn.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpx0lbgmzn.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx0lbgmzn.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0lbgmzn.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpx0lbgmzn.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx0lbgmzn.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0lbgmzn.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpx0lbgmzn.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx0lbgmzn.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0lbgmzn.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx0lbgmzn.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpofthaayv.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpofthaayv.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpofthaayv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpofthaayv.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpofthaayv.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpofthaayv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpofthaayv.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpofthaayv.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpofthaayv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpofthaayv.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpofthaayv.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpofthaayv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpofthaayv.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpofthaayv.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpofthaayv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpofthaayv.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpofthaayv.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpofthaayv.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3_cx3mdx.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3_cx3mdx.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3_cx3mdx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3_cx3mdx.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3_cx3mdx.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3_cx3mdx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3_cx3mdx.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3_cx3mdx.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3_cx3mdx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3_cx3mdx.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3_cx3mdx.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3_cx3mdx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3_cx3mdx.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3_cx3mdx.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3_cx3mdx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3_cx3mdx.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3_cx3mdx.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3_cx3mdx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ s in string\n        if s == '['\n            push!(stack, s)\n        elseif\
    \ s == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfr7ji9ma.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfr7ji9ma.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfr7ji9ma.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfr7ji9ma.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfr7ji9ma.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfr7ji9ma.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfr7ji9ma.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfr7ji9ma.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfr7ji9ma.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpfr7ji9ma.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfr7ji9ma.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfr7ji9ma.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfr7ji9ma.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # check if the string\
    \ is empty\n    if string == \"\"\n        return false\n    end\n    # check\
    \ if the string is only one character\n    if length(string) == 1\n        return\
    \ false\n    end\n    # check if the string is only two characters\n    if length(string)\
    \ == 2\n        if string[1] == \"[\" && string[2] == \"]\"\n            return\
    \ true\n        else\n            return false\n        end\n    end\n    # check\
    \ if the string is only three characters\n    if length(string) == 3\n       \
    \ if string[1] == \"[\" && string[2] == \"[\" && string[3] == \"]\"\n        \
    \    return true\n        else\n            return false\n        end\n    end\n\
    \    # check if the string is only four characters\n    if length(string) == 4\n\
    \        if string[1] == \"[\" && string[2] == \"[\" && string[3] == \"]\" &&\
    \ string[4] == \"]\"\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    # check if the string is only five characters\n\
    \    if length(string) == 5\n        if string[1] == \"[\" && string[2] == \"\
    [\" && string[3] == \"]\" && string[4] == \"]\" && string[5] == \"]\"\n      \
    \      return true\n        else\n            return false\n        end\n    end\n\
    \    # check if the string is only six characters\n    if length(string) == 6\n\
    \        if string[1] == \"[\" && string[2] == \"[\" && string[3] == \"]\" &&\
    \ string[4] == \"]\" && string[5] == \"]\" && string[6] == \"]\"\n           \
    \ return true\n        else\n            return false\n        end\n    end\n\
    \    # check if the string is only seven characters\n    if length(string) ==\
    \ 7\n        if string[1] == \"[\" && string[2] == \"[\" && string[3] == \"]\"\
    \ && string[4] == \"]\" && string[5] == \"]\" && string[6] == \"]\" && string[7]\
    \ == \"]\"\n            return true\n        else\n            return false\n\
    \        end\n    end\n    # check if the string is only eight characters\n  \
    \ \nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0rgpxhe3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0rgpxhe3.jl:1\n\
    in expression starting at /tmp/tmp0rgpxhe3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ c in string\n        if c == '['\n            push!(stack, c)\n        elseif\
    \ c == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxiqtof9y.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxiqtof9y.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxiqtof9y.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxiqtof9y.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxiqtof9y.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxiqtof9y.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxiqtof9y.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxiqtof9y.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxiqtof9y.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxiqtof9y.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxiqtof9y.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxiqtof9y.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxiqtof9y.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string.count(\"\
    [\") == string.count(\"]\") && string.count(\"[[\") != string.count(\"]]\")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt02b80c_.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  type String has no\
    \ field count\\n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\n  \
    \   @ Base ./Base.jl:33\\n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpt02b80c_.jl:14\\\
    n   [3] macro expansion\\n     @ /tmp/tmpt02b80c_.jl:21 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt02b80c_.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpt02b80c_.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  type String has no field count\\\
    n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] is_nested(string::String)\\n     @ Main /tmp/tmpt02b80c_.jl:14\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpt02b80c_.jl:22 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt02b80c_.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpt02b80c_.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  type String has no field count\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpt02b80c_.jl:14\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpt02b80c_.jl:23 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt02b80c_.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpt02b80c_.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]\") == false\\n  type String has no field count\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpt02b80c_.jl:14\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpt02b80"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyo_xlgsn.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyo_xlgsn.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyo_xlgsn.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpyo_xlgsn.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyo_xlgsn.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyo_xlgsn.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpyo_xlgsn.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyo_xlgsn.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyo_xlgsn.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpyo_xlgsn.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyo_xlgsn.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyo_xlgsn.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyo_xlgsn.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    string = replace(string,\
    \ r\"[^\\[\\]]\", \"\")\n    if length(string) == 0\n        return false\n  \
    \  end\n    if string[1] == \"]\"\n        return false\n    end\n    if string[end]\
    \ == \"[\"\n        return false\n    end\n    if length(string) % 2 != 0\n  \
    \      return false\n    end\n    while length(string) > 0\n        string = replace(string,\
    \ r\"\\[\\]\", \"\")\n    end\n    if length(string) == 0\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmbyneik4.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: no method\
    \ matching replace(::String, ::Regex, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\n \
    \   replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpmbyneik4.jl:14\\n   [2]\
    \ macro expansion\\n     @ /tmp/tmpmbyneik4.jl:41 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmbyneik4.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpmbyneik4.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: no method matching replace(::String,\
    \ ::Regex, ::String)\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"\
    #s75\", B} where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\\
    n    replace(::String, !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpmbyneik4.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpmbyneik4.jl:42 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmbyneik4.jl:40\\ntest set:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ c in string\n        if c == '['\n            push!(stack, c)\n        elseif\
    \ c == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd6b4lp9l.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpd6b4lp9l.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd6b4lp9l.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpd6b4lp9l.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd6b4lp9l.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd6b4lp9l.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpd6b4lp9l.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd6b4lp9l.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd6b4lp9l.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpd6b4lp9l.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd6b4lp9l.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd6b4lp9l.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd6b4lp9l.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for char in string\n        if char == '['\n            open_brackets +=\
    \ 1\n        elseif char == ']'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr1f_mg5j.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpr1f_mg5j.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr1f_mg5j.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr1f_mg5j.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr1f_mg5j.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr1f_mg5j.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr1f_mg5j.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr1f_mg5j.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr1f_mg5j.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr1f_mg5j.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr1f_mg5j.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr1f_mg5j.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr1f_mg5j.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr1f_mg5j.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr1f_mg5j.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr1f_mg5j.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr1f_mg5j.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr1f_mg5j.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    closed_brackets = 0\n    for i in string\n        if i == '['\n         \
    \   open_brackets += 1\n        elseif i == ']'\n            closed_brackets +=\
    \ 1\n        end\n    end\n    return open_brackets > closed_brackets\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcv4hrsaj.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcv4hrsaj.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcv4hrsaj.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcv4hrsaj.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcv4hrsaj.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcv4hrsaj.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcv4hrsaj.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcv4hrsaj.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcv4hrsaj.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcv4hrsaj.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcv4hrsaj.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcv4hrsaj.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcv4hrsaj.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcv4hrsaj.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcv4hrsaj.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcv4hrsaj.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcv4hrsaj.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcv4hrsaj.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqg0qip0s.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpqg0qip0s.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpqg0qip0s.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqg0qip0s.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpqg0qip0s.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpqg0qip0s.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpqg0qip0s.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqg0qip0s.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpqg0qip0s.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa5sm1i5g.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa5sm1i5g.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa5sm1i5g.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpa5sm1i5g.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa5sm1i5g.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa5sm1i5g.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpa5sm1i5g.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa5sm1i5g.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa5sm1i5g.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpa5sm1i5g.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa5sm1i5g.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa5sm1i5g.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa5sm1i5g.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzxv443xq.jl:22\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzxv443xq.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxv443xq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzxv443xq.jl:26\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzxv443xq.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxv443xq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzxv443xq.jl:28\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzxv443xq.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxv443xq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzxv443xq.jl:31\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzxv443xq.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxv443xq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzxv443xq.jl:32\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzxv443xq.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzxv443xq.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     5     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzxv443xq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for char in string\n        if char == '['\n            open_brackets +=\
    \ 1\n        elseif char == ']'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7iz9n79y.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7iz9n79y.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7iz9n79y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7iz9n79y.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7iz9n79y.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7iz9n79y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7iz9n79y.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7iz9n79y.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7iz9n79y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7iz9n79y.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7iz9n79y.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7iz9n79y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7iz9n79y.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7iz9n79y.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7iz9n79y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7iz9n79y.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7iz9n79y.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7iz9n79y.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ char in string\n        if char == '['\n            push!(stack, char)\n   \
    \     elseif char == ']'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsn3vnqz5.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsn3vnqz5.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsn3vnqz5.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsn3vnqz5.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsn3vnqz5.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsn3vnqz5.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsn3vnqz5.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsn3vnqz5.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsn3vnqz5.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsn3vnqz5.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsn3vnqz5.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsn3vnqz5.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsn3vnqz5.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ i in string\n        if i == '['\n            count += 1\n        elseif i ==\
    \ ']'\n            count -= 1\n        end\n        if count < 0\n           \
    \ return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaahmsl1y.jl:34\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpaahmsl1y.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaahmsl1y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpaahmsl1y.jl:35\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaahmsl1y.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaahmsl1y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpaahmsl1y.jl:41\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaahmsl1y.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaahmsl1y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpaahmsl1y.jl:43\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaahmsl1y.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaahmsl1y.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaahmsl1y.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code goes here\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps49gw_86.jl:23\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps49gw_86.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps49gw_86.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps49gw_86.jl:24\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps49gw_86.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps49gw_86.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps49gw_86.jl:25\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps49gw_86.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps49gw_86.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps49gw_86.jl:27\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmps49gw_86.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps49gw_86.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps49gw_86.jl:29\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps49gw_86.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps49gw_86.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps49gw_86.jl:30\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps49gw_86.jl:30\
    \ [inlined]\n [2] macro expansion\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps49gw_86.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    close_brackets = 0\n    for i in string\n        if i == '['\n          \
    \  open_brackets += 1\n        elseif i == ']'\n            close_brackets +=\
    \ 1\n        end\n    end\n    return open_brackets > close_brackets\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfipyp6_x.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfipyp6_x.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfipyp6_x.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpfipyp6_x.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfipyp6_x.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfipyp6_x.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpfipyp6_x.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfipyp6_x.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfipyp6_x.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpfipyp6_x.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfipyp6_x.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfipyp6_x.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpfipyp6_x.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfipyp6_x.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfipyp6_x.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpfipyp6_x.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfipyp6_x.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfipyp6_x.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcls9837d.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpcls9837d.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpcls9837d.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcls9837d.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpcls9837d.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpcls9837d.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpcls9837d.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcls9837d.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpcls9837d.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe7mx9jwy.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe7mx9jwy.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe7mx9jwy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe7mx9jwy.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe7mx9jwy.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe7mx9jwy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe7mx9jwy.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe7mx9jwy.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe7mx9jwy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe7mx9jwy.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe7mx9jwy.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe7mx9jwy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe7mx9jwy.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe7mx9jwy.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe7mx9jwy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe7mx9jwy.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe7mx9jwy.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe7mx9jwy.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ char in string\n        if char == '['\n            push!(stack, char)\n   \
    \     elseif char == ']'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz7s9pk6h.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz7s9pk6h.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz7s9pk6h.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpz7s9pk6h.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz7s9pk6h.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz7s9pk6h.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpz7s9pk6h.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz7s9pk6h.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz7s9pk6h.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpz7s9pk6h.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz7s9pk6h.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz7s9pk6h.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz7s9pk6h.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ char in string\n        if char == '['\n            push!(stack, char)\n   \
    \     elseif char == ']'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdoaqxnqn.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdoaqxnqn.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdoaqxnqn.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpdoaqxnqn.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdoaqxnqn.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdoaqxnqn.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpdoaqxnqn.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdoaqxnqn.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdoaqxnqn.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpdoaqxnqn.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdoaqxnqn.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdoaqxnqn.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdoaqxnqn.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    if open\
    \ == close\n        return false\n    else\n        return true\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfj3bhnio.jl:34\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfj3bhnio.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfj3bhnio.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfj3bhnio.jl:35\n  Expression: candidate(\"[]]]]]]][[[[[]\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpfj3bhnio.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfj3bhnio.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfj3bhnio.jl:38\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfj3bhnio.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfj3bhnio.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfj3bhnio.jl:39\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpfj3bhnio.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfj3bhnio.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfj3bhnio.jl:40\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfj3bhnio.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfj3bhnio.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfj3bhnio.jl:41\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfj3bhnio.jl:41\
    \ [inlined]\n [2] macro exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfj3bhnio.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0kkkt99o.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0kkkt99o.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0kkkt99o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0kkkt99o.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0kkkt99o.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0kkkt99o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0kkkt99o.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0kkkt99o.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0kkkt99o.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp0kkkt99o.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0kkkt99o.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0kkkt99o.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0kkkt99o.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpytb_7cwh.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpytb_7cwh.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpytb_7cwh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpytb_7cwh.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpytb_7cwh.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpytb_7cwh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpytb_7cwh.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpytb_7cwh.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpytb_7cwh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpytb_7cwh.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpytb_7cwh.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpytb_7cwh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpytb_7cwh.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpytb_7cwh.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpytb_7cwh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpytb_7cwh.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpytb_7cwh.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpytb_7cwh.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ char in string\n        if char == '['\n            push!(stack, char)\n   \
    \     elseif char == ']'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzg6eabld.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzg6eabld.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzg6eabld.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzg6eabld.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzg6eabld.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzg6eabld.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzg6eabld.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzg6eabld.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzg6eabld.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpzg6eabld.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzg6eabld.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzg6eabld.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzg6eabld.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe0sbmsyf.jl:23\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpe0sbmsyf.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe0sbmsyf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe0sbmsyf.jl:24\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe0sbmsyf.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe0sbmsyf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe0sbmsyf.jl:25\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe0sbmsyf.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe0sbmsyf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe0sbmsyf.jl:27\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpe0sbmsyf.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe0sbmsyf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe0sbmsyf.jl:29\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe0sbmsyf.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe0sbmsyf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe0sbmsyf.jl:30\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe0sbmsyf.jl:30\
    \ [inlined]\n [2] macro expansion\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe0sbmsyf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    count = 0\n    for\
    \ i in string\n        if i == '['\n            count += 1\n        elseif i ==\
    \ ']'\n            count -= 1\n        end\n        if count < 0\n           \
    \ return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuzbj6x0c.jl:34\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpuzbj6x0c.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuzbj6x0c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuzbj6x0c.jl:35\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuzbj6x0c.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuzbj6x0c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuzbj6x0c.jl:41\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuzbj6x0c.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuzbj6x0c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpuzbj6x0c.jl:43\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuzbj6x0c.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuzbj6x0c.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuzbj6x0c.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ bracket in string\n        if bracket == '['\n            push!(stack, bracket)\n\
    \        elseif bracket == ']'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptsclzl2p.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptsclzl2p.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptsclzl2p.jl:32\ntest set: Test\
    \ Failed at /tmp/tmptsclzl2p.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptsclzl2p.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptsclzl2p.jl:32\ntest set: Test\
    \ Failed at /tmp/tmptsclzl2p.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptsclzl2p.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptsclzl2p.jl:32\ntest set: Test\
    \ Failed at /tmp/tmptsclzl2p.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptsclzl2p.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptsclzl2p.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptsclzl2p.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ c in string\n        if c == '['\n            push!(stack, c)\n        elseif\
    \ c == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu0d5o7h3.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpu0d5o7h3.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu0d5o7h3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpu0d5o7h3.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu0d5o7h3.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu0d5o7h3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpu0d5o7h3.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu0d5o7h3.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu0d5o7h3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpu0d5o7h3.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu0d5o7h3.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu0d5o7h3.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu0d5o7h3.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj3kv9jyp.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpj3kv9jyp.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj3kv9jyp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj3kv9jyp.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj3kv9jyp.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj3kv9jyp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj3kv9jyp.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj3kv9jyp.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj3kv9jyp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj3kv9jyp.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj3kv9jyp.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj3kv9jyp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj3kv9jyp.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj3kv9jyp.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj3kv9jyp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj3kv9jyp.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj3kv9jyp.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj3kv9jyp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ char in string\n        if char == '['\n            push!(stack, char)\n   \
    \     elseif char == ']'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe235gd0h.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe235gd0h.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe235gd0h.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpe235gd0h.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe235gd0h.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe235gd0h.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpe235gd0h.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe235gd0h.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe235gd0h.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpe235gd0h.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe235gd0h.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe235gd0h.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe235gd0h.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string.count(\"\
    [\") == string.count(\"]\") && string.count(\"[[\") < string.count(\"]]\")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5gvc3kp5.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  type String has no field count\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmp5gvc3kp5.jl:14\n   [3]\
    \ macro expansion\n     @ /tmp/tmp5gvc3kp5.jl:21 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5gvc3kp5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp5gvc3kp5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  type String has no field count\n \
    \ Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmp5gvc3kp5.jl:14\n   [3]\
    \ macro expansion\n     @ /tmp/tmp5gvc3kp5.jl:22 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5gvc3kp5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp5gvc3kp5.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  type String has no field count\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmp5gvc3kp5.jl:14\n   [3] macro expansion\n     @ /tmp/tmp5gvc3kp5.jl:23\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5gvc3kp5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp5gvc3kp5.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  type String has no field count\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmp5gvc3kp5.jl:14\n   [3] macro expansion\n     @ /tmp/tmp5gvc3kp5.jl:24\
    \ [inlined]\n   [4] macro expansion\n     @ /buildwo"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 14 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5gvc3kp5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdkpescmd.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpdkpescmd.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpdkpescmd.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdkpescmd.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpdkpescmd.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpdkpescmd.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpdkpescmd.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdkpescmd.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpdkpescmd.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    closed_brackets = 0\n    for i in string\n        if i == '['\n         \
    \   open_brackets += 1\n        elseif i == ']'\n            closed_brackets +=\
    \ 1\n        end\n    end\n    return open_brackets > closed_brackets\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp88664uh.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpp88664uh.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp88664uh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpp88664uh.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp88664uh.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp88664uh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpp88664uh.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp88664uh.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp88664uh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpp88664uh.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp88664uh.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp88664uh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpp88664uh.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp88664uh.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp88664uh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpp88664uh.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp88664uh.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp88664uh.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvmdo0596.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvmdo0596.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvmdo0596.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvmdo0596.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvmdo0596.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvmdo0596.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvmdo0596.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvmdo0596.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvmdo0596.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvmdo0596.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvmdo0596.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvmdo0596.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvmdo0596.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvmdo0596.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvmdo0596.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvmdo0596.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvmdo0596.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvmdo0596.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    close_brackets = 0\n    for i in string\n        if i == '['\n          \
    \  open_brackets += 1\n        elseif i == ']'\n            close_brackets +=\
    \ 1\n        end\n    end\n    if open_brackets > close_brackets\n        return\
    \ false\n    else\n        return true\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4lh12tlt.jl:35\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4lh12tlt.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4lh12tlt.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4lh12tlt.jl:36\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4lh12tlt.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4lh12tlt.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4lh12tlt.jl:37\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4lh12tlt.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4lh12tlt.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4lh12tlt.jl:39\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp4lh12tlt.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4lh12tlt.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4lh12tlt.jl:42\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4lh12tlt.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4lh12tlt.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4lh12tlt.jl:43\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4lh12tlt.jl:43\
    \ [inlined]\n [2] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4lh12tlt.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # check if the string\
    \ is empty\n    if string == \"\"\n        return false\n    end\n    # check\
    \ if the string has an even number of brackets\n    if length(string) % 2 != 0\n\
    \        return false\n    end\n    # check if the string has a valid subsequence\
    \ of brackets\n    if string[1] == \"]\" || string[end] == \"[\"\n        return\
    \ false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpngw_fxn0.jl:34\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpngw_fxn0.jl:34 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpngw_fxn0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpngw_fxn0.jl:35\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpngw_fxn0.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpngw_fxn0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpngw_fxn0.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpngw_fxn0.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpngw_fxn0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpngw_fxn0.jl:45\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpngw_fxn0.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpngw_fxn0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpngw_fxn0.jl:46\n  Expression: candidate(\"]]]]]]]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpngw_fxn0.jl:46\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpngw_fxn0.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     5     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpngw_fxn0.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ bracket in string\n        if bracket == '['\n            push!(stack, bracket)\n\
    \        elseif bracket == ']'\n            if length(stack) == 0\n          \
    \      return false\n            else\n                pop!(stack)\n         \
    \   end\n        end\n    end\n    return length(stack) == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\
    \t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") ==\
    \ false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaff2t2kb.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpaff2t2kb.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaff2t2kb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpaff2t2kb.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaff2t2kb.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaff2t2kb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpaff2t2kb.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaff2t2kb.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaff2t2kb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpaff2t2kb.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaff2t2kb.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaff2t2kb.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaff2t2kb.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    close_brackets = 0\n    for i in string\n        if i == '['\n          \
    \  open_brackets += 1\n        elseif i == ']'\n            close_brackets +=\
    \ 1\n        end\n    end\n    return open_brackets > close_brackets\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5o0k96g6.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5o0k96g6.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5o0k96g6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp5o0k96g6.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5o0k96g6.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5o0k96g6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp5o0k96g6.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5o0k96g6.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5o0k96g6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp5o0k96g6.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5o0k96g6.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5o0k96g6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp5o0k96g6.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5o0k96g6.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5o0k96g6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp5o0k96g6.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5o0k96g6.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5o0k96g6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # check if the string\
    \ is empty\n    if string == \"\"\n        return false\n    end\n    # check\
    \ if the string contains only square brackets\n    if !(string.contains(\"[\"\
    ) && string.contains(\"]\"))\n        return false\n    end\n    # check if the\
    \ string contains only one square bracket\n    if string.length == 1\n       \
    \ return false\n    end\n    # check if the string contains a valid subsequence\
    \ of brackets\n    if string.contains(\"[[\") || string.contains(\"][\")\n   \
    \     return true\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvg3m90c7.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"[[]]\") == true\n  type String has no field contains\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmpvg3m90c7.jl:19\n   [3]\
    \ macro expansion\n     @ /tmp/tmpvg3m90c7.jl:37 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvg3m90c7.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpvg3m90c7.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\n  type String has no field contains\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] is_nested(string::String)\n     @ Main /tmp/tmpvg3m90c7.jl:19\n   [3]\
    \ macro expansion\n     @ /tmp/tmpvg3m90c7.jl:38 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvg3m90c7.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpvg3m90c7.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"[][]\") == false\n  type String has no field contains\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmpvg3m90c7.jl:19\n   [3] macro expansion\n     @ /tmp/tmpvg3m90c7.jl:39\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvg3m90c7.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpvg3m90c7.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"[]\") == false\n  type String has no field contains\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] is_nested(string::String)\n\
    \     @ Main /tmp/tmpvg3m90c7.jl:19\n   [3] macro expansion\n     @ /tmp/tmpvg3m90c7.jl:40\
    \ [inlined]\n   [4] macro expansion\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 13 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvg3m90c7.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    return string.match(\"\
    \\[\\[.*\\]\\]\") != nothing\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3lo62r3m.jl:14\nin expression starting at /tmp/tmp3lo62r3m.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    return\
    \ open > close\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t\
    @test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\
    \t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t\
    @test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\") ==\
    \ false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnwz1805s.jl:30\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnwz1805s.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnwz1805s.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnwz1805s.jl:34\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnwz1805s.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnwz1805s.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnwz1805s.jl:36\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnwz1805s.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnwz1805s.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnwz1805s.jl:37\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnwz1805s.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnwz1805s.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnwz1805s.jl:40\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnwz1805s.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnwz1805s.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnwz1805s.jl:42\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnwz1805s.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnwz1805s.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    close_brackets = 0\n    for i in string\n        if i == '['\n          \
    \  open_brackets += 1\n        elseif i == ']'\n            close_brackets +=\
    \ 1\n        end\n        if close_brackets > open_brackets\n            return\
    \ false\n        end\n    end\n    if open_brackets == close_brackets\n      \
    \  return false\n    else\n        return true\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_c4yzjhs.jl:37\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_c4yzjhs.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_c4yzjhs.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_c4yzjhs.jl:41\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_c4yzjhs.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_c4yzjhs.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_c4yzjhs.jl:43\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_c4yzjhs.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_c4yzjhs.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_c4yzjhs.jl:44\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_c4yzjhs.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_c4yzjhs.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_c4yzjhs.jl:47\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_c4yzjhs.jl:47\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_c4yzjhs.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_c4yzjhs.jl:49\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_c4yzjhs.jl:49\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_c4yzjhs.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # TODO: Implement\
    \ your code here\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7o_h9qxj.jl:22\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7o_h9qxj.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7o_h9qxj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7o_h9qxj.jl:26\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7o_h9qxj.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7o_h9qxj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7o_h9qxj.jl:28\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7o_h9qxj.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7o_h9qxj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7o_h9qxj.jl:31\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7o_h9qxj.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7o_h9qxj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7o_h9qxj.jl:32\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7o_h9qxj.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7o_h9qxj.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     5     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7o_h9qxj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ c in string\n        if c == '['\n            push!(stack, c)\n        elseif\
    \ c == ']'\n            if isempty(stack) || stack[end] != '['\n             \
    \   return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8iuiosd4.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8iuiosd4.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8iuiosd4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8iuiosd4.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8iuiosd4.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8iuiosd4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8iuiosd4.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8iuiosd4.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8iuiosd4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8iuiosd4.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8iuiosd4.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8iuiosd4.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8iuiosd4.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for c in string\n        if c == '['\n            open_brackets += 1\n  \
    \      elseif c == ']'\n            if open_brackets == 0\n                return\
    \ false\n            else\n                open_brackets -= 1\n            end\n\
    \        end\n    end\n    return open_brackets > 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4b8aacti.jl:33\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4b8aacti.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4b8aacti.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4b8aacti.jl:37\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4b8aacti.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4b8aacti.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4b8aacti.jl:39\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4b8aacti.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4b8aacti.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4b8aacti.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4b8aacti.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4b8aacti.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4b8aacti.jl:43\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4b8aacti.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4b8aacti.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4b8aacti.jl:45\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4b8aacti.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4b8aacti.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for c in string\n        if c == '['\n            open_brackets += 1\n  \
    \      elseif c == ']'\n            if open_brackets == 0\n                return\
    \ false\n            else\n                open_brackets -= 1\n            end\n\
    \        end\n    end\n    return open_brackets > 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp59wag0b5.jl:33\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp59wag0b5.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp59wag0b5.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp59wag0b5.jl:37\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp59wag0b5.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp59wag0b5.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp59wag0b5.jl:39\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp59wag0b5.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp59wag0b5.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp59wag0b5.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp59wag0b5.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp59wag0b5.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp59wag0b5.jl:43\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp59wag0b5.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp59wag0b5.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp59wag0b5.jl:45\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp59wag0b5.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp59wag0b5.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for char in string\n        if char == '['\n            open_brackets +=\
    \ 1\n        elseif char == ']'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfbfa85md.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfbfa85md.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfbfa85md.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfbfa85md.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfbfa85md.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfbfa85md.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfbfa85md.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfbfa85md.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfbfa85md.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfbfa85md.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfbfa85md.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfbfa85md.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfbfa85md.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfbfa85md.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfbfa85md.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfbfa85md.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfbfa85md.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfbfa85md.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1e_lzgta.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1e_lzgta.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1e_lzgta.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1e_lzgta.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1e_lzgta.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1e_lzgta.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1e_lzgta.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1e_lzgta.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1e_lzgta.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1e_lzgta.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1e_lzgta.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1e_lzgta.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1e_lzgta.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0kkb0j6b.jl:23\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0kkb0j6b.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0kkb0j6b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0kkb0j6b.jl:24\n  Expression: candidate(\"[][]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0kkb0j6b.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0kkb0j6b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0kkb0j6b.jl:25\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0kkb0j6b.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0kkb0j6b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0kkb0j6b.jl:27\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp0kkb0j6b.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0kkb0j6b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0kkb0j6b.jl:29\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0kkb0j6b.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0kkb0j6b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0kkb0j6b.jl:30\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0kkb0j6b.jl:30\
    \ [inlined]\n [2] macro expansion\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0kkb0j6b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx6mn9sfy.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpx6mn9sfy.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpx6mn9sfy.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpx6mn9sfy.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpx6mn9sfy.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpx6mn9sfy.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpx6mn9sfy.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpx6mn9sfy.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpx6mn9sfy.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # check if the string\
    \ contains only square brackets\n    if !(string.match(r\"[\\[\\]]\"))\n     \
    \   return false\n    end\n    # check if the string contains a valid subsequence\
    \ of brackets\n    if !(string.match(r\"(\\[\\])|(\\[\\[\\])|(\\[\\[\\[\\])|(\\\
    [\\[\\[\\[\\])|(\\[\\[\\[\\[\\[\\])|(\\[\\[\\[\\[\\[\\[\\])|(\\[\\[\\[\\[\\[\\\
    [\\[\\])|(\\[\\[\\[\\[\\[\\[\\[\\[\\])|(\\[\\[\\[\\[\\[\\[\\[\\[\\[\\])|(\\[\\\
    [\\[\\[\\[\\[\\[\\[\\[\\[\\])|(\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\])|(\\[\\[\\\
    [\\[\\[\\[\\[\\[\\[\\[\\[\\[\\])|(\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\])|(\\\
    [\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\])|(\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\\
    [\\[\\[\\[\\[\\])|(\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\])|(\\[\\\
    [\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\])|(\\[\\[\\[\\[\\[\\[\\[\\[\\\
    [\\[\\[\\[\\[\\[\\[\\[\\[\\[\\])|(\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\[\\\
    [\\[\\[\\[\\[\\])|(\\[\\[\\[\\[\\[\\[\\[\\[\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbrbdxgyc.jl:25\nin expression starting at\
    \ /tmp/tmpbrbdxgyc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    string = replace(string,\
    \ \"][\", \"\")\n    string = replace(string, \"[]\", \"\")\n    return length(string)\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6gudn9kp.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\n \
    \   replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp6gudn9kp.jl:14\\n   [2]\
    \ macro expansion\\n     @ /tmp/tmp6gudn9kp.jl:23 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6gudn9kp.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmp6gudn9kp.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"\
    #s75\", B} where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\\
    n    replace(::String, !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp6gudn9kp.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6gudn9kp.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6gudn9kp.jl:22\\ntest se"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # check if the string\
    \ contains any brackets\n    if !(occursin(\"[\", string) || occursin(\"]\", string))\n\
    \        return false\n    end\n    # check if the string contains an equal number\
    \ of opening and closing brackets\n    if count(string, \"[\") != count(string,\
    \ \"]\")\n        return false\n    end\n    # check if the string contains any\
    \ nested brackets\n    if !(occursin(\"[[\", string) || occursin(\"]]\", string))\n\
    \        return false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoab35bq9.jl:34\n  Expression: candidate(\"\
    []]]]]]][[[[[]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpoab35bq9.jl:34 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoab35bq9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpoab35bq9.jl:38\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpoab35bq9.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoab35bq9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpoab35bq9.jl:40\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoab35bq9.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoab35bq9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpoab35bq9.jl:41\n  Expression: candidate(\"[]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoab35bq9.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoab35bq9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpoab35bq9.jl:45\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoab35bq9.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoab35bq9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpoab35bq9.jl:46\n  Expression: candidate(\"]]]]]]]]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoab35bq9.jl:46\
    \ [inlined]\n [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoab35bq9.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp07dlv43p.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmp07dlv43p.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp07dlv43p.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp07dlv43p.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp07dlv43p.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmp07dlv43p.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp07dlv43p.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp07dlv43p.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp07dlv43p.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    stack = []\n    for\
    \ i in string\n        if i == '['\n            push!(stack, i)\n        elseif\
    \ i == ']'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1ltuaaqd.jl:35\n  Expression: candidate(\"\
    [][]\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1ltuaaqd.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ltuaaqd.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1ltuaaqd.jl:36\n  Expression: candidate(\"[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1ltuaaqd.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ltuaaqd.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1ltuaaqd.jl:42\n  Expression: candidate(\"[[]][[\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1ltuaaqd.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ltuaaqd.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1ltuaaqd.jl:44\n  Expression: candidate(\"\") == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1ltuaaqd.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ltuaaqd.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     4     14\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ltuaaqd.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for i in string\n        if i == '['\n            open_brackets += 1\n  \
    \      elseif i == ']'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\
    \t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") ==\
    \ false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\") ==\
    \ false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj7__hczm.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpj7__hczm.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7__hczm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj7__hczm.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj7__hczm.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7__hczm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj7__hczm.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj7__hczm.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7__hczm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj7__hczm.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj7__hczm.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7__hczm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj7__hczm.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj7__hczm.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7__hczm.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj7__hczm.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj7__hczm.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj7__hczm.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for char in string\n        if char == '['\n            open_brackets +=\
    \ 1\n        elseif char == ']'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcawk4hvp.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcawk4hvp.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcawk4hvp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcawk4hvp.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcawk4hvp.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcawk4hvp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcawk4hvp.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcawk4hvp.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcawk4hvp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcawk4hvp.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcawk4hvp.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcawk4hvp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcawk4hvp.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcawk4hvp.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcawk4hvp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcawk4hvp.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcawk4hvp.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcawk4hvp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_bracket = 0\n\
    \    close_bracket = 0\n    for i in string\n        if i == '['\n           \
    \ open_bracket += 1\n        elseif i == ']'\n            close_bracket += 1\n\
    \        end\n    end\n    if open_bracket > close_bracket\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"\
    []]]]]]][[[[[]\") == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"\
    []\") == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"\
    []]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"\
    [[]\") == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe3a0ct7p.jl:34\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe3a0ct7p.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe3a0ct7p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpe3a0ct7p.jl:38\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe3a0ct7p.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe3a0ct7p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpe3a0ct7p.jl:40\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe3a0ct7p.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe3a0ct7p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpe3a0ct7p.jl:41\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe3a0ct7p.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe3a0ct7p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpe3a0ct7p.jl:44\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe3a0ct7p.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe3a0ct7p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpe3a0ct7p.jl:46\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe3a0ct7p.jl:46\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe3a0ct7p.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for char in string\n        if char == '['\n            open_brackets +=\
    \ 1\n        elseif char == ']'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3117b2x7.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3117b2x7.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3117b2x7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3117b2x7.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3117b2x7.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3117b2x7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3117b2x7.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3117b2x7.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3117b2x7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3117b2x7.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3117b2x7.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3117b2x7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3117b2x7.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3117b2x7.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3117b2x7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3117b2x7.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3117b2x7.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3117b2x7.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for char in string\n        if char == '['\n            open_brackets +=\
    \ 1\n        elseif char == ']'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy7nfzbpr.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy7nfzbpr.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7nfzbpr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpy7nfzbpr.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7nfzbpr.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7nfzbpr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpy7nfzbpr.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7nfzbpr.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7nfzbpr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpy7nfzbpr.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7nfzbpr.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7nfzbpr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpy7nfzbpr.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7nfzbpr.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7nfzbpr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpy7nfzbpr.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7nfzbpr.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy7nfzbpr.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    # Your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
    [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpegrkq_lc.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"[[]]\") == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] is_nested(string::String)\\n     @ Main /tmp/tmpegrkq_lc.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpegrkq_lc.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpegrkq_lc.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpegrkq_lc.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[]]]]]]][[[[[]\") == false\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_nested(string::String)\\n     @ Main /tmp/tmpegrkq_lc.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpegrkq_lc.jl:22 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpegrkq_lc.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpegrkq_lc.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"[][]\") == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in string\n        if i == '['\n            open += 1\n     \
    \   elseif i == ']'\n            close += 1\n        end\n    end\n    if open\
    \ == close\n        return false\n    else\n        return true\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"[[]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
    [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
    ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"\
    [][][[]]\") == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"\
    []]\") == false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"\
    [[][]]\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\"\
    ) == false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr33agz01.jl:34\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpr33agz01.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr33agz01.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpr33agz01.jl:35\n  Expression: candidate(\"[]]]]]]][[[[[]\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpr33agz01.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr33agz01.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpr33agz01.jl:38\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr33agz01.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr33agz01.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpr33agz01.jl:39\n  Expression: candidate(\"[]]]]]]]]]]\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpr33agz01.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr33agz01.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpr33agz01.jl:40\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr33agz01.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr33agz01.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpr33agz01.jl:41\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr33agz01.jl:41\
    \ [inlined]\n [2] macro exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr33agz01.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E\
    \ False\n    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n\
    \    \"\"\"\nfunction is_nested(string::String)::Bool \n    open_brackets = 0\n\
    \    for char in string\n        if char == '['\n            open_brackets +=\
    \ 1\n        elseif char == ']'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets > 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_nested;\n\t@test(candidate(\"[[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\"\
    ) == false)\n\t@test(candidate(\"[][]\") == false)\n\t@test(candidate(\"[]\")\
    \ == false)\n\t@test(candidate(\"[[[[]]]]\") == true)\n\t@test(candidate(\"[]]]]]]]]]]\"\
    ) == false)\n\t@test(candidate(\"[][][[]]\") == true)\n\t@test(candidate(\"[[]\"\
    ) == false)\n\t@test(candidate(\"[]]\") == false)\n\t@test(candidate(\"[[]][[\"\
    ) == true)\n\t@test(candidate(\"[[][]]\") == true)\n\t@test(candidate(\"\") ==\
    \ false)\n\t@test(candidate(\"[[[[[[[[\") == false)\n\t@test(candidate(\"]]]]]]]]\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5mkrkyx9.jl:32\n  Expression: candidate(\"\
    [[]]\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5mkrkyx9.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5mkrkyx9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5mkrkyx9.jl:36\n  Expression: candidate(\"[[[[]]]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5mkrkyx9.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5mkrkyx9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5mkrkyx9.jl:38\n  Expression: candidate(\"[][][[]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5mkrkyx9.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5mkrkyx9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5mkrkyx9.jl:39\n  Expression: candidate(\"[[]\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5mkrkyx9.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5mkrkyx9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5mkrkyx9.jl:42\n  Expression: candidate(\"[[][]]\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5mkrkyx9.jl:42\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5mkrkyx9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5mkrkyx9.jl:44\n  Expression: candidate(\"[[[[[[[[\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5mkrkyx9.jl:44\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5mkrkyx9.jl:29\n"
  exit_code: 1
  status: SyntaxError
