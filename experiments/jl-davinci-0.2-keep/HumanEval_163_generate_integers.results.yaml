name: HumanEval_163_generate_integers
language: julia
results:
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprobttq5f.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprobttq5f.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprobttq5f.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprobttq5f.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmprobttq5f.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprobttq5f.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprobttq5f.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmprobttq5f.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprobttq5f.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprobttq5f.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmprobttq5f.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprobttq5f.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprobttq5f.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjt1him_b.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjt1him_b.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjt1him_b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjt1him_b.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjt1him_b.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjt1him_b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjt1him_b.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjt1him_b.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjt1him_b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjt1him_b.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpjt1him_b.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjt1him_b.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjt1him_b.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy9_rq3h5.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy9_rq3h5.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9_rq3h5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy9_rq3h5.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpy9_rq3h5.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9_rq3h5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy9_rq3h5.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpy9_rq3h5.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9_rq3h5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy9_rq3h5.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpy9_rq3h5.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9_rq3h5.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy9_rq3h5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7q1r_4yq.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7q1r_4yq.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7q1r_4yq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7q1r_4yq.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7q1r_4yq.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7q1r_4yq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7q1r_4yq.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7q1r_4yq.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7q1r_4yq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7q1r_4yq.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp7q1r_4yq.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7q1r_4yq.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7q1r_4yq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpouaw_qwy.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpouaw_qwy.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpouaw_qwy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpouaw_qwy.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpouaw_qwy.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpouaw_qwy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpouaw_qwy.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpouaw_qwy.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpouaw_qwy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpouaw_qwy.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpouaw_qwy.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpouaw_qwy.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpouaw_qwy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmiazzo9d.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpmiazzo9d.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmiazzo9d.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpmiazzo9d.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmiazzo9d.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmiazzo9d.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpmiazzo9d.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmiazzo9d.jl:32 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmiazzo9d.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpmiazzo9d.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpmiazzo9d.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmiazzo9d.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmiazzo9d.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcw9aj3zi.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcw9aj3zi.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcw9aj3zi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcw9aj3zi.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpcw9aj3zi.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcw9aj3zi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcw9aj3zi.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpcw9aj3zi.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcw9aj3zi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcw9aj3zi.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpcw9aj3zi.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcw9aj3zi.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcw9aj3zi.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi28x0pj9.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpi28x0pj9.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi28x0pj9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpi28x0pj9.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpi28x0pj9.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi28x0pj9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpi28x0pj9.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpi28x0pj9.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi28x0pj9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpi28x0pj9.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpi28x0pj9.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi28x0pj9.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi28x0pj9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo04t13sh.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpo04t13sh.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo04t13sh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpo04t13sh.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpo04t13sh.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo04t13sh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpo04t13sh.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpo04t13sh.jl:32 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo04t13sh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpo04t13sh.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpo04t13sh.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo04t13sh.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo04t13sh.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkz65oj3y.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkz65oj3y.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkz65oj3y.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkz65oj3y.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkz65oj3y.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkz65oj3y.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkz65oj3y.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkz65oj3y.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkz65oj3y.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkz65oj3y.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpkz65oj3y.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkz65oj3y.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkz65oj3y.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphvthn2dn.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphvthn2dn.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphvthn2dn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphvthn2dn.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphvthn2dn.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphvthn2dn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphvthn2dn.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphvthn2dn.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphvthn2dn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphvthn2dn.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmphvthn2dn.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphvthn2dn.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphvthn2dn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    if a % 2 == 1\n        a +=\
    \ 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n    if a > b\n     \
    \   return Int64[]\n    end\n    return collect(a:2:b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiwp6e9pg.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpiwp6e9pg.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiwp6e9pg.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpiwp6e9pg.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpiwp6e9pg.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiwp6e9pg.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpiwp6e9pg.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpiwp6e9pg.jl:32 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiwp6e9pg.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpiwp6e9pg.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpiwp6e9pg.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiwp6e9pg.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiwp6e9pg.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxr69ut7p.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxr69ut7p.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxr69ut7p.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxr69ut7p.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpxr69ut7p.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxr69ut7p.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxr69ut7p.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpxr69ut7p.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxr69ut7p.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxr69ut7p.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpxr69ut7p.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxr69ut7p.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxr69ut7p.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqxiczu7e.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqxiczu7e.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqxiczu7e.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqxiczu7e.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqxiczu7e.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqxiczu7e.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqxiczu7e.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqxiczu7e.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqxiczu7e.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqxiczu7e.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpqxiczu7e.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqxiczu7e.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqxiczu7e.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu3x5tj1n.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpu3x5tj1n.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu3x5tj1n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu3x5tj1n.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpu3x5tj1n.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu3x5tj1n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu3x5tj1n.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpu3x5tj1n.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu3x5tj1n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu3x5tj1n.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpu3x5tj1n.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu3x5tj1n.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu3x5tj1n.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc3chm6yu.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpc3chm6yu.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc3chm6yu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpc3chm6yu.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpc3chm6yu.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc3chm6yu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpc3chm6yu.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpc3chm6yu.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc3chm6yu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpc3chm6yu.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpc3chm6yu.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc3chm6yu.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc3chm6yu.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6f9xd5iz.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6f9xd5iz.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6f9xd5iz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6f9xd5iz.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6f9xd5iz.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6f9xd5iz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6f9xd5iz.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6f9xd5iz.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6f9xd5iz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6f9xd5iz.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp6f9xd5iz.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6f9xd5iz.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6f9xd5iz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps6q3dq9q.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmps6q3dq9q.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps6q3dq9q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmps6q3dq9q.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps6q3dq9q.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps6q3dq9q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmps6q3dq9q.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps6q3dq9q.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps6q3dq9q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmps6q3dq9q.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmps6q3dq9q.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps6q3dq9q.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps6q3dq9q.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5tzg8oxh.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5tzg8oxh.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5tzg8oxh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5tzg8oxh.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp5tzg8oxh.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5tzg8oxh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5tzg8oxh.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp5tzg8oxh.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5tzg8oxh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5tzg8oxh.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp5tzg8oxh.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5tzg8oxh.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5tzg8oxh.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppjyppube.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppjyppube.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppjyppube.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppjyppube.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppjyppube.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppjyppube.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppjyppube.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppjyppube.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppjyppube.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppjyppube.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmppjyppube.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppjyppube.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppjyppube.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppvhzy602.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppvhzy602.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppvhzy602.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppvhzy602.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppvhzy602.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppvhzy602.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppvhzy602.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppvhzy602.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppvhzy602.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppvhzy602.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmppvhzy602.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppvhzy602.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppvhzy602.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    return a:2:b\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgpre4a4m.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgpre4a4m.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgpre4a4m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgpre4a4m.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgpre4a4m.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgpre4a4m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgpre4a4m.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgpre4a4m.jl:26 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgpre4a4m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgpre4a4m.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpgpre4a4m.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgpre4a4m.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgpre4a4m.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6boz8nm2.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6boz8nm2.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6boz8nm2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6boz8nm2.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6boz8nm2.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6boz8nm2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6boz8nm2.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6boz8nm2.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6boz8nm2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6boz8nm2.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp6boz8nm2.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6boz8nm2.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6boz8nm2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3h41vi6e.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3h41vi6e.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3h41vi6e.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3h41vi6e.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp3h41vi6e.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3h41vi6e.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3h41vi6e.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp3h41vi6e.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3h41vi6e.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3h41vi6e.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp3h41vi6e.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3h41vi6e.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3h41vi6e.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz03yx6cg.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpz03yx6cg.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz03yx6cg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpz03yx6cg.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpz03yx6cg.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz03yx6cg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpz03yx6cg.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpz03yx6cg.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz03yx6cg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpz03yx6cg.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpz03yx6cg.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz03yx6cg.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz03yx6cg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0gvceicd.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0gvceicd.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0gvceicd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0gvceicd.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0gvceicd.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0gvceicd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0gvceicd.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0gvceicd.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0gvceicd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0gvceicd.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp0gvceicd.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0gvceicd.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0gvceicd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvzvs8lda.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvzvs8lda.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvzvs8lda.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvzvs8lda.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvzvs8lda.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvzvs8lda.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvzvs8lda.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvzvs8lda.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvzvs8lda.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvzvs8lda.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpvzvs8lda.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvzvs8lda.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvzvs8lda.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeicyzskf.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpeicyzskf.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeicyzskf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpeicyzskf.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpeicyzskf.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeicyzskf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpeicyzskf.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpeicyzskf.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeicyzskf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpeicyzskf.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpeicyzskf.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeicyzskf.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeicyzskf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj4emda0e.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpj4emda0e.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj4emda0e.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj4emda0e.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpj4emda0e.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj4emda0e.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj4emda0e.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpj4emda0e.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj4emda0e.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj4emda0e.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpj4emda0e.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj4emda0e.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj4emda0e.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0_0wopx9.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0_0wopx9.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0_0wopx9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0_0wopx9.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0_0wopx9.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0_0wopx9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0_0wopx9.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0_0wopx9.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0_0wopx9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0_0wopx9.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp0_0wopx9.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0_0wopx9.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0_0wopx9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ubh4314.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9ubh4314.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9ubh4314.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9ubh4314.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9ubh4314.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9ubh4314.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9ubh4314.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9ubh4314.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9ubh4314.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9ubh4314.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp9ubh4314.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9ubh4314.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ubh4314.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7rbob1gt.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7rbob1gt.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7rbob1gt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7rbob1gt.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7rbob1gt.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7rbob1gt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7rbob1gt.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7rbob1gt.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7rbob1gt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7rbob1gt.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp7rbob1gt.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7rbob1gt.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7rbob1gt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq48t5jy8.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpq48t5jy8.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq48t5jy8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq48t5jy8.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpq48t5jy8.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq48t5jy8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq48t5jy8.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpq48t5jy8.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq48t5jy8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq48t5jy8.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpq48t5jy8.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq48t5jy8.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq48t5jy8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9b6jcs0q.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9b6jcs0q.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9b6jcs0q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9b6jcs0q.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9b6jcs0q.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9b6jcs0q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9b6jcs0q.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9b6jcs0q.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9b6jcs0q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9b6jcs0q.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp9b6jcs0q.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9b6jcs0q.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9b6jcs0q.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp064qazyl.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp064qazyl.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp064qazyl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp064qazyl.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp064qazyl.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp064qazyl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp064qazyl.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp064qazyl.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp064qazyl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp064qazyl.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp064qazyl.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp064qazyl.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp064qazyl.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7np04j2o.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7np04j2o.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7np04j2o.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7np04j2o.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7np04j2o.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7np04j2o.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7np04j2o.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7np04j2o.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7np04j2o.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7np04j2o.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp7np04j2o.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7np04j2o.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7np04j2o.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwu2jwlfe.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwu2jwlfe.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwu2jwlfe.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwu2jwlfe.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwu2jwlfe.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwu2jwlfe.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwu2jwlfe.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwu2jwlfe.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwu2jwlfe.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwu2jwlfe.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpwu2jwlfe.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwu2jwlfe.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwu2jwlfe.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwffbh4xn.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwffbh4xn.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwffbh4xn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwffbh4xn.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwffbh4xn.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwffbh4xn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwffbh4xn.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwffbh4xn.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwffbh4xn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwffbh4xn.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpwffbh4xn.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwffbh4xn.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwffbh4xn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnt5nk7md.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpnt5nk7md.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnt5nk7md.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpnt5nk7md.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpnt5nk7md.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnt5nk7md.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpnt5nk7md.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpnt5nk7md.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnt5nk7md.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpnt5nk7md.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpnt5nk7md.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnt5nk7md.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnt5nk7md.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp57ioocqp.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp57ioocqp.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp57ioocqp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp57ioocqp.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp57ioocqp.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp57ioocqp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp57ioocqp.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp57ioocqp.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp57ioocqp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp57ioocqp.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp57ioocqp.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp57ioocqp.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp57ioocqp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b \n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgs7ejn6i.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgs7ejn6i.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgs7ejn6i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgs7ejn6i.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgs7ejn6i.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgs7ejn6i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgs7ejn6i.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgs7ejn6i.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgs7ejn6i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgs7ejn6i.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpgs7ejn6i.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgs7ejn6i.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgs7ejn6i.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsf7p21eg.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsf7p21eg.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsf7p21eg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsf7p21eg.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsf7p21eg.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsf7p21eg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsf7p21eg.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsf7p21eg.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsf7p21eg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsf7p21eg.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpsf7p21eg.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsf7p21eg.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsf7p21eg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvvi7y5tq.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvvi7y5tq.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvvi7y5tq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvvi7y5tq.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvvi7y5tq.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvvi7y5tq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvvi7y5tq.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvvi7y5tq.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvvi7y5tq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvvi7y5tq.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpvvi7y5tq.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvvi7y5tq.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvvi7y5tq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyh6bpr2q.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyh6bpr2q.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyh6bpr2q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyh6bpr2q.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyh6bpr2q.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyh6bpr2q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyh6bpr2q.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyh6bpr2q.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyh6bpr2q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyh6bpr2q.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpyh6bpr2q.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyh6bpr2q.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyh6bpr2q.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpegv7_ws8.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpegv7_ws8.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpegv7_ws8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpegv7_ws8.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpegv7_ws8.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpegv7_ws8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpegv7_ws8.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpegv7_ws8.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpegv7_ws8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpegv7_ws8.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpegv7_ws8.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpegv7_ws8.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpegv7_ws8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4vphgicu.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4vphgicu.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4vphgicu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4vphgicu.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4vphgicu.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4vphgicu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4vphgicu.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4vphgicu.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4vphgicu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4vphgicu.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp4vphgicu.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4vphgicu.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4vphgicu.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw7o6oqg6.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpw7o6oqg6.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw7o6oqg6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpw7o6oqg6.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpw7o6oqg6.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw7o6oqg6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpw7o6oqg6.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpw7o6oqg6.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw7o6oqg6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpw7o6oqg6.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpw7o6oqg6.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw7o6oqg6.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw7o6oqg6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph0_xl0w2.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmph0_xl0w2.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph0_xl0w2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph0_xl0w2.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmph0_xl0w2.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph0_xl0w2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph0_xl0w2.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmph0_xl0w2.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph0_xl0w2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph0_xl0w2.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmph0_xl0w2.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph0_xl0w2.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph0_xl0w2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe0w5n9q0.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpe0w5n9q0.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe0w5n9q0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpe0w5n9q0.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpe0w5n9q0.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe0w5n9q0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpe0w5n9q0.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpe0w5n9q0.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe0w5n9q0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpe0w5n9q0.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpe0w5n9q0.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe0w5n9q0.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe0w5n9q0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1w8mj1d1.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1w8mj1d1.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1w8mj1d1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1w8mj1d1.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1w8mj1d1.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1w8mj1d1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1w8mj1d1.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1w8mj1d1.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1w8mj1d1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1w8mj1d1.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp1w8mj1d1.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1w8mj1d1.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1w8mj1d1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu7kurm7u.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpu7kurm7u.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu7kurm7u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu7kurm7u.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpu7kurm7u.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu7kurm7u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu7kurm7u.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpu7kurm7u.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu7kurm7u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu7kurm7u.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpu7kurm7u.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu7kurm7u.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu7kurm7u.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_v74or8u.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_v74or8u.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_v74or8u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_v74or8u.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_v74or8u.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_v74or8u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_v74or8u.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_v74or8u.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_v74or8u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_v74or8u.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp_v74or8u.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_v74or8u.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_v74or8u.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr2ui3_5g.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpr2ui3_5g.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr2ui3_5g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpr2ui3_5g.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpr2ui3_5g.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr2ui3_5g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpr2ui3_5g.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpr2ui3_5g.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr2ui3_5g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpr2ui3_5g.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpr2ui3_5g.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr2ui3_5g.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr2ui3_5g.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3qi1t4ed.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3qi1t4ed.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3qi1t4ed.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3qi1t4ed.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp3qi1t4ed.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3qi1t4ed.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3qi1t4ed.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp3qi1t4ed.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3qi1t4ed.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3qi1t4ed.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp3qi1t4ed.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3qi1t4ed.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3qi1t4ed.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqwgemcns.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqwgemcns.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqwgemcns.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqwgemcns.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqwgemcns.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqwgemcns.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqwgemcns.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqwgemcns.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqwgemcns.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqwgemcns.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpqwgemcns.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqwgemcns.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqwgemcns.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf7n86_dq.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpf7n86_dq.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf7n86_dq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpf7n86_dq.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpf7n86_dq.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf7n86_dq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpf7n86_dq.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpf7n86_dq.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf7n86_dq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpf7n86_dq.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpf7n86_dq.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf7n86_dq.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf7n86_dq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaqxye62x.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpaqxye62x.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaqxye62x.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpaqxye62x.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpaqxye62x.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaqxye62x.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpaqxye62x.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpaqxye62x.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaqxye62x.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpaqxye62x.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpaqxye62x.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaqxye62x.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaqxye62x.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwbdgbssc.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwbdgbssc.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwbdgbssc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwbdgbssc.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwbdgbssc.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwbdgbssc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwbdgbssc.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwbdgbssc.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwbdgbssc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwbdgbssc.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpwbdgbssc.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwbdgbssc.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwbdgbssc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpezdiux85.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpezdiux85.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpezdiux85.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpezdiux85.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpezdiux85.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpezdiux85.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpezdiux85.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpezdiux85.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpezdiux85.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpezdiux85.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpezdiux85.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpezdiux85.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpezdiux85.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxpomoyh0.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxpomoyh0.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxpomoyh0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxpomoyh0.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpxpomoyh0.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxpomoyh0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxpomoyh0.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpxpomoyh0.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxpomoyh0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxpomoyh0.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpxpomoyh0.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxpomoyh0.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxpomoyh0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0e2i91vf.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0e2i91vf.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0e2i91vf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0e2i91vf.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0e2i91vf.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0e2i91vf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0e2i91vf.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0e2i91vf.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0e2i91vf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0e2i91vf.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp0e2i91vf.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0e2i91vf.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0e2i91vf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    return collect(a:2:b)\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp66nj6iym.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp66nj6iym.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp66nj6iym.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp66nj6iym.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp66nj6iym.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp66nj6iym.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp66nj6iym.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp66nj6iym.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp66nj6iym.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp66nj6iym.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp66nj6iym.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp66nj6iym.jl:26\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp66nj6iym.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i = a:2:b]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8yqeh_gn.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8yqeh_gn.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8yqeh_gn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp8yqeh_gn.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8yqeh_gn.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8yqeh_gn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp8yqeh_gn.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8yqeh_gn.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8yqeh_gn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp8yqeh_gn.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp8yqeh_gn.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8yqeh_gn.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8yqeh_gn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjvjeqz8r.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjvjeqz8r.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjvjeqz8r.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjvjeqz8r.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjvjeqz8r.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjvjeqz8r.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjvjeqz8r.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjvjeqz8r.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjvjeqz8r.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjvjeqz8r.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpjvjeqz8r.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjvjeqz8r.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjvjeqz8r.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpezysi1uw.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpezysi1uw.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpezysi1uw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpezysi1uw.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpezysi1uw.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpezysi1uw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpezysi1uw.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpezysi1uw.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpezysi1uw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpezysi1uw.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpezysi1uw.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpezysi1uw.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpezysi1uw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp01rs3_ly.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp01rs3_ly.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01rs3_ly.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp01rs3_ly.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp01rs3_ly.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01rs3_ly.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp01rs3_ly.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp01rs3_ly.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01rs3_ly.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp01rs3_ly.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp01rs3_ly.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01rs3_ly.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp01rs3_ly.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyjbxio8j.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyjbxio8j.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjbxio8j.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyjbxio8j.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyjbxio8j.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjbxio8j.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyjbxio8j.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyjbxio8j.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjbxio8j.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyjbxio8j.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpyjbxio8j.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjbxio8j.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyjbxio8j.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxk7xav0a.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxk7xav0a.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxk7xav0a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxk7xav0a.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpxk7xav0a.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxk7xav0a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxk7xav0a.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpxk7xav0a.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxk7xav0a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxk7xav0a.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpxk7xav0a.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxk7xav0a.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxk7xav0a.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps9jxc84u.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmps9jxc84u.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps9jxc84u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmps9jxc84u.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps9jxc84u.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps9jxc84u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmps9jxc84u.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps9jxc84u.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps9jxc84u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmps9jxc84u.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmps9jxc84u.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps9jxc84u.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps9jxc84u.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsbe10_d2.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsbe10_d2.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsbe10_d2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsbe10_d2.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsbe10_d2.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsbe10_d2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsbe10_d2.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsbe10_d2.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsbe10_d2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsbe10_d2.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpsbe10_d2.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsbe10_d2.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsbe10_d2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy9e4z45c.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy9e4z45c.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9e4z45c.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy9e4z45c.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpy9e4z45c.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9e4z45c.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy9e4z45c.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpy9e4z45c.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9e4z45c.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy9e4z45c.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpy9e4z45c.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9e4z45c.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy9e4z45c.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp27bhud6s.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp27bhud6s.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27bhud6s.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp27bhud6s.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp27bhud6s.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27bhud6s.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp27bhud6s.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp27bhud6s.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27bhud6s.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp27bhud6s.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp27bhud6s.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27bhud6s.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp27bhud6s.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxbsx1uim.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxbsx1uim.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxbsx1uim.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxbsx1uim.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpxbsx1uim.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxbsx1uim.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxbsx1uim.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpxbsx1uim.jl:32 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxbsx1uim.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxbsx1uim.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpxbsx1uim.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxbsx1uim.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxbsx1uim.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2twgnttf.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2twgnttf.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2twgnttf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2twgnttf.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2twgnttf.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2twgnttf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2twgnttf.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2twgnttf.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2twgnttf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2twgnttf.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp2twgnttf.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2twgnttf.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2twgnttf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3qpq6hzo.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3qpq6hzo.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3qpq6hzo.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3qpq6hzo.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp3qpq6hzo.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3qpq6hzo.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3qpq6hzo.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp3qpq6hzo.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3qpq6hzo.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3qpq6hzo.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp3qpq6hzo.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3qpq6hzo.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3qpq6hzo.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph7fe7i0v.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmph7fe7i0v.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph7fe7i0v.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7fe7i0v.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmph7fe7i0v.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph7fe7i0v.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7fe7i0v.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmph7fe7i0v.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph7fe7i0v.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph7fe7i0v.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmph7fe7i0v.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph7fe7i0v.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph7fe7i0v.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp92bj8ko2.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp92bj8ko2.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp92bj8ko2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp92bj8ko2.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp92bj8ko2.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp92bj8ko2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp92bj8ko2.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp92bj8ko2.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp92bj8ko2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp92bj8ko2.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp92bj8ko2.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp92bj8ko2.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp92bj8ko2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj7p04j6p.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpj7p04j6p.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7p04j6p.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj7p04j6p.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpj7p04j6p.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7p04j6p.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj7p04j6p.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpj7p04j6p.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7p04j6p.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj7p04j6p.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpj7p04j6p.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7p04j6p.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj7p04j6p.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2_62p7f1.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2_62p7f1.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_62p7f1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2_62p7f1.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2_62p7f1.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_62p7f1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2_62p7f1.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2_62p7f1.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_62p7f1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2_62p7f1.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp2_62p7f1.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_62p7f1.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_62p7f1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    if a % 2 == 1\n        a +=\
    \ 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n    if a > b\n     \
    \   return []\n    end\n    return collect(a:2:b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphav1lktb.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphav1lktb.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphav1lktb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmphav1lktb.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphav1lktb.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphav1lktb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmphav1lktb.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphav1lktb.jl:32 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphav1lktb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmphav1lktb.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmphav1lktb.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphav1lktb.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphav1lktb.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvf5qkihj.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvf5qkihj.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvf5qkihj.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvf5qkihj.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvf5qkihj.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvf5qkihj.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvf5qkihj.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvf5qkihj.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvf5qkihj.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvf5qkihj.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpvf5qkihj.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvf5qkihj.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvf5qkihj.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm0rzmyv_.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpm0rzmyv_.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm0rzmyv_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm0rzmyv_.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpm0rzmyv_.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm0rzmyv_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm0rzmyv_.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpm0rzmyv_.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm0rzmyv_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm0rzmyv_.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpm0rzmyv_.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm0rzmyv_.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm0rzmyv_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcfrpw0ky.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcfrpw0ky.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcfrpw0ky.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcfrpw0ky.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpcfrpw0ky.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcfrpw0ky.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcfrpw0ky.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpcfrpw0ky.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcfrpw0ky.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcfrpw0ky.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpcfrpw0ky.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcfrpw0ky.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcfrpw0ky.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpepmhgh2x.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpepmhgh2x.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpepmhgh2x.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpepmhgh2x.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpepmhgh2x.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpepmhgh2x.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpepmhgh2x.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpepmhgh2x.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpepmhgh2x.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpepmhgh2x.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpepmhgh2x.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpepmhgh2x.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpepmhgh2x.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp840p_7zt.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp840p_7zt.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp840p_7zt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp840p_7zt.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp840p_7zt.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp840p_7zt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp840p_7zt.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp840p_7zt.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp840p_7zt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp840p_7zt.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp840p_7zt.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp840p_7zt.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp840p_7zt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9iqesb3a.jl:18\\n  Test threw\
    \ exception\\n  Expression: candidate(2, 10) == [2, 4, 6, 8]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] generate_integers(a::Int64, b::Int64)\\n   \
    \  @ Main /tmp/tmp9iqesb3a.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp9iqesb3a.jl:18\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9iqesb3a.jl:17\\ntest set:\
    \ Error During Test at /tmp/tmp9iqesb3a.jl:19\\n  Test threw exception\\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] generate_integers(a::Int64, b::Int64)\\n   \
    \  @ Main /tmp/tmp9iqesb3a.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp9iqesb3a.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9iqesb3a.jl:17\\ntest set:\
    \ Error During Test at /tmp/tmp9iqesb3a.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(132, 2)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsuwdz2mr.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsuwdz2mr.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsuwdz2mr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsuwdz2mr.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsuwdz2mr.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsuwdz2mr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsuwdz2mr.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsuwdz2mr.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsuwdz2mr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsuwdz2mr.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpsuwdz2mr.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsuwdz2mr.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsuwdz2mr.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp64fjnns6.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp64fjnns6.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp64fjnns6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp64fjnns6.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp64fjnns6.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp64fjnns6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp64fjnns6.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp64fjnns6.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp64fjnns6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp64fjnns6.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp64fjnns6.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp64fjnns6.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp64fjnns6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_0rt_khj.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_0rt_khj.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0rt_khj.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_0rt_khj.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_0rt_khj.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0rt_khj.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_0rt_khj.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_0rt_khj.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0rt_khj.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_0rt_khj.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp_0rt_khj.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0rt_khj.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_0rt_khj.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgxt_r6jv.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgxt_r6jv.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgxt_r6jv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgxt_r6jv.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgxt_r6jv.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgxt_r6jv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgxt_r6jv.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgxt_r6jv.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgxt_r6jv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgxt_r6jv.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpgxt_r6jv.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgxt_r6jv.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgxt_r6jv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1l0m3_ng.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1l0m3_ng.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1l0m3_ng.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1l0m3_ng.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1l0m3_ng.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1l0m3_ng.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1l0m3_ng.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1l0m3_ng.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1l0m3_ng.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1l0m3_ng.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp1l0m3_ng.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1l0m3_ng.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1l0m3_ng.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6w8cec0h.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6w8cec0h.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6w8cec0h.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6w8cec0h.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6w8cec0h.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6w8cec0h.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6w8cec0h.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6w8cec0h.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6w8cec0h.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6w8cec0h.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp6w8cec0h.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6w8cec0h.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6w8cec0h.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp79k7bx77.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp79k7bx77.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp79k7bx77.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp79k7bx77.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp79k7bx77.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp79k7bx77.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp79k7bx77.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp79k7bx77.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp79k7bx77.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp79k7bx77.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp79k7bx77.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp79k7bx77.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp79k7bx77.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvy70hd1q.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvy70hd1q.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvy70hd1q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvy70hd1q.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvy70hd1q.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvy70hd1q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvy70hd1q.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvy70hd1q.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvy70hd1q.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvy70hd1q.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpvy70hd1q.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvy70hd1q.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvy70hd1q.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a == b\n        if a % 2 == 0\n            return [a]\n        else\n\
    \            return []\n        end\n    end\n    if a > b\n        a, b = b,\
    \ a\n    end\n    if a % 2 == 0\n        return [i for i = a:2:b]\n    else\n\
    \        return [i for i = a+1:2:b]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw3xp_eoo.jl:32\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpw3xp_eoo.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw3xp_eoo.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw3xp_eoo.jl:33\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpw3xp_eoo.jl:33 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw3xp_eoo.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw3xp_eoo.jl:34\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpw3xp_eoo.jl:34 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw3xp_eoo.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw3xp_eoo.jl:35\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpw3xp_eoo.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw3xp_eoo.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw3xp_eoo.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmkx8v3k3.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpmkx8v3k3.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmkx8v3k3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmkx8v3k3.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmkx8v3k3.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmkx8v3k3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmkx8v3k3.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmkx8v3k3.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmkx8v3k3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmkx8v3k3.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpmkx8v3k3.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmkx8v3k3.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmkx8v3k3.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8fhsdqwy.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8fhsdqwy.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8fhsdqwy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp8fhsdqwy.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8fhsdqwy.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8fhsdqwy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp8fhsdqwy.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8fhsdqwy.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8fhsdqwy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp8fhsdqwy.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp8fhsdqwy.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8fhsdqwy.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8fhsdqwy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpclvn624_.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpclvn624_.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpclvn624_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpclvn624_.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpclvn624_.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpclvn624_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpclvn624_.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpclvn624_.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpclvn624_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpclvn624_.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpclvn624_.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpclvn624_.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpclvn624_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdced5bzu.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdced5bzu.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdced5bzu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdced5bzu.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpdced5bzu.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdced5bzu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdced5bzu.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpdced5bzu.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdced5bzu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdced5bzu.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpdced5bzu.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdced5bzu.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdced5bzu.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmputpyikux.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmputpyikux.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputpyikux.jl:20\ntest set: Test\
    \ Failed at /tmp/tmputpyikux.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmputpyikux.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputpyikux.jl:20\ntest set: Test\
    \ Failed at /tmp/tmputpyikux.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmputpyikux.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputpyikux.jl:20\ntest set: Test\
    \ Failed at /tmp/tmputpyikux.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmputpyikux.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputpyikux.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmputpyikux.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp22vocu5j.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp22vocu5j.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp22vocu5j.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp22vocu5j.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp22vocu5j.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp22vocu5j.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp22vocu5j.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp22vocu5j.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp22vocu5j.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp22vocu5j.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp22vocu5j.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp22vocu5j.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp22vocu5j.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjb55xd68.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjb55xd68.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjb55xd68.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjb55xd68.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjb55xd68.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjb55xd68.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjb55xd68.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjb55xd68.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjb55xd68.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjb55xd68.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpjb55xd68.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjb55xd68.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjb55xd68.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcaqxn4ia.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcaqxn4ia.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcaqxn4ia.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcaqxn4ia.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpcaqxn4ia.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcaqxn4ia.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcaqxn4ia.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpcaqxn4ia.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcaqxn4ia.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcaqxn4ia.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpcaqxn4ia.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcaqxn4ia.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcaqxn4ia.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr3p9wjcs.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpr3p9wjcs.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr3p9wjcs.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpr3p9wjcs.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpr3p9wjcs.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr3p9wjcs.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpr3p9wjcs.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpr3p9wjcs.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr3p9wjcs.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpr3p9wjcs.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpr3p9wjcs.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr3p9wjcs.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr3p9wjcs.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp54abshtd.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp54abshtd.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp54abshtd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp54abshtd.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp54abshtd.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp54abshtd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp54abshtd.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp54abshtd.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp54abshtd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp54abshtd.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp54abshtd.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp54abshtd.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp54abshtd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfhsw_zdi.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfhsw_zdi.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfhsw_zdi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfhsw_zdi.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpfhsw_zdi.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfhsw_zdi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfhsw_zdi.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpfhsw_zdi.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfhsw_zdi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfhsw_zdi.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpfhsw_zdi.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfhsw_zdi.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfhsw_zdi.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp46cqy902.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp46cqy902.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp46cqy902.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp46cqy902.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp46cqy902.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp46cqy902.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp46cqy902.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp46cqy902.jl:32 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp46cqy902.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp46cqy902.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp46cqy902.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp46cqy902.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp46cqy902.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnygu2qlx.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpnygu2qlx.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnygu2qlx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnygu2qlx.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpnygu2qlx.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnygu2qlx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnygu2qlx.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpnygu2qlx.jl:32 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnygu2qlx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnygu2qlx.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpnygu2qlx.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnygu2qlx.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnygu2qlx.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp0f2qrir.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpp0f2qrir.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp0f2qrir.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpp0f2qrir.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpp0f2qrir.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp0f2qrir.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpp0f2qrir.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpp0f2qrir.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp0f2qrir.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpp0f2qrir.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpp0f2qrir.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp0f2qrir.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp0f2qrir.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpivq_z5_a.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpivq_z5_a.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpivq_z5_a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpivq_z5_a.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpivq_z5_a.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpivq_z5_a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpivq_z5_a.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpivq_z5_a.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpivq_z5_a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpivq_z5_a.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpivq_z5_a.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpivq_z5_a.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpivq_z5_a.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbuhyd_x7.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbuhyd_x7.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbuhyd_x7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbuhyd_x7.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbuhyd_x7.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbuhyd_x7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbuhyd_x7.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbuhyd_x7.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbuhyd_x7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbuhyd_x7.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpbuhyd_x7.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbuhyd_x7.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbuhyd_x7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7kczuxxa.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7kczuxxa.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7kczuxxa.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7kczuxxa.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7kczuxxa.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7kczuxxa.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7kczuxxa.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7kczuxxa.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7kczuxxa.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7kczuxxa.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp7kczuxxa.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7kczuxxa.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7kczuxxa.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a <= b\n        return [i for i in a:b if i % 2 == 0]\n    else\n \
    \       return [i for i in b:a if i % 2 == 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzs2lxsae.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpzs2lxsae.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzs2lxsae.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzs2lxsae.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzs2lxsae.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzs2lxsae.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzs2lxsae.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzs2lxsae.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzs2lxsae.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzs2lxsae.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpzs2lxsae.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzs2lxsae.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzs2lxsae.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5a3jotyu.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5a3jotyu.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5a3jotyu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5a3jotyu.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp5a3jotyu.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5a3jotyu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5a3jotyu.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp5a3jotyu.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5a3jotyu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5a3jotyu.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp5a3jotyu.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5a3jotyu.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5a3jotyu.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgscdyswr.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgscdyswr.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgscdyswr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgscdyswr.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgscdyswr.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgscdyswr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgscdyswr.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgscdyswr.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgscdyswr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgscdyswr.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpgscdyswr.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgscdyswr.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgscdyswr.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2m1ky81z.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2m1ky81z.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2m1ky81z.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2m1ky81z.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2m1ky81z.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2m1ky81z.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2m1ky81z.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2m1ky81z.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2m1ky81z.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2m1ky81z.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp2m1ky81z.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2m1ky81z.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2m1ky81z.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpatmg_o0g.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpatmg_o0g.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpatmg_o0g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpatmg_o0g.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpatmg_o0g.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpatmg_o0g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpatmg_o0g.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpatmg_o0g.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpatmg_o0g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpatmg_o0g.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpatmg_o0g.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpatmg_o0g.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpatmg_o0g.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkp5cpa9v.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkp5cpa9v.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkp5cpa9v.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkp5cpa9v.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkp5cpa9v.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkp5cpa9v.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkp5cpa9v.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkp5cpa9v.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkp5cpa9v.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkp5cpa9v.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpkp5cpa9v.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkp5cpa9v.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkp5cpa9v.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdixqhynq.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdixqhynq.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdixqhynq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdixqhynq.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpdixqhynq.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdixqhynq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdixqhynq.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpdixqhynq.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdixqhynq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdixqhynq.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpdixqhynq.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdixqhynq.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdixqhynq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwd7clk9n.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwd7clk9n.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwd7clk9n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwd7clk9n.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwd7clk9n.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwd7clk9n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwd7clk9n.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwd7clk9n.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwd7clk9n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwd7clk9n.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpwd7clk9n.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwd7clk9n.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwd7clk9n.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppwewsjsg.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppwewsjsg.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppwewsjsg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppwewsjsg.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppwewsjsg.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppwewsjsg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppwewsjsg.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppwewsjsg.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppwewsjsg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppwewsjsg.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmppwewsjsg.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppwewsjsg.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppwewsjsg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpej_hxel9.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpej_hxel9.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpej_hxel9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpej_hxel9.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpej_hxel9.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpej_hxel9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpej_hxel9.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpej_hxel9.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpej_hxel9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpej_hxel9.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpej_hxel9.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpej_hxel9.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpej_hxel9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptgvcrkr_.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptgvcrkr_.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptgvcrkr_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptgvcrkr_.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmptgvcrkr_.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptgvcrkr_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptgvcrkr_.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmptgvcrkr_.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptgvcrkr_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptgvcrkr_.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmptgvcrkr_.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptgvcrkr_.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptgvcrkr_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9iv_wse1.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9iv_wse1.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9iv_wse1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9iv_wse1.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9iv_wse1.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9iv_wse1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9iv_wse1.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9iv_wse1.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9iv_wse1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9iv_wse1.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp9iv_wse1.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9iv_wse1.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9iv_wse1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm9gljtwr.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpm9gljtwr.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm9gljtwr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm9gljtwr.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpm9gljtwr.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm9gljtwr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm9gljtwr.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpm9gljtwr.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm9gljtwr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpm9gljtwr.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpm9gljtwr.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm9gljtwr.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm9gljtwr.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcnkspv1b.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcnkspv1b.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcnkspv1b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcnkspv1b.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpcnkspv1b.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcnkspv1b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcnkspv1b.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpcnkspv1b.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcnkspv1b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcnkspv1b.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpcnkspv1b.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcnkspv1b.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcnkspv1b.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2c6xmvg9.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2c6xmvg9.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2c6xmvg9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2c6xmvg9.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2c6xmvg9.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2c6xmvg9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2c6xmvg9.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2c6xmvg9.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2c6xmvg9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2c6xmvg9.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp2c6xmvg9.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2c6xmvg9.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2c6xmvg9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq12xucxc.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpq12xucxc.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq12xucxc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq12xucxc.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpq12xucxc.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq12xucxc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq12xucxc.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpq12xucxc.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq12xucxc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq12xucxc.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpq12xucxc.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq12xucxc.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq12xucxc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbzhtc8c_.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbzhtc8c_.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbzhtc8c_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbzhtc8c_.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbzhtc8c_.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbzhtc8c_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbzhtc8c_.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbzhtc8c_.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbzhtc8c_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbzhtc8c_.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpbzhtc8c_.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbzhtc8c_.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbzhtc8c_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprumpq_sj.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprumpq_sj.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprumpq_sj.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprumpq_sj.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmprumpq_sj.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprumpq_sj.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprumpq_sj.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmprumpq_sj.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprumpq_sj.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprumpq_sj.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmprumpq_sj.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprumpq_sj.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprumpq_sj.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6r46u0dn.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6r46u0dn.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6r46u0dn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6r46u0dn.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6r46u0dn.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6r46u0dn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6r46u0dn.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6r46u0dn.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6r46u0dn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6r46u0dn.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp6r46u0dn.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6r46u0dn.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6r46u0dn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjt4euagz.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjt4euagz.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjt4euagz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjt4euagz.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjt4euagz.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjt4euagz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjt4euagz.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjt4euagz.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjt4euagz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjt4euagz.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpjt4euagz.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjt4euagz.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjt4euagz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbiheuxzt.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbiheuxzt.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbiheuxzt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbiheuxzt.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbiheuxzt.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbiheuxzt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbiheuxzt.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbiheuxzt.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbiheuxzt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbiheuxzt.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpbiheuxzt.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbiheuxzt.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbiheuxzt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbkkrm4xy.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbkkrm4xy.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbkkrm4xy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbkkrm4xy.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbkkrm4xy.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbkkrm4xy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbkkrm4xy.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbkkrm4xy.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbkkrm4xy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbkkrm4xy.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpbkkrm4xy.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbkkrm4xy.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbkkrm4xy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwzhf0a5h.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwzhf0a5h.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwzhf0a5h.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwzhf0a5h.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwzhf0a5h.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwzhf0a5h.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwzhf0a5h.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwzhf0a5h.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwzhf0a5h.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwzhf0a5h.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpwzhf0a5h.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwzhf0a5h.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwzhf0a5h.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0xg84gf8.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0xg84gf8.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0xg84gf8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0xg84gf8.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0xg84gf8.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0xg84gf8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0xg84gf8.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0xg84gf8.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0xg84gf8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0xg84gf8.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp0xg84gf8.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0xg84gf8.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0xg84gf8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6mu5bxse.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6mu5bxse.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6mu5bxse.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6mu5bxse.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6mu5bxse.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6mu5bxse.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6mu5bxse.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6mu5bxse.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6mu5bxse.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6mu5bxse.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp6mu5bxse.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6mu5bxse.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6mu5bxse.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i = a:2:b]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy1smnldt.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy1smnldt.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy1smnldt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy1smnldt.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpy1smnldt.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy1smnldt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy1smnldt.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpy1smnldt.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy1smnldt.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy1smnldt.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpy1smnldt.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy1smnldt.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy1smnldt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyb6hntiy.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyb6hntiy.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyb6hntiy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyb6hntiy.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyb6hntiy.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyb6hntiy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyb6hntiy.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyb6hntiy.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyb6hntiy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyb6hntiy.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpyb6hntiy.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyb6hntiy.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyb6hntiy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    return collect(a:2:b)\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmput16c9nw.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmput16c9nw.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmput16c9nw.jl:26\ntest set: Test\
    \ Failed at /tmp/tmput16c9nw.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmput16c9nw.jl:28 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmput16c9nw.jl:26\ntest set: Test\
    \ Failed at /tmp/tmput16c9nw.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmput16c9nw.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmput16c9nw.jl:26\ntest set: Test\
    \ Failed at /tmp/tmput16c9nw.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmput16c9nw.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmput16c9nw.jl:26\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmput16c9nw.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzlj3a4rc.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpzlj3a4rc.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzlj3a4rc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpzlj3a4rc.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzlj3a4rc.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzlj3a4rc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpzlj3a4rc.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzlj3a4rc.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzlj3a4rc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpzlj3a4rc.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpzlj3a4rc.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzlj3a4rc.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzlj3a4rc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy2zwfgp_.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy2zwfgp_.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2zwfgp_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy2zwfgp_.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpy2zwfgp_.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2zwfgp_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy2zwfgp_.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpy2zwfgp_.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2zwfgp_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy2zwfgp_.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpy2zwfgp_.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2zwfgp_.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy2zwfgp_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbj44vdhq.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbj44vdhq.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbj44vdhq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbj44vdhq.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbj44vdhq.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbj44vdhq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbj44vdhq.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbj44vdhq.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbj44vdhq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbj44vdhq.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpbj44vdhq.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbj44vdhq.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbj44vdhq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppd8n2k05.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppd8n2k05.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppd8n2k05.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppd8n2k05.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppd8n2k05.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppd8n2k05.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppd8n2k05.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppd8n2k05.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppd8n2k05.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppd8n2k05.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmppd8n2k05.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppd8n2k05.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppd8n2k05.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvp39xxge.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvp39xxge.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvp39xxge.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvp39xxge.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvp39xxge.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvp39xxge.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvp39xxge.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvp39xxge.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvp39xxge.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvp39xxge.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpvp39xxge.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvp39xxge.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvp39xxge.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbbibq_r3.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbbibq_r3.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbbibq_r3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbbibq_r3.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbbibq_r3.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbbibq_r3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbbibq_r3.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbbibq_r3.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbbibq_r3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbbibq_r3.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpbbibq_r3.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbbibq_r3.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbbibq_r3.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b \n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1e__ombs.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1e__ombs.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1e__ombs.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1e__ombs.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1e__ombs.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1e__ombs.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1e__ombs.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1e__ombs.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1e__ombs.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1e__ombs.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp1e__ombs.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1e__ombs.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1e__ombs.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfhtdrcyd.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfhtdrcyd.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfhtdrcyd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfhtdrcyd.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpfhtdrcyd.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfhtdrcyd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfhtdrcyd.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpfhtdrcyd.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfhtdrcyd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfhtdrcyd.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpfhtdrcyd.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfhtdrcyd.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfhtdrcyd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjswk3cve.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjswk3cve.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjswk3cve.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjswk3cve.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjswk3cve.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjswk3cve.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjswk3cve.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjswk3cve.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjswk3cve.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjswk3cve.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpjswk3cve.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjswk3cve.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjswk3cve.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptxwwbetn.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptxwwbetn.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptxwwbetn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptxwwbetn.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmptxwwbetn.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptxwwbetn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptxwwbetn.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmptxwwbetn.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptxwwbetn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptxwwbetn.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmptxwwbetn.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptxwwbetn.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptxwwbetn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4r6niywl.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4r6niywl.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4r6niywl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4r6niywl.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4r6niywl.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4r6niywl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4r6niywl.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4r6niywl.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4r6niywl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4r6niywl.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp4r6niywl.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4r6niywl.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4r6niywl.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1nfedrg7.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1nfedrg7.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1nfedrg7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1nfedrg7.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1nfedrg7.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1nfedrg7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1nfedrg7.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1nfedrg7.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1nfedrg7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1nfedrg7.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp1nfedrg7.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1nfedrg7.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1nfedrg7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1hncshry.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1hncshry.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1hncshry.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1hncshry.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1hncshry.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1hncshry.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1hncshry.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1hncshry.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1hncshry.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1hncshry.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp1hncshry.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1hncshry.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1hncshry.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx1foaqr2.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpx1foaqr2.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1foaqr2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpx1foaqr2.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpx1foaqr2.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1foaqr2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpx1foaqr2.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpx1foaqr2.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1foaqr2.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpx1foaqr2.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpx1foaqr2.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1foaqr2.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx1foaqr2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp52ufoz07.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp52ufoz07.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp52ufoz07.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp52ufoz07.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp52ufoz07.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp52ufoz07.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp52ufoz07.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp52ufoz07.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp52ufoz07.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp52ufoz07.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp52ufoz07.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp52ufoz07.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp52ufoz07.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdvkb56yf.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdvkb56yf.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdvkb56yf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdvkb56yf.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpdvkb56yf.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdvkb56yf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdvkb56yf.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpdvkb56yf.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdvkb56yf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdvkb56yf.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpdvkb56yf.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdvkb56yf.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdvkb56yf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbhgdundb.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbhgdundb.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbhgdundb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbhgdundb.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbhgdundb.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbhgdundb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbhgdundb.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbhgdundb.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbhgdundb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbhgdundb.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpbhgdundb.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbhgdundb.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbhgdundb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprhxgj5lx.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprhxgj5lx.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhxgj5lx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprhxgj5lx.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmprhxgj5lx.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhxgj5lx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprhxgj5lx.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmprhxgj5lx.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhxgj5lx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprhxgj5lx.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmprhxgj5lx.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhxgj5lx.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprhxgj5lx.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyl11pr86.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyl11pr86.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyl11pr86.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyl11pr86.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyl11pr86.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyl11pr86.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyl11pr86.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyl11pr86.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyl11pr86.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyl11pr86.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpyl11pr86.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyl11pr86.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyl11pr86.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe6p9nv2u.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpe6p9nv2u.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe6p9nv2u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpe6p9nv2u.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpe6p9nv2u.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe6p9nv2u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpe6p9nv2u.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpe6p9nv2u.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe6p9nv2u.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpe6p9nv2u.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpe6p9nv2u.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe6p9nv2u.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe6p9nv2u.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9s2y99uz.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9s2y99uz.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9s2y99uz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9s2y99uz.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9s2y99uz.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9s2y99uz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9s2y99uz.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9s2y99uz.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9s2y99uz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9s2y99uz.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp9s2y99uz.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9s2y99uz.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9s2y99uz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyi7timo9.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyi7timo9.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyi7timo9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyi7timo9.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyi7timo9.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyi7timo9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyi7timo9.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyi7timo9.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyi7timo9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyi7timo9.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpyi7timo9.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyi7timo9.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyi7timo9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9osbm4k1.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9osbm4k1.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9osbm4k1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9osbm4k1.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9osbm4k1.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9osbm4k1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9osbm4k1.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9osbm4k1.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9osbm4k1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9osbm4k1.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp9osbm4k1.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9osbm4k1.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9osbm4k1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    if a % 2 == 1\n        a +=\
    \ 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n    if a > b\n     \
    \   return Int64[]\n    end\n    return collect(a:2:b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1zczx_pr.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1zczx_pr.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1zczx_pr.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1zczx_pr.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1zczx_pr.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1zczx_pr.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1zczx_pr.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1zczx_pr.jl:32 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1zczx_pr.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1zczx_pr.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp1zczx_pr.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1zczx_pr.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1zczx_pr.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaq0udnpx.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpaq0udnpx.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaq0udnpx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpaq0udnpx.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpaq0udnpx.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaq0udnpx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpaq0udnpx.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpaq0udnpx.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaq0udnpx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpaq0udnpx.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpaq0udnpx.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaq0udnpx.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaq0udnpx.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkm8xypbq.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkm8xypbq.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkm8xypbq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkm8xypbq.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkm8xypbq.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkm8xypbq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkm8xypbq.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkm8xypbq.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkm8xypbq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkm8xypbq.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpkm8xypbq.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkm8xypbq.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkm8xypbq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaxj17hcb.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpaxj17hcb.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaxj17hcb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpaxj17hcb.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpaxj17hcb.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaxj17hcb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpaxj17hcb.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpaxj17hcb.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaxj17hcb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpaxj17hcb.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpaxj17hcb.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaxj17hcb.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaxj17hcb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp94o4ha92.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp94o4ha92.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp94o4ha92.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp94o4ha92.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp94o4ha92.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp94o4ha92.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp94o4ha92.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp94o4ha92.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp94o4ha92.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp94o4ha92.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp94o4ha92.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp94o4ha92.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp94o4ha92.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwpet42x9.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwpet42x9.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwpet42x9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwpet42x9.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwpet42x9.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwpet42x9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwpet42x9.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwpet42x9.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwpet42x9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwpet42x9.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpwpet42x9.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwpet42x9.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwpet42x9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2ql8_em_.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2ql8_em_.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ql8_em_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2ql8_em_.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2ql8_em_.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ql8_em_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2ql8_em_.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2ql8_em_.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ql8_em_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2ql8_em_.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp2ql8_em_.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ql8_em_.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2ql8_em_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbybwujll.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbybwujll.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbybwujll.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbybwujll.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbybwujll.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbybwujll.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbybwujll.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbybwujll.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbybwujll.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbybwujll.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpbybwujll.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbybwujll.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbybwujll.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi5xvdn8v.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpi5xvdn8v.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi5xvdn8v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpi5xvdn8v.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpi5xvdn8v.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi5xvdn8v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpi5xvdn8v.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpi5xvdn8v.jl:32 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi5xvdn8v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpi5xvdn8v.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpi5xvdn8v.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi5xvdn8v.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi5xvdn8v.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp80mknebj.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp80mknebj.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp80mknebj.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp80mknebj.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp80mknebj.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp80mknebj.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp80mknebj.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp80mknebj.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp80mknebj.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp80mknebj.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp80mknebj.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp80mknebj.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp80mknebj.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeyl8dnqr.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpeyl8dnqr.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeyl8dnqr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpeyl8dnqr.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpeyl8dnqr.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeyl8dnqr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpeyl8dnqr.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpeyl8dnqr.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeyl8dnqr.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpeyl8dnqr.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpeyl8dnqr.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeyl8dnqr.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeyl8dnqr.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsbjv372i.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsbjv372i.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsbjv372i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsbjv372i.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsbjv372i.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsbjv372i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsbjv372i.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsbjv372i.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsbjv372i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsbjv372i.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpsbjv372i.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsbjv372i.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsbjv372i.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuxiaaxbh.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpuxiaaxbh.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuxiaaxbh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpuxiaaxbh.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpuxiaaxbh.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuxiaaxbh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpuxiaaxbh.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpuxiaaxbh.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuxiaaxbh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpuxiaaxbh.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpuxiaaxbh.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuxiaaxbh.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuxiaaxbh.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphv8ajmcn.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphv8ajmcn.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv8ajmcn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphv8ajmcn.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphv8ajmcn.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv8ajmcn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphv8ajmcn.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphv8ajmcn.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv8ajmcn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphv8ajmcn.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmphv8ajmcn.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv8ajmcn.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphv8ajmcn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk35qvybc.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpk35qvybc.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk35qvybc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpk35qvybc.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpk35qvybc.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk35qvybc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpk35qvybc.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpk35qvybc.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk35qvybc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpk35qvybc.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpk35qvybc.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk35qvybc.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk35qvybc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd9qf8s3r.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpd9qf8s3r.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9qf8s3r.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpd9qf8s3r.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpd9qf8s3r.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9qf8s3r.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpd9qf8s3r.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpd9qf8s3r.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9qf8s3r.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpd9qf8s3r.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpd9qf8s3r.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9qf8s3r.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd9qf8s3r.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp7uc851v.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpp7uc851v.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7uc851v.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpp7uc851v.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpp7uc851v.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7uc851v.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpp7uc851v.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpp7uc851v.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7uc851v.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpp7uc851v.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpp7uc851v.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7uc851v.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7uc851v.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph8rlpkf9.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmph8rlpkf9.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph8rlpkf9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph8rlpkf9.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmph8rlpkf9.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph8rlpkf9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph8rlpkf9.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmph8rlpkf9.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph8rlpkf9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph8rlpkf9.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmph8rlpkf9.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph8rlpkf9.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph8rlpkf9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu9jr62tw.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpu9jr62tw.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu9jr62tw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu9jr62tw.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpu9jr62tw.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu9jr62tw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu9jr62tw.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpu9jr62tw.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu9jr62tw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu9jr62tw.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpu9jr62tw.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu9jr62tw.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu9jr62tw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpycr93qks.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpycr93qks.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpycr93qks.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpycr93qks.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpycr93qks.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpycr93qks.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpycr93qks.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpycr93qks.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpycr93qks.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpycr93qks.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpycr93qks.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpycr93qks.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpycr93qks.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdd1z88wx.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdd1z88wx.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdd1z88wx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdd1z88wx.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpdd1z88wx.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdd1z88wx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdd1z88wx.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpdd1z88wx.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdd1z88wx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdd1z88wx.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpdd1z88wx.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdd1z88wx.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdd1z88wx.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp77od60ld.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp77od60ld.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp77od60ld.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp77od60ld.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp77od60ld.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp77od60ld.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp77od60ld.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp77od60ld.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp77od60ld.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp77od60ld.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp77od60ld.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp77od60ld.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp77od60ld.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzpnu7f4b.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpzpnu7f4b.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzpnu7f4b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpzpnu7f4b.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzpnu7f4b.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzpnu7f4b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpzpnu7f4b.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzpnu7f4b.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzpnu7f4b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpzpnu7f4b.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpzpnu7f4b.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzpnu7f4b.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzpnu7f4b.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp58h4nijn.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp58h4nijn.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp58h4nijn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp58h4nijn.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp58h4nijn.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp58h4nijn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp58h4nijn.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp58h4nijn.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp58h4nijn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp58h4nijn.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp58h4nijn.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp58h4nijn.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp58h4nijn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqv5zhtjo.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqv5zhtjo.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqv5zhtjo.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqv5zhtjo.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqv5zhtjo.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqv5zhtjo.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqv5zhtjo.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqv5zhtjo.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqv5zhtjo.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqv5zhtjo.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpqv5zhtjo.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqv5zhtjo.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqv5zhtjo.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps1ytkyrc.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmps1ytkyrc.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps1ytkyrc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmps1ytkyrc.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps1ytkyrc.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps1ytkyrc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmps1ytkyrc.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps1ytkyrc.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps1ytkyrc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmps1ytkyrc.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmps1ytkyrc.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps1ytkyrc.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps1ytkyrc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvt71el5w.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvt71el5w.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvt71el5w.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvt71el5w.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvt71el5w.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvt71el5w.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvt71el5w.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvt71el5w.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvt71el5w.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvt71el5w.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpvt71el5w.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvt71el5w.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvt71el5w.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy5b1tcir.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy5b1tcir.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy5b1tcir.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy5b1tcir.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpy5b1tcir.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy5b1tcir.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy5b1tcir.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpy5b1tcir.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy5b1tcir.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy5b1tcir.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpy5b1tcir.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy5b1tcir.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy5b1tcir.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo1hui62n.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpo1hui62n.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo1hui62n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpo1hui62n.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpo1hui62n.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo1hui62n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpo1hui62n.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpo1hui62n.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo1hui62n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpo1hui62n.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpo1hui62n.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo1hui62n.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo1hui62n.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph2q6wqlf.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmph2q6wqlf.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2q6wqlf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph2q6wqlf.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmph2q6wqlf.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2q6wqlf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph2q6wqlf.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmph2q6wqlf.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2q6wqlf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph2q6wqlf.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmph2q6wqlf.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2q6wqlf.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2q6wqlf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjib0y4c6.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjib0y4c6.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjib0y4c6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjib0y4c6.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjib0y4c6.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjib0y4c6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjib0y4c6.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjib0y4c6.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjib0y4c6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjib0y4c6.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpjib0y4c6.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjib0y4c6.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjib0y4c6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6dl5zs8n.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6dl5zs8n.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6dl5zs8n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6dl5zs8n.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6dl5zs8n.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6dl5zs8n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6dl5zs8n.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6dl5zs8n.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6dl5zs8n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6dl5zs8n.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp6dl5zs8n.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6dl5zs8n.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6dl5zs8n.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf2tvlls_.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpf2tvlls_.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2tvlls_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpf2tvlls_.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpf2tvlls_.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2tvlls_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpf2tvlls_.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpf2tvlls_.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2tvlls_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpf2tvlls_.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpf2tvlls_.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf2tvlls_.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf2tvlls_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfvyudts7.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfvyudts7.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfvyudts7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfvyudts7.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpfvyudts7.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfvyudts7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfvyudts7.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpfvyudts7.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfvyudts7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfvyudts7.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpfvyudts7.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfvyudts7.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfvyudts7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphzmjbfcv.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphzmjbfcv.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzmjbfcv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphzmjbfcv.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphzmjbfcv.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzmjbfcv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphzmjbfcv.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphzmjbfcv.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzmjbfcv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmphzmjbfcv.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmphzmjbfcv.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzmjbfcv.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphzmjbfcv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2buu2xc9.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2buu2xc9.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2buu2xc9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2buu2xc9.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2buu2xc9.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2buu2xc9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2buu2xc9.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2buu2xc9.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2buu2xc9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2buu2xc9.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp2buu2xc9.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2buu2xc9.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2buu2xc9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw3vr23wd.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpw3vr23wd.jl:21 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw3vr23wd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpw3vr23wd.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpw3vr23wd.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw3vr23wd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpw3vr23wd.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpw3vr23wd.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw3vr23wd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpw3vr23wd.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmpw3vr23wd.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw3vr23wd.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw3vr23wd.jl:18\n"
  exit_code: 1
  status: SyntaxError
