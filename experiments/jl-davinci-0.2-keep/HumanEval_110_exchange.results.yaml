name: HumanEval_110_exchange
language: julia
results:
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1royeljr.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1royeljr.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1royeljr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1royeljr.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1royeljr.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1royeljr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1royeljr.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1royeljr.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1royeljr.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1royeljr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo3pucs51.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpo3pucs51.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo3pucs51.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo3pucs51.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpo3pucs51.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo3pucs51.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo3pucs51.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo3pucs51.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo3pucs51.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo3pucs51.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo3pucs51.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo3pucs51.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo3pucs51.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv5ra4pyn.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpv5ra4pyn.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv5ra4pyn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpv5ra4pyn.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpv5ra4pyn.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv5ra4pyn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpv5ra4pyn.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv5ra4pyn.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv5ra4pyn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpv5ra4pyn.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv5ra4pyn.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv5ra4pyn.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv5ra4pyn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcis4uhtg.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcis4uhtg.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcis4uhtg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpcis4uhtg.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpcis4uhtg.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcis4uhtg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpcis4uhtg.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcis4uhtg.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcis4uhtg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpcis4uhtg.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcis4uhtg.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcis4uhtg.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcis4uhtg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppsupixec.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppsupixec.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppsupixec.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppsupixec.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppsupixec.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppsupixec.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppsupixec.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppsupixec.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppsupixec.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppsupixec.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppsupixec.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppsupixec.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppsupixec.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprwjezqs1.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprwjezqs1.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprwjezqs1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprwjezqs1.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmprwjezqs1.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprwjezqs1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprwjezqs1.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprwjezqs1.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprwjezqs1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprwjezqs1.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprwjezqs1.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprwjezqs1.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprwjezqs1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpia8frlrb.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpia8frlrb.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpia8frlrb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpia8frlrb.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpia8frlrb.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpia8frlrb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpia8frlrb.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpia8frlrb.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpia8frlrb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpia8frlrb.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpia8frlrb.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpia8frlrb.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpia8frlrb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdlqog3sh.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdlqog3sh.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdlqog3sh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdlqog3sh.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdlqog3sh.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdlqog3sh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdlqog3sh.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdlqog3sh.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdlqog3sh.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdlqog3sh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3a0xmyyg.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3a0xmyyg.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3a0xmyyg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3a0xmyyg.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3a0xmyyg.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3a0xmyyg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3a0xmyyg.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3a0xmyyg.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3a0xmyyg.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3a0xmyyg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    elseif\
    \ all(mod.(lst1, 2) .== 0) && all(mod.(lst2, 2) .== 0)\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp84ogzbfl.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp84ogzbfl.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp84ogzbfl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp84ogzbfl.jl:31\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp84ogzbfl.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp84ogzbfl.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp84ogzbfl.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp26ernxuh.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp26ernxuh.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp26ernxuh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp26ernxuh.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp26ernxuh.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp26ernxuh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp26ernxuh.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp26ernxuh.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp26ernxuh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp26ernxuh.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp26ernxuh.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp26ernxuh.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp26ernxuh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt6j108zq.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpt6j108zq.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt6j108zq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpt6j108zq.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt6j108zq.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt6j108zq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpt6j108zq.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpt6j108zq.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt6j108zq.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt6j108zq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgf7wz2lr.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgf7wz2lr.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgf7wz2lr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgf7wz2lr.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgf7wz2lr.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgf7wz2lr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgf7wz2lr.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgf7wz2lr.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgf7wz2lr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgf7wz2lr.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgf7wz2lr.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgf7wz2lr.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgf7wz2lr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe5b7ywfn.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpe5b7ywfn.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe5b7ywfn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe5b7ywfn.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe5b7ywfn.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe5b7ywfn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe5b7ywfn.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpe5b7ywfn.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe5b7ywfn.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe5b7ywfn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8pnwr2a8.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8pnwr2a8.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8pnwr2a8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8pnwr2a8.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8pnwr2a8.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8pnwr2a8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8pnwr2a8.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8pnwr2a8.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8pnwr2a8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8pnwr2a8.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8pnwr2a8.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8pnwr2a8.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8pnwr2a8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg8ked2td.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpg8ked2td.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg8ked2td.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpg8ked2td.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpg8ked2td.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg8ked2td.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpg8ked2td.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpg8ked2td.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg8ked2td.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpg8ked2td.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpg8ked2td.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg8ked2td.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg8ked2td.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo7vb1h2r.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpo7vb1h2r.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo7vb1h2r.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo7vb1h2r.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo7vb1h2r.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo7vb1h2r.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo7vb1h2r.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpo7vb1h2r.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo7vb1h2r.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo7vb1h2r.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqrnsatkf.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpqrnsatkf.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpqrnsatkf.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqrnsatkf.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpqrnsatkf.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpqrnsatkf.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpqrnsatkf.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqrnsatkf.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpqrnsatkf.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpb5hcr3dp.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpb5hcr3dp.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb5hcr3dp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpb5hcr3dp.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpb5hcr3dp.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb5hcr3dp.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb5hcr3dp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmposhznu17.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmposhznu17.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmposhznu17.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmposhznu17.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmposhznu17.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmposhznu17.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmposhznu17.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmposhznu17.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmposhznu17.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpymoxz4yf.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpymoxz4yf.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpymoxz4yf.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpymoxz4yf.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpymoxz4yf.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpymoxz4yf.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpymoxz4yf.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpymoxz4yf.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpymoxz4yf.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps5jrtec3.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmps5jrtec3.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps5jrtec3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps5jrtec3.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps5jrtec3.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps5jrtec3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps5jrtec3.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps5jrtec3.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps5jrtec3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps5jrtec3.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps5jrtec3.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps5jrtec3.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps5jrtec3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp98zxn4v.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpp98zxn4v.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpp98zxn4v.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp98zxn4v.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpp98zxn4v.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpp98zxn4v.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpp98zxn4v.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp98zxn4v.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpp98zxn4v.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4kzm9v_z.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4kzm9v_z.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4kzm9v_z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4kzm9v_z.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4kzm9v_z.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4kzm9v_z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4kzm9v_z.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4kzm9v_z.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4kzm9v_z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4kzm9v_z.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4kzm9v_z.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4kzm9v_z.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4kzm9v_z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_f_9mmtb.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_f_9mmtb.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_f_9mmtb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_f_9mmtb.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_f_9mmtb.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_f_9mmtb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_f_9mmtb.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_f_9mmtb.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_f_9mmtb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_f_9mmtb.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_f_9mmtb.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_f_9mmtb.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_f_9mmtb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    else\n        for i in 1:length(lst1)\n            if mod(lst1[i],\
    \ 2) != 0\n                for j in 1:length(lst2)\n                    if mod(lst2[j],\
    \ 2) == 0\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n     \
    \                   break\n                    end\n                end\n    \
    \        end\n        end\n        if all(mod.(lst1, 2) .== 0)\n            return\
    \ \"YES\"\n        else\n            return \"NO\"\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnjsgpk3a.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpnjsgpk3a.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpnjsgpk3a.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnjsgpk3a.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpnjsgpk3a.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpnjsgpk3a.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpnjsgpk3a.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnjsgpk3a.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpnjsgpk3a.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps7aitnu8.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmps7aitnu8.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps7aitnu8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps7aitnu8.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps7aitnu8.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps7aitnu8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps7aitnu8.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps7aitnu8.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps7aitnu8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps7aitnu8.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps7aitnu8.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps7aitnu8.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps7aitnu8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpk1op6t3z.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpk1op6t3z.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1op6t3z.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk1op6t3z.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpk1op6t3z.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1op6t3z.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk1op6t3z.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if length(lst1) != length(lst2)\n       \
    \ return \"NO\"\n    end\n    for i in 1:length(lst1)\n        if lst1[i] % 2\
    \ == 1\n            for j in 1:length(lst2)\n                if lst2[j] % 2 ==\
    \ 0\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n               \
    \     break\n                end\n            end\n        end\n    end\n    for\
    \ i in 1:length(lst1)\n        if lst1[i] % 2 == 1\n            return \"NO\"\n\
    \        end\n    end\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # check if all elements in lst1 are even\n\
    \    if all(isodd, lst1)\n        return \"NO\"\n    end\n    # check if all elements\
    \ in lst2 are odd\n    if all(iseven, lst2)\n        return \"NO\"\n    end\n\
    \    # check if there is an odd number in lst1\n    if any(isodd, lst1)\n    \
    \    # check if there is an even number in lst2\n        if any(iseven, lst2)\n\
    \            return \"YES\"\n        end\n    end\n    return \"NO\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsljvnoql.jl:37\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsljvnoql.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsljvnoql.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsljvnoql.jl:39\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsljvnoql.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsljvnoql.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsljvnoql.jl:42\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsljvnoql.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsljvnoql.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsljvnoql.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn975uw3q.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpn975uw3q.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn975uw3q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn975uw3q.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpn975uw3q.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn975uw3q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn975uw3q.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpn975uw3q.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn975uw3q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn975uw3q.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpn975uw3q.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn975uw3q.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn975uw3q.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv6rk5hq1.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpv6rk5hq1.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv6rk5hq1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpv6rk5hq1.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpv6rk5hq1.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv6rk5hq1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpv6rk5hq1.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv6rk5hq1.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv6rk5hq1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpv6rk5hq1.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv6rk5hq1.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv6rk5hq1.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv6rk5hq1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd44x2wzy.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpd44x2wzy.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd44x2wzy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpd44x2wzy.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpd44x2wzy.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd44x2wzy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpd44x2wzy.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpd44x2wzy.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd44x2wzy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpd44x2wzy.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpd44x2wzy.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd44x2wzy.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd44x2wzy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp45wxx5uj.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp45wxx5uj.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45wxx5uj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp45wxx5uj.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp45wxx5uj.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45wxx5uj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp45wxx5uj.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp45wxx5uj.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45wxx5uj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp45wxx5uj.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp45wxx5uj.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45wxx5uj.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp45wxx5uj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(isodd, lst1)\n        return \"NO\"\
    \n    end\n    for i in 1:length(lst1)\n        if isodd(lst1[i])\n          \
    \  for j in 1:length(lst2)\n                if iseven(lst2[j])\n             \
    \       lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n     \
    \           end\n            end\n        end\n    end\n    if all(iseven, lst1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpouowui4_.jl:41\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpouowui4_.jl:41 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpouowui4_.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpouowui4_.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5mdf4bkc.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5mdf4bkc.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5mdf4bkc.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5mdf4bkc.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp5mdf4bkc.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5mdf4bkc.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5mdf4bkc.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5mdf4bkc.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5mdf4bkc.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5mdf4bkc.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5mdf4bkc.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5mdf4bkc.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5mdf4bkc.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0rk0k9iu.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0rk0k9iu.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0rk0k9iu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0rk0k9iu.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0rk0k9iu.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0rk0k9iu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0rk0k9iu.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0rk0k9iu.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0rk0k9iu.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0rk0k9iu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3ovwwxaa.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmp3ovwwxaa.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3ovwwxaa.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3ovwwxaa.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp3ovwwxaa.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmp3ovwwxaa.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp3ovwwxaa.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3ovwwxaa.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp3ovwwxaa.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5482baol.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5482baol.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5482baol.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5482baol.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5482baol.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5482baol.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5482baol.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5482baol.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5482baol.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5482baol.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe28m6d0w.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpe28m6d0w.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe28m6d0w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe28m6d0w.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe28m6d0w.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe28m6d0w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe28m6d0w.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpe28m6d0w.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe28m6d0w.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe28m6d0w.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp23fdj9y.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpp23fdj9y.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp23fdj9y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp23fdj9y.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpp23fdj9y.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp23fdj9y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp23fdj9y.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpp23fdj9y.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp23fdj9y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp23fdj9y.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpp23fdj9y.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp23fdj9y.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp23fdj9y.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(lst1 .% 2 .== 0)\n        return \"\
    YES\"\n    elseif all(lst2 .% 2 .== 0)\n        return \"YES\"\n    else\n   \
    \     return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp8jholzlv.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8jholzlv.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8jholzlv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8jholzlv.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8jholzlv.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8jholzlv.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8jholzlv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxyz_bo05.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxyz_bo05.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxyz_bo05.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxyz_bo05.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxyz_bo05.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxyz_bo05.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxyz_bo05.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxyz_bo05.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxyz_bo05.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxyz_bo05.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp203kp6ay.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmp203kp6ay.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp203kp6ay.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp203kp6ay.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp203kp6ay.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmp203kp6ay.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp203kp6ay.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp203kp6ay.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp203kp6ay.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprhrf5uy5.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprhrf5uy5.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhrf5uy5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprhrf5uy5.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmprhrf5uy5.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhrf5uy5.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprhrf5uy5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyes0_iwy.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpyes0_iwy.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpyes0_iwy.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyes0_iwy.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpyes0_iwy.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpyes0_iwy.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpyes0_iwy.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyes0_iwy.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpyes0_iwy.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu82nfbx0.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpu82nfbx0.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu82nfbx0.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpu82nfbx0.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpu82nfbx0.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu82nfbx0.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpu82nfbx0.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpu82nfbx0.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu82nfbx0.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu82nfbx0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpepvgpa1k.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpepvgpa1k.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpepvgpa1k.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpepvgpa1k.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpepvgpa1k.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpepvgpa1k.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpepvgpa1k.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpepvgpa1k.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpepvgpa1k.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpepvgpa1k.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpepvgpa1k.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpepvgpa1k.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpepvgpa1k.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf0foe2bx.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpf0foe2bx.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf0foe2bx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpf0foe2bx.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpf0foe2bx.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf0foe2bx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpf0foe2bx.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf0foe2bx.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf0foe2bx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpf0foe2bx.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf0foe2bx.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf0foe2bx.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf0foe2bx.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    else\n        for i in 1:length(lst1)\n            if mod(lst1[i],\
    \ 2) != 0\n                for j in 1:length(lst2)\n                    if mod(lst2[j],\
    \ 2) == 0\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n     \
    \                   break\n                    end\n                end\n    \
    \        end\n        end\n        if all(mod.(lst1, 2) .== 0)\n            return\
    \ \"YES\"\n        else\n            return \"NO\"\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # check if lst1 is all even\n    if all(isodd,\
    \ lst1)\n        return \"NO\"\n    end\n    # check if lst2 is all odd\n    if\
    \ all(iseven, lst2)\n        return \"NO\"\n    end\n    # check if lst1 is all\
    \ even after swapping\n    for i in 1:length(lst1)\n        if isodd(lst1[i])\n\
    \            for j in 1:length(lst2)\n                if iseven(lst2[j])\n   \
    \                 lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n\
    \                end\n            end\n        end\n    end\n    if all(iseven,\
    \ lst1)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt3ak6lhz.jl:47\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpt3ak6lhz.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt3ak6lhz.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpt3ak6lhz.jl:50\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt3ak6lhz.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt3ak6lhz.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt3ak6lhz.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpogmvrzo_.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpogmvrzo_.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpogmvrzo_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpogmvrzo_.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpogmvrzo_.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpogmvrzo_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpogmvrzo_.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpogmvrzo_.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpogmvrzo_.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpogmvrzo_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprfwputuc.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprfwputuc.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprfwputuc.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprfwputuc.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprfwputuc.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprfwputuc.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprfwputuc.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprfwputuc.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprfwputuc.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprfwputuc.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmgv_ihiz.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpmgv_ihiz.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmgv_ihiz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmgv_ihiz.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmgv_ihiz.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmgv_ihiz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmgv_ihiz.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmgv_ihiz.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmgv_ihiz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmgv_ihiz.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmgv_ihiz.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmgv_ihiz.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmgv_ihiz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp79pmx299.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmp79pmx299.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp79pmx299.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp79pmx299.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp79pmx299.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmp79pmx299.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp79pmx299.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp79pmx299.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp79pmx299.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4j1amq5h.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmp4j1amq5h.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp4j1amq5h.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4j1amq5h.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp4j1amq5h.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmp4j1amq5h.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp4j1amq5h.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4j1amq5h.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp4j1amq5h.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if length(lst1) == length(lst2)\n       \
    \ for i in 1:length(lst1)\n            if lst1[i] % 2 == 1\n                for\
    \ j in 1:length(lst2)\n                    if lst2[j] % 2 == 0\n             \
    \           lst1[i], lst2[j] = lst2[j], lst1[i]\n                        break\n\
    \                    end\n                end\n            end\n        end\n\
    \        for i in 1:length(lst1)\n            if lst1[i] % 2 == 1\n          \
    \      return \"NO\"\n            end\n        end\n        return \"YES\"\n \
    \   else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5wcdx22t.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5wcdx22t.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5wcdx22t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5wcdx22t.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5wcdx22t.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5wcdx22t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5wcdx22t.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5wcdx22t.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5wcdx22t.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5wcdx22t.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    else\n        for i in 1:length(lst1)\n            if mod(lst1[i],\
    \ 2) != 0\n                for j in 1:length(lst2)\n                    if mod(lst2[j],\
    \ 2) == 0\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n     \
    \                   if all(mod.(lst1, 2) .== 0)\n                            return\
    \ \"YES\"\n                        end\n                    end\n            \
    \    end\n            end\n        end\n    end\n    return \"NO\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmirrdw4r.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpmirrdw4r.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpmirrdw4r.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmirrdw4r.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpmirrdw4r.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpmirrdw4r.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpmirrdw4r.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmirrdw4r.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpmirrdw4r.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbbmoet0i.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbbmoet0i.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbbmoet0i.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpbbmoet0i.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbbmoet0i.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbbmoet0i.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbbmoet0i.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl80aqxw9.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpl80aqxw9.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl80aqxw9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl80aqxw9.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpl80aqxw9.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl80aqxw9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl80aqxw9.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpl80aqxw9.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl80aqxw9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl80aqxw9.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpl80aqxw9.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl80aqxw9.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl80aqxw9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpjnlwzoj5.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjnlwzoj5.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjnlwzoj5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjnlwzoj5.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjnlwzoj5.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjnlwzoj5.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjnlwzoj5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpilr4rut_.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpilr4rut_.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpilr4rut_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpilr4rut_.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpilr4rut_.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpilr4rut_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpilr4rut_.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpilr4rut_.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpilr4rut_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpilr4rut_.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpilr4rut_.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpilr4rut_.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpilr4rut_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpobn8d58s.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpobn8d58s.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpobn8d58s.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpobn8d58s.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpobn8d58s.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpobn8d58s.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpobn8d58s.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpobn8d58s.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpobn8d58s.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpobn8d58s.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(isodd, lst1)\n        return \"NO\"\
    \n    end\n    for i in 1:length(lst1)\n        if isodd(lst1[i])\n          \
    \  for j in 1:length(lst2)\n                if iseven(lst2[j])\n             \
    \       lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n     \
    \           end\n            end\n        end\n    end\n    if all(iseven, lst1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjuq_gkf1.jl:41\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjuq_gkf1.jl:41 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjuq_gkf1.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjuq_gkf1.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    if all(x -> x % 2 ==\
    \ 0, lst1)\n        return \"YES\"\n    end\n    for i in 1:length(lst1)\n   \
    \     for j in 1:length(lst2)\n            if lst1[i] % 2 != 0 && lst2[j] % 2\
    \ == 0\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                if\
    \ all(x -> x % 2 == 0, lst1)\n                    return \"YES\"\n           \
    \     end\n            end\n        end\n    end\n    return \"NO\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2_pknwfs.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2_pknwfs.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_pknwfs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2_pknwfs.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2_pknwfs.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_pknwfs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2_pknwfs.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2_pknwfs.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_pknwfs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2_pknwfs.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2_pknwfs.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_pknwfs.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_pknwfs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplzfapufm.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplzfapufm.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplzfapufm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplzfapufm.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmplzfapufm.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplzfapufm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplzfapufm.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplzfapufm.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplzfapufm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplzfapufm.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplzfapufm.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplzfapufm.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplzfapufm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsgaqyh7o.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpsgaqyh7o.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpsgaqyh7o.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsgaqyh7o.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpsgaqyh7o.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpsgaqyh7o.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpsgaqyh7o.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsgaqyh7o.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpsgaqyh7o.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpum6s1jld.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpum6s1jld.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpum6s1jld.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpum6s1jld.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpum6s1jld.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpum6s1jld.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpum6s1jld.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpum6s1jld.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpum6s1jld.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpum6s1jld.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpum6s1jld.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpum6s1jld.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpum6s1jld.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7hxk20vq.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7hxk20vq.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7hxk20vq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7hxk20vq.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7hxk20vq.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7hxk20vq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7hxk20vq.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7hxk20vq.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7hxk20vq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7hxk20vq.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7hxk20vq.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7hxk20vq.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7hxk20vq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_eiobuqs.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_eiobuqs.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_eiobuqs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_eiobuqs.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_eiobuqs.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_eiobuqs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_eiobuqs.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_eiobuqs.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_eiobuqs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_eiobuqs.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_eiobuqs.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_eiobuqs.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_eiobuqs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdrk78jg9.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdrk78jg9.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdrk78jg9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdrk78jg9.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpdrk78jg9.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdrk78jg9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdrk78jg9.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdrk78jg9.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdrk78jg9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdrk78jg9.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdrk78jg9.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdrk78jg9.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdrk78jg9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0bl5x4pt.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0bl5x4pt.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0bl5x4pt.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0bl5x4pt.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0bl5x4pt.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0bl5x4pt.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0bl5x4pt.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0bl5x4pt.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0bl5x4pt.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0bl5x4pt.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0bl5x4pt.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0bl5x4pt.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0bl5x4pt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0ekmyq95.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmp0ekmyq95.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp0ekmyq95.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0ekmyq95.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp0ekmyq95.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmp0ekmyq95.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp0ekmyq95.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0ekmyq95.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp0ekmyq95.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpizduk88i.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpizduk88i.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpizduk88i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpizduk88i.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpizduk88i.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpizduk88i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpizduk88i.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpizduk88i.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpizduk88i.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpizduk88i.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp15_ojr2_.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp15_ojr2_.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15_ojr2_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp15_ojr2_.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp15_ojr2_.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15_ojr2_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp15_ojr2_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    else\n        for i in 1:length(lst1)\n            if mod(lst1[i],\
    \ 2) != 0\n                for j in 1:length(lst2)\n                    if mod(lst2[j],\
    \ 2) == 0\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n     \
    \                   break\n                    end\n                end\n    \
    \        end\n        end\n        if all(mod.(lst1, 2) .== 0)\n            return\
    \ \"YES\"\n        else\n            return \"NO\"\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    else\n        for i in 1:length(lst1)\n            if mod(lst1[i],\
    \ 2) != 0\n                for j in 1:length(lst2)\n                    if mod(lst2[j],\
    \ 2) == 0\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n     \
    \                   break\n                    end\n                end\n    \
    \        end\n        end\n        if all(mod.(lst1, 2) .== 0)\n            return\
    \ \"YES\"\n        else\n            return \"NO\"\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if length(lst1) == length(lst2)\n       \
    \ for i in 1:length(lst1)\n            if lst1[i] % 2 == 1\n                for\
    \ j in 1:length(lst2)\n                    if lst2[j] % 2 == 0\n             \
    \           lst1[i], lst2[j] = lst2[j], lst1[i]\n                        break\n\
    \                    end\n                end\n            end\n        end\n\
    \        for i in 1:length(lst1)\n            if lst1[i] % 2 == 1\n          \
    \      return \"NO\"\n            end\n        end\n        return \"YES\"\n \
    \   else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnjwmqgje.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpnjwmqgje.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnjwmqgje.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnjwmqgje.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpnjwmqgje.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnjwmqgje.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnjwmqgje.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnjwmqgje.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnjwmqgje.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnjwmqgje.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnjwmqgje.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnjwmqgje.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnjwmqgje.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdzkho9u6.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdzkho9u6.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdzkho9u6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdzkho9u6.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpdzkho9u6.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdzkho9u6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdzkho9u6.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdzkho9u6.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdzkho9u6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdzkho9u6.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdzkho9u6.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdzkho9u6.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdzkho9u6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyd_jahmm.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyd_jahmm.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyd_jahmm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyd_jahmm.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyd_jahmm.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyd_jahmm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyd_jahmm.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyd_jahmm.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyd_jahmm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyd_jahmm.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyd_jahmm.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyd_jahmm.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyd_jahmm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc5gvd86y.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpc5gvd86y.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpc5gvd86y.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc5gvd86y.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpc5gvd86y.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpc5gvd86y.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpc5gvd86y.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc5gvd86y.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpc5gvd86y.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    if all(mod.(lst1, 2)\
    \ .== 0)\n        return \"YES\"\n    end\n    for i in 1:length(lst1)\n     \
    \   for j in 1:length(lst2)\n            if mod(lst1[i], 2) != 0 && mod(lst2[j],\
    \ 2) == 0\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n            end\n\
    \        end\n    end\n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjs8tvh27.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjs8tvh27.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjs8tvh27.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjs8tvh27.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjs8tvh27.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjs8tvh27.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjs8tvh27.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjs8tvh27.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjs8tvh27.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjs8tvh27.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjs8tvh27.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjs8tvh27.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjs8tvh27.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif any(mod.(lst1, 2) .== 0) && any(mod.(lst2, 2) .== 0)\n \
    \       return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpujhi7m9q.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpujhi7m9q.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpujhi7m9q.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpujhi7m9q.jl:30\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpujhi7m9q.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpujhi7m9q.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpujhi7m9q.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpek94p3mn.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpek94p3mn.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpek94p3mn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpek94p3mn.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpek94p3mn.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpek94p3mn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpek94p3mn.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpek94p3mn.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpek94p3mn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpek94p3mn.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpek94p3mn.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpek94p3mn.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpek94p3mn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxvxcz2wf.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxvxcz2wf.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxvxcz2wf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxvxcz2wf.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpxvxcz2wf.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxvxcz2wf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxvxcz2wf.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxvxcz2wf.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxvxcz2wf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxvxcz2wf.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxvxcz2wf.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxvxcz2wf.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxvxcz2wf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    for i in 1:length(lst1)\n        if lst1[i]\
    \ % 2 != 0\n            for j in 1:length(lst2)\n                if lst2[j] %\
    \ 2 != 0\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n          \
    \          break\n                end\n            end\n        end\n    end\n\
    \    if all(x % 2 == 0 for x in lst1)\n        return \"YES\"\n    else\n    \
    \    return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp3msle1ce.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3msle1ce.jl:35 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3msle1ce.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp3msle1ce.jl:37\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp3msle1ce.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3msle1ce.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp3msle1ce.jl:38\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3msle1ce.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3msle1ce.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3msle1ce.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa6a85w2a.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpa6a85w2a.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa6a85w2a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa6a85w2a.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpa6a85w2a.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa6a85w2a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa6a85w2a.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa6a85w2a.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa6a85w2a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa6a85w2a.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa6a85w2a.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa6a85w2a.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa6a85w2a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_tq67ua8.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_tq67ua8.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_tq67ua8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_tq67ua8.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_tq67ua8.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_tq67ua8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_tq67ua8.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_tq67ua8.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_tq67ua8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_tq67ua8.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_tq67ua8.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_tq67ua8.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_tq67ua8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7nfj5062.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7nfj5062.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7nfj5062.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7nfj5062.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7nfj5062.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7nfj5062.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7nfj5062.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7nfj5062.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7nfj5062.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7nfj5062.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7nfj5062.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7nfj5062.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7nfj5062.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6l8_4qa3.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6l8_4qa3.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6l8_4qa3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6l8_4qa3.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6l8_4qa3.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6l8_4qa3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6l8_4qa3.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6l8_4qa3.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6l8_4qa3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6l8_4qa3.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6l8_4qa3.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6l8_4qa3.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6l8_4qa3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpc8dsh1za.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpc8dsh1za.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc8dsh1za.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpc8dsh1za.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpc8dsh1za.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc8dsh1za.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc8dsh1za.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnnczmh4d.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpnnczmh4d.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnnczmh4d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnnczmh4d.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpnnczmh4d.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnnczmh4d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnnczmh4d.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnnczmh4d.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnnczmh4d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnnczmh4d.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnnczmh4d.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnnczmh4d.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnnczmh4d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxlozbwkz.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxlozbwkz.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxlozbwkz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxlozbwkz.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpxlozbwkz.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxlozbwkz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxlozbwkz.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxlozbwkz.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxlozbwkz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxlozbwkz.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxlozbwkz.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxlozbwkz.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxlozbwkz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppe21qdef.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppe21qdef.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppe21qdef.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppe21qdef.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppe21qdef.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppe21qdef.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppe21qdef.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppe21qdef.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppe21qdef.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppe21qdef.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiwg82l_t.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpiwg82l_t.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpiwg82l_t.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpiwg82l_t.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpiwg82l_t.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpiwg82l_t.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpiwg82l_t.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpiwg82l_t.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpiwg82l_t.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp17ucr2d.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpp17ucr2d.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp17ucr2d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp17ucr2d.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpp17ucr2d.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp17ucr2d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp17ucr2d.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpp17ucr2d.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp17ucr2d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp17ucr2d.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpp17ucr2d.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp17ucr2d.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp17ucr2d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb7b1ey8t.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpb7b1ey8t.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb7b1ey8t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb7b1ey8t.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpb7b1ey8t.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb7b1ey8t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb7b1ey8t.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb7b1ey8t.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb7b1ey8t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb7b1ey8t.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb7b1ey8t.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb7b1ey8t.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb7b1ey8t.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgttgs3xb.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpgttgs3xb.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgttgs3xb.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgttgs3xb.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpgttgs3xb.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpgttgs3xb.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpgttgs3xb.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgttgs3xb.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpgttgs3xb.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpqso_rb3s.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqso_rb3s.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqso_rb3s.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqso_rb3s.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqso_rb3s.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqso_rb3s.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqso_rb3s.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvko41r63.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvko41r63.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvko41r63.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvko41r63.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvko41r63.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvko41r63.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvko41r63.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvko41r63.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvko41r63.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvko41r63.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvko41r63.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvko41r63.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvko41r63.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8cxlik93.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8cxlik93.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8cxlik93.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8cxlik93.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8cxlik93.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8cxlik93.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8cxlik93.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8cxlik93.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8cxlik93.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8cxlik93.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8cxlik93.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8cxlik93.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8cxlik93.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(x -> x % 2 == 0, lst1)\n        return\
    \ \"YES\"\n    end\n    for i in 1:length(lst1)\n        for j in 1:length(lst2)\n\
    \            if lst1[i] % 2 != 0 && lst2[j] % 2 != 0\n                lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                if all(x -> x % 2 == 0, lst1)\n\
    \                    return \"YES\"\n                end\n            end\n  \
    \      end\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsu8gryk3.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsu8gryk3.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsu8gryk3.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpsu8gryk3.jl:36\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsu8gryk3.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsu8gryk3.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpsu8gryk3.jl:37\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsu8gryk3.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsu8gryk3.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsu8gryk3.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm7cgmcht.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpm7cgmcht.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpm7cgmcht.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpm7cgmcht.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpm7cgmcht.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpm7cgmcht.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpm7cgmcht.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpm7cgmcht.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpm7cgmcht.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgdbbwsii.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpgdbbwsii.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgdbbwsii.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgdbbwsii.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpgdbbwsii.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpgdbbwsii.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpgdbbwsii.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgdbbwsii.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpgdbbwsii.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvt7i9bfj.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvt7i9bfj.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvt7i9bfj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvt7i9bfj.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvt7i9bfj.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvt7i9bfj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvt7i9bfj.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvt7i9bfj.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvt7i9bfj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvt7i9bfj.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvt7i9bfj.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvt7i9bfj.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvt7i9bfj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk7qhwl1q.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpk7qhwl1q.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk7qhwl1q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpk7qhwl1q.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpk7qhwl1q.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk7qhwl1q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpk7qhwl1q.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpk7qhwl1q.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk7qhwl1q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpk7qhwl1q.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpk7qhwl1q.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk7qhwl1q.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk7qhwl1q.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0q4osw6f.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0q4osw6f.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0q4osw6f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0q4osw6f.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0q4osw6f.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0q4osw6f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0q4osw6f.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0q4osw6f.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0q4osw6f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0q4osw6f.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0q4osw6f.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0q4osw6f.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0q4osw6f.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy2zet94m.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy2zet94m.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2zet94m.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpy2zet94m.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpy2zet94m.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2zet94m.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpy2zet94m.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy2zet94m.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2zet94m.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpy2zet94m.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy2zet94m.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2zet94m.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy2zet94m.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9fhbvtjw.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9fhbvtjw.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9fhbvtjw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9fhbvtjw.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9fhbvtjw.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9fhbvtjw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9fhbvtjw.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9fhbvtjw.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9fhbvtjw.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9fhbvtjw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpegu_fb44.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpegu_fb44.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpegu_fb44.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpegu_fb44.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpegu_fb44.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpegu_fb44.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpegu_fb44.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpegu_fb44.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpegu_fb44.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpegu_fb44.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpegu_fb44.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpegu_fb44.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpegu_fb44.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6s0haqgz.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6s0haqgz.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6s0haqgz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6s0haqgz.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6s0haqgz.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6s0haqgz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6s0haqgz.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6s0haqgz.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6s0haqgz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6s0haqgz.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6s0haqgz.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6s0haqgz.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6s0haqgz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpik2hzci3.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpik2hzci3.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpik2hzci3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpik2hzci3.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpik2hzci3.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpik2hzci3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpik2hzci3.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpik2hzci3.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpik2hzci3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpik2hzci3.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpik2hzci3.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpik2hzci3.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpik2hzci3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpky0px1rs.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpky0px1rs.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpky0px1rs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpky0px1rs.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpky0px1rs.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpky0px1rs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpky0px1rs.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpky0px1rs.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpky0px1rs.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpky0px1rs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb08i37my.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpb08i37my.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb08i37my.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb08i37my.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpb08i37my.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb08i37my.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb08i37my.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb08i37my.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb08i37my.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb08i37my.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb08i37my.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb08i37my.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb08i37my.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9x7n5tev.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9x7n5tev.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9x7n5tev.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9x7n5tev.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9x7n5tev.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9x7n5tev.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9x7n5tev.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9x7n5tev.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9x7n5tev.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9x7n5tev.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9x7n5tev.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9x7n5tev.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9x7n5tev.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp_2ite_g.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpp_2ite_g.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpp_2ite_g.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp_2ite_g.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpp_2ite_g.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpp_2ite_g.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpp_2ite_g.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp_2ite_g.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpp_2ite_g.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvstrr2a2.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpvstrr2a2.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpvstrr2a2.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvstrr2a2.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpvstrr2a2.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpvstrr2a2.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpvstrr2a2.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvstrr2a2.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpvstrr2a2.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    # You can add helper\
    \ functions here\n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n  \
    \  end\n    for i in 1:length(lst1)\n        if mod(lst1[i], 2) != 0\n       \
    \     for j in 1:length(lst2)\n                if mod(lst2[j], 2) == 0\n     \
    \               lst1[i], lst2[j] = lst2[j], lst1[i]\n                    if all(mod.(lst1,\
    \ 2) .== 0)\n                        return \"YES\"\n                    end\n\
    \                end\n            end\n        end\n    end\n    return \"NO\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqa889xwd.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqa889xwd.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqa889xwd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqa889xwd.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqa889xwd.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqa889xwd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqa889xwd.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqa889xwd.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqa889xwd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqa889xwd.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqa889xwd.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqa889xwd.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqa889xwd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(x -> iseven(x), lst1)\n        return\
    \ \"YES\"\n    else\n        for i in 1:length(lst1)\n            for j in 1:length(lst2)\n\
    \                if iseven(lst1[i]) && !iseven(lst2[j])\n                    lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                    if all(x -> iseven(x), lst1)\n\
    \                        return \"YES\"\n                    end\n           \
    \     end\n            end\n        end\n    end\n    return \"NO\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr7l244dv.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpr7l244dv.jl:35 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr7l244dv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpr7l244dv.jl:37\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpr7l244dv.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr7l244dv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpr7l244dv.jl:38\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpr7l244dv.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr7l244dv.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr7l244dv.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9vp1yfr1.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9vp1yfr1.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9vp1yfr1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9vp1yfr1.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9vp1yfr1.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9vp1yfr1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9vp1yfr1.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9vp1yfr1.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9vp1yfr1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9vp1yfr1.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9vp1yfr1.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9vp1yfr1.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9vp1yfr1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpt67xa92o.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpt67xa92o.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt67xa92o.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpt67xa92o.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpt67xa92o.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt67xa92o.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt67xa92o.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpb1m0ws0y.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpb1m0ws0y.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpb1m0ws0y.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb1m0ws0y.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpb1m0ws0y.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpb1m0ws0y.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpb1m0ws0y.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb1m0ws0y.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpb1m0ws0y.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphimm029f.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphimm029f.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphimm029f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphimm029f.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphimm029f.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphimm029f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphimm029f.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphimm029f.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphimm029f.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphimm029f.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuptnjvdy.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpuptnjvdy.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuptnjvdy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuptnjvdy.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpuptnjvdy.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuptnjvdy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuptnjvdy.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpuptnjvdy.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuptnjvdy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpuptnjvdy.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpuptnjvdy.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuptnjvdy.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuptnjvdy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(x -> x % 2 == 0, lst1)\n        return\
    \ \"YES\"\n    end\n    for i in 1:length(lst1)\n        if lst1[i] % 2 != 0\n\
    \            for j in 1:length(lst2)\n                if lst2[j] % 2 != 0\n  \
    \                  lst1[i], lst2[j] = lst2[j], lst1[i]\n                    if\
    \ all(x -> x % 2 == 0, lst1)\n                        return \"YES\"\n       \
    \             end\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n \
    \               end\n            end\n        end\n    end\n    return \"NO\"\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp15m6rfmq.jl:37\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp15m6rfmq.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15m6rfmq.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp15m6rfmq.jl:39\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp15m6rfmq.jl:39 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15m6rfmq.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp15m6rfmq.jl:40\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp15m6rfmq.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp15m6rfmq.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp15m6rfmq.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    else\n        for i in 1:length(lst1)\n            for j in 1:length(lst2)\n\
    \                if mod(lst1[i], 2) != 0 && mod(lst2[j], 2) == 0\n           \
    \         lst1[i], lst2[j] = lst2[j], lst1[i]\n                end\n         \
    \   end\n        end\n        if all(mod.(lst1, 2) .== 0)\n            return\
    \ \"YES\"\n        else\n            return \"NO\"\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpluwathv5.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpluwathv5.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpluwathv5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpluwathv5.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpluwathv5.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpluwathv5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpluwathv5.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpluwathv5.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpluwathv5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpluwathv5.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpluwathv5.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpluwathv5.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpluwathv5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbo4dyywg.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbo4dyywg.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbo4dyywg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbo4dyywg.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbo4dyywg.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbo4dyywg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbo4dyywg.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbo4dyywg.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbo4dyywg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbo4dyywg.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbo4dyywg.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbo4dyywg.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbo4dyywg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6a5mr0en.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6a5mr0en.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6a5mr0en.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6a5mr0en.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6a5mr0en.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6a5mr0en.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6a5mr0en.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6a5mr0en.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6a5mr0en.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6a5mr0en.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6a5mr0en.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6a5mr0en.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6a5mr0en.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx6vgvfcd.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpx6vgvfcd.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx6vgvfcd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpx6vgvfcd.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpx6vgvfcd.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx6vgvfcd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpx6vgvfcd.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx6vgvfcd.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx6vgvfcd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpx6vgvfcd.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx6vgvfcd.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx6vgvfcd.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx6vgvfcd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa63xrl57.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpa63xrl57.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa63xrl57.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa63xrl57.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa63xrl57.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa63xrl57.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa63xrl57.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpa63xrl57.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa63xrl57.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa63xrl57.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfgm_k1up.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfgm_k1up.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfgm_k1up.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfgm_k1up.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpfgm_k1up.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfgm_k1up.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfgm_k1up.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfgm_k1up.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfgm_k1up.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfgm_k1up.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfgm_k1up.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfgm_k1up.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfgm_k1up.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppl4hqc7s.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppl4hqc7s.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppl4hqc7s.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppl4hqc7s.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppl4hqc7s.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppl4hqc7s.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppl4hqc7s.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppl4hqc7s.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppl4hqc7s.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppl4hqc7s.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv370kx23.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpv370kx23.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv370kx23.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpv370kx23.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv370kx23.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv370kx23.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpv370kx23.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpv370kx23.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv370kx23.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv370kx23.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if length(lst1) == length(lst2)\n       \
    \ for i in 1:length(lst1)\n            if lst1[i] % 2 == 1\n                for\
    \ j in 1:length(lst2)\n                    if lst2[j] % 2 == 0\n             \
    \           lst1[i], lst2[j] = lst2[j], lst1[i]\n                        break\n\
    \                    end\n                end\n            end\n        end\n\
    \        for i in 1:length(lst1)\n            if lst1[i] % 2 == 1\n          \
    \      return \"NO\"\n            end\n        end\n        return \"YES\"\n \
    \   else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if (length(lst1) != length(lst2))\n     \
    \   return \"NO\"\n    end\n    for i in 1:length(lst1)\n        if (lst1[i] %\
    \ 2 != 0)\n            for j in 1:length(lst2)\n                if (lst2[j] %\
    \ 2 != 0)\n                    continue\n                else\n              \
    \      lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n      \
    \          end\n            end\n        end\n    end\n    for i in 1:length(lst1)\n\
    \        if (lst1[i] % 2 != 0)\n            return \"NO\"\n        end\n    end\n\
    \    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8s1a10i5.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmp8s1a10i5.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp8s1a10i5.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8s1a10i5.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp8s1a10i5.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmp8s1a10i5.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp8s1a10i5.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8s1a10i5.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp8s1a10i5.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9f7vp9b2.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmp9f7vp9b2.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp9f7vp9b2.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9f7vp9b2.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp9f7vp9b2.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmp9f7vp9b2.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp9f7vp9b2.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9f7vp9b2.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp9f7vp9b2.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbl3n4wh5.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpbl3n4wh5.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpbl3n4wh5.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbl3n4wh5.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpbl3n4wh5.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpbl3n4wh5.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpbl3n4wh5.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbl3n4wh5.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpbl3n4wh5.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code goes here\n    return \"YES\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp1u1ak9da.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1u1ak9da.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1u1ak9da.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1u1ak9da.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1u1ak9da.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1u1ak9da.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1u1ak9da.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1u1ak9da.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1u1ak9da.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1u1ak9da.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1vmqx483.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1vmqx483.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1vmqx483.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1vmqx483.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1vmqx483.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1vmqx483.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1vmqx483.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1vmqx483.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1vmqx483.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1vmqx483.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4mgpohy4.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmp4mgpohy4.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp4mgpohy4.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4mgpohy4.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp4mgpohy4.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmp4mgpohy4.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp4mgpohy4.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4mgpohy4.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp4mgpohy4.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp74ybpdgd.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp74ybpdgd.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp74ybpdgd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp74ybpdgd.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp74ybpdgd.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp74ybpdgd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp74ybpdgd.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp74ybpdgd.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp74ybpdgd.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp74ybpdgd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn1tyb9mp.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpn1tyb9mp.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn1tyb9mp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn1tyb9mp.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpn1tyb9mp.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn1tyb9mp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn1tyb9mp.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpn1tyb9mp.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn1tyb9mp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn1tyb9mp.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpn1tyb9mp.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn1tyb9mp.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn1tyb9mp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if length(lst1) == length(lst2)\n       \
    \ for i in 1:length(lst1)\n            if lst1[i] % 2 == 1 && lst2[i] % 2 == 0\n\
    \                return \"YES\"\n            end\n        end\n    end\n    return\
    \ \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp62xmj4_1.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp62xmj4_1.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp62xmj4_1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp62xmj4_1.jl:32\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp62xmj4_1.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp62xmj4_1.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp62xmj4_1.jl:34\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp62xmj4_1.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp62xmj4_1.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp62xmj4_1.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4g0_l5sf.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4g0_l5sf.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4g0_l5sf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4g0_l5sf.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4g0_l5sf.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4g0_l5sf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4g0_l5sf.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4g0_l5sf.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4g0_l5sf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4g0_l5sf.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4g0_l5sf.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4g0_l5sf.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4g0_l5sf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(x -> x % 2 == 0, lst1)\n        return\
    \ \"YES\"\n    end\n    for i in 1:length(lst1)\n        for j in 1:length(lst2)\n\
    \            if lst1[i] % 2 != 0 && lst2[j] % 2 != 0\n                lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                if all(x -> x % 2 == 0, lst1)\n\
    \                    return \"YES\"\n                end\n            end\n  \
    \      end\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5eiip3k0.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5eiip3k0.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5eiip3k0.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp5eiip3k0.jl:36\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp5eiip3k0.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5eiip3k0.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp5eiip3k0.jl:37\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5eiip3k0.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5eiip3k0.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5eiip3k0.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi3qn_oqz.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpi3qn_oqz.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi3qn_oqz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpi3qn_oqz.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpi3qn_oqz.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi3qn_oqz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpi3qn_oqz.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpi3qn_oqz.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi3qn_oqz.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi3qn_oqz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn9269oxp.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpn9269oxp.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn9269oxp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn9269oxp.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpn9269oxp.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn9269oxp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn9269oxp.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpn9269oxp.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn9269oxp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn9269oxp.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpn9269oxp.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn9269oxp.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn9269oxp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    else\n        for i in 1:length(lst1)\n            if mod(lst1[i],\
    \ 2) != 0\n                for j in 1:length(lst2)\n                    if mod(lst2[j],\
    \ 2) == 0\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n     \
    \                   break\n                    end\n                end\n    \
    \        end\n        end\n        if all(mod.(lst1, 2) .== 0)\n            return\
    \ \"YES\"\n        else\n            return \"NO\"\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxapugbvx.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpxapugbvx.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpxapugbvx.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxapugbvx.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpxapugbvx.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpxapugbvx.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpxapugbvx.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxapugbvx.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpxapugbvx.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(x -> x % 2 == 0, lst1)\n        return\
    \ \"YES\"\n    end\n    for i in 1:length(lst1)\n        for j in 1:length(lst2)\n\
    \            if lst1[i] % 2 != 0 && lst2[j] % 2 != 0\n                lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                if all(x -> x % 2 == 0, lst1)\n\
    \                    return \"YES\"\n                end\n            end\n  \
    \      end\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv2px_q8_.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpv2px_q8_.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv2px_q8_.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpv2px_q8_.jl:36\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpv2px_q8_.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv2px_q8_.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpv2px_q8_.jl:37\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv2px_q8_.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv2px_q8_.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv2px_q8_.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdpvpq_8n.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdpvpq_8n.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdpvpq_8n.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdpvpq_8n.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpdpvpq_8n.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdpvpq_8n.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdpvpq_8n.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdpvpq_8n.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdpvpq_8n.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdpvpq_8n.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdpvpq_8n.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdpvpq_8n.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdpvpq_8n.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    elseif\
    \ all(mod.(lst1, 2) .== 0) && all(mod.(lst2, 2) .== 0)\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0frhr6t0.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0frhr6t0.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0frhr6t0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp0frhr6t0.jl:31\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0frhr6t0.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0frhr6t0.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0frhr6t0.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpyb80_fe7.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyb80_fe7.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyb80_fe7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyb80_fe7.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyb80_fe7.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyb80_fe7.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyb80_fe7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    elseif\
    \ any(mod.(lst1, 2) .== 0) && any(mod.(lst2, 2) .== 0)\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprksfdmex.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprksfdmex.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprksfdmex.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprksfdmex.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if length(lst1) != length(lst2)\n       \
    \ return \"NO\"\n    end\n    for i in 1:length(lst1)\n        if lst1[i] % 2\
    \ == 1\n            for j in 1:length(lst2)\n                if lst2[j] % 2 ==\
    \ 0\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n               \
    \     break\n                end\n            end\n        end\n    end\n    for\
    \ i in 1:length(lst1)\n        if lst1[i] % 2 == 1\n            return \"NO\"\n\
    \        end\n    end\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa2_iidh9.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpa2_iidh9.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2_iidh9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa2_iidh9.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpa2_iidh9.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2_iidh9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa2_iidh9.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa2_iidh9.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2_iidh9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpa2_iidh9.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa2_iidh9.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2_iidh9.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa2_iidh9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2gtmcxu5.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2gtmcxu5.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2gtmcxu5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2gtmcxu5.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2gtmcxu5.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2gtmcxu5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2gtmcxu5.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2gtmcxu5.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2gtmcxu5.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2gtmcxu5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp44hmdct9.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp44hmdct9.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp44hmdct9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp44hmdct9.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp44hmdct9.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp44hmdct9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp44hmdct9.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp44hmdct9.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp44hmdct9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp44hmdct9.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp44hmdct9.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp44hmdct9.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp44hmdct9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    elseif\
    \ all(mod.(lst1, 2) .== 0) && all(mod.(lst2, 2) .== 0)\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqo7ose_t.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqo7ose_t.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqo7ose_t.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqo7ose_t.jl:31\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqo7ose_t.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqo7ose_t.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqo7ose_t.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if length(lst1) != length(lst2)\n       \
    \ return \"NO\"\n    end\n    for i in 1:length(lst1)\n        if lst1[i] % 2\
    \ == 1\n            for j in 1:length(lst2)\n                if lst2[j] % 2 ==\
    \ 0\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n               \
    \     break\n                end\n            end\n        end\n    end\n    for\
    \ i in 1:length(lst1)\n        if lst1[i] % 2 == 1\n            return \"NO\"\n\
    \        end\n    end\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2zv9hf_v.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2zv9hf_v.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2zv9hf_v.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2zv9hf_v.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2zv9hf_v.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2zv9hf_v.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2zv9hf_v.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2zv9hf_v.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2zv9hf_v.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2zv9hf_v.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2zv9hf_v.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2zv9hf_v.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2zv9hf_v.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfdzwz0ia.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfdzwz0ia.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfdzwz0ia.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfdzwz0ia.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfdzwz0ia.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfdzwz0ia.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfdzwz0ia.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfdzwz0ia.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfdzwz0ia.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfdzwz0ia.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppzs75j30.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppzs75j30.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppzs75j30.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppzs75j30.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppzs75j30.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppzs75j30.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppzs75j30.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppzs75j30.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppzs75j30.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppzs75j30.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppzs75j30.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppzs75j30.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppzs75j30.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp02l0edww.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp02l0edww.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02l0edww.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp02l0edww.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp02l0edww.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02l0edww.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp02l0edww.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp02l0edww.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02l0edww.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp02l0edww.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp02l0edww.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02l0edww.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp02l0edww.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl8qx125f.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpl8qx125f.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl8qx125f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl8qx125f.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpl8qx125f.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl8qx125f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl8qx125f.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpl8qx125f.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl8qx125f.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl8qx125f.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp5vehb50m.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5vehb50m.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5vehb50m.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5vehb50m.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp5vehb50m.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5vehb50m.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5vehb50m.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5svjzdjt.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmp5svjzdjt.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5svjzdjt.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5svjzdjt.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp5svjzdjt.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmp5svjzdjt.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp5svjzdjt.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5svjzdjt.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp5svjzdjt.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2oj4vsy_.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmp2oj4vsy_.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp2oj4vsy_.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2oj4vsy_.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp2oj4vsy_.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmp2oj4vsy_.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp2oj4vsy_.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2oj4vsy_.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp2oj4vsy_.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(x -> x % 2 == 0, lst1)\n        return\
    \ \"YES\"\n    end\n    for i in 1:length(lst1)\n        if lst1[i] % 2 != 0\n\
    \            for j in 1:length(lst2)\n                if lst2[j] % 2 != 0\n  \
    \                  lst1[i], lst2[j] = lst2[j], lst1[i]\n                    if\
    \ all(x -> x % 2 == 0, lst1)\n                        return \"YES\"\n       \
    \             end\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n \
    \               end\n            end\n        end\n    end\n    return \"NO\"\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfnp6g2sz.jl:37\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfnp6g2sz.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfnp6g2sz.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpfnp6g2sz.jl:39\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpfnp6g2sz.jl:39 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfnp6g2sz.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpfnp6g2sz.jl:40\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfnp6g2sz.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfnp6g2sz.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfnp6g2sz.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if length(lst1) == length(lst2)\n       \
    \ for i in 1:length(lst1)\n            if lst1[i] % 2 == 1 && lst2[i] % 2 == 0\n\
    \                return \"YES\"\n            end\n        end\n    end\n    return\
    \ \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphoik65lr.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphoik65lr.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphoik65lr.jl:27\ntest set: Test\
    \ Failed at /tmp/tmphoik65lr.jl:32\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphoik65lr.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphoik65lr.jl:27\ntest set: Test\
    \ Failed at /tmp/tmphoik65lr.jl:34\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphoik65lr.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphoik65lr.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphoik65lr.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpabdidlju.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpabdidlju.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpabdidlju.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabdidlju.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpabdidlju.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpabdidlju.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabdidlju.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpabdidlju.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpabdidlju.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpabdidlju.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpabdidlju.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpabdidlju.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpabdidlju.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp93tnw5re.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmp93tnw5re.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmp93tnw5re.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp93tnw5re.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp93tnw5re.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmp93tnw5re.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp93tnw5re.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp93tnw5re.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp93tnw5re.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu51ihhw8.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpu51ihhw8.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu51ihhw8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpu51ihhw8.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpu51ihhw8.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu51ihhw8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpu51ihhw8.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpu51ihhw8.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu51ihhw8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpu51ihhw8.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpu51ihhw8.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu51ihhw8.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu51ihhw8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6zt46i8g.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6zt46i8g.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6zt46i8g.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6zt46i8g.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6zt46i8g.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6zt46i8g.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6zt46i8g.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6zt46i8g.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6zt46i8g.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6zt46i8g.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"\n    >>> exchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4])\n    \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"\
    NO\"\n    \"\"\"\n    # YOUR CODE HERE\n    for i in lst1\n        if i % 2 ==\
    \ 1\n            for j in lst2\n                if j % 2 == 0\n              \
    \      return \"YES\"\n                end\n            end\n        end\n   \
    \ end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpwhbx9d1v.jl:38\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwhbx9d1v.jl:38 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwhbx9d1v.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwhbx9d1v.jl:41\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwhbx9d1v.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwhbx9d1v.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwhbx9d1v.jl:43\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwhbx9d1v.jl:43 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwhbx9d1v.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwhbx9d1v.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv8_rhsm6.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpv8_rhsm6.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv8_rhsm6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpv8_rhsm6.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpv8_rhsm6.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv8_rhsm6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpv8_rhsm6.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv8_rhsm6.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv8_rhsm6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpv8_rhsm6.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv8_rhsm6.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv8_rhsm6.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv8_rhsm6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp73k3_z5_.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp73k3_z5_.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp73k3_z5_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp73k3_z5_.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp73k3_z5_.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp73k3_z5_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp73k3_z5_.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp73k3_z5_.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp73k3_z5_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp73k3_z5_.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp73k3_z5_.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp73k3_z5_.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp73k3_z5_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl81f486e.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpl81f486e.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl81f486e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl81f486e.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpl81f486e.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl81f486e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl81f486e.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpl81f486e.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl81f486e.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl81f486e.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    else\n        for i in 1:length(lst1)\n            for j in 1:length(lst2)\n\
    \                if mod(lst1[i], 2) == 1 && mod(lst2[j], 2) == 0\n           \
    \         lst1[i], lst2[j] = lst2[j], lst1[i]\n                    if all(mod.(lst1,\
    \ 2) .== 0)\n                        return \"YES\"\n                    end\n\
    \                end\n            end\n        end\n    end\n    return \"NO\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy1krtrim.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpy1krtrim.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpy1krtrim.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy1krtrim.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpy1krtrim.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmpy1krtrim.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpy1krtrim.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy1krtrim.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpy1krtrim.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Match"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp01jpmn2z.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp01jpmn2z.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01jpmn2z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp01jpmn2z.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp01jpmn2z.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01jpmn2z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp01jpmn2z.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp01jpmn2z.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01jpmn2z.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp01jpmn2z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmppo8god3k.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppo8god3k.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppo8god3k.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppo8god3k.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppo8god3k.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppo8god3k.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppo8god3k.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbdob_9xf.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbdob_9xf.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbdob_9xf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbdob_9xf.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbdob_9xf.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbdob_9xf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbdob_9xf.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbdob_9xf.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbdob_9xf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbdob_9xf.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbdob_9xf.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbdob_9xf.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbdob_9xf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmfkddtk7.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpmfkddtk7.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmfkddtk7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmfkddtk7.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmfkddtk7.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmfkddtk7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmfkddtk7.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmfkddtk7.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmfkddtk7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmfkddtk7.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmfkddtk7.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmfkddtk7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmfkddtk7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(mod.(lst1, 2) .== 0)\n        return\
    \ \"YES\"\n    elseif all(mod.(lst2, 2) .== 0)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0n300qs4.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0n300qs4.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0n300qs4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0n300qs4.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0n300qs4.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0n300qs4.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0n300qs4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi17xtj03.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpi17xtj03.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi17xtj03.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpi17xtj03.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpi17xtj03.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi17xtj03.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpi17xtj03.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpi17xtj03.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi17xtj03.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpi17xtj03.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpi17xtj03.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi17xtj03.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi17xtj03.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    if all(mod.(lst1, 2)\
    \ .== 0)\n        return \"YES\"\n    end\n    for i in 1:length(lst1)\n     \
    \   if mod(lst1[i], 2) != 0\n            for j in 1:length(lst2)\n           \
    \     if mod(lst2[j], 2) == 0\n                    lst1[i], lst2[j] = lst2[j],\
    \ lst1[i]\n                    break\n                end\n            end\n \
    \       end\n    end\n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n\
    \    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # YOUR CODE HERE\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_yf1278k.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_yf1278k.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_yf1278k.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_yf1278k.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_yf1278k.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_yf1278k.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_yf1278k.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_yf1278k.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_yf1278k.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_yf1278k.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpar3osqgf.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpar3osqgf.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpar3osqgf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpar3osqgf.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpar3osqgf.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpar3osqgf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpar3osqgf.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpar3osqgf.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpar3osqgf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpar3osqgf.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpar3osqgf.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpar3osqgf.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpar3osqgf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxt8o0c_d.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxt8o0c_d.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxt8o0c_d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxt8o0c_d.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpxt8o0c_d.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxt8o0c_d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxt8o0c_d.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxt8o0c_d.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxt8o0c_d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxt8o0c_d.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxt8o0c_d.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxt8o0c_d.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxt8o0c_d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpttaog7sp.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpttaog7sp.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpttaog7sp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpttaog7sp.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpttaog7sp.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpttaog7sp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpttaog7sp.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpttaog7sp.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpttaog7sp.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpttaog7sp.jl:19\n"
  exit_code: 1
  status: SyntaxError
