name: HumanEval_81_numerical_letter_grade
language: julia
results:
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvgqd487_.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnz30x0rg.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnz30x0rg.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnz30x0rg.jl:62\\ntest set: Test Failed at /tmp/tmpnz30x0rg.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnz30x0rg.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnz30x0rg.jl:62\\ntest set: Test Failed at /tmp/tmpnz30x0rg.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnz30x0rg.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnz30x0rg.jl:62\\ntest set: Test Failed at /tmp/tmpnz30x0rg.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnz30x0rg.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnz30x0rg.jl:62\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of numerical grades and returns\
    \ a vector of letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade\
    \ in grades\n        if grade >= 4.0\n            push!(letter_grades, \"A+\"\
    )\n        elseif grade >= 3.7\n            push!(letter_grades, \"A\")\n    \
    \    elseif grade >= 3.3\n            push!(letter_grades, \"A-\")\n        elseif\
    \ grade >= 3.0\n            push!(letter_grades, \"B+\")\n        elseif grade\
    \ >= 2.7\n            push!(letter_grades, \"B\")\n        elseif grade >= 2.3\n\
    \            push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n     \
    \       push!(letter_grades, \"C+\")\n        elseif grade >= 1.7\n          \
    \  push!(letter_grades, \"C\")\n        elseif grade >= 1.3\n            push!(letter_grades,\
    \ \"C-\")\n        elseif grade >= 1.0\n            push!(letter_grades, \"D+\"\
    )\n        elseif grade >= 0.7\n            push!(letter_grades, \"D\")\n    \
    \    elseif grade >= 0.0\n            push!(letter_grades, \"D-\")\n        else\n\
    \            push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1s6tofs4.jl:66\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp1s6tofs4.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1s6tofs4.jl:65\\ntest set: Test Failed at /tmp/tmp1s6tofs4.jl:69\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp1s6tofs4.jl:69\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1s6tofs4.jl:65\\ntest set: Test Failed at /tmp/tmp1s6tofs4.jl:70\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp1s6tofs4.jl:70\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1s6tofs4.jl:65\\ntest set: Test Failed at /tmp/tmp1s6tofs4.jl:71\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp1s6tofs4.jl:71\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1s6tofs4.jl:65\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp3nquyepp.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp3nquyepp.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3nquyepp.jl:62\ntest set: Test Failed at /tmp/tmp3nquyepp.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3nquyepp.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3nquyepp.jl:62\ntest set: Test Failed at /tmp/tmp3nquyepp.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp3nquyepp.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3nquyepp.jl:62\ntest set: Test Failed at /tmp/tmp3nquyepp.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp3nquyepp.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3nquyepp.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3nquyepp.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp2k7m25ln.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp2k7m25ln.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2k7m25ln.jl:62\ntest set: Test Failed at /tmp/tmp2k7m25ln.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2k7m25ln.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2k7m25ln.jl:62\ntest set: Test Failed at /tmp/tmp2k7m25ln.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp2k7m25ln.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2k7m25ln.jl:62\ntest set: Test Failed at /tmp/tmp2k7m25ln.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp2k7m25ln.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2k7m25ln.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2k7m25ln.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Takes a vector of grades and returns a vector of letter grades.\n\
    \    \"\"\"\n    letter_grades = []\n    for grade in grades\n        if grade\
    \ >= 4.0\n            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n\
    \            push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n      \
    \      push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n           \
    \ push!(letter_grades, \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades,\
    \ \"B\")\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\"\
    )\n        elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n   \
    \     elseif grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif\
    \ grade >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade\
    \ >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n\
    \            push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n      \
    \      push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpx7mn48h_.jl:66\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpx7mn48h_.jl:66\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx7mn48h_.jl:65\ntest set: Test Failed at /tmp/tmpx7mn48h_.jl:69\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpx7mn48h_.jl:69\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx7mn48h_.jl:65\ntest set: Test Failed at /tmp/tmpx7mn48h_.jl:70\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpx7mn48h_.jl:70\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx7mn48h_.jl:65\ntest set: Test Failed at /tmp/tmpx7mn48h_.jl:71\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpx7mn48h_.jl:71\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx7mn48h_.jl:65\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx7mn48h_.jl:63\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Write your code here\n    return [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t\
    @test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"\
    ])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7])\
    \ == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8l63ilpr.jl:35\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n   Evaluated: [\"A+\", \"B\", \"C-\", \"C\", \"A-\"] == [\"D+\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp8l63ilpr.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8l63ilpr.jl:33\ntest set: Test Failed at /tmp/tmp8l63ilpr.jl:36\n\
    \  Expression: candidate([0.5]) == [\"D-\"]\n   Evaluated: [\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\"] == [\"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp8l63ilpr.jl:36\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8l63ilpr.jl:33\ntest set: Test Failed at /tmp/tmp8l63ilpr.jl:37\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"] == [\"E\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp8l63ilpr.jl:37\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8l63ilpr.jl:33\ntest set: Test Failed at /tmp/tmp8l63ilpr.jl:38\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"A+\", \"B\", \"C-\", \"C\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp8l63ilpr.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8l63ilpr.jl:33\ntest set: Test Failed at /tmp/tmp8l63ilpr.jl:39\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8l63ilpr.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8l63ilpr.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8l63ilpr.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfcn09ua7.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpfcn09ua7.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfcn09ua7.jl:62\ntest set: Test Failed at /tmp/tmpfcn09ua7.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfcn09ua7.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfcn09ua7.jl:62\ntest set: Test Failed at /tmp/tmpfcn09ua7.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfcn09ua7.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfcn09ua7.jl:62\ntest set: Test Failed at /tmp/tmpfcn09ua7.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfcn09ua7.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfcn09ua7.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfcn09ua7.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprsotce9p.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmprsotce9p.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprsotce9p.jl:62\ntest set: Test Failed at /tmp/tmprsotce9p.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprsotce9p.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprsotce9p.jl:62\ntest set: Test Failed at /tmp/tmprsotce9p.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprsotce9p.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprsotce9p.jl:62\ntest set: Test Failed at /tmp/tmprsotce9p.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprsotce9p.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprsotce9p.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprsotce9p.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbvyt6hnf.jl:33\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpbvyt6hnf.jl:27\n   [2] top-level scope at /tmp/tmpbvyt6hnf.jl:33\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbvyt6hnf.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpbvyt6hnf.jl:34\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpbvyt6hnf.jl:27\n   [2] top-level scope at /tmp/tmpbvyt6hnf.jl:34\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbvyt6hnf.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpbvyt6hnf.jl:35\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpbvyt6hnf.jl:27\n   [2] top-level scope at /tmp/tmpbvyt6hnf.jl:35\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbvyt6hnf.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpbvyt6hnf.jl:36\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpbvyt6hnf.jl:27\n   [2] top-level scope at /tmp/tmpbvyt6hnf.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbvyt6hnf.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpbvyt6hnf.jl:37\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\n\
    \  Closest candidates are:\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpbvyt6hnf.jl:27\n   [2] top-level scope at /tmp/tmpbvyt6hnf.jl:37\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbvyt6hnf.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpbvyt6hnf.jl:38\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\n  Closest candidates are:\n  \
    \  convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpbvyt6hnf.jl:27\n   [2] top-level scope at /tmp/tmpbvyt6hnf.jl:38\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbvyt6hnf.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbvyt6hnf.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp7nvzcmde.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpzxgzx5zs.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpzxgzx5zs.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzxgzx5zs.jl:62\\ntest set: Test Failed at /tmp/tmpzxgzx5zs.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpzxgzx5zs.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzxgzx5zs.jl:62\\ntest set: Test Failed at /tmp/tmpzxgzx5zs.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpzxgzx5zs.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzxgzx5zs.jl:62\\ntest set: Test Failed at /tmp/tmpzxgzx5zs.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpzxgzx5zs.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzxgzx5zs.jl:62\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpjbhwftjw.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpjbhwftjw.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjbhwftjw.jl:62\ntest set: Test Failed at /tmp/tmpjbhwftjw.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjbhwftjw.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjbhwftjw.jl:62\ntest set: Test Failed at /tmp/tmpjbhwftjw.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpjbhwftjw.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjbhwftjw.jl:62\ntest set: Test Failed at /tmp/tmpjbhwftjw.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpjbhwftjw.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjbhwftjw.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjbhwftjw.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grade = []\n    for i in grades\n        if i == 4.0\n        \
    \    push!(letter_grade, \"A+\")\n        elseif i > 3.7\n            push!(letter_grade,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grade, \"A-\")\n  \
    \      elseif i > 3.0\n            push!(letter_grade, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grade, \"B\")\n        elseif i > 2.3\n  \
    \          push!(letter_grade, \"B-\")\n        elseif i > 2.0\n            push!(letter_grade,\
    \ \"C+\")\n        elseif i > 1.7\n            push!(letter_grade, \"C\")\n  \
    \      elseif i > 1.3\n            push!(letter_grade, \"C-\")\n        elseif\
    \ i > 1.0\n            push!(letter_grade, \"D+\")\n        elseif i > 0.7\n \
    \           push!(letter_grade, \"D\")\n        elseif i > 0.0\n            push!(letter_grade,\
    \ \"D-\")\n        else\n            push!(letter_grade, \"E\")\n        end\n\
    \    end\n    return letter_grade\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letters = []\n    for grade in grades\n        if grade >= 4.0\n     \
    \       push!(letters, \"A+\")\n        elseif grade >= 3.7\n            push!(letters,\
    \ \"A\")\n        elseif grade >= 3.3\n            push!(letters, \"A-\")\n  \
    \      elseif grade >= 3.0\n            push!(letters, \"B+\")\n        elseif\
    \ grade >= 2.7\n            push!(letters, \"B\")\n        elseif grade >= 2.3\n\
    \            push!(letters, \"B-\")\n        elseif grade >= 2.0\n           \
    \ push!(letters, \"C+\")\n        elseif grade >= 1.7\n            push!(letters,\
    \ \"C\")\n        elseif grade >= 1.3\n            push!(letters, \"C-\")\n  \
    \      elseif grade >= 1.0\n            push!(letters, \"D+\")\n        elseif\
    \ grade >= 0.7\n            push!(letters, \"D\")\n        elseif grade >= 0.0\n\
    \            push!(letters, \"D-\")\n        else\n            push!(letters,\
    \ \"E\")\n        end\n    end\n    return letters\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpft6qa6xg.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpft6qa6xg.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpft6qa6xg.jl:62\ntest set: Test Failed at /tmp/tmpft6qa6xg.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpft6qa6xg.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpft6qa6xg.jl:62\ntest set: Test Failed at /tmp/tmpft6qa6xg.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpft6qa6xg.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpft6qa6xg.jl:62\ntest set: Test Failed at /tmp/tmpft6qa6xg.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpft6qa6xg.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpft6qa6xg.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpft6qa6xg.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Your code here\n    return letter_grades\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmph9c3v3o0.jl:34\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmph9c3v3o0.jl:27\n   [2]\
    \ top-level scope at /tmp/tmph9c3v3o0.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9c3v3o0.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmph9c3v3o0.jl:35\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmph9c3v3o0.jl:27\n   [2]\
    \ top-level scope at /tmp/tmph9c3v3o0.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9c3v3o0.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmph9c3v3o0.jl:36\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmph9c3v3o0.jl:27\n   [2]\
    \ top-level scope at /tmp/tmph9c3v3o0.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9c3v3o0.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmph9c3v3o0.jl:37\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmph9c3v3o0.jl:27\n   [2]\
    \ top-level scope at /tmp/tmph9c3v3o0.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9c3v3o0.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmph9c3v3o0.jl:38\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  UndefVarError:\
    \ letter_grades not defined\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1})\
    \ at /tmp/tmph9c3v3o0.jl:27\n   [2] top-level scope at /tmp/tmph9c3v3o0.jl:38\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9c3v3o0.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmph9c3v3o0.jl:39\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n\
    \   [1] numerical_letter_grade(::Array{Float64,1}) at /tmp/tmph9c3v3o0.jl:27\n\
    \   [2] top-level scope at /tmp/tmph9c3v3o0.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9c3v3o0.jl:33\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9c3v3o0.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letters = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(grades_letters, \"A+\")\n        elseif grade > 3.7\n     \
    \       push!(grades_letters, \"A\")\n        elseif grade > 3.3\n           \
    \ push!(grades_letters, \"A-\")\n        elseif grade > 3.0\n            push!(grades_letters,\
    \ \"B+\")\n        elseif grade > 2.7\n            push!(grades_letters, \"B\"\
    )\n        elseif grade > 2.3\n            push!(grades_letters, \"B-\")\n   \
    \     elseif grade > 2.0\n            push!(grades_letters, \"C+\")\n        elseif\
    \ grade > 1.7\n            push!(grades_letters, \"C\")\n        elseif grade\
    \ > 1.3\n            push!(grades_letters, \"C-\")\n        elseif grade > 1.0\n\
    \            push!(grades_letters, \"D+\")\n        elseif grade > 0.7\n     \
    \       push!(grades_letters, \"D\")\n        elseif grade > 0.0\n           \
    \ push!(grades_letters, \"D-\")\n        elseif grade == 0.0\n            push!(grades_letters,\
    \ \"E\")\n        end\n    end\n    return grades_letters\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp_zrspnut.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp_zrspnut.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_zrspnut.jl:62\ntest set: Test Failed at /tmp/tmp_zrspnut.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_zrspnut.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_zrspnut.jl:62\ntest set: Test Failed at /tmp/tmp_zrspnut.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp_zrspnut.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_zrspnut.jl:62\ntest set: Test Failed at /tmp/tmp_zrspnut.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp_zrspnut.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_zrspnut.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_zrspnut.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmplvbbij3b.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmplvbbij3b.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplvbbij3b.jl:62\ntest set: Test Failed at /tmp/tmplvbbij3b.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplvbbij3b.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplvbbij3b.jl:62\ntest set: Test Failed at /tmp/tmplvbbij3b.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmplvbbij3b.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplvbbij3b.jl:62\ntest set: Test Failed at /tmp/tmplvbbij3b.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmplvbbij3b.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplvbbij3b.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplvbbij3b.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpb74ns4pl.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpb74ns4pl.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb74ns4pl.jl:62\ntest set: Test Failed at /tmp/tmpb74ns4pl.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpb74ns4pl.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb74ns4pl.jl:62\ntest set: Test Failed at /tmp/tmpb74ns4pl.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpb74ns4pl.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb74ns4pl.jl:62\ntest set: Test Failed at /tmp/tmpb74ns4pl.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpb74ns4pl.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb74ns4pl.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb74ns4pl.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of numerical grades and returns\
    \ a vector of \n    letter grades.\n    \"\"\"\n    letter_grades = []\n    for\
    \ grade in grades\n        if grade >= 4.0\n            push!(letter_grades, \"\
    A+\")\n        elseif grade >= 3.7\n            push!(letter_grades, \"A\")\n\
    \        elseif grade >= 3.3\n            push!(letter_grades, \"A-\")\n     \
    \   elseif grade >= 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ grade >= 2.7\n            push!(letter_grades, \"B\")\n        elseif grade\
    \ >= 2.3\n            push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n\
    \            push!(letter_grades, \"C+\")\n        elseif grade >= 1.7\n     \
    \       push!(letter_grades, \"C\")\n        elseif grade >= 1.3\n           \
    \ push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n            push!(letter_grades,\
    \ \"D+\")\n        elseif grade >= 0.7\n            push!(letter_grades, \"D\"\
    )\n        elseif grade >= 0.0\n            push!(letter_grades, \"D-\")\n   \
    \     else\n            push!(letter_grades, \"E\")\n        end\n    end\n  \
    \  return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpznu4eqiz.jl:67\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpznu4eqiz.jl:67\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpznu4eqiz.jl:66\ntest set: Test Failed at /tmp/tmpznu4eqiz.jl:70\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpznu4eqiz.jl:70\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpznu4eqiz.jl:66\ntest set: Test Failed at /tmp/tmpznu4eqiz.jl:71\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpznu4eqiz.jl:71\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpznu4eqiz.jl:66\ntest set: Test Failed at /tmp/tmpznu4eqiz.jl:72\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpznu4eqiz.jl:72\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpznu4eqiz.jl:66\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpznu4eqiz.jl:64\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmph9gij_8o.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmph9gij_8o.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph9gij_8o.jl:62\ntest set: Test Failed at /tmp/tmph9gij_8o.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph9gij_8o.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph9gij_8o.jl:62\ntest set: Test Failed at /tmp/tmph9gij_8o.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmph9gij_8o.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph9gij_8o.jl:62\ntest set: Test Failed at /tmp/tmph9gij_8o.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmph9gij_8o.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph9gij_8o.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9gij_8o.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of numerical grades and returns\
    \ a vector of \n    letter grades.\n    \"\"\"\n    letter_grades = []\n    for\
    \ grade in grades\n        if grade >= 4.0\n            push!(letter_grades, \"\
    A+\")\n        elseif grade >= 3.7\n            push!(letter_grades, \"A\")\n\
    \        elseif grade >= 3.3\n            push!(letter_grades, \"A-\")\n     \
    \   elseif grade >= 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ grade >= 2.7\n            push!(letter_grades, \"B\")\n        elseif grade\
    \ >= 2.3\n            push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n\
    \            push!(letter_grades, \"C+\")\n        elseif grade >= 1.7\n     \
    \       push!(letter_grades, \"C\")\n        elseif grade >= 1.3\n           \
    \ push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n            push!(letter_grades,\
    \ \"D+\")\n        elseif grade >= 0.7\n            push!(letter_grades, \"D\"\
    )\n        elseif grade >= 0.0\n            push!(letter_grades, \"D-\")\n   \
    \     else\n            push!(letter_grades, \"E\")\n        end\n    end\n  \
    \  return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2hv76u8g.jl:67\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp2hv76u8g.jl:67\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2hv76u8g.jl:66\ntest set: Test Failed at /tmp/tmp2hv76u8g.jl:70\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2hv76u8g.jl:70\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2hv76u8g.jl:66\ntest set: Test Failed at /tmp/tmp2hv76u8g.jl:71\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp2hv76u8g.jl:71\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2hv76u8g.jl:66\ntest set: Test Failed at /tmp/tmp2hv76u8g.jl:72\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp2hv76u8g.jl:72\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2hv76u8g.jl:66\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2hv76u8g.jl:64\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i >= 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i >= 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i >= 3.3\n            push!(letter_grades, \"A-\")\n\
    \        elseif i >= 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i >= 2.7\n            push!(letter_grades, \"B\")\n        elseif i >= 2.3\n\
    \            push!(letter_grades, \"B-\")\n        elseif i >= 2.0\n         \
    \   push!(letter_grades, \"C+\")\n        elseif i >= 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i >= 1.3\n            push!(letter_grades, \"C-\")\n\
    \        elseif i >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i >= 0.7\n            push!(letter_grades, \"D\")\n        elseif i >= 0.0\n\
    \            push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpehpnwifi.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpehpnwifi.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpehpnwifi.jl:62\ntest set: Test Failed at /tmp/tmpehpnwifi.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpehpnwifi.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpehpnwifi.jl:62\ntest set: Test Failed at /tmp/tmpehpnwifi.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpehpnwifi.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpehpnwifi.jl:62\ntest set: Test Failed at /tmp/tmpehpnwifi.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpehpnwifi.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpehpnwifi.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpehpnwifi.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a list of numerical grades and returns\
    \ a list of letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade\
    \ in grades\n        if grade >= 4.0\n            push!(letter_grades, \"A+\"\
    )\n        elseif grade >= 3.7\n            push!(letter_grades, \"A\")\n    \
    \    elseif grade >= 3.3\n            push!(letter_grades, \"A-\")\n        elseif\
    \ grade >= 3.0\n            push!(letter_grades, \"B+\")\n        elseif grade\
    \ >= 2.7\n            push!(letter_grades, \"B\")\n        elseif grade >= 2.3\n\
    \            push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n     \
    \       push!(letter_grades, \"C+\")\n        elseif grade >= 1.7\n          \
    \  push!(letter_grades, \"C\")\n        elseif grade >= 1.3\n            push!(letter_grades,\
    \ \"C-\")\n        elseif grade >= 1.0\n            push!(letter_grades, \"D+\"\
    )\n        elseif grade >= 0.7\n            push!(letter_grades, \"D\")\n    \
    \    elseif grade >= 0.0\n            push!(letter_grades, \"D-\")\n        else\n\
    \            push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpsqfej17y.jl:66\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpsqfej17y.jl:66\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsqfej17y.jl:65\ntest set: Test Failed at /tmp/tmpsqfej17y.jl:69\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsqfej17y.jl:69\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsqfej17y.jl:65\ntest set: Test Failed at /tmp/tmpsqfej17y.jl:70\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpsqfej17y.jl:70\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsqfej17y.jl:65\ntest set: Test Failed at /tmp/tmpsqfej17y.jl:71\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpsqfej17y.jl:71\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsqfej17y.jl:65\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsqfej17y.jl:63\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letters = []\n    for i in grades\n        if i == 4.0\n      \
    \      push!(grades_letters, \"A+\")\n        elseif i > 3.7\n            push!(grades_letters,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letters, \"A-\")\n\
    \        elseif i > 3.0\n            push!(grades_letters, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letters, \"B\")\n        elseif i > 2.3\n\
    \            push!(grades_letters, \"B-\")\n        elseif i > 2.0\n         \
    \   push!(grades_letters, \"C+\")\n        elseif i > 1.7\n            push!(grades_letters,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letters, \"C-\")\n\
    \        elseif i > 1.0\n            push!(grades_letters, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letters, \"D\")\n        elseif i > 0.0\n\
    \            push!(grades_letters, \"D-\")\n        elseif i == 0.0\n        \
    \    push!(grades_letters, \"E\")\n        end\n    end\n    return grades_letters\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpooyfsjff.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpooyfsjff.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpooyfsjff.jl:62\ntest set: Test Failed at /tmp/tmpooyfsjff.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpooyfsjff.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpooyfsjff.jl:62\ntest set: Test Failed at /tmp/tmpooyfsjff.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpooyfsjff.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpooyfsjff.jl:62\ntest set: Test Failed at /tmp/tmpooyfsjff.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpooyfsjff.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpooyfsjff.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpooyfsjff.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmphbzef5f4.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmphbzef5f4.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphbzef5f4.jl:62\\ntest set: Test Failed at /tmp/tmphbzef5f4.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmphbzef5f4.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphbzef5f4.jl:62\\ntest set: Test Failed at /tmp/tmphbzef5f4.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmphbzef5f4.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphbzef5f4.jl:62\\ntest set: Test Failed at /tmp/tmphbzef5f4.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmphbzef5f4.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphbzef5f4.jl:62\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5iqf9k0r.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5iqf9k0r.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5iqf9k0r.jl:62\\ntest set: Test Failed at /tmp/tmp5iqf9k0r.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5iqf9k0r.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5iqf9k0r.jl:62\\ntest set: Test Failed at /tmp/tmp5iqf9k0r.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5iqf9k0r.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5iqf9k0r.jl:62\\ntest set: Test Failed at /tmp/tmp5iqf9k0r.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5iqf9k0r.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5iqf9k0r.jl:62\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpwjomj8z5.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpwjomj8z5.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwjomj8z5.jl:62\ntest set: Test Failed at /tmp/tmpwjomj8z5.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwjomj8z5.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwjomj8z5.jl:62\ntest set: Test Failed at /tmp/tmpwjomj8z5.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpwjomj8z5.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwjomj8z5.jl:62\ntest set: Test Failed at /tmp/tmpwjomj8z5.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpwjomj8z5.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwjomj8z5.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwjomj8z5.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(grades_letter, \"A+\")\n        elseif i > 3.7\n            push!(grades_letter,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letter, \"A-\")\n \
    \       elseif i > 3.0\n            push!(grades_letter, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letter, \"B\")\n        elseif i > 2.3\n \
    \           push!(grades_letter, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(grades_letter, \"C+\")\n        elseif i > 1.7\n            push!(grades_letter,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letter, \"C-\")\n \
    \       elseif i > 1.0\n            push!(grades_letter, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letter, \"D\")\n        elseif i > 0.0\n \
    \           push!(grades_letter, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(grades_letter, \"E\")\n        end\n    end\n    return grades_letter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades\n\
    \        if grade == 4.0\n            push!(letter_grades, \"A+\")\n        elseif\
    \ grade > 3.7\n            push!(letter_grades, \"A\")\n        elseif grade >\
    \ 3.3\n            push!(letter_grades, \"A-\")\n        elseif grade > 3.0\n\
    \            push!(letter_grades, \"B+\")\n        elseif grade > 2.7\n      \
    \      push!(letter_grades, \"B\")\n        elseif grade > 2.3\n            push!(letter_grades,\
    \ \"B-\")\n        elseif grade > 2.0\n            push!(letter_grades, \"C+\"\
    )\n        elseif grade > 1.7\n            push!(letter_grades, \"C\")\n     \
    \   elseif grade > 1.3\n            push!(letter_grades, \"C-\")\n        elseif\
    \ grade > 1.0\n            push!(letter_grades, \"D+\")\n        elseif grade\
    \ > 0.7\n            push!(letter_grades, \"D\")\n        elseif grade > 0.0\n\
    \            push!(letter_grades, \"D-\")\n        elseif grade == 0.0\n     \
    \       push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letters = []\n    for i in grades\n        if i == 4.0\n      \
    \      push!(grades_letters, \"A+\")\n        elseif i > 3.7\n            push!(grades_letters,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letters, \"A-\")\n\
    \        elseif i > 3.0\n            push!(grades_letters, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letters, \"B\")\n        elseif i > 2.3\n\
    \            push!(grades_letters, \"B-\")\n        elseif i > 2.0\n         \
    \   push!(grades_letters, \"C+\")\n        elseif i > 1.7\n            push!(grades_letters,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letters, \"C-\")\n\
    \        elseif i > 1.0\n            push!(grades_letters, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letters, \"D\")\n        elseif i > 0.0\n\
    \            push!(grades_letters, \"D-\")\n        elseif i == 0.0\n        \
    \    push!(grades_letters, \"E\")\n        end\n    end\n    return grades_letters\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpm1c0dll6.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm1c0dll6.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm1c0dll6.jl:62\\ntest set: Test Failed at /tmp/tmpm1c0dll6.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm1c0dll6.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm1c0dll6.jl:62\\ntest set: Test Failed at /tmp/tmpm1c0dll6.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm1c0dll6.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm1c0dll6.jl:62\\ntest set: Test Failed at /tmp/tmpm1c0dll6.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm1c0dll6.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm1c0dll6.jl:62\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     4      6\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpm1c0dll6.jl:60\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letters = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(grades_letters, \"A+\")\n        elseif grade > 3.7\n     \
    \       push!(grades_letters, \"A\")\n        elseif grade > 3.3\n           \
    \ push!(grades_letters, \"A-\")\n        elseif grade > 3.0\n            push!(grades_letters,\
    \ \"B+\")\n        elseif grade > 2.7\n            push!(grades_letters, \"B\"\
    )\n        elseif grade > 2.3\n            push!(grades_letters, \"B-\")\n   \
    \     elseif grade > 2.0\n            push!(grades_letters, \"C+\")\n        elseif\
    \ grade > 1.7\n            push!(grades_letters, \"C\")\n        elseif grade\
    \ > 1.3\n            push!(grades_letters, \"C-\")\n        elseif grade > 1.0\n\
    \            push!(grades_letters, \"D+\")\n        elseif grade > 0.7\n     \
    \       push!(grades_letters, \"D\")\n        elseif grade > 0.0\n           \
    \ push!(grades_letters, \"D-\")\n        elseif grade == 0.0\n            push!(grades_letters,\
    \ \"E\")\n        end\n    end\n    return grades_letters\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp476ggb92.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp476ggb92.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp476ggb92.jl:62\\ntest set: Test Failed at /tmp/tmp476ggb92.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp476ggb92.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp476ggb92.jl:62\\ntest set: Test Failed at /tmp/tmp476ggb92.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp476ggb92.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp476ggb92.jl:62\\ntest set: Test Failed at /tmp/tmp476ggb92.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp476ggb92.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp476ggb92.jl:62\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     4      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        elseif grade == 0.0\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpnv9fqft2.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpnv9fqft2.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnv9fqft2.jl:62\ntest set: Test Failed at /tmp/tmpnv9fqft2.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnv9fqft2.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnv9fqft2.jl:62\ntest set: Test Failed at /tmp/tmpnv9fqft2.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpnv9fqft2.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnv9fqft2.jl:62\ntest set: Test Failed at /tmp/tmpnv9fqft2.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpnv9fqft2.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnv9fqft2.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnv9fqft2.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmppgias3xv.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmppgias3xv.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppgias3xv.jl:62\ntest set: Test Failed at /tmp/tmppgias3xv.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppgias3xv.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppgias3xv.jl:62\ntest set: Test Failed at /tmp/tmppgias3xv.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmppgias3xv.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppgias3xv.jl:62\ntest set: Test Failed at /tmp/tmppgias3xv.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmppgias3xv.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppgias3xv.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppgias3xv.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpkayabtdt.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkayabtdt.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkayabtdt.jl:62\\ntest set: Test Failed at /tmp/tmpkayabtdt.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkayabtdt.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkayabtdt.jl:62\\ntest set: Test Failed at /tmp/tmpkayabtdt.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkayabtdt.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkayabtdt.jl:62\\ntest set: Test Failed at /tmp/tmpkayabtdt.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkayabtdt.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkayabtdt.jl:62\\nTest Summary: | Pass  Fail \
    \ '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7qw6dez8.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"]\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp7qw6dez8.jl:27\\n   [2] top-level scope at /tmp/tmp7qw6dez8.jl:33\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp7qw6dez8.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp7qw6dez8.jl:34\\n  Test threw exception\\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp7qw6dez8.jl:27\\n   [2] top-level scope at /tmp/tmp7qw6dez8.jl:34\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp7qw6dez8.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp7qw6dez8.jl:35\\n  Test threw exception\\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp7qw6dez8.jl:27\\n   [2] top-level scope at /tmp/tmp7qw6dez8.jl:35\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp7qw6dez8.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp7qw6dez8.jl:36\\n  Test threw exception\\n  Expression: candidate([0.0])\
    \ == [\"E\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp7qw6dez8.jl:27\\n   [2] top-level scope at /tmp/tmp7qw6dez8.jl:36\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp7qw6dez8.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp7qw6dez8.jl:37\\n  Test threw exception\\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\\\
    n  Closest candidates are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp7qw6dez8.jl:27\\n   [2] top-level scope at /tmp/tmp7qw6dez8.jl:37\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp7qw6dez8.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp7qw6dez8.jl:38\\n  Test threw exception\\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\\n  Closest candidates are:\\n\
    \    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp7qw6dez8.jl:27\\n   [2] top-level scope at /tmp/tmp7qw6dez8.jl:38\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp7qw6dez8.jl:32\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     6      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpvuw_4h65.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpvuw_4h65.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvuw_4h65.jl:62\ntest set: Test Failed at /tmp/tmpvuw_4h65.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvuw_4h65.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvuw_4h65.jl:62\ntest set: Test Failed at /tmp/tmpvuw_4h65.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvuw_4h65.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvuw_4h65.jl:62\ntest set: Test Failed at /tmp/tmpvuw_4h65.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvuw_4h65.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvuw_4h65.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvuw_4h65.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyq2znz1m.jl:33\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpyq2znz1m.jl:27\n   [2] top-level scope at /tmp/tmpyq2znz1m.jl:33\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyq2znz1m.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpyq2znz1m.jl:34\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpyq2znz1m.jl:27\n   [2] top-level scope at /tmp/tmpyq2znz1m.jl:34\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyq2znz1m.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpyq2znz1m.jl:35\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpyq2znz1m.jl:27\n   [2] top-level scope at /tmp/tmpyq2znz1m.jl:35\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyq2znz1m.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpyq2znz1m.jl:36\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpyq2znz1m.jl:27\n   [2] top-level scope at /tmp/tmpyq2znz1m.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyq2znz1m.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpyq2znz1m.jl:37\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\n\
    \  Closest candidates are:\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpyq2znz1m.jl:27\n   [2] top-level scope at /tmp/tmpyq2znz1m.jl:37\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyq2znz1m.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpyq2znz1m.jl:38\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\n  Closest candidates are:\n  \
    \  convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpyq2znz1m.jl:27\n   [2] top-level scope at /tmp/tmpyq2znz1m.jl:38\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyq2znz1m.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyq2znz1m.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp6ibq9r2y.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp6ibq9r2y.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6ibq9r2y.jl:62\ntest set: Test Failed at /tmp/tmp6ibq9r2y.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6ibq9r2y.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6ibq9r2y.jl:62\ntest set: Test Failed at /tmp/tmp6ibq9r2y.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp6ibq9r2y.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6ibq9r2y.jl:62\ntest set: Test Failed at /tmp/tmp6ibq9r2y.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp6ibq9r2y.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6ibq9r2y.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ibq9r2y.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpkpk0j48d.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpkpk0j48d.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkpk0j48d.jl:62\ntest set: Test Failed at /tmp/tmpkpk0j48d.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkpk0j48d.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkpk0j48d.jl:62\ntest set: Test Failed at /tmp/tmpkpk0j48d.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpkpk0j48d.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkpk0j48d.jl:62\ntest set: Test Failed at /tmp/tmpkpk0j48d.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpkpk0j48d.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkpk0j48d.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkpk0j48d.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i >= 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i >= 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i >= 3.3\n            push!(letter_grades, \"A-\")\n\
    \        elseif i >= 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i >= 2.7\n            push!(letter_grades, \"B\")\n        elseif i >= 2.3\n\
    \            push!(letter_grades, \"B-\")\n        elseif i >= 2.0\n         \
    \   push!(letter_grades, \"C+\")\n        elseif i >= 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i >= 1.3\n            push!(letter_grades, \"C-\")\n\
    \        elseif i >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i >= 0.7\n            push!(letter_grades, \"D\")\n        elseif i >= 0.0\n\
    \            push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprvwisg9r.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmprvwisg9r.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvwisg9r.jl:62\ntest set: Test Failed at /tmp/tmprvwisg9r.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprvwisg9r.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvwisg9r.jl:62\ntest set: Test Failed at /tmp/tmprvwisg9r.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprvwisg9r.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvwisg9r.jl:62\ntest set: Test Failed at /tmp/tmprvwisg9r.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprvwisg9r.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvwisg9r.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprvwisg9r.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp1y8dfl4_.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp1y8dfl4_.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1y8dfl4_.jl:62\ntest set: Test Failed at /tmp/tmp1y8dfl4_.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1y8dfl4_.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1y8dfl4_.jl:62\ntest set: Test Failed at /tmp/tmp1y8dfl4_.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp1y8dfl4_.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1y8dfl4_.jl:62\ntest set: Test Failed at /tmp/tmp1y8dfl4_.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp1y8dfl4_.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1y8dfl4_.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1y8dfl4_.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp3fm_s_8v.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp3fm_s_8v.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fm_s_8v.jl:62\ntest set: Test Failed at /tmp/tmp3fm_s_8v.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3fm_s_8v.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fm_s_8v.jl:62\ntest set: Test Failed at /tmp/tmp3fm_s_8v.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp3fm_s_8v.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fm_s_8v.jl:62\ntest set: Test Failed at /tmp/tmp3fm_s_8v.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp3fm_s_8v.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fm_s_8v.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3fm_s_8v.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp61xfhoe7.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"]\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp61xfhoe7.jl:27\\n   [2] top-level scope at /tmp/tmp61xfhoe7.jl:33\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp61xfhoe7.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp61xfhoe7.jl:34\\n  Test threw exception\\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp61xfhoe7.jl:27\\n   [2] top-level scope at /tmp/tmp61xfhoe7.jl:34\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp61xfhoe7.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp61xfhoe7.jl:35\\n  Test threw exception\\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp61xfhoe7.jl:27\\n   [2] top-level scope at /tmp/tmp61xfhoe7.jl:35\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp61xfhoe7.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp61xfhoe7.jl:36\\n  Test threw exception\\n  Expression: candidate([0.0])\
    \ == [\"E\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp61xfhoe7.jl:27\\n   [2] top-level scope at /tmp/tmp61xfhoe7.jl:36\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp61xfhoe7.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp61xfhoe7.jl:37\\n  Test threw exception\\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\\\
    n  Closest candidates are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp61xfhoe7.jl:27\\n   [2] top-level scope at /tmp/tmp61xfhoe7.jl:37\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp61xfhoe7.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp61xfhoe7.jl:38\\n  Test threw exception\\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\\n  Closest candidates are:\\n\
    \    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp61xfhoe7.jl:27\\n   [2] top-level scope at /tmp/tmp61xfhoe7.jl:38\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp61xfhoe7.jl:32\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letters = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(grades_letters, \"A+\")\n        elseif grade > 3.7\n     \
    \       push!(grades_letters, \"A\")\n        elseif grade > 3.3\n           \
    \ push!(grades_letters, \"A-\")\n        elseif grade > 3.0\n            push!(grades_letters,\
    \ \"B+\")\n        elseif grade > 2.7\n            push!(grades_letters, \"B\"\
    )\n        elseif grade > 2.3\n            push!(grades_letters, \"B-\")\n   \
    \     elseif grade > 2.0\n            push!(grades_letters, \"C+\")\n        elseif\
    \ grade > 1.7\n            push!(grades_letters, \"C\")\n        elseif grade\
    \ > 1.3\n            push!(grades_letters, \"C-\")\n        elseif grade > 1.0\n\
    \            push!(grades_letters, \"D+\")\n        elseif grade > 0.7\n     \
    \       push!(grades_letters, \"D\")\n        elseif grade > 0.0\n           \
    \ push!(grades_letters, \"D-\")\n        elseif grade == 0.0\n            push!(grades_letters,\
    \ \"E\")\n        end\n    end\n    return grades_letters\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpsn1ux1o0.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpsn1ux1o0.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsn1ux1o0.jl:62\ntest set: Test Failed at /tmp/tmpsn1ux1o0.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsn1ux1o0.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsn1ux1o0.jl:62\ntest set: Test Failed at /tmp/tmpsn1ux1o0.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpsn1ux1o0.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsn1ux1o0.jl:62\ntest set: Test Failed at /tmp/tmpsn1ux1o0.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpsn1ux1o0.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsn1ux1o0.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsn1ux1o0.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplv1htex1.jl:33\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmplv1htex1.jl:27\n   [2] top-level scope at /tmp/tmplv1htex1.jl:33\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplv1htex1.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmplv1htex1.jl:34\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmplv1htex1.jl:27\n   [2] top-level scope at /tmp/tmplv1htex1.jl:34\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplv1htex1.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmplv1htex1.jl:35\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmplv1htex1.jl:27\n   [2] top-level scope at /tmp/tmplv1htex1.jl:35\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplv1htex1.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmplv1htex1.jl:36\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmplv1htex1.jl:27\n   [2] top-level scope at /tmp/tmplv1htex1.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplv1htex1.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmplv1htex1.jl:37\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\n\
    \  Closest candidates are:\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmplv1htex1.jl:27\n   [2] top-level scope at /tmp/tmplv1htex1.jl:37\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplv1htex1.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmplv1htex1.jl:38\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\n  Closest candidates are:\n  \
    \  convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmplv1htex1.jl:27\n   [2] top-level scope at /tmp/tmplv1htex1.jl:38\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplv1htex1.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplv1htex1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp2543oqsx.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp2543oqsx.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2543oqsx.jl:62\\ntest set: Test Failed at /tmp/tmp2543oqsx.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp2543oqsx.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2543oqsx.jl:62\\ntest set: Test Failed at /tmp/tmp2543oqsx.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp2543oqsx.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2543oqsx.jl:62\\ntest set: Test Failed at /tmp/tmp2543oqsx.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp2543oqsx.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2543oqsx.jl:62\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     4      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpj6o2gsft.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpj6o2gsft.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj6o2gsft.jl:62\ntest set: Test Failed at /tmp/tmpj6o2gsft.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj6o2gsft.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj6o2gsft.jl:62\ntest set: Test Failed at /tmp/tmpj6o2gsft.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpj6o2gsft.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj6o2gsft.jl:62\ntest set: Test Failed at /tmp/tmpj6o2gsft.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpj6o2gsft.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj6o2gsft.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj6o2gsft.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfr1btsvr.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpfr1btsvr.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfr1btsvr.jl:62\ntest set: Test Failed at /tmp/tmpfr1btsvr.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfr1btsvr.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfr1btsvr.jl:62\ntest set: Test Failed at /tmp/tmpfr1btsvr.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfr1btsvr.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfr1btsvr.jl:62\ntest set: Test Failed at /tmp/tmpfr1btsvr.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfr1btsvr.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfr1btsvr.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfr1btsvr.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvalkjenn.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"]\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpvalkjenn.jl:27\\n   [2] top-level scope at /tmp/tmpvalkjenn.jl:33\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpvalkjenn.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpvalkjenn.jl:34\\n  Test threw exception\\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpvalkjenn.jl:27\\n   [2] top-level scope at /tmp/tmpvalkjenn.jl:34\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpvalkjenn.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpvalkjenn.jl:35\\n  Test threw exception\\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpvalkjenn.jl:27\\n   [2] top-level scope at /tmp/tmpvalkjenn.jl:35\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpvalkjenn.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpvalkjenn.jl:36\\n  Test threw exception\\n  Expression: candidate([0.0])\
    \ == [\"E\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpvalkjenn.jl:27\\n   [2] top-level scope at /tmp/tmpvalkjenn.jl:36\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpvalkjenn.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpvalkjenn.jl:37\\n  Test threw exception\\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\\\
    n  Closest candidates are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpvalkjenn.jl:27\\n   [2] top-level scope at /tmp/tmpvalkjenn.jl:37\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpvalkjenn.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpvalkjenn.jl:38\\n  Test threw exception\\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\\n  Closest candidates are:\\n\
    \    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpvalkjenn.jl:27\\n   [2] top-level scope at /tmp/tmpvalkjenn.jl:38\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpvalkjenn.jl:32\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     6      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxn0wx7tv.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpxn0wx7tv.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxn0wx7tv.jl:62\\ntest set: Test Failed at /tmp/tmpxn0wx7tv.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpxn0wx7tv.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxn0wx7tv.jl:62\\ntest set: Test Failed at /tmp/tmpxn0wx7tv.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpxn0wx7tv.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxn0wx7tv.jl:62\\ntest set: Test Failed at /tmp/tmpxn0wx7tv.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpxn0wx7tv.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxn0wx7tv.jl:62\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     4      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letters = []\n    for grade in grades\n        if grade >= 4.0\n     \
    \       push!(letters, \"A+\")\n        elseif grade >= 3.7\n            push!(letters,\
    \ \"A\")\n        elseif grade >= 3.3\n            push!(letters, \"A-\")\n  \
    \      elseif grade >= 3.0\n            push!(letters, \"B+\")\n        elseif\
    \ grade >= 2.7\n            push!(letters, \"B\")\n        elseif grade >= 2.3\n\
    \            push!(letters, \"B-\")\n        elseif grade >= 2.0\n           \
    \ push!(letters, \"C+\")\n        elseif grade >= 1.7\n            push!(letters,\
    \ \"C\")\n        elseif grade >= 1.3\n            push!(letters, \"C-\")\n  \
    \      elseif grade >= 1.0\n            push!(letters, \"D+\")\n        elseif\
    \ grade >= 0.7\n            push!(letters, \"D\")\n        elseif grade >= 0.0\n\
    \            push!(letters, \"D-\")\n        else\n            push!(letters,\
    \ \"E\")\n        end\n    end\n    return letters\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpuuhx559k.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpuuhx559k.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuuhx559k.jl:62\ntest set: Test Failed at /tmp/tmpuuhx559k.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpuuhx559k.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuuhx559k.jl:62\ntest set: Test Failed at /tmp/tmpuuhx559k.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpuuhx559k.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuuhx559k.jl:62\ntest set: Test Failed at /tmp/tmpuuhx559k.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpuuhx559k.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuuhx559k.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuuhx559k.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpyzu9vu5z.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpyzu9vu5z.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyzu9vu5z.jl:62\ntest set: Test Failed at /tmp/tmpyzu9vu5z.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyzu9vu5z.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyzu9vu5z.jl:62\ntest set: Test Failed at /tmp/tmpyzu9vu5z.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpyzu9vu5z.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyzu9vu5z.jl:62\ntest set: Test Failed at /tmp/tmpyzu9vu5z.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpyzu9vu5z.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyzu9vu5z.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyzu9vu5z.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz94sbqqh.jl:33\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpz94sbqqh.jl:27\n   [2] top-level scope at /tmp/tmpz94sbqqh.jl:33\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz94sbqqh.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpz94sbqqh.jl:34\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpz94sbqqh.jl:27\n   [2] top-level scope at /tmp/tmpz94sbqqh.jl:34\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz94sbqqh.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpz94sbqqh.jl:35\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpz94sbqqh.jl:27\n   [2] top-level scope at /tmp/tmpz94sbqqh.jl:35\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz94sbqqh.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpz94sbqqh.jl:36\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpz94sbqqh.jl:27\n   [2] top-level scope at /tmp/tmpz94sbqqh.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz94sbqqh.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpz94sbqqh.jl:37\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\n\
    \  Closest candidates are:\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpz94sbqqh.jl:27\n   [2] top-level scope at /tmp/tmpz94sbqqh.jl:37\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz94sbqqh.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpz94sbqqh.jl:38\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\n  Closest candidates are:\n  \
    \  convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpz94sbqqh.jl:27\n   [2] top-level scope at /tmp/tmpz94sbqqh.jl:38\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz94sbqqh.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz94sbqqh.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(grades_letter, \"A+\")\n        elseif i > 3.7\n            push!(grades_letter,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letter, \"A-\")\n \
    \       elseif i > 3.0\n            push!(grades_letter, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letter, \"B\")\n        elseif i > 2.3\n \
    \           push!(grades_letter, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(grades_letter, \"C+\")\n        elseif i > 1.7\n            push!(grades_letter,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letter, \"C-\")\n \
    \       elseif i > 1.0\n            push!(grades_letter, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letter, \"D\")\n        elseif i > 0.0\n \
    \           push!(grades_letter, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(grades_letter, \"E\")\n        end\n    end\n    return grades_letter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades\n\
    \        if grade >= 4.0\n            push!(letter_grades, \"A+\")\n        elseif\
    \ grade >= 3.7\n            push!(letter_grades, \"A\")\n        elseif grade\
    \ >= 3.3\n            push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n\
    \            push!(letter_grades, \"B+\")\n        elseif grade >= 2.7\n     \
    \       push!(letter_grades, \"B\")\n        elseif grade >= 2.3\n           \
    \ push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n            push!(letter_grades,\
    \ \"C+\")\n        elseif grade >= 1.7\n            push!(letter_grades, \"C\"\
    )\n        elseif grade >= 1.3\n            push!(letter_grades, \"C-\")\n   \
    \     elseif grade >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ grade >= 0.7\n            push!(letter_grades, \"D\")\n        elseif grade\
    \ >= 0.0\n            push!(letter_grades, \"D-\")\n        else\n           \
    \ push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpc7mxll8l.jl:66\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpc7mxll8l.jl:66\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc7mxll8l.jl:65\ntest set: Test Failed at /tmp/tmpc7mxll8l.jl:69\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpc7mxll8l.jl:69\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc7mxll8l.jl:65\ntest set: Test Failed at /tmp/tmpc7mxll8l.jl:70\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpc7mxll8l.jl:70\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc7mxll8l.jl:65\ntest set: Test Failed at /tmp/tmpc7mxll8l.jl:71\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpc7mxll8l.jl:71\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc7mxll8l.jl:65\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc7mxll8l.jl:63\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp760bd5l7.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp760bd5l7.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp760bd5l7.jl:62\ntest set: Test Failed at /tmp/tmp760bd5l7.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp760bd5l7.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp760bd5l7.jl:62\ntest set: Test Failed at /tmp/tmp760bd5l7.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp760bd5l7.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp760bd5l7.jl:62\ntest set: Test Failed at /tmp/tmp760bd5l7.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp760bd5l7.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp760bd5l7.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp760bd5l7.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpe0nian1o.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpe0nian1o.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe0nian1o.jl:62\ntest set: Test Failed at /tmp/tmpe0nian1o.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe0nian1o.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe0nian1o.jl:62\ntest set: Test Failed at /tmp/tmpe0nian1o.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpe0nian1o.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe0nian1o.jl:62\ntest set: Test Failed at /tmp/tmpe0nian1o.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpe0nian1o.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe0nian1o.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe0nian1o.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades\n    \"\"\"\n    # create a dictionary of grades\n    grades_dict\
    \ = Dict(4.0 => \"A+\", 3.7 => \"A\", 3.3 => \"A-\", 3.0 => \"B+\", 2.7 => \"\
    B\", 2.3 => \"B-\", 2.0 => \"C+\", 1.7 => \"C\", 1.3 => \"C-\", 1.0 => \"D+\"\
    , 0.7 => \"D\", 0.0 => \"D-\", -1.0 => \"E\")\n    # create an empty vector to\
    \ store the letter grades\n    letter_grades = []\n    # iterate through the grades\n\
    \    for grade in grades\n        # iterate through the keys in the dictionary\n\
    \        for key in keys(grades_dict)\n            # if the grade is greater than\
    \ the key, push the value to the letter grades vector\n            if grade >=\
    \ key\n                push!(letter_grades, grades_dict[key])\n              \
    \  break\n            end\n        end\n    end\n    return letter_grades\nend\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzrz348yu.jl:51\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    C+\", \"C+\", \"E\", \"C+\", \"C+\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpzrz348yu.jl:51\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzrz348yu.jl:50\ntest set: Test Failed at /tmp/tmpzrz348yu.jl:52\n\
    \  Expression: candidate([1.2]) == [\"D+\"]\n   Evaluated: [\"E\"] == [\"D+\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpzrz348yu.jl:52\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzrz348yu.jl:50\ntest set: Test Failed at /tmp/tmpzrz348yu.jl:53\n\
    \  Expression: candidate([0.5]) == [\"D-\"]\n   Evaluated: [\"E\"] == [\"D-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpzrz348yu.jl:53\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzrz348yu.jl:50\ntest set: Test Failed at /tmp/tmpzrz348yu.jl:55\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"E\", \"E\", \"E\", \"C+\", \"C+\"] == [\"D\"\
    , \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzrz348yu.jl:55\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzrz348yu.jl:50\ntest set: Test Failed at /tmp/tmpzrz348yu.jl:56\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"E\"\
    , \"E\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzrz348yu.jl:56\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzrz348yu.jl:50\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzrz348yu.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo46m9fcp.jl:33\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpo46m9fcp.jl:27\n   [2] top-level scope at /tmp/tmpo46m9fcp.jl:33\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo46m9fcp.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpo46m9fcp.jl:34\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpo46m9fcp.jl:27\n   [2] top-level scope at /tmp/tmpo46m9fcp.jl:34\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo46m9fcp.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpo46m9fcp.jl:35\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpo46m9fcp.jl:27\n   [2] top-level scope at /tmp/tmpo46m9fcp.jl:35\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo46m9fcp.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpo46m9fcp.jl:36\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpo46m9fcp.jl:27\n   [2] top-level scope at /tmp/tmpo46m9fcp.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo46m9fcp.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpo46m9fcp.jl:37\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\n\
    \  Closest candidates are:\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpo46m9fcp.jl:27\n   [2] top-level scope at /tmp/tmpo46m9fcp.jl:37\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo46m9fcp.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpo46m9fcp.jl:38\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\n  Closest candidates are:\n  \
    \  convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpo46m9fcp.jl:27\n   [2] top-level scope at /tmp/tmpo46m9fcp.jl:38\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo46m9fcp.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo46m9fcp.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp_l5fosyn.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp_l5fosyn.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_l5fosyn.jl:62\ntest set: Test Failed at /tmp/tmp_l5fosyn.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_l5fosyn.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_l5fosyn.jl:62\ntest set: Test Failed at /tmp/tmp_l5fosyn.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp_l5fosyn.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_l5fosyn.jl:62\ntest set: Test Failed at /tmp/tmp_l5fosyn.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp_l5fosyn.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_l5fosyn.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_l5fosyn.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5hm3osja.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5hm3osja.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5hm3osja.jl:62\\ntest set: Test Failed at /tmp/tmp5hm3osja.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5hm3osja.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5hm3osja.jl:62\\ntest set: Test Failed at /tmp/tmp5hm3osja.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5hm3osja.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5hm3osja.jl:62\\ntest set: Test Failed at /tmp/tmp5hm3osja.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5hm3osja.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5hm3osja.jl:62\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpsj3f6scx.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letters = []\n    for i in grades\n        if i == 4.0\n      \
    \      push!(grades_letters, \"A+\")\n        elseif i > 3.7\n            push!(grades_letters,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letters, \"A-\")\n\
    \        elseif i > 3.0\n            push!(grades_letters, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letters, \"B\")\n        elseif i > 2.3\n\
    \            push!(grades_letters, \"B-\")\n        elseif i > 2.0\n         \
    \   push!(grades_letters, \"C+\")\n        elseif i > 1.7\n            push!(grades_letters,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letters, \"C-\")\n\
    \        elseif i > 1.0\n            push!(grades_letters, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letters, \"D\")\n        elseif i > 0.0\n\
    \            push!(grades_letters, \"D-\")\n        else\n            push!(grades_letters,\
    \ \"E\")\n        end\n    end\n    return grades_letters\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(grades_letter, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(grades_letter, \"A\")\n        elseif grade > 3.3\n            push!(grades_letter,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(grades_letter, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(grades_letter, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(grades_letter, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(grades_letter, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(grades_letter, \"C\")\n        elseif grade > 1.3\n\
    \            push!(grades_letter, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(grades_letter, \"D+\")\n        elseif grade > 0.7\n            push!(grades_letter,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(grades_letter, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(grades_letter, \"E\")\n    \
    \    end\n    end\n    return grades_letter\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp72wxpmvx.jl:33\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp72wxpmvx.jl:27\n   [2] top-level scope at /tmp/tmp72wxpmvx.jl:33\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp72wxpmvx.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp72wxpmvx.jl:34\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp72wxpmvx.jl:27\n   [2] top-level scope at /tmp/tmp72wxpmvx.jl:34\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp72wxpmvx.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp72wxpmvx.jl:35\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp72wxpmvx.jl:27\n   [2] top-level scope at /tmp/tmp72wxpmvx.jl:35\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp72wxpmvx.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp72wxpmvx.jl:36\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp72wxpmvx.jl:27\n   [2] top-level scope at /tmp/tmp72wxpmvx.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp72wxpmvx.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp72wxpmvx.jl:37\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\n\
    \  Closest candidates are:\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp72wxpmvx.jl:27\n   [2] top-level scope at /tmp/tmp72wxpmvx.jl:37\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp72wxpmvx.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp72wxpmvx.jl:38\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\n  Closest candidates are:\n  \
    \  convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp72wxpmvx.jl:27\n   [2] top-level scope at /tmp/tmp72wxpmvx.jl:38\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp72wxpmvx.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp72wxpmvx.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpyp3g26d9.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpyp3g26d9.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyp3g26d9.jl:62\ntest set: Test Failed at /tmp/tmpyp3g26d9.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyp3g26d9.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyp3g26d9.jl:62\ntest set: Test Failed at /tmp/tmpyp3g26d9.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpyp3g26d9.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyp3g26d9.jl:62\ntest set: Test Failed at /tmp/tmpyp3g26d9.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpyp3g26d9.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyp3g26d9.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyp3g26d9.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of numerical grades and returns\
    \ a vector of \n    letter grades.\n    \"\"\"\n    letter_grades = []\n    for\
    \ grade in grades\n        if grade == 4.0\n            push!(letter_grades, \"\
    A+\")\n        elseif grade > 3.7\n            push!(letter_grades, \"A\")\n \
    \       elseif grade > 3.3\n            push!(letter_grades, \"A-\")\n       \
    \ elseif grade > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ grade > 2.7\n            push!(letter_grades, \"B\")\n        elseif grade >\
    \ 2.3\n            push!(letter_grades, \"B-\")\n        elseif grade > 2.0\n\
    \            push!(letter_grades, \"C+\")\n        elseif grade > 1.7\n      \
    \      push!(letter_grades, \"C\")\n        elseif grade > 1.3\n            push!(letter_grades,\
    \ \"C-\")\n        elseif grade > 1.0\n            push!(letter_grades, \"D+\"\
    )\n        elseif grade > 0.7\n            push!(letter_grades, \"D\")\n     \
    \   elseif grade > 0.0\n            push!(letter_grades, \"D-\")\n        else\n\
    \            push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpv965xdpt.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpv965xdpt.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv965xdpt.jl:62\ntest set: Test Failed at /tmp/tmpv965xdpt.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv965xdpt.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv965xdpt.jl:62\ntest set: Test Failed at /tmp/tmpv965xdpt.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpv965xdpt.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv965xdpt.jl:62\ntest set: Test Failed at /tmp/tmpv965xdpt.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpv965xdpt.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv965xdpt.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv965xdpt.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in 1:length(grades)\n        if grades[i]\
    \ == 4.0\n            push!(letter_grades, \"A+\")\n        elseif grades[i] >\
    \ 3.7\n            push!(letter_grades, \"A\")\n        elseif grades[i] > 3.3\n\
    \            push!(letter_grades, \"A-\")\n        elseif grades[i] > 3.0\n  \
    \          push!(letter_grades, \"B+\")\n        elseif grades[i] > 2.7\n    \
    \        push!(letter_grades, \"B\")\n        elseif grades[i] > 2.3\n       \
    \     push!(letter_grades, \"B-\")\n        elseif grades[i] > 2.0\n         \
    \   push!(letter_grades, \"C+\")\n        elseif grades[i] > 1.7\n           \
    \ push!(letter_grades, \"C\")\n        elseif grades[i] > 1.3\n            push!(letter_grades,\
    \ \"C-\")\n        elseif grades[i] > 1.0\n            push!(letter_grades, \"\
    D+\")\n        elseif grades[i] > 0.7\n            push!(letter_grades, \"D\"\
    )\n        elseif grades[i] > 0.0\n            push!(letter_grades, \"D-\")\n\
    \        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpcsdx221_.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpcsdx221_.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcsdx221_.jl:62\ntest set: Test Failed at /tmp/tmpcsdx221_.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcsdx221_.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcsdx221_.jl:62\ntest set: Test Failed at /tmp/tmpcsdx221_.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpcsdx221_.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcsdx221_.jl:62\ntest set: Test Failed at /tmp/tmpcsdx221_.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpcsdx221_.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcsdx221_.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcsdx221_.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmprmg28pti.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmprmg28pti.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprmg28pti.jl:62\\ntest set: Test Failed at /tmp/tmprmg28pti.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmprmg28pti.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprmg28pti.jl:62\\ntest set: Test Failed at /tmp/tmprmg28pti.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmprmg28pti.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprmg28pti.jl:62\\ntest set: Test Failed at /tmp/tmprmg28pti.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmprmg28pti.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprmg28pti.jl:62\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp49drmprt.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp49drmprt.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp49drmprt.jl:62\\ntest set: Test Failed at /tmp/tmp49drmprt.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp49drmprt.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp49drmprt.jl:62\\ntest set: Test Failed at /tmp/tmp49drmprt.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp49drmprt.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp49drmprt.jl:62\\ntest set: Test Failed at /tmp/tmp49drmprt.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp49drmprt.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp49drmprt.jl:62\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letters = []\n    for i in grades\n        if i == 4.0\n      \
    \      push!(grades_letters, \"A+\")\n        elseif i > 3.7\n            push!(grades_letters,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letters, \"A-\")\n\
    \        elseif i > 3.0\n            push!(grades_letters, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letters, \"B\")\n        elseif i > 2.3\n\
    \            push!(grades_letters, \"B-\")\n        elseif i > 2.0\n         \
    \   push!(grades_letters, \"C+\")\n        elseif i > 1.7\n            push!(grades_letters,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letters, \"C-\")\n\
    \        elseif i > 1.0\n            push!(grades_letters, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letters, \"D\")\n        elseif i > 0.0\n\
    \            push!(grades_letters, \"D-\")\n        else\n            push!(grades_letters,\
    \ \"E\")\n        end\n    end\n    return grades_letters\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letters = []\n    for i in grades\n        if i == 4.0\n      \
    \      push!(grades_letters, \"A+\")\n        elseif i > 3.7\n            push!(grades_letters,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letters, \"A-\")\n\
    \        elseif i > 3.0\n            push!(grades_letters, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letters, \"B\")\n        elseif i > 2.3\n\
    \            push!(grades_letters, \"B-\")\n        elseif i > 2.0\n         \
    \   push!(grades_letters, \"C+\")\n        elseif i > 1.7\n            push!(grades_letters,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letters, \"C-\")\n\
    \        elseif i > 1.0\n            push!(grades_letters, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letters, \"D\")\n        elseif i > 0.0\n\
    \            push!(grades_letters, \"D-\")\n        else\n            push!(grades_letters,\
    \ \"E\")\n        end\n    end\n    return grades_letters\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        elseif grade == 0.0\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpstm6mgou.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpstm6mgou.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpstm6mgou.jl:62\ntest set: Test Failed at /tmp/tmpstm6mgou.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpstm6mgou.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpstm6mgou.jl:62\ntest set: Test Failed at /tmp/tmpstm6mgou.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpstm6mgou.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpstm6mgou.jl:62\ntest set: Test Failed at /tmp/tmpstm6mgou.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpstm6mgou.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpstm6mgou.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpstm6mgou.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpu3cda0a6.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpu3cda0a6.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu3cda0a6.jl:62\ntest set: Test Failed at /tmp/tmpu3cda0a6.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpu3cda0a6.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu3cda0a6.jl:62\ntest set: Test Failed at /tmp/tmpu3cda0a6.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpu3cda0a6.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu3cda0a6.jl:62\ntest set: Test Failed at /tmp/tmpu3cda0a6.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpu3cda0a6.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu3cda0a6.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu3cda0a6.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Your code here\n    return letter_grades\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp_q_mkbql.jl:34\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmp_q_mkbql.jl:27\n   [2]\
    \ top-level scope at /tmp/tmp_q_mkbql.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_q_mkbql.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmp_q_mkbql.jl:35\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmp_q_mkbql.jl:27\n   [2]\
    \ top-level scope at /tmp/tmp_q_mkbql.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_q_mkbql.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmp_q_mkbql.jl:36\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmp_q_mkbql.jl:27\n   [2]\
    \ top-level scope at /tmp/tmp_q_mkbql.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_q_mkbql.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmp_q_mkbql.jl:37\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmp_q_mkbql.jl:27\n   [2]\
    \ top-level scope at /tmp/tmp_q_mkbql.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_q_mkbql.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmp_q_mkbql.jl:38\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  UndefVarError:\
    \ letter_grades not defined\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1})\
    \ at /tmp/tmp_q_mkbql.jl:27\n   [2] top-level scope at /tmp/tmp_q_mkbql.jl:38\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_q_mkbql.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmp_q_mkbql.jl:39\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n\
    \   [1] numerical_letter_grade(::Array{Float64,1}) at /tmp/tmp_q_mkbql.jl:27\n\
    \   [2] top-level scope at /tmp/tmp_q_mkbql.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_q_mkbql.jl:33\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_q_mkbql.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades\n    \"\"\"\n    grades_letter = []\n    for i in grades\n\
    \        if i == 4.0\n            push!(grades_letter, \"A+\")\n        elseif\
    \ i > 3.7\n            push!(grades_letter, \"A\")\n        elseif i > 3.3\n \
    \           push!(grades_letter, \"A-\")\n        elseif i > 3.0\n           \
    \ push!(grades_letter, \"B+\")\n        elseif i > 2.7\n            push!(grades_letter,\
    \ \"B\")\n        elseif i > 2.3\n            push!(grades_letter, \"B-\")\n \
    \       elseif i > 2.0\n            push!(grades_letter, \"C+\")\n        elseif\
    \ i > 1.7\n            push!(grades_letter, \"C\")\n        elseif i > 1.3\n \
    \           push!(grades_letter, \"C-\")\n        elseif i > 1.0\n           \
    \ push!(grades_letter, \"D+\")\n        elseif i > 0.7\n            push!(grades_letter,\
    \ \"D\")\n        elseif i > 0.0\n            push!(grades_letter, \"D-\")\n \
    \       elseif i == 0.0\n            push!(grades_letter, \"E\")\n        end\n\
    \    end\n    return grades_letter\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0e2rmkwe.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp0e2rmkwe.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0e2rmkwe.jl:62\ntest set: Test Failed at /tmp/tmp0e2rmkwe.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0e2rmkwe.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0e2rmkwe.jl:62\ntest set: Test Failed at /tmp/tmp0e2rmkwe.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp0e2rmkwe.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0e2rmkwe.jl:62\ntest set: Test Failed at /tmp/tmp0e2rmkwe.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp0e2rmkwe.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0e2rmkwe.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0e2rmkwe.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpg_28gnth.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpg_28gnth.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg_28gnth.jl:62\ntest set: Test Failed at /tmp/tmpg_28gnth.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpg_28gnth.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg_28gnth.jl:62\ntest set: Test Failed at /tmp/tmpg_28gnth.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpg_28gnth.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg_28gnth.jl:62\ntest set: Test Failed at /tmp/tmpg_28gnth.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpg_28gnth.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg_28gnth.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg_28gnth.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprvk199o6.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmprvk199o6.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvk199o6.jl:62\ntest set: Test Failed at /tmp/tmprvk199o6.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprvk199o6.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvk199o6.jl:62\ntest set: Test Failed at /tmp/tmprvk199o6.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprvk199o6.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvk199o6.jl:62\ntest set: Test Failed at /tmp/tmprvk199o6.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprvk199o6.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvk199o6.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprvk199o6.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpvav4vfho.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpvav4vfho.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvav4vfho.jl:62\ntest set: Test Failed at /tmp/tmpvav4vfho.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvav4vfho.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvav4vfho.jl:62\ntest set: Test Failed at /tmp/tmpvav4vfho.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvav4vfho.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvav4vfho.jl:62\ntest set: Test Failed at /tmp/tmpvav4vfho.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvav4vfho.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvav4vfho.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvav4vfho.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letters = []\n    for i in grades\n        if i == 4.0\n      \
    \      push!(grades_letters, \"A+\")\n        elseif i > 3.7\n            push!(grades_letters,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letters, \"A-\")\n\
    \        elseif i > 3.0\n            push!(grades_letters, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letters, \"B\")\n        elseif i > 2.3\n\
    \            push!(grades_letters, \"B-\")\n        elseif i > 2.0\n         \
    \   push!(grades_letters, \"C+\")\n        elseif i > 1.7\n            push!(grades_letters,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letters, \"C-\")\n\
    \        elseif i > 1.0\n            push!(grades_letters, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letters, \"D\")\n        elseif i > 0.0\n\
    \            push!(grades_letters, \"D-\")\n        else\n            push!(grades_letters,\
    \ \"E\")\n        end\n    end\n    return grades_letters\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for g in grades\n        if g == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif g > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif g > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif g > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ g > 2.7\n            push!(letter_grades, \"B\")\n        elseif g > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif g > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif g > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif g > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif g > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ g > 0.7\n            push!(letter_grades, \"D\")\n        elseif g > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpd28p35_m.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpd28p35_m.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd28p35_m.jl:62\ntest set: Test Failed at /tmp/tmpd28p35_m.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpd28p35_m.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd28p35_m.jl:62\ntest set: Test Failed at /tmp/tmpd28p35_m.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpd28p35_m.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd28p35_m.jl:62\ntest set: Test Failed at /tmp/tmpd28p35_m.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpd28p35_m.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd28p35_m.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd28p35_m.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Your code here\n    return letter_grades\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqlam3omy.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"]\\n  UndefVarError: letter_grades not defined\\n  Stacktrace:\\\
    n   [1] numerical_letter_grade(::Array{Float64,1}) at /tmp/tmpqlam3omy.jl:27\\\
    n   [2] top-level scope at /tmp/tmpqlam3omy.jl:34\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpqlam3omy.jl:33\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpqlam3omy.jl:35\\n  Test threw exception\\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\\n  UndefVarError: letter_grades not defined\\n  Stacktrace:\\n\
    \   [1] numerical_letter_grade(::Array{Float64,1}) at /tmp/tmpqlam3omy.jl:27\\\
    n   [2] top-level scope at /tmp/tmpqlam3omy.jl:35\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpqlam3omy.jl:33\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpqlam3omy.jl:36\\n  Test threw exception\\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\\n  UndefVarError: letter_grades not defined\\n  Stacktrace:\\n\
    \   [1] numerical_letter_grade(::Array{Float64,1}) at /tmp/tmpqlam3omy.jl:27\\\
    n   [2] top-level scope at /tmp/tmpqlam3omy.jl:36\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpqlam3omy.jl:33\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpqlam3omy.jl:37\\n  Test threw exception\\n  Expression: candidate([0.0])\
    \ == [\"E\"]\\n  UndefVarError: letter_grades not defined\\n  Stacktrace:\\n \
    \  [1] numerical_letter_grade(::Array{Float64,1}) at /tmp/tmpqlam3omy.jl:27\\\
    n   [2] top-level scope at /tmp/tmpqlam3omy.jl:37\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpqlam3omy.jl:33\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpqlam3omy.jl:38\\n  Test threw exception\\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\\n  UndefVarError:\
    \ letter_grades not defined\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1})\
    \ at /tmp/tmpqlam3omy.jl:27\\n   [2] top-level scope at /tmp/tmpqlam3omy.jl:38\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpqlam3omy.jl:33\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpqlam3omy.jl:39\\n  Test threw exception\\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\\n  UndefVarError: letter_grades not defined\\n  Stacktrace:\\\
    n   [1] numerical_letter_grade(::Array{Float64,1}) at /tmp/tmpqlam3omy.jl:27\\\
    n   [2] top-level scope at /tmp/tmpqlam3omy.jl:39\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpqlam3omy.jl:33\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     6      6\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = Array{String}(length(grades))\n    for i in 1:length(grades)\n\
    \        if grades[i] == 4.0\n            letter_grades[i] = \"A+\"\n        elseif\
    \ grades[i] > 3.7\n            letter_grades[i] = \"A\"\n        elseif grades[i]\
    \ > 3.3\n            letter_grades[i] = \"A-\"\n        elseif grades[i] > 3.0\n\
    \            letter_grades[i] = \"B+\"\n        elseif grades[i] > 2.7\n     \
    \       letter_grades[i] = \"B\"\n        elseif grades[i] > 2.3\n           \
    \ letter_grades[i] = \"B-\"\n        elseif grades[i] > 2.0\n            letter_grades[i]\
    \ = \"C+\"\n        elseif grades[i] > 1.7\n            letter_grades[i] = \"\
    C\"\n        elseif grades[i] > 1.3\n            letter_grades[i] = \"C-\"\n \
    \       elseif grades[i] > 1.0\n            letter_grades[i] = \"D+\"\n      \
    \  elseif grades[i] > 0.7\n            letter_grades[i] = \"D\"\n        elseif\
    \ grades[i] > 0.0\n            letter_grades[i] = \"D-\"\n        else\n     \
    \       letter_grades[i] = \"E\"\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpz_vmmuh4.jl:63\\n  Test threw\
    \ exception\\n  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"]\\n  MethodError: no method matching Array{String,N} where\
    \ N(::Int64)\\n  Closest candidates are:\\n    Array{String,N} where N(!Matched::UndefInitializer,\
    \ !Matched::Int64) where T at boot.jl:419\\n    Array{String,N} where N(!Matched::UndefInitializer,\
    \ !Matched::Int64, !Matched::Int64) where T at boot.jl:420\\n    Array{String,N}\
    \ where N(!Matched::UndefInitializer, !Matched::Int64, !Matched::Int64, !Matched::Int64)\
    \ where T at boot.jl:421\\n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1})\
    \ at /tmp/tmpz_vmmuh4.jl:26\\n   [2] top-level scope at /tmp/tmpz_vmmuh4.jl:63\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpz_vmmuh4.jl:62\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpz_vmmuh4.jl:64\\n  Test threw exception\\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\\n  MethodError: no method matching Array{String,N} where N(::Int64)\\\
    n  Closest candidates are:\\n    Array{String,N} where N(!Matched::UndefInitializer,\
    \ !Matched::Int64) where T at boot.jl:419\\n    Array{String,N} where N(!Matched::UndefInitializer,\
    \ !Matched::Int64, !Matched::Int64) where T at boot.jl:420\\n    Array{String,N}\
    \ where N(!Matched::UndefInitializer, !Matched::Int64, !Matched::Int64, !Matched::Int64)\
    \ where T at boot.jl:421\\n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1})\
    \ at /tmp/tmpz_vmmuh4.jl:26\\n   [2] top-level scope at /tmp/tmpz_vmmuh4.jl:64\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpz_vmmuh4.jl:62\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpz_vmmuh4.jl:65\\n  Test threw exception\\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\\n  MethodError: no method matching Array{String,N} where N(::Int64)\\\
    n  Closest candidates are:\\n    Array{String,N} where N(!Matched::UndefInitializer,\
    \ !Matched::Int64) where T at boot.jl:419\\n    Array{String,N} where N(!Matched::UndefInitializer,\
    \ !Matched::Int64, !Matched::Int64) where T at boot.jl:420\\n    Array{String,N}\
    \ where N(!Matched::UndefInitializer, !Matched::Int64, !Matched::Int64, !Matched::Int64)\
    \ where T at boot.jl:421\\n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1})\
    \ at /tmp/tmpz_vmmuh4.jl:26\\n   [2] top-level scope at /tmp/tmpz_vmmuh4.jl:65\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpz_vmmuh4.jl:62\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpz_vmmuh4.jl:66\\n  Test threw exception\\n  Expression: candidate([0.0])\
    \ == [\"E\"]\\n  MethodError: no method matching Array{String,N} where N(::Int64)\\\
    n  Closest candidates are:\\n    Array{String,N} where N(!Matched::UndefInitializer,\
    \ !Matched::Int64) where T at boot.jl:419\\n    Array{String,N} where N(!Matched::UndefInitializer,\
    \ !Matched::Int64, !Matched::Int64) where T at boot.jl:420\\n    Array{String,N}\
    \ where N(!Matched::UndefInitializer, !Matched::Int64, !Matched::Int64, !Matched::Int64)\
    \ where T at boot.jl:421\\n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1})\
    \ at /tmp/tmpz_vmmuh4.jl:26\\n   [2] top-level scope at /tmp/tmpz_vmmuh4.jl:66\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpz_vmmuh4.jl:62\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpz_vmmuh4.jl:67\\n  Test threw exception\\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\\n  MethodError:\
    \ no method matching Array{String,N} where N(::Int64)\\n  Closest candidates are:\\\
    n    Array{String,N} where N(!Matched::UndefInitializer, !Matched::Int64) where\
    \ T at boot.jl:419\\n    Array{String,N} where N(!Matched::UndefInitializer, !Matched::Int64,\
    \ !Matched::Int64) where T at boot.jl:420\\n    Array{String,N} where N(!Matched::UndefInitializer,\
    \ !Matched::Int64, !Matched::Int64, !Matched::Int64) where T at boot.jl:421\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpz_vmmuh4.jl:26\\n   [2] top-level scope at /tmp/tmpz_vmmuh4.jl:67\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpz_vmmuh4.jl:62\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpz_vmmuh4.jl:68\\n  Test threw exception\\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\\n  MethodError: no method matching Array{String,N}\
    \ where N(::Int64)\\n  Closest candidates are:\\n    Array{String,N} where N(!Matched::UndefInitializer,\
    \ !Matched::Int64) where T at boot.jl:419\\n    Array{String,N} where N(!Matched::UndefInitializer,\
    \ !Matched::Int64, !Matched::Int64) where T at boot.jl:420\\n    Array{String,N}\
    \ where N(!Matched::UndefInitializer, !Matched::Int64, !Matched::Int64, !Matched::Int64)\
    \ where T at boot.jl:421\\n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1})\
    \ at /tmp/tmpz_vmmuh4.jl:26\\n   [2] top-level scope at /tmp/tmpz_vmmuh4.jl:68\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpz_vmmuh4.jl:62\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     6      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxzuv4fpk.jl:33\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpxzuv4fpk.jl:27\n   [2] top-level scope at /tmp/tmpxzuv4fpk.jl:33\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxzuv4fpk.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpxzuv4fpk.jl:34\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpxzuv4fpk.jl:27\n   [2] top-level scope at /tmp/tmpxzuv4fpk.jl:34\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxzuv4fpk.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpxzuv4fpk.jl:35\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpxzuv4fpk.jl:27\n   [2] top-level scope at /tmp/tmpxzuv4fpk.jl:35\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxzuv4fpk.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpxzuv4fpk.jl:36\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpxzuv4fpk.jl:27\n   [2] top-level scope at /tmp/tmpxzuv4fpk.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxzuv4fpk.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpxzuv4fpk.jl:37\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\n\
    \  Closest candidates are:\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpxzuv4fpk.jl:27\n   [2] top-level scope at /tmp/tmpxzuv4fpk.jl:37\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxzuv4fpk.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpxzuv4fpk.jl:38\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\n  Closest candidates are:\n  \
    \  convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpxzuv4fpk.jl:27\n   [2] top-level scope at /tmp/tmpxzuv4fpk.jl:38\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxzuv4fpk.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxzuv4fpk.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpkoye5drv.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpkoye5drv.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkoye5drv.jl:62\ntest set: Test Failed at /tmp/tmpkoye5drv.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkoye5drv.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkoye5drv.jl:62\ntest set: Test Failed at /tmp/tmpkoye5drv.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpkoye5drv.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkoye5drv.jl:62\ntest set: Test Failed at /tmp/tmpkoye5drv.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpkoye5drv.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkoye5drv.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkoye5drv.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1bmjqhy7.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp1bmjqhy7.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1bmjqhy7.jl:62\\ntest set: Test Failed at /tmp/tmp1bmjqhy7.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp1bmjqhy7.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1bmjqhy7.jl:62\\ntest set: Test Failed at /tmp/tmp1bmjqhy7.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp1bmjqhy7.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1bmjqhy7.jl:62\\ntest set: Test Failed at /tmp/tmp1bmjqhy7.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp1bmjqhy7.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1bmjqhy7.jl:62\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk8ar7uoj.jl:33\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpk8ar7uoj.jl:27\n   [2] top-level scope at /tmp/tmpk8ar7uoj.jl:33\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk8ar7uoj.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpk8ar7uoj.jl:34\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpk8ar7uoj.jl:27\n   [2] top-level scope at /tmp/tmpk8ar7uoj.jl:34\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk8ar7uoj.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpk8ar7uoj.jl:35\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpk8ar7uoj.jl:27\n   [2] top-level scope at /tmp/tmpk8ar7uoj.jl:35\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk8ar7uoj.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpk8ar7uoj.jl:36\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpk8ar7uoj.jl:27\n   [2] top-level scope at /tmp/tmpk8ar7uoj.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk8ar7uoj.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpk8ar7uoj.jl:37\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\n\
    \  Closest candidates are:\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpk8ar7uoj.jl:27\n   [2] top-level scope at /tmp/tmpk8ar7uoj.jl:37\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk8ar7uoj.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpk8ar7uoj.jl:38\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\n  Closest candidates are:\n  \
    \  convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpk8ar7uoj.jl:27\n   [2] top-level scope at /tmp/tmpk8ar7uoj.jl:38\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk8ar7uoj.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk8ar7uoj.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbzvb9_cv.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpbzvb9_cv.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbzvb9_cv.jl:62\\ntest set: Test Failed at /tmp/tmpbzvb9_cv.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpbzvb9_cv.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbzvb9_cv.jl:62\\ntest set: Test Failed at /tmp/tmpbzvb9_cv.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpbzvb9_cv.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbzvb9_cv.jl:62\\ntest set: Test Failed at /tmp/tmpbzvb9_cv.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpbzvb9_cv.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbzvb9_cv.jl:62\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     4      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letters = []\n    for i in grades\n        if i >= 4.0\n      \
    \      push!(grades_letters, \"A+\")\n        elseif i >= 3.7\n            push!(grades_letters,\
    \ \"A\")\n        elseif i >= 3.3\n            push!(grades_letters, \"A-\")\n\
    \        elseif i >= 3.0\n            push!(grades_letters, \"B+\")\n        elseif\
    \ i >= 2.7\n            push!(grades_letters, \"B\")\n        elseif i >= 2.3\n\
    \            push!(grades_letters, \"B-\")\n        elseif i >= 2.0\n        \
    \    push!(grades_letters, \"C+\")\n        elseif i >= 1.7\n            push!(grades_letters,\
    \ \"C\")\n        elseif i >= 1.3\n            push!(grades_letters, \"C-\")\n\
    \        elseif i >= 1.0\n            push!(grades_letters, \"D+\")\n        elseif\
    \ i >= 0.7\n            push!(grades_letters, \"D\")\n        elseif i >= 0.0\n\
    \            push!(grades_letters, \"D-\")\n        else\n            push!(grades_letters,\
    \ \"E\")\n        end\n    end\n    return grades_letters\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpmbc6z79a.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpmbc6z79a.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmbc6z79a.jl:62\ntest set: Test Failed at /tmp/tmpmbc6z79a.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmbc6z79a.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmbc6z79a.jl:62\ntest set: Test Failed at /tmp/tmpmbc6z79a.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpmbc6z79a.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmbc6z79a.jl:62\ntest set: Test Failed at /tmp/tmpmbc6z79a.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpmbc6z79a.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmbc6z79a.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmbc6z79a.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(grades_letter, \"A+\")\n        elseif i > 3.7\n            push!(grades_letter,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letter, \"A-\")\n \
    \       elseif i > 3.0\n            push!(grades_letter, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letter, \"B\")\n        elseif i > 2.3\n \
    \           push!(grades_letter, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(grades_letter, \"C+\")\n        elseif i > 1.7\n            push!(grades_letter,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letter, \"C-\")\n \
    \       elseif i > 1.0\n            push!(grades_letter, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letter, \"D\")\n        elseif i > 0.0\n \
    \           push!(grades_letter, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(grades_letter, \"E\")\n        end\n    end\n    return grades_letter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0z7shudw.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp0z7shudw.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0z7shudw.jl:62\ntest set: Test Failed at /tmp/tmp0z7shudw.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0z7shudw.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0z7shudw.jl:62\ntest set: Test Failed at /tmp/tmp0z7shudw.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp0z7shudw.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0z7shudw.jl:62\ntest set: Test Failed at /tmp/tmp0z7shudw.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp0z7shudw.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0z7shudw.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0z7shudw.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(grades_letter, \"A+\")\n        elseif i > 3.7\n            push!(grades_letter,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letter, \"A-\")\n \
    \       elseif i > 3.0\n            push!(grades_letter, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letter, \"B\")\n        elseif i > 2.3\n \
    \           push!(grades_letter, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(grades_letter, \"C+\")\n        elseif i > 1.7\n            push!(grades_letter,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letter, \"C-\")\n \
    \       elseif i > 1.0\n            push!(grades_letter, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letter, \"D\")\n        elseif i > 0.0\n \
    \           push!(grades_letter, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(grades_letter, \"E\")\n        end\n    end\n    return grades_letter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmppbsolza_.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmppbsolza_.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppbsolza_.jl:62\\ntest set: Test Failed at /tmp/tmppbsolza_.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmppbsolza_.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppbsolza_.jl:62\\ntest set: Test Failed at /tmp/tmppbsolza_.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmppbsolza_.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppbsolza_.jl:62\\ntest set: Test Failed at /tmp/tmppbsolza_.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmppbsolza_.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppbsolza_.jl:62\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     4      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcw5652sq.jl:33\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpcw5652sq.jl:27\n   [2] top-level scope at /tmp/tmpcw5652sq.jl:33\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcw5652sq.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpcw5652sq.jl:34\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpcw5652sq.jl:27\n   [2] top-level scope at /tmp/tmpcw5652sq.jl:34\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcw5652sq.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpcw5652sq.jl:35\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpcw5652sq.jl:27\n   [2] top-level scope at /tmp/tmpcw5652sq.jl:35\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcw5652sq.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpcw5652sq.jl:36\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpcw5652sq.jl:27\n   [2] top-level scope at /tmp/tmpcw5652sq.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcw5652sq.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpcw5652sq.jl:37\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\n\
    \  Closest candidates are:\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpcw5652sq.jl:27\n   [2] top-level scope at /tmp/tmpcw5652sq.jl:37\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcw5652sq.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpcw5652sq.jl:38\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\n  Closest candidates are:\n  \
    \  convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpcw5652sq.jl:27\n   [2] top-level scope at /tmp/tmpcw5652sq.jl:38\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcw5652sq.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcw5652sq.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph08s57dl.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"]\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmph08s57dl.jl:27\\n   [2] top-level scope at /tmp/tmph08s57dl.jl:33\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmph08s57dl.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmph08s57dl.jl:34\\n  Test threw exception\\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmph08s57dl.jl:27\\n   [2] top-level scope at /tmp/tmph08s57dl.jl:34\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmph08s57dl.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmph08s57dl.jl:35\\n  Test threw exception\\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmph08s57dl.jl:27\\n   [2] top-level scope at /tmp/tmph08s57dl.jl:35\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmph08s57dl.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmph08s57dl.jl:36\\n  Test threw exception\\n  Expression: candidate([0.0])\
    \ == [\"E\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmph08s57dl.jl:27\\n   [2] top-level scope at /tmp/tmph08s57dl.jl:36\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmph08s57dl.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmph08s57dl.jl:37\\n  Test threw exception\\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\\\
    n  Closest candidates are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmph08s57dl.jl:27\\n   [2] top-level scope at /tmp/tmph08s57dl.jl:37\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmph08s57dl.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmph08s57dl.jl:38\\n  Test threw exception\\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\\n  Closest candidates are:\\n\
    \    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmph08s57dl.jl:27\\n   [2] top-level scope at /tmp/tmph08s57dl.jl:38\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmph08s57dl.jl:32\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     6      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for i in 1:length(grades)\n        if grades[i]\
    \ == 4.0\n            push!(grades_letter, \"A+\")\n        elseif grades[i] >\
    \ 3.7\n            push!(grades_letter, \"A\")\n        elseif grades[i] > 3.3\n\
    \            push!(grades_letter, \"A-\")\n        elseif grades[i] > 3.0\n  \
    \          push!(grades_letter, \"B+\")\n        elseif grades[i] > 2.7\n    \
    \        push!(grades_letter, \"B\")\n        elseif grades[i] > 2.3\n       \
    \     push!(grades_letter, \"B-\")\n        elseif grades[i] > 2.0\n         \
    \   push!(grades_letter, \"C+\")\n        elseif grades[i] > 1.7\n           \
    \ push!(grades_letter, \"C\")\n        elseif grades[i] > 1.3\n            push!(grades_letter,\
    \ \"C-\")\n        elseif grades[i] > 1.0\n            push!(grades_letter, \"\
    D+\")\n        elseif grades[i] > 0.7\n            push!(grades_letter, \"D\"\
    )\n        elseif grades[i] > 0.0\n            push!(grades_letter, \"D-\")\n\
    \        else\n            push!(grades_letter, \"E\")\n        end\n    end\n\
    \    return grades_letter\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letters = []\n    for i in grades\n        if i == 4.0\n      \
    \      push!(grades_letters, \"A+\")\n        elseif i > 3.7\n            push!(grades_letters,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letters, \"A-\")\n\
    \        elseif i > 3.0\n            push!(grades_letters, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letters, \"B\")\n        elseif i > 2.3\n\
    \            push!(grades_letters, \"B-\")\n        elseif i > 2.0\n         \
    \   push!(grades_letters, \"C+\")\n        elseif i > 1.7\n            push!(grades_letters,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letters, \"C-\")\n\
    \        elseif i > 1.0\n            push!(grades_letters, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letters, \"D\")\n        elseif i > 0.0\n\
    \            push!(grades_letters, \"D-\")\n        elseif i == 0.0\n        \
    \    push!(grades_letters, \"E\")\n        end\n    end\n    return grades_letters\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp8zqkd31z.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp8zqkd31z.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8zqkd31z.jl:62\ntest set: Test Failed at /tmp/tmp8zqkd31z.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8zqkd31z.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8zqkd31z.jl:62\ntest set: Test Failed at /tmp/tmp8zqkd31z.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp8zqkd31z.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8zqkd31z.jl:62\ntest set: Test Failed at /tmp/tmp8zqkd31z.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp8zqkd31z.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8zqkd31z.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8zqkd31z.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmyigm4yk.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"]\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpmyigm4yk.jl:27\\n   [2] top-level scope at /tmp/tmpmyigm4yk.jl:33\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpmyigm4yk.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpmyigm4yk.jl:34\\n  Test threw exception\\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpmyigm4yk.jl:27\\n   [2] top-level scope at /tmp/tmpmyigm4yk.jl:34\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpmyigm4yk.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpmyigm4yk.jl:35\\n  Test threw exception\\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpmyigm4yk.jl:27\\n   [2] top-level scope at /tmp/tmpmyigm4yk.jl:35\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpmyigm4yk.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpmyigm4yk.jl:36\\n  Test threw exception\\n  Expression: candidate([0.0])\
    \ == [\"E\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpmyigm4yk.jl:27\\n   [2] top-level scope at /tmp/tmpmyigm4yk.jl:36\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpmyigm4yk.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpmyigm4yk.jl:37\\n  Test threw exception\\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\\\
    n  Closest candidates are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpmyigm4yk.jl:27\\n   [2] top-level scope at /tmp/tmpmyigm4yk.jl:37\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpmyigm4yk.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpmyigm4yk.jl:38\\n  Test threw exception\\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\\n  Closest candidates are:\\n\
    \    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpmyigm4yk.jl:27\\n   [2] top-level scope at /tmp/tmpmyigm4yk.jl:38\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpmyigm4yk.jl:32\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp48nhzmri.jl:33\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp48nhzmri.jl:27\n   [2] top-level scope at /tmp/tmp48nhzmri.jl:33\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp48nhzmri.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp48nhzmri.jl:34\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp48nhzmri.jl:27\n   [2] top-level scope at /tmp/tmp48nhzmri.jl:34\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp48nhzmri.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp48nhzmri.jl:35\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp48nhzmri.jl:27\n   [2] top-level scope at /tmp/tmp48nhzmri.jl:35\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp48nhzmri.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp48nhzmri.jl:36\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp48nhzmri.jl:27\n   [2] top-level scope at /tmp/tmp48nhzmri.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp48nhzmri.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp48nhzmri.jl:37\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\n\
    \  Closest candidates are:\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp48nhzmri.jl:27\n   [2] top-level scope at /tmp/tmp48nhzmri.jl:37\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp48nhzmri.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp48nhzmri.jl:38\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\n  Closest candidates are:\n  \
    \  convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp48nhzmri.jl:27\n   [2] top-level scope at /tmp/tmp48nhzmri.jl:38\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp48nhzmri.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp48nhzmri.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        elseif grade == 0.0\n            push!(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # YOUR CODE HERE\n    return letter_grades\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpqmjvdlkb.jl:34\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmpqmjvdlkb.jl:27\n   [2]\
    \ top-level scope at /tmp/tmpqmjvdlkb.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqmjvdlkb.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpqmjvdlkb.jl:35\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmpqmjvdlkb.jl:27\n   [2]\
    \ top-level scope at /tmp/tmpqmjvdlkb.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqmjvdlkb.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpqmjvdlkb.jl:36\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmpqmjvdlkb.jl:27\n   [2]\
    \ top-level scope at /tmp/tmpqmjvdlkb.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqmjvdlkb.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpqmjvdlkb.jl:37\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmpqmjvdlkb.jl:27\n   [2]\
    \ top-level scope at /tmp/tmpqmjvdlkb.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqmjvdlkb.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpqmjvdlkb.jl:38\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  UndefVarError:\
    \ letter_grades not defined\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1})\
    \ at /tmp/tmpqmjvdlkb.jl:27\n   [2] top-level scope at /tmp/tmpqmjvdlkb.jl:38\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqmjvdlkb.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpqmjvdlkb.jl:39\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n\
    \   [1] numerical_letter_grade(::Array{Float64,1}) at /tmp/tmpqmjvdlkb.jl:27\n\
    \   [2] top-level scope at /tmp/tmpqmjvdlkb.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqmjvdlkb.jl:33\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqmjvdlkb.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp818je59s.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp818je59s.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp818je59s.jl:62\ntest set: Test Failed at /tmp/tmp818je59s.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp818je59s.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp818je59s.jl:62\ntest set: Test Failed at /tmp/tmp818je59s.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp818je59s.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp818je59s.jl:62\ntest set: Test Failed at /tmp/tmp818je59s.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp818je59s.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp818je59s.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp818je59s.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphivh18jo.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmphivh18jo.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphivh18jo.jl:62\ntest set: Test Failed at /tmp/tmphivh18jo.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphivh18jo.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphivh18jo.jl:62\ntest set: Test Failed at /tmp/tmphivh18jo.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphivh18jo.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphivh18jo.jl:62\ntest set: Test Failed at /tmp/tmphivh18jo.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphivh18jo.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphivh18jo.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphivh18jo.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbsyrjwyn.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpbsyrjwyn.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbsyrjwyn.jl:62\\ntest set: Test Failed at /tmp/tmpbsyrjwyn.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpbsyrjwyn.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbsyrjwyn.jl:62\\ntest set: Test Failed at /tmp/tmpbsyrjwyn.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpbsyrjwyn.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbsyrjwyn.jl:62\\ntest set: Test Failed at /tmp/tmpbsyrjwyn.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpbsyrjwyn.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbsyrjwyn.jl:62\\nTest Summary: | Pass  Fail \
    \ '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades\n\
    \        if grade >= 4.0\n            push!(letter_grades, \"A+\")\n        elseif\
    \ grade >= 3.7\n            push!(letter_grades, \"A\")\n        elseif grade\
    \ >= 3.3\n            push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n\
    \            push!(letter_grades, \"B+\")\n        elseif grade >= 2.7\n     \
    \       push!(letter_grades, \"B\")\n        elseif grade >= 2.3\n           \
    \ push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n            push!(letter_grades,\
    \ \"C+\")\n        elseif grade >= 1.7\n            push!(letter_grades, \"C\"\
    )\n        elseif grade >= 1.3\n            push!(letter_grades, \"C-\")\n   \
    \     elseif grade >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ grade >= 0.7\n            push!(letter_grades, \"D\")\n        elseif grade\
    \ >= 0.0\n            push!(letter_grades, \"D-\")\n        else\n           \
    \ push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpj19je_xc.jl:66\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpj19je_xc.jl:66\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj19je_xc.jl:65\ntest set: Test Failed at /tmp/tmpj19je_xc.jl:69\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj19je_xc.jl:69\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj19je_xc.jl:65\ntest set: Test Failed at /tmp/tmpj19je_xc.jl:70\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpj19je_xc.jl:70\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj19je_xc.jl:65\ntest set: Test Failed at /tmp/tmpj19je_xc.jl:71\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpj19je_xc.jl:71\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj19je_xc.jl:65\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj19je_xc.jl:63\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades\n    \"\"\"\n    letter_grades = []\n    for grade in grades\n\
    \        if grade >= 4.0\n            push!(letter_grades, \"A+\")\n        elseif\
    \ grade >= 3.7\n            push!(letter_grades, \"A\")\n        elseif grade\
    \ >= 3.3\n            push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n\
    \            push!(letter_grades, \"B+\")\n        elseif grade >= 2.7\n     \
    \       push!(letter_grades, \"B\")\n        elseif grade >= 2.3\n           \
    \ push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n            push!(letter_grades,\
    \ \"C+\")\n        elseif grade >= 1.7\n            push!(letter_grades, \"C\"\
    )\n        elseif grade >= 1.3\n            push!(letter_grades, \"C-\")\n   \
    \     elseif grade >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ grade >= 0.7\n            push!(letter_grades, \"D\")\n        elseif grade\
    \ >= 0.0\n            push!(letter_grades, \"D-\")\n        elseif grade == 0.0\n\
    \            push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpl4tzsr6j.jl:66\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpl4tzsr6j.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpl4tzsr6j.jl:65\\ntest set: Test Failed at /tmp/tmpl4tzsr6j.jl:69\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpl4tzsr6j.jl:69\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpl4tzsr6j.jl:65\\ntest set: Test Failed at /tmp/tmpl4tzsr6j.jl:70\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpl4tzsr6j.jl:70\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpl4tzsr6j.jl:65\\ntest set: Test Failed at /tmp/tmpl4tzsr6j.jl:71\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpl4tzsr6j.jl:71\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpl4tzsr6j.jl:65\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     4      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades.\n    \"\"\"\n    # Define a dictionary of grades\n    grades_dict\
    \ = Dict(4.0 => \"A+\", 3.7 => \"A\", 3.3 => \"A-\", 3.0 => \"B+\", 2.7 => \"\
    B\", 2.3 => \"B-\", 2.0 => \"C+\", 1.7 => \"C\", 1.3 => \"C-\", 1.0 => \"D+\"\
    , 0.7 => \"D\", 0.0 => \"D-\", -1.0 => \"E\")\n    # Define a vector to store\
    \ the letter grades\n    letter_grades = Vector{String}(undef, length(grades))\n\
    \    # Loop over the grades\n    for i in 1:length(grades)\n        # Loop over\
    \ the grades in the dictionary\n        for key in keys(grades_dict)\n       \
    \     # Check if the grade is greater than or equal to the key\n            if\
    \ grades[i] >= key\n                # If so, assign the letter grade to the letter_grades\
    \ vector\n                letter_grades[i] = grades_dict[key]\n              \
    \  # Break out of the loop\n                break\n            end\n        end\n\
    \    end\n    # Return the letter grades\n    return letter_grades\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpjooti7_8.jl:54\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    C+\", \"C+\", \"E\", \"C+\", \"C+\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpjooti7_8.jl:54\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjooti7_8.jl:53\ntest set: Test Failed at /tmp/tmpjooti7_8.jl:55\n\
    \  Expression: candidate([1.2]) == [\"D+\"]\n   Evaluated: [\"E\"] == [\"D+\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpjooti7_8.jl:55\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjooti7_8.jl:53\ntest set: Test Failed at /tmp/tmpjooti7_8.jl:56\n\
    \  Expression: candidate([0.5]) == [\"D-\"]\n   Evaluated: [\"E\"] == [\"D-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpjooti7_8.jl:56\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjooti7_8.jl:53\ntest set: Test Failed at /tmp/tmpjooti7_8.jl:58\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"E\", \"E\", \"E\", \"C+\", \"C+\"] == [\"D\"\
    , \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpjooti7_8.jl:58\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjooti7_8.jl:53\ntest set: Test Failed at /tmp/tmpjooti7_8.jl:59\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"E\"\
    , \"E\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpjooti7_8.jl:59\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjooti7_8.jl:53\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjooti7_8.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfufderhu.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpfufderhu.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfufderhu.jl:62\ntest set: Test Failed at /tmp/tmpfufderhu.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfufderhu.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfufderhu.jl:62\ntest set: Test Failed at /tmp/tmpfufderhu.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfufderhu.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfufderhu.jl:62\ntest set: Test Failed at /tmp/tmpfufderhu.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfufderhu.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfufderhu.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfufderhu.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8_d1pjeh.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp8_d1pjeh.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8_d1pjeh.jl:62\\ntest set: Test Failed at /tmp/tmp8_d1pjeh.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp8_d1pjeh.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8_d1pjeh.jl:62\\ntest set: Test Failed at /tmp/tmp8_d1pjeh.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp8_d1pjeh.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8_d1pjeh.jl:62\\ntest set: Test Failed at /tmp/tmp8_d1pjeh.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp8_d1pjeh.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8_d1pjeh.jl:62\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Your code here\n    return letter_grades\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpp3wg599z.jl:34\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmpp3wg599z.jl:27\n   [2]\
    \ top-level scope at /tmp/tmpp3wg599z.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp3wg599z.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpp3wg599z.jl:35\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmpp3wg599z.jl:27\n   [2]\
    \ top-level scope at /tmp/tmpp3wg599z.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp3wg599z.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpp3wg599z.jl:36\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmpp3wg599z.jl:27\n   [2]\
    \ top-level scope at /tmp/tmpp3wg599z.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp3wg599z.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpp3wg599z.jl:37\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(::Array{Float64,1}) at /tmp/tmpp3wg599z.jl:27\n   [2]\
    \ top-level scope at /tmp/tmpp3wg599z.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp3wg599z.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpp3wg599z.jl:38\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  UndefVarError:\
    \ letter_grades not defined\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1})\
    \ at /tmp/tmpp3wg599z.jl:27\n   [2] top-level scope at /tmp/tmpp3wg599z.jl:38\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp3wg599z.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpp3wg599z.jl:39\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  UndefVarError: letter_grades not defined\n  Stacktrace:\n\
    \   [1] numerical_letter_grade(::Array{Float64,1}) at /tmp/tmpp3wg599z.jl:27\n\
    \   [2] top-level scope at /tmp/tmpp3wg599z.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp3wg599z.jl:33\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp3wg599z.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades\n    \"\"\"\n    letter_grades = []\n    for grade in grades\n\
    \        if grade >= 4.0\n            push!(letter_grades, \"A+\")\n        elseif\
    \ grade >= 3.7\n            push!(letter_grades, \"A\")\n        elseif grade\
    \ >= 3.3\n            push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n\
    \            push!(letter_grades, \"B+\")\n        elseif grade >= 2.7\n     \
    \       push!(letter_grades, \"B\")\n        elseif grade >= 2.3\n           \
    \ push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n            push!(letter_grades,\
    \ \"C+\")\n        elseif grade >= 1.7\n            push!(letter_grades, \"C\"\
    )\n        elseif grade >= 1.3\n            push!(letter_grades, \"C-\")\n   \
    \     elseif grade >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ grade >= 0.7\n            push!(letter_grades, \"D\")\n        elseif grade\
    \ >= 0.0\n            push!(letter_grades, \"D-\")\n        else\n           \
    \ push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6kcvmen_.jl:66\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6kcvmen_.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6kcvmen_.jl:65\\ntest set: Test Failed at /tmp/tmp6kcvmen_.jl:69\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6kcvmen_.jl:69\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6kcvmen_.jl:65\\ntest set: Test Failed at /tmp/tmp6kcvmen_.jl:70\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6kcvmen_.jl:70\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6kcvmen_.jl:65\\ntest set: Test Failed at /tmp/tmp6kcvmen_.jl:71\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6kcvmen_.jl:71\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6kcvmen_.jl:65\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpct83kb08.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpct83kb08.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpct83kb08.jl:62\\ntest set: Test Failed at /tmp/tmpct83kb08.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpct83kb08.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpct83kb08.jl:62\\ntest set: Test Failed at /tmp/tmpct83kb08.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpct83kb08.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpct83kb08.jl:62\\ntest set: Test Failed at /tmp/tmpct83kb08.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpct83kb08.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpct83kb08.jl:62\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     4  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades\n    \"\"\"\n    letter_grades = []\n    for grade in grades\n\
    \        if grade >= 4.0\n            push!(letter_grades, \"A+\")\n        elseif\
    \ grade >= 3.7\n            push!(letter_grades, \"A\")\n        elseif grade\
    \ >= 3.3\n            push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n\
    \            push!(letter_grades, \"B+\")\n        elseif grade >= 2.7\n     \
    \       push!(letter_grades, \"B\")\n        elseif grade >= 2.3\n           \
    \ push!(letter_grades, \"B-\")\n        elseif grade >= 2.0\n            push!(letter_grades,\
    \ \"C+\")\n        elseif grade >= 1.7\n            push!(letter_grades, \"C\"\
    )\n        elseif grade >= 1.3\n            push!(letter_grades, \"C-\")\n   \
    \     elseif grade >= 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ grade >= 0.7\n            push!(letter_grades, \"D\")\n        elseif grade\
    \ >= 0.0\n            push!(letter_grades, \"D-\")\n        else\n           \
    \ push!(letter_grades, \"E\")\n        end\n    end\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp3fz6cvlr.jl:66\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp3fz6cvlr.jl:66\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fz6cvlr.jl:65\ntest set: Test Failed at /tmp/tmp3fz6cvlr.jl:69\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3fz6cvlr.jl:69\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fz6cvlr.jl:65\ntest set: Test Failed at /tmp/tmp3fz6cvlr.jl:70\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp3fz6cvlr.jl:70\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fz6cvlr.jl:65\ntest set: Test Failed at /tmp/tmp3fz6cvlr.jl:71\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp3fz6cvlr.jl:71\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fz6cvlr.jl:65\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3fz6cvlr.jl:63\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq75rncaq.jl:33\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpq75rncaq.jl:27\n   [2] top-level scope at /tmp/tmpq75rncaq.jl:33\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq75rncaq.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpq75rncaq.jl:34\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpq75rncaq.jl:27\n   [2] top-level scope at /tmp/tmpq75rncaq.jl:34\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq75rncaq.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpq75rncaq.jl:35\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpq75rncaq.jl:27\n   [2] top-level scope at /tmp/tmpq75rncaq.jl:35\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq75rncaq.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpq75rncaq.jl:36\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpq75rncaq.jl:27\n   [2] top-level scope at /tmp/tmpq75rncaq.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq75rncaq.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpq75rncaq.jl:37\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\n\
    \  Closest candidates are:\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpq75rncaq.jl:27\n   [2] top-level scope at /tmp/tmpq75rncaq.jl:37\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq75rncaq.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpq75rncaq.jl:38\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\n  Closest candidates are:\n  \
    \  convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpq75rncaq.jl:27\n   [2] top-level scope at /tmp/tmpq75rncaq.jl:38\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq75rncaq.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq75rncaq.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpu79wxhzx.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpu79wxhzx.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu79wxhzx.jl:62\ntest set: Test Failed at /tmp/tmpu79wxhzx.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpu79wxhzx.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu79wxhzx.jl:62\ntest set: Test Failed at /tmp/tmpu79wxhzx.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpu79wxhzx.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu79wxhzx.jl:62\ntest set: Test Failed at /tmp/tmpu79wxhzx.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpu79wxhzx.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu79wxhzx.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu79wxhzx.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpvow64uc7.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpvow64uc7.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvow64uc7.jl:62\ntest set: Test Failed at /tmp/tmpvow64uc7.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvow64uc7.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvow64uc7.jl:62\ntest set: Test Failed at /tmp/tmpvow64uc7.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvow64uc7.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvow64uc7.jl:62\ntest set: Test Failed at /tmp/tmpvow64uc7.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvow64uc7.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvow64uc7.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvow64uc7.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpj2lclq6k.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpj2lclq6k.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj2lclq6k.jl:62\ntest set: Test Failed at /tmp/tmpj2lclq6k.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj2lclq6k.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj2lclq6k.jl:62\ntest set: Test Failed at /tmp/tmpj2lclq6k.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpj2lclq6k.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj2lclq6k.jl:62\ntest set: Test Failed at /tmp/tmpj2lclq6k.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpj2lclq6k.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj2lclq6k.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj2lclq6k.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(grades_letter, \"A+\")\n        elseif i > 3.7\n            push!(grades_letter,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letter, \"A-\")\n \
    \       elseif i > 3.0\n            push!(grades_letter, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letter, \"B\")\n        elseif i > 2.3\n \
    \           push!(grades_letter, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(grades_letter, \"C+\")\n        elseif i > 1.7\n            push!(grades_letter,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letter, \"C-\")\n \
    \       elseif i > 1.0\n            push!(grades_letter, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letter, \"D\")\n        elseif i > 0.0\n \
    \           push!(grades_letter, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(grades_letter, \"E\")\n        end\n    end\n    return grades_letter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqkzvbodi.jl:33\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpqkzvbodi.jl:27\n   [2] top-level scope at /tmp/tmpqkzvbodi.jl:33\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqkzvbodi.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpqkzvbodi.jl:34\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpqkzvbodi.jl:27\n   [2] top-level scope at /tmp/tmpqkzvbodi.jl:34\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqkzvbodi.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpqkzvbodi.jl:35\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpqkzvbodi.jl:27\n   [2] top-level scope at /tmp/tmpqkzvbodi.jl:35\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqkzvbodi.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpqkzvbodi.jl:36\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpqkzvbodi.jl:27\n   [2] top-level scope at /tmp/tmpqkzvbodi.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqkzvbodi.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpqkzvbodi.jl:37\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\n\
    \  Closest candidates are:\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpqkzvbodi.jl:27\n   [2] top-level scope at /tmp/tmpqkzvbodi.jl:37\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqkzvbodi.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpqkzvbodi.jl:38\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\n  Closest candidates are:\n  \
    \  convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpqkzvbodi.jl:27\n   [2] top-level scope at /tmp/tmpqkzvbodi.jl:38\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqkzvbodi.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqkzvbodi.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        elseif grade == 0.0\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpoqb5xphl.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpoqb5xphl.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoqb5xphl.jl:62\ntest set: Test Failed at /tmp/tmpoqb5xphl.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpoqb5xphl.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoqb5xphl.jl:62\ntest set: Test Failed at /tmp/tmpoqb5xphl.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpoqb5xphl.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoqb5xphl.jl:62\ntest set: Test Failed at /tmp/tmpoqb5xphl.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpoqb5xphl.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoqb5xphl.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoqb5xphl.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbd9lz0i_.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpbd9lz0i_.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbd9lz0i_.jl:62\ntest set: Test Failed at /tmp/tmpbd9lz0i_.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbd9lz0i_.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbd9lz0i_.jl:62\ntest set: Test Failed at /tmp/tmpbd9lz0i_.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpbd9lz0i_.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbd9lz0i_.jl:62\ntest set: Test Failed at /tmp/tmpbd9lz0i_.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpbd9lz0i_.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbd9lz0i_.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbd9lz0i_.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades\n    \"\"\"\n    grades_letter = []\n    for i in grades\n\
    \        if i == 4.0\n            push!(grades_letter, \"A+\")\n        elseif\
    \ i > 3.7\n            push!(grades_letter, \"A\")\n        elseif i > 3.3\n \
    \           push!(grades_letter, \"A-\")\n        elseif i > 3.0\n           \
    \ push!(grades_letter, \"B+\")\n        elseif i > 2.7\n            push!(grades_letter,\
    \ \"B\")\n        elseif i > 2.3\n            push!(grades_letter, \"B-\")\n \
    \       elseif i > 2.0\n            push!(grades_letter, \"C+\")\n        elseif\
    \ i > 1.7\n            push!(grades_letter, \"C\")\n        elseif i > 1.3\n \
    \           push!(grades_letter, \"C-\")\n        elseif i > 1.0\n           \
    \ push!(grades_letter, \"D+\")\n        elseif i > 0.7\n            push!(grades_letter,\
    \ \"D\")\n        elseif i > 0.0\n            push!(grades_letter, \"D-\")\n \
    \       elseif i == 0.0\n            push!(grades_letter, \"E\")\n        end\n\
    \    end\n    return grades_letter\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpxqg6et8w.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpxqg6et8w.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxqg6et8w.jl:62\ntest set: Test Failed at /tmp/tmpxqg6et8w.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxqg6et8w.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxqg6et8w.jl:62\ntest set: Test Failed at /tmp/tmpxqg6et8w.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpxqg6et8w.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxqg6et8w.jl:62\ntest set: Test Failed at /tmp/tmpxqg6et8w.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpxqg6et8w.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxqg6et8w.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxqg6et8w.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for i in 1:length(grades)\n        if grades[i]\
    \ == 4.0\n            push!(grades_letter, \"A+\")\n        elseif grades[i] >\
    \ 3.7\n            push!(grades_letter, \"A\")\n        elseif grades[i] > 3.3\n\
    \            push!(grades_letter, \"A-\")\n        elseif grades[i] > 3.0\n  \
    \          push!(grades_letter, \"B+\")\n        elseif grades[i] > 2.7\n    \
    \        push!(grades_letter, \"B\")\n        elseif grades[i] > 2.3\n       \
    \     push!(grades_letter, \"B-\")\n        elseif grades[i] > 2.0\n         \
    \   push!(grades_letter, \"C+\")\n        elseif grades[i] > 1.7\n           \
    \ push!(grades_letter, \"C\")\n        elseif grades[i] > 1.3\n            push!(grades_letter,\
    \ \"C-\")\n        elseif grades[i] > 1.0\n            push!(grades_letter, \"\
    D+\")\n        elseif grades[i] > 0.7\n            push!(grades_letter, \"D\"\
    )\n        elseif grades[i] > 0.0\n            push!(grades_letter, \"D-\")\n\
    \        elseif grades[i] == 0.0\n            push!(grades_letter, \"E\")\n  \
    \      end\n    end\n    return grades_letter\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpc7pgbh0n.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpc7pgbh0n.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpc7pgbh0n.jl:62\\ntest set: Test Failed at /tmp/tmpc7pgbh0n.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpc7pgbh0n.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpc7pgbh0n.jl:62\\ntest set: Test Failed at /tmp/tmpc7pgbh0n.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpc7pgbh0n.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpc7pgbh0n.jl:62\\ntest set: Test Failed at /tmp/tmpc7pgbh0n.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpc7pgbh0n.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpc7pgbh0n.jl:62\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp31zuusr3.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"]\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp31zuusr3.jl:27\\n   [2] top-level scope at /tmp/tmp31zuusr3.jl:33\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp31zuusr3.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp31zuusr3.jl:34\\n  Test threw exception\\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp31zuusr3.jl:27\\n   [2] top-level scope at /tmp/tmp31zuusr3.jl:34\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp31zuusr3.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp31zuusr3.jl:35\\n  Test threw exception\\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp31zuusr3.jl:27\\n   [2] top-level scope at /tmp/tmp31zuusr3.jl:35\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp31zuusr3.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp31zuusr3.jl:36\\n  Test threw exception\\n  Expression: candidate([0.0])\
    \ == [\"E\"]\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp31zuusr3.jl:27\\n   [2] top-level scope at /tmp/tmp31zuusr3.jl:36\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp31zuusr3.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp31zuusr3.jl:37\\n  Test threw exception\\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\\\
    n  Closest candidates are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp31zuusr3.jl:27\\n   [2] top-level scope at /tmp/tmp31zuusr3.jl:37\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp31zuusr3.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp31zuusr3.jl:38\\n  Test threw exception\\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\\n  Closest candidates are:\\n\
    \    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp31zuusr3.jl:27\\n   [2] top-level scope at /tmp/tmp31zuusr3.jl:38\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp31zuusr3.jl:32\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     6      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpdaymgv6t.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpdaymgv6t.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdaymgv6t.jl:62\ntest set: Test Failed at /tmp/tmpdaymgv6t.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdaymgv6t.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdaymgv6t.jl:62\ntest set: Test Failed at /tmp/tmpdaymgv6t.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpdaymgv6t.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdaymgv6t.jl:62\ntest set: Test Failed at /tmp/tmpdaymgv6t.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpdaymgv6t.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdaymgv6t.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdaymgv6t.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8rwc3lvk.jl:33\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp8rwc3lvk.jl:27\n   [2] top-level scope at /tmp/tmp8rwc3lvk.jl:33\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8rwc3lvk.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp8rwc3lvk.jl:34\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp8rwc3lvk.jl:27\n   [2] top-level scope at /tmp/tmp8rwc3lvk.jl:34\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8rwc3lvk.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp8rwc3lvk.jl:35\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp8rwc3lvk.jl:27\n   [2] top-level scope at /tmp/tmp8rwc3lvk.jl:35\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8rwc3lvk.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp8rwc3lvk.jl:36\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp8rwc3lvk.jl:27\n   [2] top-level scope at /tmp/tmp8rwc3lvk.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8rwc3lvk.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp8rwc3lvk.jl:37\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\n\
    \  Closest candidates are:\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp8rwc3lvk.jl:27\n   [2] top-level scope at /tmp/tmp8rwc3lvk.jl:37\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8rwc3lvk.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp8rwc3lvk.jl:38\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\n  Closest candidates are:\n  \
    \  convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmp8rwc3lvk.jl:27\n   [2] top-level scope at /tmp/tmp8rwc3lvk.jl:38\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8rwc3lvk.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8rwc3lvk.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letter = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(grades_letter, \"A+\")\n        elseif i > 3.7\n            push!(grades_letter,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letter, \"A-\")\n \
    \       elseif i > 3.0\n            push!(grades_letter, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letter, \"B\")\n        elseif i > 2.3\n \
    \           push!(grades_letter, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(grades_letter, \"C+\")\n        elseif i > 1.7\n            push!(grades_letter,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letter, \"C-\")\n \
    \       elseif i > 1.0\n            push!(grades_letter, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letter, \"D\")\n        elseif i > 0.0\n \
    \           push!(grades_letter, \"D-\")\n        elseif i == 0.0\n          \
    \  push!(grades_letter, \"E\")\n        end\n    end\n    return grades_letter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpipda62vb.jl:33\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpipda62vb.jl:27\n   [2] top-level scope at /tmp/tmpipda62vb.jl:33\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpipda62vb.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpipda62vb.jl:34\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpipda62vb.jl:27\n   [2] top-level scope at /tmp/tmpipda62vb.jl:34\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpipda62vb.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpipda62vb.jl:35\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpipda62vb.jl:27\n   [2] top-level scope at /tmp/tmpipda62vb.jl:35\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpipda62vb.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpipda62vb.jl:36\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpipda62vb.jl:27\n   [2] top-level scope at /tmp/tmpipda62vb.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpipda62vb.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpipda62vb.jl:37\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\n\
    \  Closest candidates are:\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpipda62vb.jl:27\n   [2] top-level scope at /tmp/tmpipda62vb.jl:37\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpipda62vb.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpipda62vb.jl:38\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\n  Closest candidates are:\n  \
    \  convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpipda62vb.jl:27\n   [2] top-level scope at /tmp/tmpipda62vb.jl:38\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpipda62vb.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpipda62vb.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprt58q45k.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmprt58q45k.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprt58q45k.jl:62\ntest set: Test Failed at /tmp/tmprt58q45k.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprt58q45k.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprt58q45k.jl:62\ntest set: Test Failed at /tmp/tmprt58q45k.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprt58q45k.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprt58q45k.jl:62\ntest set: Test Failed at /tmp/tmprt58q45k.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprt58q45k.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprt58q45k.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprt58q45k.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6nsavdkc.jl:63\\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6nsavdkc.jl:63\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6nsavdkc.jl:62\\ntest set: Test Failed at /tmp/tmp6nsavdkc.jl:66\\\
    n  Expression: candidate([0.0]) == [\"E\"]\\n   Evaluated: [\"D-\"] == [\"E\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6nsavdkc.jl:66\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6nsavdkc.jl:62\\ntest set: Test Failed at /tmp/tmp6nsavdkc.jl:67\\\
    n  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6nsavdkc.jl:67\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6nsavdkc.jl:62\\ntest set: Test Failed at /tmp/tmp6nsavdkc.jl:68\\\
    n  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6nsavdkc.jl:68\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6nsavdkc.jl:62\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     4      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_letters = []\n    for i in grades\n        if i == 4.0\n      \
    \      push!(grades_letters, \"A+\")\n        elseif i > 3.7\n            push!(grades_letters,\
    \ \"A\")\n        elseif i > 3.3\n            push!(grades_letters, \"A-\")\n\
    \        elseif i > 3.0\n            push!(grades_letters, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(grades_letters, \"B\")\n        elseif i > 2.3\n\
    \            push!(grades_letters, \"B-\")\n        elseif i > 2.0\n         \
    \   push!(grades_letters, \"C+\")\n        elseif i > 1.7\n            push!(grades_letters,\
    \ \"C\")\n        elseif i > 1.3\n            push!(grades_letters, \"C-\")\n\
    \        elseif i > 1.0\n            push!(grades_letters, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(grades_letters, \"D\")\n        elseif i > 0.0\n\
    \            push!(grades_letters, \"D-\")\n        else\n            push!(grades_letters,\
    \ \"E\")\n        end\n    end\n    return grades_letters\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpy97z1v5y.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpy97z1v5y.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy97z1v5y.jl:62\ntest set: Test Failed at /tmp/tmpy97z1v5y.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy97z1v5y.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy97z1v5y.jl:62\ntest set: Test Failed at /tmp/tmpy97z1v5y.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpy97z1v5y.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy97z1v5y.jl:62\ntest set: Test Failed at /tmp/tmpy97z1v5y.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpy97z1v5y.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy97z1v5y.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy97z1v5y.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpf2gpz2na.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpf2gpz2na.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf2gpz2na.jl:62\ntest set: Test Failed at /tmp/tmpf2gpz2na.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpf2gpz2na.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf2gpz2na.jl:62\ntest set: Test Failed at /tmp/tmpf2gpz2na.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpf2gpz2na.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf2gpz2na.jl:62\ntest set: Test Failed at /tmp/tmpf2gpz2na.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpf2gpz2na.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf2gpz2na.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf2gpz2na.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpgmcv2vr5.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpgmcv2vr5.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgmcv2vr5.jl:62\ntest set: Test Failed at /tmp/tmpgmcv2vr5.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgmcv2vr5.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgmcv2vr5.jl:62\ntest set: Test Failed at /tmp/tmpgmcv2vr5.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgmcv2vr5.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgmcv2vr5.jl:62\ntest set: Test Failed at /tmp/tmpgmcv2vr5.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgmcv2vr5.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgmcv2vr5.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgmcv2vr5.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a vector of grades and returns a vector\
    \ of letter grades.\n    \"\"\"\n    letter_grades = []\n    for g in grades\n\
    \        if g == 4.0\n            push!(letter_grades, \"A+\")\n        elseif\
    \ g > 3.7\n            push!(letter_grades, \"A\")\n        elseif g > 3.3\n \
    \           push!(letter_grades, \"A-\")\n        elseif g > 3.0\n           \
    \ push!(letter_grades, \"B+\")\n        elseif g > 2.7\n            push!(letter_grades,\
    \ \"B\")\n        elseif g > 2.3\n            push!(letter_grades, \"B-\")\n \
    \       elseif g > 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ g > 1.7\n            push!(letter_grades, \"C\")\n        elseif g > 1.3\n \
    \           push!(letter_grades, \"C-\")\n        elseif g > 1.0\n           \
    \ push!(letter_grades, \"D+\")\n        elseif g > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif g > 0.0\n            push!(letter_grades, \"D-\")\n \
    \       else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        elseif grade == 0.0\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzr1ta2j7.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpzr1ta2j7.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzr1ta2j7.jl:62\ntest set: Test Failed at /tmp/tmpzr1ta2j7.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzr1ta2j7.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzr1ta2j7.jl:62\ntest set: Test Failed at /tmp/tmpzr1ta2j7.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzr1ta2j7.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzr1ta2j7.jl:62\ntest set: Test Failed at /tmp/tmpzr1ta2j7.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzr1ta2j7.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzr1ta2j7.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzr1ta2j7.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo466csq1.jl:33\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpo466csq1.jl:27\n   [2] top-level scope at /tmp/tmpo466csq1.jl:33\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo466csq1.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpo466csq1.jl:34\n  Test threw exception\n  Expression: candidate([1.2])\
    \ == [\"D+\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpo466csq1.jl:27\n   [2] top-level scope at /tmp/tmpo466csq1.jl:34\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo466csq1.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpo466csq1.jl:35\n  Test threw exception\n  Expression: candidate([0.5])\
    \ == [\"D-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpo466csq1.jl:27\n   [2] top-level scope at /tmp/tmpo466csq1.jl:35\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo466csq1.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpo466csq1.jl:36\n  Test threw exception\n  Expression: candidate([0.0])\
    \ == [\"E\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpo466csq1.jl:27\n   [2] top-level scope at /tmp/tmpo466csq1.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo466csq1.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpo466csq1.jl:37\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\n\
    \  Closest candidates are:\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpo466csq1.jl:27\n   [2] top-level scope at /tmp/tmpo466csq1.jl:37\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo466csq1.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpo466csq1.jl:38\n  Test threw exception\n  Expression: candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{String,1}\n  Closest candidates are:\n  \
    \  convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(::Array{Float64,1}) at\
    \ /tmp/tmpo466csq1.jl:27\n   [2] top-level scope at /tmp/tmpo466csq1.jl:38\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpo466csq1.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo466csq1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for i in grades\n        if i == 4.0\n       \
    \     push!(letter_grades, \"A+\")\n        elseif i > 3.7\n            push!(letter_grades,\
    \ \"A\")\n        elseif i > 3.3\n            push!(letter_grades, \"A-\")\n \
    \       elseif i > 3.0\n            push!(letter_grades, \"B+\")\n        elseif\
    \ i > 2.7\n            push!(letter_grades, \"B\")\n        elseif i > 2.3\n \
    \           push!(letter_grades, \"B-\")\n        elseif i > 2.0\n           \
    \ push!(letter_grades, \"C+\")\n        elseif i > 1.7\n            push!(letter_grades,\
    \ \"C\")\n        elseif i > 1.3\n            push!(letter_grades, \"C-\")\n \
    \       elseif i > 1.0\n            push!(letter_grades, \"D+\")\n        elseif\
    \ i > 0.7\n            push!(letter_grades, \"D\")\n        elseif i > 0.0\n \
    \           push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmplp5_6n9x.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmplp5_6n9x.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplp5_6n9x.jl:62\ntest set: Test Failed at /tmp/tmplp5_6n9x.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplp5_6n9x.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplp5_6n9x.jl:62\ntest set: Test Failed at /tmp/tmplp5_6n9x.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmplp5_6n9x.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplp5_6n9x.jl:62\ntest set: Test Failed at /tmp/tmplp5_6n9x.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmplp5_6n9x.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplp5_6n9x.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplp5_6n9x.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpu_yyk1qk.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpu_yyk1qk.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu_yyk1qk.jl:62\ntest set: Test Failed at /tmp/tmpu_yyk1qk.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpu_yyk1qk.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu_yyk1qk.jl:62\ntest set: Test Failed at /tmp/tmpu_yyk1qk.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpu_yyk1qk.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu_yyk1qk.jl:62\ntest set: Test Failed at /tmp/tmpu_yyk1qk.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpu_yyk1qk.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu_yyk1qk.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu_yyk1qk.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade >= 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade >= 3.7\n     \
    \       push!(letter_grades, \"A\")\n        elseif grade >= 3.3\n           \
    \ push!(letter_grades, \"A-\")\n        elseif grade >= 3.0\n            push!(letter_grades,\
    \ \"B+\")\n        elseif grade >= 2.7\n            push!(letter_grades, \"B\"\
    )\n        elseif grade >= 2.3\n            push!(letter_grades, \"B-\")\n   \
    \     elseif grade >= 2.0\n            push!(letter_grades, \"C+\")\n        elseif\
    \ grade >= 1.7\n            push!(letter_grades, \"C\")\n        elseif grade\
    \ >= 1.3\n            push!(letter_grades, \"C-\")\n        elseif grade >= 1.0\n\
    \            push!(letter_grades, \"D+\")\n        elseif grade >= 0.7\n     \
    \       push!(letter_grades, \"D\")\n        elseif grade >= 0.0\n           \
    \ push!(letter_grades, \"D-\")\n        else\n            push!(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp1kc8mgzr.jl:63\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    A+\", \"B+\", \"C\", \"C+\", \"A-\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp1kc8mgzr.jl:63\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1kc8mgzr.jl:62\ntest set: Test Failed at /tmp/tmp1kc8mgzr.jl:66\n\
    \  Expression: candidate([0.0]) == [\"E\"]\n   Evaluated: [\"D-\"] == [\"E\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1kc8mgzr.jl:66\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1kc8mgzr.jl:62\ntest set: Test Failed at /tmp/tmp1kc8mgzr.jl:67\n\
    \  Expression: candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"]\n   Evaluated: [\"D+\", \"D-\", \"C-\", \"B\", \"A-\"] == [\"\
    D\", \"D-\", \"C-\", \"B\", \"B+\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp1kc8mgzr.jl:67\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1kc8mgzr.jl:62\ntest set: Test Failed at /tmp/tmp1kc8mgzr.jl:68\n\
    \  Expression: candidate([0.0, 0.7]) == [\"E\", \"D-\"]\n   Evaluated: [\"D-\"\
    , \"D\"] == [\"E\", \"D-\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp1kc8mgzr.jl:68\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1kc8mgzr.jl:62\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1kc8mgzr.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = []\n    for grade in grades\n        if grade == 4.0\n\
    \            push!(letter_grades, \"A+\")\n        elseif grade > 3.7\n      \
    \      push!(letter_grades, \"A\")\n        elseif grade > 3.3\n            push!(letter_grades,\
    \ \"A-\")\n        elseif grade > 3.0\n            push!(letter_grades, \"B+\"\
    )\n        elseif grade > 2.7\n            push!(letter_grades, \"B\")\n     \
    \   elseif grade > 2.3\n            push!(letter_grades, \"B-\")\n        elseif\
    \ grade > 2.0\n            push!(letter_grades, \"C+\")\n        elseif grade\
    \ > 1.7\n            push!(letter_grades, \"C\")\n        elseif grade > 1.3\n\
    \            push!(letter_grades, \"C-\")\n        elseif grade > 1.0\n      \
    \      push!(letter_grades, \"D+\")\n        elseif grade > 0.7\n            push!(letter_grades,\
    \ \"D\")\n        elseif grade > 0.0\n            push!(letter_grades, \"D-\"\
    )\n        else\n            push!(letter_grades, \"E\")\n        end\n    end\n\
    \    return letter_grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
