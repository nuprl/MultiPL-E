name: HumanEval_151_double_the_difference
language: julia
results:
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcpvehxam.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmpcpvehxam.jl:19\n\
    \   [4] top-level scope at /tmp/tmpcpvehxam.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpcpvehxam.jl:25\n  \ntest set: Test Failed at\
    \ /tmp/tmpcpvehxam.jl:30\n  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpcpvehxam.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcpvehxam.jl:25\ntest set: Error During Test at\
    \ /tmp/tmpcpvehxam.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmpcpvehxam.jl:19\n   [4]\
    \ top-level scope at /tmp/tmpcpvehxam.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpcpvehxam.jl:25\n  \ntest set: Test Failed at\
    \ /tmp/tmpcpvehxam.jl:32\n  Expression: candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 330 == 165\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcpvehxam.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcpvehxam.jl:25\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    3     2      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcpvehxam.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    # YOUR CODE HERE\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsxrcc2hy.jl:22\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 0 == 25\nStacktrace:\n [1] top-level scope at /tmp/tmpsxrcc2hy.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsxrcc2hy.jl:20\ntest set: Test Failed at /tmp/tmpsxrcc2hy.jl:26\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 0 == 34\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsxrcc2hy.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsxrcc2hy.jl:20\ntest set: Test Failed at /tmp/tmpsxrcc2hy.jl:27\n\
    \  Expression: candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0])\
    \ == 165\n   Evaluated: 0 == 165\nStacktrace:\n [1] top-level scope at /tmp/tmpsxrcc2hy.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsxrcc2hy.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsxrcc2hy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && isinteger(i) && isodd(i)\n\
    \            sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa_i5_2e_.jl:27\n  Test threw exception\n\
    \  Expression: candidate([5.0, 4.0]) == 25\n  MethodError: no method matching\
    \ isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing) at\
    \ missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n \
    \  [1] double_the_difference(::Array{Float64,1}) at /tmp/tmpa_i5_2e_.jl:15\n \
    \  [2] top-level scope at /tmp/tmpa_i5_2e_.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa_i5_2e_.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpa_i5_2e_.jl:30\n  Test threw exception\n  Expression: candidate([-1.0,\
    \ -2.0, 8.0]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmpa_i5_2e_.jl:15\n   [2] top-level scope at /tmp/tmpa_i5_2e_.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa_i5_2e_.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpa_i5_2e_.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmpa_i5_2e_.jl:15\n   [2] top-level scope at /tmp/tmpa_i5_2e_.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa_i5_2e_.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpa_i5_2e_.jl:32\n  Test threw exception\n  Expression: candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n  MethodError: no\
    \ method matching isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing)\
    \ at missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n\
    \   [1] double_the_difference(::Array{Float64,1}) at /tmp/tmpa_i5_2e_.jl:15\n\
    \   [2] top-level scope at /tmp/tmpa_i5_2e_.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa_i5_2e_.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    3      4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_i5_2e_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i>0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsfx4x9_w.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmpsfx4x9_w.jl:19\n\
    \   [4] top-level scope at /tmp/tmpsfx4x9_w.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpsfx4x9_w.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpsfx4x9_w.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmpsfx4x9_w.jl:19\n   [4]\
    \ top-level scope at /tmp/tmpsfx4x9_w.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpsfx4x9_w.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsfx4x9_w.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i>0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf1x97stq.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmpf1x97stq.jl:19\n\
    \   [4] top-level scope at /tmp/tmpf1x97stq.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpf1x97stq.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpf1x97stq.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmpf1x97stq.jl:19\n   [4]\
    \ top-level scope at /tmp/tmpf1x97stq.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpf1x97stq.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf1x97stq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    # YOUR CODE HERE\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe7df7jqv.jl:22\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 0 == 25\nStacktrace:\n [1] top-level scope at /tmp/tmpe7df7jqv.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe7df7jqv.jl:20\ntest set: Test Failed at /tmp/tmpe7df7jqv.jl:26\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 0 == 34\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe7df7jqv.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe7df7jqv.jl:20\ntest set: Test Failed at /tmp/tmpe7df7jqv.jl:27\n\
    \  Expression: candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0])\
    \ == 165\n   Evaluated: 0 == 165\nStacktrace:\n [1] top-level scope at /tmp/tmpe7df7jqv.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe7df7jqv.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe7df7jqv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && isinteger(i) && isodd(i)\n\
    \            sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9r27xkpw.jl:27\n  Test threw exception\n\
    \  Expression: candidate([5.0, 4.0]) == 25\n  MethodError: no method matching\
    \ isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing) at\
    \ missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n \
    \  [1] double_the_difference(::Array{Float64,1}) at /tmp/tmp9r27xkpw.jl:15\n \
    \  [2] top-level scope at /tmp/tmp9r27xkpw.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9r27xkpw.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp9r27xkpw.jl:30\n  Test threw exception\n  Expression: candidate([-1.0,\
    \ -2.0, 8.0]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmp9r27xkpw.jl:15\n   [2] top-level scope at /tmp/tmp9r27xkpw.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9r27xkpw.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp9r27xkpw.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmp9r27xkpw.jl:15\n   [2] top-level scope at /tmp/tmp9r27xkpw.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9r27xkpw.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp9r27xkpw.jl:32\n  Test threw exception\n  Expression: candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n  MethodError: no\
    \ method matching isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing)\
    \ at missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n\
    \   [1] double_the_difference(::Array{Float64,1}) at /tmp/tmp9r27xkpw.jl:15\n\
    \   [2] top-level scope at /tmp/tmp9r27xkpw.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9r27xkpw.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    3      4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9r27xkpw.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    # YOUR CODE HERE\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpuwnxh4o2.jl:22\\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\\n   Evaluated: 0 == 25\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpuwnxh4o2.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuwnxh4o2.jl:20\\ntest set: Test Failed at /tmp/tmpuwnxh4o2.jl:26\\\
    n  Expression: candidate([0.2, 3.0, 5.0]) == 34\\n   Evaluated: 0 == 34\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpuwnxh4o2.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuwnxh4o2.jl:20\\ntest set: Test Failed at /tmp/tmpuwnxh4o2.jl:27\\\
    n  Expression: candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0])\
    \ == 165\\n   Evaluated: 0 == 165\\nStacktrace:\\n [1] top-level scope at /tmp/tmpuwnxh4o2.jl:27\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuwnxh4o2.jl:20\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     3      7\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpuwnxh4o2.jl:18\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2==1 && i>0\n            sum +=\
    \ i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    total = 0\n    for i in lst\n        if i % 2 == 1\n            total\
    \ += i^2\n        end\n    end\n    return total\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2eori1ma.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmp2eori1ma.jl:19\n\
    \   [4] top-level scope at /tmp/tmp2eori1ma.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp2eori1ma.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp2eori1ma.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmp2eori1ma.jl:19\n   [4]\
    \ top-level scope at /tmp/tmp2eori1ma.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp2eori1ma.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2eori1ma.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && isinteger(i) && isodd(i)\n\
    \            sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmsld6bk7.jl:27\n  Test threw exception\n\
    \  Expression: candidate([5.0, 4.0]) == 25\n  MethodError: no method matching\
    \ isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing) at\
    \ missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n \
    \  [1] double_the_difference(::Array{Float64,1}) at /tmp/tmpmsld6bk7.jl:15\n \
    \  [2] top-level scope at /tmp/tmpmsld6bk7.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmsld6bk7.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpmsld6bk7.jl:30\n  Test threw exception\n  Expression: candidate([-1.0,\
    \ -2.0, 8.0]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmpmsld6bk7.jl:15\n   [2] top-level scope at /tmp/tmpmsld6bk7.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmsld6bk7.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpmsld6bk7.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmpmsld6bk7.jl:15\n   [2] top-level scope at /tmp/tmpmsld6bk7.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmsld6bk7.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpmsld6bk7.jl:32\n  Test threw exception\n  Expression: candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n  MethodError: no\
    \ method matching isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing)\
    \ at missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n\
    \   [1] double_the_difference(::Array{Float64,1}) at /tmp/tmpmsld6bk7.jl:15\n\
    \   [2] top-level scope at /tmp/tmpmsld6bk7.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmsld6bk7.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    3      4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmsld6bk7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    # YOUR CODE HERE\n    sum = 0\n    for i in lst\n        if i%2 != 0 &&\
    \ i > 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm1fh7t5j.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate([0.1, 0.2, 0.3]) == 0\\n  InexactError:\
    \ Int64(0.14)\\n  Stacktrace:\\n   [1] Int64 at ./float.jl:710 [inlined]\\n  \
    \ [2] convert at ./number.jl:7 [inlined]\\n   [3] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmpm1fh7t5j.jl:20\\n   [4] top-level scope at /tmp/tmpm1fh7t5j.jl:29\\\
    n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpm1fh7t5j.jl:26\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpm1fh7t5j.jl:32\\n  Test threw exception\\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\\n  InexactError: Int64(34.04)\\n  Stacktrace:\\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\\n   [2] convert at ./number.jl:7 [inlined]\\n \
    \  [3] double_the_difference(::Array{Float64,1}) at /tmp/tmpm1fh7t5j.jl:20\\n\
    \   [4] top-level scope at /tmp/tmpm1fh7t5j.jl:32\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpm1fh7t5j.jl:26\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    5      2      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1z4r8jf9.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmp1z4r8jf9.jl:19\n\
    \   [4] top-level scope at /tmp/tmp1z4r8jf9.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp1z4r8jf9.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp1z4r8jf9.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmp1z4r8jf9.jl:19\n   [4]\
    \ top-level scope at /tmp/tmp1z4r8jf9.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp1z4r8jf9.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1z4r8jf9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i%2 == 1\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_9e0w50y.jl:27\n  Test threw exception\n\
    \  Expression: candidate([5.0, 4.0]) == 25\n  MethodError: no method matching\
    \ isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing) at\
    \ missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n \
    \  [1] double_the_difference(::Array{Float64,1}) at /tmp/tmp_9e0w50y.jl:15\n \
    \  [2] top-level scope at /tmp/tmp_9e0w50y.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_9e0w50y.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp_9e0w50y.jl:28\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmp_9e0w50y.jl:15\n   [2] top-level scope at /tmp/tmp_9e0w50y.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_9e0w50y.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp_9e0w50y.jl:29\n  Test threw exception\n  Expression: candidate([-10.0,\
    \ -20.0, -30.0]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmp_9e0w50y.jl:15\n   [2] top-level scope at /tmp/tmp_9e0w50y.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_9e0w50y.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp_9e0w50y.jl:30\n  Test threw exception\n  Expression: candidate([-1.0,\
    \ -2.0, 8.0]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmp_9e0w50y.jl:15\n   [2] top-level scope at /tmp/tmp_9e0w50y.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_9e0w50y.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp_9e0w50y.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmp_9e0w50y.jl:15\n   [2] top-level scope at /tmp/tmp_9e0w50y.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_9e0w50y.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp_9e0w50y.jl:32\n  Test threw exception\n  Expression: candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n  MethodError: no\
    \ method matching isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing)\
    \ at missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n\
    \   [1] double_the_difference(::Array{Float64,1}) at /tmp/tmp_9e0w50y.jl:15\n\
    \   [2] top-level scope at /tmp/tmp_9e0w50y.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_9e0w50y.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_9e0w50y.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && trunc(i) == i && i % 2\
    \ != 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxd9mtmmp.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmpxd9mtmmp.jl:19\n\
    \   [4] top-level scope at /tmp/tmpxd9mtmmp.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpxd9mtmmp.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpxd9mtmmp.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmpxd9mtmmp.jl:19\n   [4]\
    \ top-level scope at /tmp/tmpxd9mtmmp.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpxd9mtmmp.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxd9mtmmp.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && isinteger(i) && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i*i\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && isinteger(i) && isodd(i)\n\
    \            sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6u3xolnw.jl:27\n  Test threw exception\n\
    \  Expression: candidate([5.0, 4.0]) == 25\n  MethodError: no method matching\
    \ isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing) at\
    \ missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n \
    \  [1] double_the_difference(::Array{Float64,1}) at /tmp/tmp6u3xolnw.jl:15\n \
    \  [2] top-level scope at /tmp/tmp6u3xolnw.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6u3xolnw.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp6u3xolnw.jl:30\n  Test threw exception\n  Expression: candidate([-1.0,\
    \ -2.0, 8.0]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmp6u3xolnw.jl:15\n   [2] top-level scope at /tmp/tmp6u3xolnw.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6u3xolnw.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp6u3xolnw.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmp6u3xolnw.jl:15\n   [2] top-level scope at /tmp/tmp6u3xolnw.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6u3xolnw.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp6u3xolnw.jl:32\n  Test threw exception\n  Expression: candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n  MethodError: no\
    \ method matching isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing)\
    \ at missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n\
    \   [1] double_the_difference(::Array{Float64,1}) at /tmp/tmp6u3xolnw.jl:15\n\
    \   [2] top-level scope at /tmp/tmp6u3xolnw.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6u3xolnw.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    3      4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6u3xolnw.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpet3gm8zg.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmpet3gm8zg.jl:19\n\
    \   [4] top-level scope at /tmp/tmpet3gm8zg.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpet3gm8zg.jl:25\n  \ntest set: Test Failed at\
    \ /tmp/tmpet3gm8zg.jl:30\n  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpet3gm8zg.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpet3gm8zg.jl:25\ntest set: Error During Test at\
    \ /tmp/tmpet3gm8zg.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmpet3gm8zg.jl:19\n   [4]\
    \ top-level scope at /tmp/tmpet3gm8zg.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpet3gm8zg.jl:25\n  \ntest set: Test Failed at\
    \ /tmp/tmpet3gm8zg.jl:32\n  Expression: candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 330 == 165\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpet3gm8zg.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpet3gm8zg.jl:25\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    3     2      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpet3gm8zg.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i%1 == 0 && i%2 != 0\n\
    \            sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph3n5po8b.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmph3n5po8b.jl:19\n\
    \   [4] top-level scope at /tmp/tmph3n5po8b.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmph3n5po8b.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmph3n5po8b.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmph3n5po8b.jl:19\n   [4]\
    \ top-level scope at /tmp/tmph3n5po8b.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmph3n5po8b.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph3n5po8b.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i>0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0t0ph174.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmp0t0ph174.jl:19\n\
    \   [4] top-level scope at /tmp/tmp0t0ph174.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp0t0ph174.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp0t0ph174.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmp0t0ph174.jl:19\n   [4]\
    \ top-level scope at /tmp/tmp0t0ph174.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp0t0ph174.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0t0ph174.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps3a5fpj6.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmps3a5fpj6.jl:19\n\
    \   [4] top-level scope at /tmp/tmps3a5fpj6.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmps3a5fpj6.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmps3a5fpj6.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmps3a5fpj6.jl:19\n   [4]\
    \ top-level scope at /tmp/tmps3a5fpj6.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmps3a5fpj6.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps3a5fpj6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4b21l032.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmp4b21l032.jl:19\n\
    \   [4] top-level scope at /tmp/tmp4b21l032.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp4b21l032.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp4b21l032.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmp4b21l032.jl:19\n   [4]\
    \ top-level scope at /tmp/tmp4b21l032.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp4b21l032.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4b21l032.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppn_jgzxr.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmppn_jgzxr.jl:19\n\
    \   [4] top-level scope at /tmp/tmppn_jgzxr.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmppn_jgzxr.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmppn_jgzxr.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmppn_jgzxr.jl:19\n   [4]\
    \ top-level scope at /tmp/tmppn_jgzxr.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmppn_jgzxr.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppn_jgzxr.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && isinteger(i) && isodd(i)\n\
    \            sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqypl395g.jl:27\n  Test threw exception\n\
    \  Expression: candidate([5.0, 4.0]) == 25\n  MethodError: no method matching\
    \ isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing) at\
    \ missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n \
    \  [1] double_the_difference(::Array{Float64,1}) at /tmp/tmpqypl395g.jl:15\n \
    \  [2] top-level scope at /tmp/tmpqypl395g.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqypl395g.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpqypl395g.jl:30\n  Test threw exception\n  Expression: candidate([-1.0,\
    \ -2.0, 8.0]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmpqypl395g.jl:15\n   [2] top-level scope at /tmp/tmpqypl395g.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqypl395g.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpqypl395g.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmpqypl395g.jl:15\n   [2] top-level scope at /tmp/tmpqypl395g.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqypl395g.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpqypl395g.jl:32\n  Test threw exception\n  Expression: candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n  MethodError: no\
    \ method matching isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing)\
    \ at missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n\
    \   [1] double_the_difference(::Array{Float64,1}) at /tmp/tmpqypl395g.jl:15\n\
    \   [2] top-level scope at /tmp/tmpqypl395g.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqypl395g.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    3      4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqypl395g.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    return sum(x^2 for x in lst if x%2 == 1)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpegibsp8d.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Float64}([])) == 0\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\\n   [2] mapreduce_empty(::Function, ::Base.BottomRF{typeof(Base.add_sum)},\
    \ ::Type{T} where T) at ./reduce.jl:334\\n   [3] reduce_empty(::Base.MappingRF{var\"\
    #3#5\",Base.BottomRF{typeof(Base.add_sum)}}, ::Type{T} where T) at ./reduce.jl:321\\\
    n   [4] reduce_empty(::Base.FilteringRF{var\"#4#6\",Base.MappingRF{var\"#3#5\"\
    ,Base.BottomRF{typeof(Base.add_sum)}}}, ::Type{T} where T) at ./reduce.jl:322\\\
    n   [5] reduce_empty_iter at ./reduce.jl:347 [inlined]\\n   [6] reduce_empty_iter\
    \ at ./reduce.jl:346 [inlined]\\n   [7] foldl_impl at ./reduce.jl:46 [inlined]\\\
    n   [8] mapfoldl_impl at ./reduce.jl:41 [inlined]\\n   [9] #mapfoldl#189 at ./reduce.jl:157\
    \ [inlined]\\n   [10] mapfoldl at ./reduce.jl:157 [inlined]\\n   [11] #mapreduce#193\
    \ at ./reduce.jl:283 [inlined]\\n   [12] mapreduce at ./reduce.jl:283 [inlined]\\\
    n   [13] sum at ./reduce.jl:486 [inlined]\\n   [14] sum at ./reduce.jl:503 [inlined]\\\
    n   [15] double_the_difference(::Array{Float64,1}) at /tmp/tmpegibsp8d.jl:13\\\
    n   [16] top-level scope at /tmp/tmpegibsp8d.jl:20\\n   [17] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [18] top-level scope at /tmp/tmpegibsp8d.jl:19\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpegibsp8d.jl:22\\n  Test threw exception\\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\\n  ArgumentError: reducing over an empty collection is not\
    \ allowed\\n  Stacktrace:\\n   [1] _empty_reduce_error() at ./reduce.jl:295\\\
    n   [2] mapreduce_empty(::Function, ::Base.BottomRF{typeof(Base.add_sum)}, ::Type{T}\
    \ where T) at ./reduce.jl:334\\n   [3] reduce_empty(::Base.MappingRF{var\"#3#5\"\
    ,Base.BottomRF{typeof(Base.add_sum)}}, ::Type{T} where T) at ./reduce.jl:321\\\
    n   [4] reduce_empty(::Base.FilteringRF{var\"#4#6\",Base.MappingRF{var\"#3#5\"\
    ,Base.BottomRF{typeof(Base.add_sum)}}}, ::Type{T} where T) at ./reduce.jl:322\\\
    n   [5] reduce_empty_iter at ./reduce.jl:347 [inlined]\\n   [6] reduce_empty_iter\
    \ at ./reduce.jl:346 [inlined]\\n   [7] foldl_impl at ./reduce.jl:46 [inlined]\\\
    n   [8] mapfoldl_impl at ./reduce.jl:41 [inlined]\\n   [9] #mapfoldl#189 at ./reduce.jl:157\
    \ [inlined]\\n   [10] mapfoldl at ./reduce.jl:157 [inlined]\\n   [11] #mapreduce#193\
    \ at ./reduce.jl:283 [inlined]\\n   [12] mapreduce at ./reduce.jl:283 [inlined]\\\
    n   [13] sum at ./reduce.jl:486 [inlined]\\n   [14] sum at ./reduce.jl:503 [inlined]\\\
    n   [15] double_the_difference(::Array{Float64,1}) at /tmp/tmpegibsp8d.jl:13\\\
    n   [16] top-level scope at /tmp/tmpegibsp8d.jl:22\\n   [17] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [18] top-level scope at /tmp/tmpegibsp8d.jl:19\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpegibsp8d.jl:23\\n  Test threw exception\\n  Expression: candidate([-10.0,\
    \ -20.0, -30.0]) == 0\\n  ArgumentError: reducing over an empty collection is\
    \ not allowed\\n  Stacktrace:\\n   [1] _empty_reduce_error() at ./reduce.jl:295\\\
    n   [2] mapreduce_empty(::Function, ::Base.BottomRF{typeof(Base.add_sum)}, ::Type{T}\
    \ where T) at ./reduce.jl:334\\n   [3] reduce_empty(::Base.MappingRF{var\"#3#5\"\
    ,Base.BottomRF{typeof(Base.add_sum)}}, ::Type{T} where T) at ./reduce.jl:321\\\
    n   [4] reduce_empty(::Base.FilteringRF{var\"#4#6\",Base.MappingRF{var\"#3#5\"\
    ,Base.BottomRF{typeof(Base.add_sum)}}}, ::Type{T} where T) at ./reduce.jl:322\\\
    n   [5] reduce_empty_iter at ./reduce.jl:347 [inlined]\\n   [6] reduce_empty_iter\
    \ at ./reduce.jl:346 [inlined]\\n   [7] foldl_impl at ./reduce.jl:46 [inlined]\\\
    n   [8] mapfoldl_impl at ./reduce.jl:41 [inlined]\\n   [9] #mapfoldl#189 at ./reduce.jl:157\
    \ [inlined]\\n   [10] mapfoldl at ./reduce.jl:157 [inlined]\\n   [11] #mapreduce#193\
    \ at ./reduce.jl:283 [inlined]\\n   [12] mapreduce at ./reduce.jl:283 [inlined]\\\
    n   [13] sum at ./reduce.jl:486 [inlined]\\n   [14] sum at ./reduce.jl:503 [inlined]\\\
    n   [15] double_the_difference(::Array{Float64,1}) at /tmp/tmpegibsp8d.jl:13\\\
    n   [16] top-level scope at /tmp/tmpegibsp8d.jl:23\\n   [17] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [18] top-level scope at /tmp/tmpegibsp8d.jl:19\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpegibsp8d.jl:24\\n  Test threw exception\\n  Expression: candidate([-1.0,\
    \ -2.0, 8.0]) == 0\\n  ArgumentError: reducing over an empty collection is not\
    \ allowed\\n  Stacktrace:\\n   [1] _empty_reduce_error() at ./reduce.jl:295\\\
    n   [2] mapreduce_empty(::Function, ::Base.BottomRF{typeof(Base.add_sum)}, ::Type{T}\
    \ where T) at ./reduce.jl:334\\n   [3] reduce_empty(::Base.MappingRF{var\"#3#5\"\
    ,Base.BottomRF{typeof(Base.add_sum)}}, ::Type{T} where T) at ./reduce.jl:321\\\
    n   [4] reduce_empty(::Base.FilteringRF{var\"#4#6\",Base.MappingRF{var\"#3#5\"\
    ,Base.BottomRF{typeof(Base.add_sum)}}}, ::Type{T} where T) at ./reduce.jl:322\\\
    n   [5] reduce_empty_iter at ./reduce.jl:347 [inlined]\\n   [6] reduce_empty_iter\
    \ at ./reduce.jl:346 [inlined]\\n   [7] foldl_impl at ./reduce.jl:46 [inlined]\\\
    n   [8] mapfoldl_impl at ./reduce.jl:41 [inlined]\\n   [9] #mapfoldl#189 at ./reduce.jl:157\
    \ [inlined]\\n   [10] mapfoldl at ./reduce.jl:157 [inlined]\\n   [11] #mapreduce#193\
    \ at ./reduce.jl:283 [inlined]\\n   [12] mapreduce at ./reduce.jl:283 [inlined]\\\
    n   [13] sum at ./reduce.jl:486 [inlined]\\n   [14] sum at ./reduce.jl:503 [inlined]\\\
    n   [15] double_the_difference(::Array{Float64,1}) at /tmp/tmpegibsp8d.jl:13\\\
    n   [16] top-level scope at /tmp/tmpegibsp8d.jl:24\\n   [17] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [18] top-level scope at /tmp/tmpegibsp8d.jl:19\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    3      4      7\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpegibsp8d.jl:17\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpudjk92zt.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmpudjk92zt.jl:19\n\
    \   [4] top-level scope at /tmp/tmpudjk92zt.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpudjk92zt.jl:25\n  \ntest set: Test Failed at\
    \ /tmp/tmpudjk92zt.jl:30\n  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpudjk92zt.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpudjk92zt.jl:25\ntest set: Error During Test at\
    \ /tmp/tmpudjk92zt.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmpudjk92zt.jl:19\n   [4]\
    \ top-level scope at /tmp/tmpudjk92zt.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpudjk92zt.jl:25\n  \ntest set: Test Failed at\
    \ /tmp/tmpudjk92zt.jl:32\n  Expression: candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 330 == 165\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpudjk92zt.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpudjk92zt.jl:25\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    3     2      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpudjk92zt.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5nbwcldp.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmp5nbwcldp.jl:19\n\
    \   [4] top-level scope at /tmp/tmp5nbwcldp.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp5nbwcldp.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp5nbwcldp.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmp5nbwcldp.jl:19\n   [4]\
    \ top-level scope at /tmp/tmp5nbwcldp.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp5nbwcldp.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5nbwcldp.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && isinteger(i) && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    # YOUR CODE HERE\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjsv42h3m.jl:22\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 0 == 25\nStacktrace:\n [1] top-level scope at /tmp/tmpjsv42h3m.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjsv42h3m.jl:20\ntest set: Test Failed at /tmp/tmpjsv42h3m.jl:26\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 0 == 34\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjsv42h3m.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjsv42h3m.jl:20\ntest set: Test Failed at /tmp/tmpjsv42h3m.jl:27\n\
    \  Expression: candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0])\
    \ == 165\n   Evaluated: 0 == 165\nStacktrace:\n [1] top-level scope at /tmp/tmpjsv42h3m.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjsv42h3m.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjsv42h3m.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp91_6kb0h.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmp91_6kb0h.jl:19\n\
    \   [4] top-level scope at /tmp/tmp91_6kb0h.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp91_6kb0h.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp91_6kb0h.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmp91_6kb0h.jl:19\n   [4]\
    \ top-level scope at /tmp/tmp91_6kb0h.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp91_6kb0h.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp91_6kb0h.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1 && i>0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i ^ 2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz3i2c3v8.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmpz3i2c3v8.jl:19\n\
    \   [4] top-level scope at /tmp/tmpz3i2c3v8.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpz3i2c3v8.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpz3i2c3v8.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmpz3i2c3v8.jl:19\n   [4]\
    \ top-level scope at /tmp/tmpz3i2c3v8.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpz3i2c3v8.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz3i2c3v8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    # YOUR CODE HERE\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplmxk3my6.jl:22\\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\\n   Evaluated: 0 == 25\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmplmxk3my6.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplmxk3my6.jl:20\\ntest set: Test Failed at /tmp/tmplmxk3my6.jl:26\\\
    n  Expression: candidate([0.2, 3.0, 5.0]) == 34\\n   Evaluated: 0 == 34\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplmxk3my6.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplmxk3my6.jl:20\\ntest set: Test Failed at /tmp/tmplmxk3my6.jl:27\\\
    n  Expression: candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0])\
    \ == 165\\n   Evaluated: 0 == 165\\nStacktrace:\\n [1] top-level scope at /tmp/tmplmxk3my6.jl:27\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplmxk3my6.jl:20\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && isinteger(i) && isodd(i)\n\
    \            sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4813vbbs.jl:27\n  Test threw exception\n\
    \  Expression: candidate([5.0, 4.0]) == 25\n  MethodError: no method matching\
    \ isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing) at\
    \ missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n \
    \  [1] double_the_difference(::Array{Float64,1}) at /tmp/tmp4813vbbs.jl:15\n \
    \  [2] top-level scope at /tmp/tmp4813vbbs.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4813vbbs.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp4813vbbs.jl:30\n  Test threw exception\n  Expression: candidate([-1.0,\
    \ -2.0, 8.0]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmp4813vbbs.jl:15\n   [2] top-level scope at /tmp/tmp4813vbbs.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4813vbbs.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp4813vbbs.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmp4813vbbs.jl:15\n   [2] top-level scope at /tmp/tmp4813vbbs.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4813vbbs.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp4813vbbs.jl:32\n  Test threw exception\n  Expression: candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n  MethodError: no\
    \ method matching isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing)\
    \ at missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n\
    \   [1] double_the_difference(::Array{Float64,1}) at /tmp/tmp4813vbbs.jl:15\n\
    \   [2] top-level scope at /tmp/tmp4813vbbs.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4813vbbs.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    3      4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4813vbbs.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    # YOUR CODE HERE\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpohi43p8h.jl:22\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 0 == 25\nStacktrace:\n [1] top-level scope at /tmp/tmpohi43p8h.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpohi43p8h.jl:20\ntest set: Test Failed at /tmp/tmpohi43p8h.jl:26\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 0 == 34\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpohi43p8h.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpohi43p8h.jl:20\ntest set: Test Failed at /tmp/tmpohi43p8h.jl:27\n\
    \  Expression: candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0])\
    \ == 165\n   Evaluated: 0 == 165\nStacktrace:\n [1] top-level scope at /tmp/tmpohi43p8h.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpohi43p8h.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpohi43p8h.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i%2 == 1\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && isinteger(i) && isodd(i)\n\
    \            sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9eojwut2.jl:27\n  Test threw exception\n\
    \  Expression: candidate([5.0, 4.0]) == 25\n  MethodError: no method matching\
    \ isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing) at\
    \ missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n \
    \  [1] double_the_difference(::Array{Float64,1}) at /tmp/tmp9eojwut2.jl:15\n \
    \  [2] top-level scope at /tmp/tmp9eojwut2.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9eojwut2.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp9eojwut2.jl:30\n  Test threw exception\n  Expression: candidate([-1.0,\
    \ -2.0, 8.0]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmp9eojwut2.jl:15\n   [2] top-level scope at /tmp/tmp9eojwut2.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9eojwut2.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp9eojwut2.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmp9eojwut2.jl:15\n   [2] top-level scope at /tmp/tmp9eojwut2.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9eojwut2.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp9eojwut2.jl:32\n  Test threw exception\n  Expression: candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n  MethodError: no\
    \ method matching isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing)\
    \ at missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n\
    \   [1] double_the_difference(::Array{Float64,1}) at /tmp/tmp9eojwut2.jl:15\n\
    \   [2] top-level scope at /tmp/tmp9eojwut2.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9eojwut2.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    3      4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9eojwut2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzg7dlzu2.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmpzg7dlzu2.jl:19\n\
    \   [4] top-level scope at /tmp/tmpzg7dlzu2.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzg7dlzu2.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpzg7dlzu2.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmpzg7dlzu2.jl:19\n   [4]\
    \ top-level scope at /tmp/tmpzg7dlzu2.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzg7dlzu2.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzg7dlzu2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1 && i > 0\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoqt3x26n.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmpoqt3x26n.jl:19\n\
    \   [4] top-level scope at /tmp/tmpoqt3x26n.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpoqt3x26n.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpoqt3x26n.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmpoqt3x26n.jl:19\n   [4]\
    \ top-level scope at /tmp/tmpoqt3x26n.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpoqt3x26n.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoqt3x26n.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && isinteger(i) && isodd(i)\n\
    \            sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf4x3dpme.jl:27\n  Test threw exception\n\
    \  Expression: candidate([5.0, 4.0]) == 25\n  MethodError: no method matching\
    \ isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing) at\
    \ missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n \
    \  [1] double_the_difference(::Array{Float64,1}) at /tmp/tmpf4x3dpme.jl:15\n \
    \  [2] top-level scope at /tmp/tmpf4x3dpme.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpf4x3dpme.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpf4x3dpme.jl:30\n  Test threw exception\n  Expression: candidate([-1.0,\
    \ -2.0, 8.0]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmpf4x3dpme.jl:15\n   [2] top-level scope at /tmp/tmpf4x3dpme.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpf4x3dpme.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpf4x3dpme.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmpf4x3dpme.jl:15\n   [2] top-level scope at /tmp/tmpf4x3dpme.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpf4x3dpme.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpf4x3dpme.jl:32\n  Test threw exception\n  Expression: candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n  MethodError: no\
    \ method matching isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing)\
    \ at missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n\
    \   [1] double_the_difference(::Array{Float64,1}) at /tmp/tmpf4x3dpme.jl:15\n\
    \   [2] top-level scope at /tmp/tmpf4x3dpme.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpf4x3dpme.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    3      4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf4x3dpme.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpznopzcuo.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmpznopzcuo.jl:19\n\
    \   [4] top-level scope at /tmp/tmpznopzcuo.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpznopzcuo.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpznopzcuo.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmpznopzcuo.jl:19\n   [4]\
    \ top-level scope at /tmp/tmpznopzcuo.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpznopzcuo.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpznopzcuo.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && isinteger(i) && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    # YOUR CODE HERE\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptpw88qdj.jl:22\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 0 == 25\nStacktrace:\n [1] top-level scope at /tmp/tmptpw88qdj.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptpw88qdj.jl:20\ntest set: Test Failed at /tmp/tmptpw88qdj.jl:26\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 0 == 34\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptpw88qdj.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptpw88qdj.jl:20\ntest set: Test Failed at /tmp/tmptpw88qdj.jl:27\n\
    \  Expression: candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0])\
    \ == 165\n   Evaluated: 0 == 165\nStacktrace:\n [1] top-level scope at /tmp/tmptpw88qdj.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptpw88qdj.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptpw88qdj.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    # YOUR CODE HERE\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7lwc2tu2.jl:22\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 0 == 25\nStacktrace:\n [1] top-level scope at /tmp/tmp7lwc2tu2.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7lwc2tu2.jl:20\ntest set: Test Failed at /tmp/tmp7lwc2tu2.jl:26\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 0 == 34\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7lwc2tu2.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7lwc2tu2.jl:20\ntest set: Test Failed at /tmp/tmp7lwc2tu2.jl:27\n\
    \  Expression: candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0])\
    \ == 165\n   Evaluated: 0 == 165\nStacktrace:\n [1] top-level scope at /tmp/tmp7lwc2tu2.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7lwc2tu2.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7lwc2tu2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1 && i>0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj263hxcn.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmpj263hxcn.jl:19\n\
    \   [4] top-level scope at /tmp/tmpj263hxcn.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpj263hxcn.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpj263hxcn.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmpj263hxcn.jl:19\n   [4]\
    \ top-level scope at /tmp/tmpj263hxcn.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpj263hxcn.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj263hxcn.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i) && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa8r8tv6d.jl:27\n  Test threw exception\n\
    \  Expression: candidate([5.0, 4.0]) == 25\n  MethodError: no method matching\
    \ isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing) at\
    \ missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n \
    \  [1] double_the_difference(::Array{Float64,1}) at /tmp/tmpa8r8tv6d.jl:15\n \
    \  [2] top-level scope at /tmp/tmpa8r8tv6d.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa8r8tv6d.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpa8r8tv6d.jl:28\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmpa8r8tv6d.jl:15\n   [2] top-level scope at /tmp/tmpa8r8tv6d.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa8r8tv6d.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpa8r8tv6d.jl:29\n  Test threw exception\n  Expression: candidate([-10.0,\
    \ -20.0, -30.0]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmpa8r8tv6d.jl:15\n   [2] top-level scope at /tmp/tmpa8r8tv6d.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa8r8tv6d.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpa8r8tv6d.jl:30\n  Test threw exception\n  Expression: candidate([-1.0,\
    \ -2.0, 8.0]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmpa8r8tv6d.jl:15\n   [2] top-level scope at /tmp/tmpa8r8tv6d.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa8r8tv6d.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpa8r8tv6d.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmpa8r8tv6d.jl:15\n   [2] top-level scope at /tmp/tmpa8r8tv6d.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa8r8tv6d.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpa8r8tv6d.jl:32\n  Test threw exception\n  Expression: candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n  MethodError: no\
    \ method matching isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing)\
    \ at missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n\
    \   [1] double_the_difference(::Array{Float64,1}) at /tmp/tmpa8r8tv6d.jl:15\n\
    \   [2] top-level scope at /tmp/tmpa8r8tv6d.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa8r8tv6d.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa8r8tv6d.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && isinteger(i) && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i) && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphynat9ux.jl:27\n  Test threw exception\n\
    \  Expression: candidate([5.0, 4.0]) == 25\n  MethodError: no method matching\
    \ isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing) at\
    \ missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n \
    \  [1] double_the_difference(::Array{Float64,1}) at /tmp/tmphynat9ux.jl:15\n \
    \  [2] top-level scope at /tmp/tmphynat9ux.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphynat9ux.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmphynat9ux.jl:28\n  Test threw exception\n  Expression: candidate([0.1,\
    \ 0.2, 0.3]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmphynat9ux.jl:15\n   [2] top-level scope at /tmp/tmphynat9ux.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphynat9ux.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmphynat9ux.jl:29\n  Test threw exception\n  Expression: candidate([-10.0,\
    \ -20.0, -30.0]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmphynat9ux.jl:15\n   [2] top-level scope at /tmp/tmphynat9ux.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphynat9ux.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmphynat9ux.jl:30\n  Test threw exception\n  Expression: candidate([-1.0,\
    \ -2.0, 8.0]) == 0\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmphynat9ux.jl:15\n   [2] top-level scope at /tmp/tmphynat9ux.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphynat9ux.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmphynat9ux.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  MethodError: no method matching isodd(::Float64)\n  Closest\
    \ candidates are:\n    isodd(!Matched::Missing) at missing.jl:100\n    isodd(!Matched::Integer)\
    \ at int.jl:75\n  Stacktrace:\n   [1] double_the_difference(::Array{Float64,1})\
    \ at /tmp/tmphynat9ux.jl:15\n   [2] top-level scope at /tmp/tmphynat9ux.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphynat9ux.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmphynat9ux.jl:32\n  Test threw exception\n  Expression: candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n  MethodError: no\
    \ method matching isodd(::Float64)\n  Closest candidates are:\n    isodd(!Matched::Missing)\
    \ at missing.jl:100\n    isodd(!Matched::Integer) at int.jl:75\n  Stacktrace:\n\
    \   [1] double_the_difference(::Array{Float64,1}) at /tmp/tmphynat9ux.jl:15\n\
    \   [2] top-level scope at /tmp/tmphynat9ux.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphynat9ux.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphynat9ux.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu9uhoo9d.jl:27\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 41 == 25\nStacktrace:\n [1] top-level scope at /tmp/tmpu9uhoo9d.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu9uhoo9d.jl:25\ntest set: Test Failed at /tmp/tmpu9uhoo9d.jl:30\n\
    \  Expression: candidate([-1.0, -2.0, 8.0]) == 0\n   Evaluated: 64 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu9uhoo9d.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu9uhoo9d.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu9uhoo9d.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxkn27ev1.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmpxkn27ev1.jl:19\n\
    \   [4] top-level scope at /tmp/tmpxkn27ev1.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpxkn27ev1.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpxkn27ev1.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmpxkn27ev1.jl:19\n   [4]\
    \ top-level scope at /tmp/tmpxkn27ev1.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpxkn27ev1.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxkn27ev1.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && isinteger(i) && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpucbep17b.jl:22\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 0 == 25\nStacktrace:\n [1] top-level scope at /tmp/tmpucbep17b.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpucbep17b.jl:20\ntest set: Test Failed at /tmp/tmpucbep17b.jl:26\n\
    \  Expression: candidate([0.2, 3.0, 5.0]) == 34\n   Evaluated: 0 == 34\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpucbep17b.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpucbep17b.jl:20\ntest set: Test Failed at /tmp/tmpucbep17b.jl:27\n\
    \  Expression: candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0])\
    \ == 165\n   Evaluated: 0 == 165\nStacktrace:\n [1] top-level scope at /tmp/tmpucbep17b.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpucbep17b.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpucbep17b.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfd9cfcdo.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmpfd9cfcdo.jl:19\n\
    \   [4] top-level scope at /tmp/tmpfd9cfcdo.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpfd9cfcdo.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpfd9cfcdo.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmpfd9cfcdo.jl:19\n   [4]\
    \ top-level scope at /tmp/tmpfd9cfcdo.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpfd9cfcdo.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfd9cfcdo.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 != 0 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0ygawtbo.jl:28\n  Test threw exception\n\
    \  Expression: candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n\
    \  Stacktrace:\n   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(::Array{Float64,1}) at /tmp/tmp0ygawtbo.jl:19\n\
    \   [4] top-level scope at /tmp/tmp0ygawtbo.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp0ygawtbo.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp0ygawtbo.jl:31\n  Test threw exception\n  Expression: candidate([0.2,\
    \ 3.0, 5.0]) == 34\n  InexactError: Int64(34.04)\n  Stacktrace:\n   [1] Int64\
    \ at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n   [3]\
    \ double_the_difference(::Array{Float64,1}) at /tmp/tmp0ygawtbo.jl:19\n   [4]\
    \ top-level scope at /tmp/tmp0ygawtbo.jl:31\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp0ygawtbo.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ygawtbo.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && mod(i,1) == 0 && mod(i,2)\
    \ != 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 1 == 0 && i % 2 !=\
    \ 0\n            sum += i^2\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i % 2 == 1\n            sum += i^2\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0 && i % 2 == 1\n          \
    \  sum += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1 && i > 0\n            sum\
    \ += i^2\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
