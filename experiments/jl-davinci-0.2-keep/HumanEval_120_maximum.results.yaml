name: HumanEval_120_maximum
language: julia
results:
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr), median(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)])])\n    end\n    if k == 6\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 7\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 8\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)]), median(arr\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuwk_7y3b.jl:56\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuwk_7y3b.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == 0\n        return []\n    end\n    if k == n\n        return sort(arr)\n\
    \    end\n    if k == 1\n        return [maximum(arr)]\n    end\n    if k == 2\n\
    \        return sort([maximum(arr), minimum(arr)])\n    end\n    if k == 3\n \
    \       return sort([maximum(arr), minimum(arr), median(arr)])\n    end\n    if\
    \ k == 4\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)])])\n    end\n    if k == 6\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 7\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 8\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc7ohdb27.jl:59\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc7ohdb27.jl:59\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwvy3n2tr.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwvy3n2tr.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvy3n2tr.jl:35\ntest set: Test Failed at /tmp/tmpwvy3n2tr.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpwvy3n2tr.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvy3n2tr.jl:35\ntest set: Test Failed at /tmp/tmpwvy3n2tr.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpwvy3n2tr.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvy3n2tr.jl:35\ntest set: Test Failed at /tmp/tmpwvy3n2tr.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwvy3n2tr.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvy3n2tr.jl:35\ntest set: Test Failed at /tmp/tmpwvy3n2tr.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpwvy3n2tr.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvy3n2tr.jl:35\ntest set: Test Failed at /tmp/tmpwvy3n2tr.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpwvy3n2tr.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvy3n2tr.jl:35\ntest set: Test Failed at /tmp/tmpwvy3n2tr.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpwvy3n2tr.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvy3n2tr.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwvy3n2tr.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe5uyzmsj.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpe5uyzmsj.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe5uyzmsj.jl:34\ntest set: Test Failed at /tmp/tmpe5uyzmsj.jl:37\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3]\
    \ == [2]\nStacktrace:\n [1] top-level scope at /tmp/tmpe5uyzmsj.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe5uyzmsj.jl:34\ntest set: Test Failed at /tmp/tmpe5uyzmsj.jl:38\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpe5uyzmsj.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe5uyzmsj.jl:34\ntest set: Test Failed at /tmp/tmpe5uyzmsj.jl:39\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpe5uyzmsj.jl:39\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe5uyzmsj.jl:34\ntest set: Test Failed at /tmp/tmpe5uyzmsj.jl:41\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [-10,\
    \ -1] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpe5uyzmsj.jl:41\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe5uyzmsj.jl:34\ntest set: Test Failed at /tmp/tmpe5uyzmsj.jl:42\n\
    \  Expression: candidate([1, 0, 5, -7], 1) == [5]\n   Evaluated: [-7] == [5]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe5uyzmsj.jl:42\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe5uyzmsj.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     6     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe5uyzmsj.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr, rev=true)\n    end\n    heap = Heap(arr[1:k])\n\
    \    for i in k+1:n\n        if arr[i] > heap.peek()\n            heap.pop()\n\
    \            heap.push(arr[i])\n        end\n    end\n    return sort(heap.data,\
    \ rev=true)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_x0jf6bf.jl:44\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_x0jf6bf.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_x0jf6bf.jl:43\ntest set: Error During Test at\
    \ /tmp/tmp_x0jf6bf.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_x0jf6bf.jl:30\n   [2] top-level\
    \ scope at /tmp/tmp_x0jf6bf.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_x0jf6bf.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp_x0jf6bf.jl:46\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_x0jf6bf.jl:30\n   [2] top-level\
    \ scope at /tmp/tmp_x0jf6bf.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_x0jf6bf.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp_x0jf6bf.jl:47\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_x0jf6bf.jl:30\n\
    \   [2] top-level scope at /tmp/tmp_x0jf6bf.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_x0jf6bf.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp_x0jf6bf.jl:48\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: Heap not defined\n \
    \ Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_x0jf6bf.jl:30\n\
    \   [2] top-level scope at /tmp/tmp_x0jf6bf.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_x0jf6bf.jl:43\n  \ntest set: Test Failed at\
    \ /tmp/tmp_x0jf6bf.jl:49\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7)\
    \ == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13,\
    \ -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] top-level scope at /tmp/tmp_x0jf6bf.jl:49\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_x0jf6bf.jl:43\ntest set: Error During Test at\
    \ /tmp/tmp_x0jf6bf.jl:50\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_x0jf6bf.jl:30\n   [2] top-level\
    \ scope at /tmp/tmp_x0jf6bf.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_x0jf6bf.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp_x0jf6bf.jl:51\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_x0jf6bf.jl:30\n   [2] top-level\
    \ scope at /tmp/tmp_x0jf6bf.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_x0jf6bf.jl:43\n  \ntest set: Test Failed at\
    \ /tmp/tmp_x0jf6bf.jl:52\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmp_x0jf6bf.jl:52\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_x0jf6bf.jl:43\ntest set: Test Failed at /tmp/tmp_x0jf6bf.jl:53\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmp_x0jf6bf.jl:53\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_x0jf6bf.jl:43\ntest set: Error During Test at\
    \ /tmp/tmp_x0jf6bf.jl:54\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: Heap not\
    \ defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_x0jf6bf.jl:30\n\
    \   [2] top-level scope at /tmp/tmp_x0jf6bf.jl:54\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_x0jf6bf.jl:43\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    4      7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_x0jf6bf.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\n\
    \    sort!(arr)\n    # Return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    # find the maximum\n    max_val = maximum(arr)\n\
    \    # find the index of the maximum\n    max_index = findall(x -> x == max_val,\
    \ arr)[1]\n    # remove the maximum from the array\n    arr = vcat(arr[1:max_index-1],\
    \ arr[max_index+1:end])\n    # return the maximum and the result of the function\
    \ on the rest of the array\n    return vcat([max_val], maximum(arr, k-1))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps09ov0h4.jl:48\\n  Test threw\
    \ exception\\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\\n  MethodError:\
    \ no method matching maximum(::Array{Int64,1})\\n  You may have intended to import\
    \ Base.maximum\\n  Closest candidates are:\\n    maximum(::Array{Int64,1}, !Matched::Int64)\
    \ at /tmp/tmps09ov0h4.jl:26\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmps09ov0h4.jl:0\\n   [2] top-level scope at /tmp/tmps09ov0h4.jl:48\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmps09ov0h4.jl:46\\n  \\ntest set: Error During\
    \ Test at /tmp/tmps09ov0h4.jl:49\\n  Test threw exception\\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmps09ov0h4.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps09ov0h4.jl:0\\\
    n   [2] top-level scope at /tmp/tmps09ov0h4.jl:49\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmps09ov0h4.jl:46\\n  \\ntest set: Error During\
    \ Test at /tmp/tmps09ov0h4.jl:50\\n  Test threw exception\\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  MethodError: no method matching\
    \ maximum(::Array{Int64,1})\\n  You may have intended to import Base.maximum\\\
    n  Closest candidates are:\\n    maximum(::Array{Int64,1}, !Matched::Int64) at\
    \ /tmp/tmps09ov0h4.jl:26\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmps09ov0h4.jl:0\\n   [2] top-level scope at /tmp/tmps09ov0h4.jl:50\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmps09ov0h4.jl:46\\n  \\ntest set: Error During\
    \ Test at /tmp/tmps09ov0h4.jl:51\\n  Test threw exception\\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmps09ov0h4.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps09ov0h4.jl:0\\\
    n   [2] top-level scope at /tmp/tmps09ov0h4.jl:51\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmps09ov0h4.jl:46\\n  \\ntest set: Error During\
    \ Test at /tmp/tmps09ov0h4.jl:53\\n  Test threw exception\\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmps09ov0h4.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps09ov0h4.jl:0\\\
    n   [2] top-level scope at /tmp/tmps09ov0h4.jl:53\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmps09ov0h4.jl:46\\n  \\ntest set: Error During\
    \ Test at /tmp/tmps09ov0h4.jl:54\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmps09ov0h4.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps09ov0h4.jl:0\\\
    n   [2] top-level scope at /tmp/tmps09ov0h4.jl:54\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmps09ov0h4.jl:46\\n  \\ntest set: Error During\
    \ Test at /tmp/tmps09ov0h4.jl:57\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\\n  MethodError: no method\
    \ matching maximum(::Array{Int64,1})\\n  You may have intended to import Base.maximum\\\
    n  Closest candidates are:\\n    maximum(::Array{Int64,1}, !Matched::Int64) at\
    \ /tmp/tmps09ov0h4.jl:26\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmps09ov0h4.jl:0\\n   [2] top-level scope at /tmp/tmps09ov0h4.jl:57\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmps09ov0h4.jl:46\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    4      7     11\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # create a new vector\
    \ to store the maximum k numbers\n    max_k = Vector{Int64}(undef, k)\n    # iterate\
    \ through the array\n    for i in 1:length(arr)\n        # if the current element\
    \ is greater than the minimum of the max_k vector\n        if arr[i] > minimum(max_k)\n\
    \            # replace the minimum with the current element\n            max_k[findmin(max_k)[2]]\
    \ = arr[i]\n        end\n    end\n    # sort the max_k vector\n    sort!(max_k)\n\
    \    # return the max_k vector\n    return max_k\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphz_8gol4.jl:46\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [0, 0, 5] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmphz_8gol4.jl:46\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphz_8gol4.jl:45\\ntest set: Test Failed at /tmp/tmphz_8gol4.jl:51\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [0, 0, 0, 0, 3, 5, 15] == [-13, -8, 0, 0, 3, 5, 15]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmphz_8gol4.jl:51\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphz_8gol4.jl:45\\ntest set: Test Failed at /tmp/tmphz_8gol4.jl:54\\\
    n  Expression: candidate([4, -4], 2) == [-4, 4]\\n   Evaluated: [0, 4] == [-4,\
    \ 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmphz_8gol4.jl:54\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphz_8gol4.jl:45\\ntest set: Test Failed at /tmp/tmphz_8gol4.jl:55\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [0, 10] ==\
    \ [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmphz_8gol4.jl:55\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphz_8gol4.jl:45\\ntest set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    # return the first k elements\n    sort(arr, rev=true)[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpm08melgv.jl:35\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpm08melgv.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm08melgv.jl:34\\ntest set: Test Failed at /tmp/tmpm08melgv.jl:38\\\
    n  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n \
    \  Evaluated: [123, 20, 2] == [2, 20, 123]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpm08melgv.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm08melgv.jl:34\\ntest set: Test Failed at /tmp/tmpm08melgv.jl:39\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm08melgv.jl:39\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm08melgv.jl:34\\ntest set: Test Failed at /tmp/tmpm08melgv.jl:40\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpm08melgv.jl:40\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm08melgv.jl:34\\ntest set: Test Failed at /tmp/tmpm08melgv.jl:41\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [5,\
    \ 3] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm08melgv.jl:41\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm08melgv.jl:34\\ntest set: Test Failed at /tmp/tmpm08melgv.jl:43\\\
    n  Expression: candidate([4, -4], 2) == [-4, 4]\\n   Evaluated: [4, -4] == [-4,\
    \ 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm08melgv.jl:43\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm08melgv.jl:34\\ntest set: Test Failed at /tmp/tmpm08melgv.jl:44\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm08melgv.jl:44\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm08melgv.jl:34\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     7     11\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements of the sorted array\n    return sorted_arr[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfj5te7vo.jl:36\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize a max\
    \ heap\n    heap = MaxHeap(arr)\n    # Initialize an empty array to store the\
    \ maximum k numbers\n    max_k = Vector{Int64}()\n    # Pop the maximum k numbers\
    \ from the heap\n    for i in 1:k\n        push!(max_k, pop!(heap))\n    end\n\
    \    # Return the maximum k numbers\n    return max_k\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjfns0vne.jl:42\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ MaxHeap not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpjfns0vne.jl:27\\n   [2] top-level scope at /tmp/tmpjfns0vne.jl:42\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjfns0vne.jl:41\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpjfns0vne.jl:43\\n  Test threw exception\\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjfns0vne.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpjfns0vne.jl:43\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjfns0vne.jl:41\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpjfns0vne.jl:44\\n  Test threw exception\\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjfns0vne.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpjfns0vne.jl:44\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjfns0vne.jl:41\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpjfns0vne.jl:45\\n  Test threw exception\\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError: MaxHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjfns0vne.jl:27\\\
    n   [2] top-level scope at /tmp/tmpjfns0vne.jl:45\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjfns0vne.jl:41\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpjfns0vne.jl:46\\n  Test threw exception\\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n  UndefVarError: MaxHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjfns0vne.jl:27\\\
    n   [2] top-level scope at /tmp/tmpjfns0vne.jl:46\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjfns0vne.jl:41\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpjfns0vne.jl:47\\n  Test threw exception\\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\\n  UndefVarError: MaxHeap\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjfns0vne.jl:27\\\
    n   [2] top-level scope at /tmp/tmpjfns0vne.jl:47\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjfns0vne.jl:41\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpjfns0vne.jl:48\\n  Test threw exception\\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjfns0vne.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpjfns0vne.jl:48\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjfns0vne.jl:41\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpjfns0vne.jl:49\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjfns0vne.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpjfns0vne.jl:49\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjfns0vne.jl:41\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpjfns0vne.jl:50\\n  Test threw exception\\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjfns0vne.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpjfns0vne.jl:50\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjfns0vne.jl:41\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpjfns0vne.jl:51\\n  Test threw exception\\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjfns0vne.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpjfns0vne.jl:51\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjfns0vne.jl:41\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpjfns0vne.jl:52\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\\n  UndefVarError: MaxHeap\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjfns0vne.jl:27\\\
    n   [2] top-level scope at /tmp/tmpjfns0vne.jl:52\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjfns0vne.jl:41\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr[1:2])\n    end\n\
    \    if k == 3\n        return sort(arr[1:3])\n    end\n    if k == 4\n      \
    \  return sort(arr[1:4])\n    end\n    if k == 5\n        return sort(arr[1:5])\n\
    \    end\n    if k == 6\n        return sort(arr[1:6])\n    end\n    if k == 7\n\
    \        return sort(arr[1:7])\n    end\n    if k == 8\n        return sort(arr[1:8])\n\
    \    end\n    if k == 9\n        return sort(arr[1:9])\n    end\n    if k == 10\n\
    \        return sort(arr[1:10])\n    end\n    if k == 11\n        return sort(arr[1:11])\n\
    \    end\n    if k == 12\n        return sort(arr[1:12])\n    end\n    if k ==\
    \ 13\n        return sort(arr[1:13])\n    end\n    if k == 14\n        return\
    \ sort(arr[1:14])\n    end\n    if k == 15\n        return sort(arr[1:15])\n \
    \   end\n    if k == 16\n        return sort(arr[1:16])\n    end\n    if k ==\
    \ 17\n        return sort(arr[1:17])\n    end\n    if k == 18\n        return\
    \ sort(arr[1:18])\n    end\n    if k == 19\n        return sort(arr[1:19])\n \
    \   end\n    if k == 20\n        return sort(arr[1:20])\n    end\n    if k ==\
    \ 21\n        return sort(arr[1:21])\n    end\n    if k == 22\n        return\
    \ sort(arr[1:22])\n    end\n    if k == 23\n        return sort(arr[1:23])\n \
    \   end\n    if k == 24\n        return sort(arr[1:24])\n    end\n    if k ==\
    \ 25\n        return sort(\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp88gbx31l.jl:106\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp88gbx31l.jl:106\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap = MaxHeap(arr)\n\
    \    return [pop!(heap) for i in 1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfh9pjex7.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpfh9pjex7.jl:26\n\
    \   [2] top-level scope at /tmp/tmpfh9pjex7.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfh9pjex7.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpfh9pjex7.jl:35\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpfh9pjex7.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpfh9pjex7.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfh9pjex7.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpfh9pjex7.jl:36\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpfh9pjex7.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpfh9pjex7.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfh9pjex7.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpfh9pjex7.jl:37\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: MaxHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpfh9pjex7.jl:26\n\
    \   [2] top-level scope at /tmp/tmpfh9pjex7.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfh9pjex7.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpfh9pjex7.jl:38\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: MaxHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpfh9pjex7.jl:26\n\
    \   [2] top-level scope at /tmp/tmpfh9pjex7.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfh9pjex7.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpfh9pjex7.jl:39\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpfh9pjex7.jl:26\n\
    \   [2] top-level scope at /tmp/tmpfh9pjex7.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfh9pjex7.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpfh9pjex7.jl:40\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpfh9pjex7.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpfh9pjex7.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfh9pjex7.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpfh9pjex7.jl:41\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpfh9pjex7.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpfh9pjex7.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfh9pjex7.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpfh9pjex7.jl:42\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n  \
    \ [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpfh9pjex7.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpfh9pjex7.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfh9pjex7.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpfh9pjex7.jl:43\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpfh9pjex7.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpfh9pjex7.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfh9pjex7.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpfh9pjex7.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpfh9pjex7.jl:26\n\
    \   [2] top-level scope at /tmp/tmpfh9pjex7.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfh9pjex7.jl:33\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfh9pjex7.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ and return the first k elements\n    sort(arr)[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnygjkqit.jl:35\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnygjkqit.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnygjkqit.jl:33\ntest set: Test Failed at /tmp/tmpnygjkqit.jl:36\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3]\
    \ == [2]\nStacktrace:\n [1] top-level scope at /tmp/tmpnygjkqit.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnygjkqit.jl:33\ntest set: Test Failed at /tmp/tmpnygjkqit.jl:37\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpnygjkqit.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnygjkqit.jl:33\ntest set: Test Failed at /tmp/tmpnygjkqit.jl:38\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpnygjkqit.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnygjkqit.jl:33\ntest set: Test Failed at /tmp/tmpnygjkqit.jl:40\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [-10,\
    \ -1] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpnygjkqit.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnygjkqit.jl:33\ntest set: Test Failed at /tmp/tmpnygjkqit.jl:41\n\
    \  Expression: candidate([1, 0, 5, -7], 1) == [5]\n   Evaluated: [-7] == [5]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnygjkqit.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnygjkqit.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     6     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnygjkqit.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaayp5jfo.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaayp5jfo.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaayp5jfo.jl:35\ntest set: Test Failed at /tmp/tmpaayp5jfo.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpaayp5jfo.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaayp5jfo.jl:35\ntest set: Test Failed at /tmp/tmpaayp5jfo.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpaayp5jfo.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaayp5jfo.jl:35\ntest set: Test Failed at /tmp/tmpaayp5jfo.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpaayp5jfo.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaayp5jfo.jl:35\ntest set: Test Failed at /tmp/tmpaayp5jfo.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpaayp5jfo.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaayp5jfo.jl:35\ntest set: Test Failed at /tmp/tmpaayp5jfo.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpaayp5jfo.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaayp5jfo.jl:35\ntest set: Test Failed at /tmp/tmpaayp5jfo.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpaayp5jfo.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaayp5jfo.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaayp5jfo.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Create a heap of\
    \ size k\n    heap = Vector{Int64}(undef, k)\n    # Fill the heap with the first\
    \ k elements of the array\n    for i in 1:k\n        heap[i] = arr[i]\n    end\n\
    \    # Heapify the heap\n    heapify!(heap)\n    # Iterate through the rest of\
    \ the array\n    for i in k+1:length(arr)\n        # If the current element is\
    \ greater than the root of the heap\n        if arr[i] > heap[1]\n           \
    \ # Replace the root with the current element\n            heap[1] = arr[i]\n\
    \            # Heapify the heap\n            heapify!(heap)\n        end\n   \
    \ end\n    # Return the heap\n    return heap\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqdg0rtvz.jl:52\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: heapify!\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqdg0rtvz.jl:33\n\
    \   [2] top-level scope at /tmp/tmpqdg0rtvz.jl:52\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdg0rtvz.jl:51\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdg0rtvz.jl:53\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: heapify! not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqdg0rtvz.jl:33\n   [2] top-level\
    \ scope at /tmp/tmpqdg0rtvz.jl:53\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdg0rtvz.jl:51\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdg0rtvz.jl:54\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: heapify! not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqdg0rtvz.jl:33\n   [2] top-level\
    \ scope at /tmp/tmpqdg0rtvz.jl:54\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdg0rtvz.jl:51\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdg0rtvz.jl:55\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: heapify! not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqdg0rtvz.jl:33\n\
    \   [2] top-level scope at /tmp/tmpqdg0rtvz.jl:55\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdg0rtvz.jl:51\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdg0rtvz.jl:56\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: heapify! not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqdg0rtvz.jl:33\n\
    \   [2] top-level scope at /tmp/tmpqdg0rtvz.jl:56\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdg0rtvz.jl:51\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdg0rtvz.jl:57\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: heapify!\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqdg0rtvz.jl:33\n\
    \   [2] top-level scope at /tmp/tmpqdg0rtvz.jl:57\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdg0rtvz.jl:51\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdg0rtvz.jl:58\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: heapify! not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqdg0rtvz.jl:33\n   [2] top-level\
    \ scope at /tmp/tmpqdg0rtvz.jl:58\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdg0rtvz.jl:51\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdg0rtvz.jl:59\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: heapify! not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqdg0rtvz.jl:33\n   [2] top-level\
    \ scope at /tmp/tmpqdg0rtvz.jl:59\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdg0rtvz.jl:51\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdg0rtvz.jl:60\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: heapify! not defined\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqdg0rtvz.jl:33\n   [2] top-level\
    \ scope at /tmp/tmpqdg0rtvz.jl:60\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdg0rtvz.jl:51\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdg0rtvz.jl:61\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: heapify! not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqdg0rtvz.jl:33\n   [2] top-level\
    \ scope at /tmp/tmpqdg0rtvz.jl:61\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdg0rtvz.jl:51\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdg0rtvz.jl:62\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: heapify!\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqdg0rtvz.jl:33\n\
    \   [2] top-level scope at /tmp/tmpqdg0rtvz.jl:62\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqdg0rtvz.jl:51\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqdg0rtvz.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        if arr[1] > arr[2]\n       \
    \     return [arr[1], arr[2]]\n        else\n            return [arr[2], arr[1]]\n\
    \        end\n    end\n    if k == 3\n        if arr[1] > arr[2]\n           \
    \ if arr[2] > arr[3]\n                return [arr[1], arr[2], arr[3]]\n      \
    \      elseif arr[1] > arr[3]\n                return [arr[1], arr[3], arr[2]]\n\
    \            else\n                return [arr[3], arr[1], arr[2]]\n         \
    \   end\n        else\n            if arr[1] > arr[3]\n                return\
    \ [arr[2], arr[1], arr[3]]\n            elseif arr[2] > arr[3]\n             \
    \   return [arr[2], arr[3], arr[1]]\n            else\n                return\
    \ [arr[3], arr[2], arr[1]]\n            end\n        end\n    end\n    if k ==\
    \ 4\n        if arr[1] > arr[2]\n            if arr[2] > arr[3]\n            \
    \    if arr[3] > arr[4]\n                    return [arr[1], arr[2], arr[3], arr[4]]\n\
    \                elseif arr[1] > arr[4]\n                    return [arr[1], arr[4],\
    \ arr[3], arr[2]]\n                else\n                    return [arr[4], arr[1],\
    \ arr[3], arr[2]]\n                end\n            elseif arr[1] > arr[3]\n \
    \               if arr[3] > arr[4]\n                    return [arr[1], arr[3],\
    \ arr[4], arr[2]]\n                elseif arr[1] > arr[4]\n                  \
    \  return [arr[1], arr[4], arr[3], arr[2]]\n                else\n           \
    \         return [arr[4], arr[1], arr[3], arr[2]]\n                end\n     \
    \       else\n                if arr[1]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpybf60hzt.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpybf60hzt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr), median(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)])])\n    end\n    if k == 6\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 7\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 8\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)]), median(arr\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpryq95zln.jl:56\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpryq95zln.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the last k elements\n    sort(arr)[end-k+1:end]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return sort(arr)[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), median(arr), minimum(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), median(arr), minimum(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ median(arr), minimum(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)])])\n    end\n    if k == 6\n        return sort([maximum(arr),\
    \ median(arr), minimum(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 7\n        return sort([maximum(arr), median(arr), minimum(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 8\n        return sort([maximum(arr),\
    \ median(arr), minimum(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ median(arr), minimum(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)]), median(arr\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3zamhbfl.jl:56\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3zamhbfl.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr), median(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)])])\n    end\n    if k == 6\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 7\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 8\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)]), median(arr\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx314obrx.jl:56\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx314obrx.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the last k elements\n    return sort(arr)[end-k+1:end]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr)[n-1:n]\n  \
    \  end\n    if k == 3\n        return sort(arr)[n-2:n]\n    end\n    if k == 4\n\
    \        return sort(arr)[n-3:n]\n    end\n    if k == 5\n        return sort(arr)[n-4:n]\n\
    \    end\n    if k == 6\n        return sort(arr)[n-5:n]\n    end\n    if k ==\
    \ 7\n        return sort(arr)[n-6:n]\n    end\n    if k == 8\n        return sort(arr)[n-7:n]\n\
    \    end\n    if k == 9\n        return sort(arr)[n-8:n]\n    end\n    if k ==\
    \ 10\n        return sort(arr)[n-9:n]\n    end\n    if k == 11\n        return\
    \ sort(arr)[n-10:n]\n    end\n    if k == 12\n        return sort(arr)[n-11:n]\n\
    \    end\n    if k == 13\n        return sort(arr)[n-12:n]\n    end\n    if k\
    \ == 14\n        return sort(arr)[n-13:n]\n    end\n    if k == 15\n        return\
    \ sort(arr)[n-14:n]\n    end\n    if k == 16\n        return sort(arr)[n-15:n]\n\
    \    end\n    if k == 17\n        return sort(arr)[n-16:n]\n    end\n    if k\
    \ == 18\n        return sort(arr)[n-17:n]\n    end\n    if k == 19\n        return\
    \ sort(arr)[n-18:n]\n    end\n    if k == 20\n        return sort(arr)[n-19:n]\n\
    \    end\n    if k == 21\n        return sort(arr)[n-20:n]\n    end\n    if k\
    \ == 22\n        return sort(arr)[n-21:n]\n    end\n    if k == 23\n        return\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7dpv8tpd.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7dpv8tpd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Create a max heap\n\
    \    heap = MaxHeap(arr)\n    # Pop the max k times\n    max_k = Vector{Int64}(undef,\
    \ k)\n    for i in 1:k\n        max_k[i] = pop!(heap)\n    end\n    return max_k\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp772mc158.jl:40\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp772mc158.jl:27\n\
    \   [2] top-level scope at /tmp/tmp772mc158.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp772mc158.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp772mc158.jl:41\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp772mc158.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp772mc158.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp772mc158.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp772mc158.jl:42\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp772mc158.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp772mc158.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp772mc158.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp772mc158.jl:43\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: MaxHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp772mc158.jl:27\n\
    \   [2] top-level scope at /tmp/tmp772mc158.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp772mc158.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp772mc158.jl:44\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: MaxHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp772mc158.jl:27\n\
    \   [2] top-level scope at /tmp/tmp772mc158.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp772mc158.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp772mc158.jl:45\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp772mc158.jl:27\n\
    \   [2] top-level scope at /tmp/tmp772mc158.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp772mc158.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp772mc158.jl:46\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp772mc158.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp772mc158.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp772mc158.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp772mc158.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp772mc158.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp772mc158.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp772mc158.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp772mc158.jl:48\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n  \
    \ [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp772mc158.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp772mc158.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp772mc158.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp772mc158.jl:49\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp772mc158.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp772mc158.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp772mc158.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp772mc158.jl:50\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp772mc158.jl:27\n\
    \   [2] top-level scope at /tmp/tmp772mc158.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp772mc158.jl:39\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp772mc158.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # Return the first k elements\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe6menv8a.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe6menv8a.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe6menv8a.jl:35\ntest set: Test Failed at /tmp/tmpe6menv8a.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpe6menv8a.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe6menv8a.jl:35\ntest set: Test Failed at /tmp/tmpe6menv8a.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpe6menv8a.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe6menv8a.jl:35\ntest set: Test Failed at /tmp/tmpe6menv8a.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe6menv8a.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe6menv8a.jl:35\ntest set: Test Failed at /tmp/tmpe6menv8a.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpe6menv8a.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe6menv8a.jl:35\ntest set: Test Failed at /tmp/tmpe6menv8a.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpe6menv8a.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe6menv8a.jl:35\ntest set: Test Failed at /tmp/tmpe6menv8a.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpe6menv8a.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe6menv8a.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe6menv8a.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    sorted_arr = sort(arr,\
    \ rev=true)\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptzfnztl4.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptzfnztl4.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptzfnztl4.jl:33\ntest set: Test Failed at /tmp/tmptzfnztl4.jl:37\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmptzfnztl4.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptzfnztl4.jl:33\ntest set: Test Failed at /tmp/tmptzfnztl4.jl:38\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmptzfnztl4.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptzfnztl4.jl:33\ntest set: Test Failed at /tmp/tmptzfnztl4.jl:39\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptzfnztl4.jl:39\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptzfnztl4.jl:33\ntest set: Test Failed at /tmp/tmptzfnztl4.jl:40\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmptzfnztl4.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptzfnztl4.jl:33\ntest set: Test Failed at /tmp/tmptzfnztl4.jl:42\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmptzfnztl4.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptzfnztl4.jl:33\ntest set: Test Failed at /tmp/tmptzfnztl4.jl:43\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmptzfnztl4.jl:43\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptzfnztl4.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptzfnztl4.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr), median(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)][arr[arr .!= median(arr)] .!= median(arr[arr .!= median(arr)])])])\n\
    \    end\n    if k == 6\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)][arr[arr .!=\
    \ median(arr)] .!= median(arr[arr .!= median(arr)])]), median(arr[arr .!= median(arr)][arr[arr\
    \ .!= median(arr)] .!= median(arr[arr .!= median(arr)])][arr[arr .!= median(arr)][arr[arr\
    \ .!= median(arr)] .!= median(arr[arr .!= median(arr)])] .!= median(arr[arr .!=\
    \ median(arr)][arr[arr .!= median(arr)] .!= median(arr[arr .!= median(arr)])])])])\n\
    \    end\n    if k == 7\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)][arr[arr .!=\
    \ median(arr)] .!= median(arr[arr .!= median(arr)])]), median(arr[arr .!= median(arr)][arr[arr\
    \ .!= median(arr)]\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpstlmioi0.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpstlmioi0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize a heap\n\
    \    heap = BinaryHeap()\n    # Initialize a vector to store the maximum k numbers\n\
    \    max_k = Vector{Int64}()\n    # Iterate through the array\n    for i in arr\n\
    \        # If the heap is not full, push the element into the heap\n        if\
    \ length(heap) < k\n            push!(heap, i)\n        # If the heap is full,\
    \ check if the current element is larger than the minimum element in the heap\n\
    \        elseif i > heap[1]\n            # If the current element is larger than\
    \ the minimum element in the heap, pop the minimum element\n            # and\
    \ push the current element into the heap\n            pop!(heap)\n           \
    \ push!(heap, i)\n        end\n    end\n    # Iterate through the heap\n    for\
    \ i in heap\n        # Push the elements in the heap into the vector\n       \
    \ push!(max_k, i)\n    end\n    # Return the vector\n    return max_k\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw4h6k91c.jl:56\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ BinaryHeap not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpw4h6k91c.jl:27\\n   [2] top-level scope at /tmp/tmpw4h6k91c.jl:56\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpw4h6k91c.jl:55\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpw4h6k91c.jl:57\\n  Test threw exception\\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\\n  UndefVarError: BinaryHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw4h6k91c.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpw4h6k91c.jl:57\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpw4h6k91c.jl:55\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpw4h6k91c.jl:58\\n  Test threw exception\\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: BinaryHeap not defined\\n\
    \  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw4h6k91c.jl:27\\\
    n   [2] top-level scope at /tmp/tmpw4h6k91c.jl:58\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpw4h6k91c.jl:55\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpw4h6k91c.jl:59\\n  Test threw exception\\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError: BinaryHeap not\
    \ defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw4h6k91c.jl:27\\\
    n   [2] top-level scope at /tmp/tmpw4h6k91c.jl:59\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpw4h6k91c.jl:55\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpw4h6k91c.jl:60\\n  Test threw exception\\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n  UndefVarError: BinaryHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw4h6k91c.jl:27\\\
    n   [2] top-level scope at /tmp/tmpw4h6k91c.jl:60\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpw4h6k91c.jl:55\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpw4h6k91c.jl:61\\n  Test threw exception\\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\\n  UndefVarError: BinaryHeap\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw4h6k91c.jl:27\\\
    n   [2] top-level scope at /tmp/tmpw4h6k91c.jl:61\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpw4h6k91c.jl:55\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpw4h6k91c.jl:62\\n  Test threw exception\\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\\n  UndefVarError: BinaryHeap not defined\\n\
    \  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw4h6k91c.jl:27\\\
    n   [2] top-level scope at /tmp/tmpw4h6k91c.jl:62\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpw4h6k91c.jl:55\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpw4h6k91c.jl:63\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\\n  UndefVarError: BinaryHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw4h6k91c.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpw4h6k91c.jl:63\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpw4h6k91c.jl:55\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpw4h6k91c.jl:64\\n  Test threw exception\\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\\n  UndefVarError: BinaryHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw4h6k91c.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpw4h6k91c.jl:64\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpw4h6k91c.jl:55\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpw4h6k91c.jl:65\\n  Test threw exception\\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\\n  UndefVarError: BinaryHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw4h6k91c.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpw4h6k91c.jl:65\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpw4h6k91c.jl:55\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpw4h6k91c.jl:66\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\\n  UndefVarError: BinaryHeap\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw4h6k91c.jl:27\\\
    n   [2] top-level scope at /tmp/tmpw4h6k91c.jl:66\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpw4h6k91c.jl:55\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |    11     11\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the last k elements\n    sort(arr)[end-k+1:end]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr)[n-1:n]\n  \
    \  end\n    if k == 3\n        return sort(arr)[n-2:n]\n    end\n    if k == 4\n\
    \        return sort(arr)[n-3:n]\n    end\n    if k == 5\n        return sort(arr)[n-4:n]\n\
    \    end\n    if k == 6\n        return sort(arr)[n-5:n]\n    end\n    if k ==\
    \ 7\n        return sort(arr)[n-6:n]\n    end\n    if k == 8\n        return sort(arr)[n-7:n]\n\
    \    end\n    if k == 9\n        return sort(arr)[n-8:n]\n    end\n    if k ==\
    \ 10\n        return sort(arr)[n-9:n]\n    end\n    if k == 11\n        return\
    \ sort(arr)[n-10:n]\n    end\n    if k == 12\n        return sort(arr)[n-11:n]\n\
    \    end\n    if k == 13\n        return sort(arr)[n-12:n]\n    end\n    if k\
    \ == 14\n        return sort(arr)[n-13:n]\n    end\n    if k == 15\n        return\
    \ sort(arr)[n-14:n]\n    end\n    if k == 16\n        return sort(arr)[n-15:n]\n\
    \    end\n    if k == 17\n        return sort(arr)[n-16:n]\n    end\n    if k\
    \ == 18\n        return sort(arr)[n-17:n]\n    end\n    if k == 19\n        return\
    \ sort(arr)[n-18:n]\n    end\n    if k == 20\n        return sort(arr)[n-19:n]\n\
    \    end\n    if k == 21\n        return sort(arr)[n-20:n]\n    end\n    if k\
    \ == 22\n        return sort(arr)[n-21:n]\n    end\n    if k == 23\n        return\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp79bzq_5x.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp79bzq_5x.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize a heap\n\
    \    heap = Heap(arr)\n    # Initialize a vector to store the maximum k elements\n\
    \    max_k = Vector{Int64}(undef, k)\n    # Pop the maximum k elements from the\
    \ heap\n    for i in 1:k\n        max_k[i] = pop!(heap)\n    end\n    # Return\
    \ the maximum k elements\n    return max_k\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc3814_ld.jl:42\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc3814_ld.jl:27\n\
    \   [2] top-level scope at /tmp/tmpc3814_ld.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc3814_ld.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpc3814_ld.jl:43\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc3814_ld.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpc3814_ld.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc3814_ld.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpc3814_ld.jl:44\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc3814_ld.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpc3814_ld.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc3814_ld.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpc3814_ld.jl:45\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc3814_ld.jl:27\n\
    \   [2] top-level scope at /tmp/tmpc3814_ld.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc3814_ld.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpc3814_ld.jl:46\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: Heap not defined\n \
    \ Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc3814_ld.jl:27\n\
    \   [2] top-level scope at /tmp/tmpc3814_ld.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc3814_ld.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpc3814_ld.jl:47\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc3814_ld.jl:27\n\
    \   [2] top-level scope at /tmp/tmpc3814_ld.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc3814_ld.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpc3814_ld.jl:48\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc3814_ld.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpc3814_ld.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc3814_ld.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpc3814_ld.jl:49\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc3814_ld.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpc3814_ld.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc3814_ld.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpc3814_ld.jl:50\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc3814_ld.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpc3814_ld.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc3814_ld.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpc3814_ld.jl:51\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc3814_ld.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpc3814_ld.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc3814_ld.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpc3814_ld.jl:52\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: Heap not\
    \ defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc3814_ld.jl:27\n\
    \   [2] top-level scope at /tmp/tmpc3814_ld.jl:52\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc3814_ld.jl:41\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc3814_ld.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # create a heap\n\
    \    heap = Heap(arr)\n    # pop the first k elements\n    return [pop!(heap)\
    \ for i in 1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp7aqhjjx.jl:36\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpp7aqhjjx.jl:27\n\
    \   [2] top-level scope at /tmp/tmpp7aqhjjx.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp7aqhjjx.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpp7aqhjjx.jl:37\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpp7aqhjjx.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpp7aqhjjx.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp7aqhjjx.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpp7aqhjjx.jl:38\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpp7aqhjjx.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpp7aqhjjx.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp7aqhjjx.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpp7aqhjjx.jl:39\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpp7aqhjjx.jl:27\n\
    \   [2] top-level scope at /tmp/tmpp7aqhjjx.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp7aqhjjx.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpp7aqhjjx.jl:40\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: Heap not defined\n \
    \ Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpp7aqhjjx.jl:27\n\
    \   [2] top-level scope at /tmp/tmpp7aqhjjx.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp7aqhjjx.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpp7aqhjjx.jl:41\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpp7aqhjjx.jl:27\n\
    \   [2] top-level scope at /tmp/tmpp7aqhjjx.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp7aqhjjx.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpp7aqhjjx.jl:42\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpp7aqhjjx.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpp7aqhjjx.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp7aqhjjx.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpp7aqhjjx.jl:43\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpp7aqhjjx.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpp7aqhjjx.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp7aqhjjx.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpp7aqhjjx.jl:44\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpp7aqhjjx.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpp7aqhjjx.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp7aqhjjx.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpp7aqhjjx.jl:45\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpp7aqhjjx.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpp7aqhjjx.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp7aqhjjx.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpp7aqhjjx.jl:46\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: Heap not\
    \ defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpp7aqhjjx.jl:27\n\
    \   [2] top-level scope at /tmp/tmpp7aqhjjx.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp7aqhjjx.jl:35\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7aqhjjx.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr, rev=true)\n    end\n    if k == 1\n \
    \       return [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr,\
    \ rev=true)[1:2]\n    end\n    if k == 3\n        return sort(arr, rev=true)[1:3]\n\
    \    end\n    if k == 4\n        return sort(arr, rev=true)[1:4]\n    end\n  \
    \  if k == 5\n        return sort(arr, rev=true)[1:5]\n    end\n    if k == 6\n\
    \        return sort(arr, rev=true)[1:6]\n    end\n    if k == 7\n        return\
    \ sort(arr, rev=true)[1:7]\n    end\n    if k == 8\n        return sort(arr, rev=true)[1:8]\n\
    \    end\n    if k == 9\n        return sort(arr, rev=true)[1:9]\n    end\n  \
    \  if k == 10\n        return sort(arr, rev=true)[1:10]\n    end\n    if k ==\
    \ 11\n        return sort(arr, rev=true)[1:11]\n    end\n    if k == 12\n    \
    \    return sort(arr, rev=true)[1:12]\n    end\n    if k == 13\n        return\
    \ sort(arr, rev=true)[1:13]\n    end\n    if k == 14\n        return sort(arr,\
    \ rev=true)[1:14]\n    end\n    if k == 15\n        return sort(arr, rev=true)[1:15]\n\
    \    end\n    if k == 16\n        return sort(arr, rev=true)[1:16]\n    end\n\
    \    if k == 17\n        return sort(arr, rev=true)[1:17]\n    end\n    if k ==\
    \ 18\n        return sort(arr, rev=true)[1:18]\n    end\n    if k == 19\n    \
    \    return sort(arr, rev=true)[1:19]\n    end\n    if k == 20\n        return\
    \ sort(arr, rev=true)[1:20]\n    end\n    if k == 21\n        return sort(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpofpsuqm3.jl:94\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpofpsuqm3.jl:94\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr)\n    end\n    if k == 2\n \
    \       if arr[1] > arr[2]\n            return [arr[1], arr[2]]\n        else\n\
    \            return [arr[2], arr[1]]\n        end\n    end\n    if k > 2\n   \
    \     if arr[1] > arr[2]\n            return [arr[1], arr[2]]\n        else\n\
    \            return [arr[2], arr[1]]\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprz_sm89d.jl:56\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [4, -4] == [4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmprz_sm89d.jl:56\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprz_sm89d.jl:54\ntest set: Error During Test at\
    \ /tmp/tmprz_sm89d.jl:57\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmprz_sm89d.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmprz_sm89d.jl:30\n   [2] top-level\
    \ scope at /tmp/tmprz_sm89d.jl:57\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprz_sm89d.jl:54\n  \ntest set: Test Failed at\
    \ /tmp/tmprz_sm89d.jl:58\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n   Evaluated: [123, -123] == [2, 20, 123]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprz_sm89d.jl:58\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprz_sm89d.jl:54\ntest set: Test Failed at /tmp/tmprz_sm89d.jl:59\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, -123] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmprz_sm89d.jl:59\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprz_sm89d.jl:54\ntest set: Test Failed at /tmp/tmprz_sm89d.jl:61\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [0,\
    \ -1] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmprz_sm89d.jl:61\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprz_sm89d.jl:54\ntest set: Error During Test at\
    \ /tmp/tmprz_sm89d.jl:62\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmprz_sm89d.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmprz_sm89d.jl:30\n   [2] top-level\
    \ scope at /tmp/tmprz_sm89d.jl:62\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprz_sm89d.jl:54\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    5     4      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 4 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprz_sm89d.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    arr = sort(arr)\n\
    \    return arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpwfggxyxe.jl:36\\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\\n   Evaluated: [-4, 4] == [4, 4]\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpwfggxyxe.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwfggxyxe.jl:34\\ntest set: Test Failed at /tmp/tmpwfggxyxe.jl:37\\\
    n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n   Evaluated: [-3]\
    \ == [2]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpwfggxyxe.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwfggxyxe.jl:34\\ntest set: Test Failed at /tmp/tmpwfggxyxe.jl:38\\\
    n  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n \
    \  Evaluated: [-123, -3, 0] == [2, 20, 123]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpwfggxyxe.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwfggxyxe.jl:34\\ntest set: Test Failed at /tmp/tmpwfggxyxe.jl:39\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpwfggxyxe.jl:39\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwfggxyxe.jl:34\\ntest set: Test Failed at /tmp/tmpwfggxyxe.jl:41\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [-10,\
    \ -1] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpwfggxyxe.jl:41\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwfggxyxe.jl:34\\ntest set: Test Failed at /tmp/tmpwfggxyxe.jl:42\\\
    n  Expression: candidate([1, 0, 5, -7], 1) == [5]\\n   Evaluated: [-7] == [5]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpwfggxyxe.jl:42\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwfggxyxe.jl:34\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap = MaxHeap(arr)\n\
    \    return pop!(heap, k)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc98dev_1.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc98dev_1.jl:26\n\
    \   [2] top-level scope at /tmp/tmpc98dev_1.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc98dev_1.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpc98dev_1.jl:35\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc98dev_1.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpc98dev_1.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc98dev_1.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpc98dev_1.jl:36\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc98dev_1.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpc98dev_1.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc98dev_1.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpc98dev_1.jl:37\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: MaxHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc98dev_1.jl:26\n\
    \   [2] top-level scope at /tmp/tmpc98dev_1.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc98dev_1.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpc98dev_1.jl:38\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: MaxHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc98dev_1.jl:26\n\
    \   [2] top-level scope at /tmp/tmpc98dev_1.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc98dev_1.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpc98dev_1.jl:39\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc98dev_1.jl:26\n\
    \   [2] top-level scope at /tmp/tmpc98dev_1.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc98dev_1.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpc98dev_1.jl:40\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc98dev_1.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpc98dev_1.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc98dev_1.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpc98dev_1.jl:41\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc98dev_1.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpc98dev_1.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc98dev_1.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpc98dev_1.jl:42\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n  \
    \ [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc98dev_1.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpc98dev_1.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc98dev_1.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpc98dev_1.jl:43\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc98dev_1.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpc98dev_1.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc98dev_1.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpc98dev_1.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpc98dev_1.jl:26\n\
    \   [2] top-level scope at /tmp/tmpc98dev_1.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpc98dev_1.jl:33\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc98dev_1.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements of the sorted array\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # Return the first k elements\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwz7xal3x.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwz7xal3x.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwz7xal3x.jl:35\ntest set: Test Failed at /tmp/tmpwz7xal3x.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpwz7xal3x.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwz7xal3x.jl:35\ntest set: Test Failed at /tmp/tmpwz7xal3x.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpwz7xal3x.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwz7xal3x.jl:35\ntest set: Test Failed at /tmp/tmpwz7xal3x.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwz7xal3x.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwz7xal3x.jl:35\ntest set: Test Failed at /tmp/tmpwz7xal3x.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpwz7xal3x.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwz7xal3x.jl:35\ntest set: Test Failed at /tmp/tmpwz7xal3x.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpwz7xal3x.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwz7xal3x.jl:35\ntest set: Test Failed at /tmp/tmpwz7xal3x.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpwz7xal3x.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwz7xal3x.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwz7xal3x.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr)[n-1:n]\n  \
    \  end\n    if k == 3\n        return sort(arr)[n-2:n]\n    end\n    if k == 4\n\
    \        return sort(arr)[n-3:n]\n    end\n    if k == 5\n        return sort(arr)[n-4:n]\n\
    \    end\n    if k == 6\n        return sort(arr)[n-5:n]\n    end\n    if k ==\
    \ 7\n        return sort(arr)[n-6:n]\n    end\n    if k == 8\n        return sort(arr)[n-7:n]\n\
    \    end\n    if k == 9\n        return sort(arr)[n-8:n]\n    end\n    if k ==\
    \ 10\n        return sort(arr)[n-9:n]\n    end\n    if k == 11\n        return\
    \ sort(arr)[n-10:n]\n    end\n    if k == 12\n        return sort(arr)[n-11:n]\n\
    \    end\n    if k == 13\n        return sort(arr)[n-12:n]\n    end\n    if k\
    \ == 14\n        return sort(arr)[n-13:n]\n    end\n    if k == 15\n        return\
    \ sort(arr)[n-14:n]\n    end\n    if k == 16\n        return sort(arr)[n-15:n]\n\
    \    end\n    if k == 17\n        return sort(arr)[n-16:n]\n    end\n    if k\
    \ == 18\n        return sort(arr)[n-17:n]\n    end\n    if k == 19\n        return\
    \ sort(arr)[n-18:n]\n    end\n    if k == 20\n        return sort(arr)[n-19:n]\n\
    \    end\n    if k == 21\n        return sort(arr)[n-20:n]\n    end\n    if k\
    \ == 22\n        return sort(arr)[n-21:n]\n    end\n    if k == 23\n        return\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptchrsf2w.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptchrsf2w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0wjd1wtf.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0wjd1wtf.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wjd1wtf.jl:34\ntest set: Test Failed at /tmp/tmp0wjd1wtf.jl:37\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3]\
    \ == [2]\nStacktrace:\n [1] top-level scope at /tmp/tmp0wjd1wtf.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wjd1wtf.jl:34\ntest set: Test Failed at /tmp/tmp0wjd1wtf.jl:38\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp0wjd1wtf.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wjd1wtf.jl:34\ntest set: Test Failed at /tmp/tmp0wjd1wtf.jl:39\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp0wjd1wtf.jl:39\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wjd1wtf.jl:34\ntest set: Test Failed at /tmp/tmp0wjd1wtf.jl:41\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [-10,\
    \ -1] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp0wjd1wtf.jl:41\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wjd1wtf.jl:34\ntest set: Test Failed at /tmp/tmp0wjd1wtf.jl:42\n\
    \  Expression: candidate([1, 0, 5, -7], 1) == [5]\n   Evaluated: [-7] == [5]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0wjd1wtf.jl:42\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wjd1wtf.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     6     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0wjd1wtf.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr, rev=true)\n    end\n    if k == 1\n \
    \       return [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr,\
    \ rev=true)[1:2]\n    end\n    if k == 3\n        return sort(arr, rev=true)[1:3]\n\
    \    end\n    if k == 4\n        return sort(arr, rev=true)[1:4]\n    end\n  \
    \  if k == 5\n        return sort(arr, rev=true)[1:5]\n    end\n    if k == 6\n\
    \        return sort(arr, rev=true)[1:6]\n    end\n    if k == 7\n        return\
    \ sort(arr, rev=true)[1:7]\n    end\n    if k == 8\n        return sort(arr, rev=true)[1:8]\n\
    \    end\n    if k == 9\n        return sort(arr, rev=true)[1:9]\n    end\n  \
    \  if k == 10\n        return sort(arr, rev=true)[1:10]\n    end\n    if k ==\
    \ 11\n        return sort(arr, rev=true)[1:11]\n    end\n    if k == 12\n    \
    \    return sort(arr, rev=true)[1:12]\n    end\n    if k == 13\n        return\
    \ sort(arr, rev=true)[1:13]\n    end\n    if k == 14\n        return sort(arr,\
    \ rev=true)[1:14]\n    end\n    if k == 15\n        return sort(arr, rev=true)[1:15]\n\
    \    end\n    if k == 16\n        return sort(arr, rev=true)[1:16]\n    end\n\
    \    if k == 17\n        return sort(arr, rev=true)[1:17]\n    end\n    if k ==\
    \ 18\n        return sort(arr, rev=true)[1:18]\n    end\n    if k == 19\n    \
    \    return sort(arr, rev=true)[1:19]\n    end\n    if k == 20\n        return\
    \ sort(arr, rev=true)[1:20]\n    end\n    if k == 21\n        return sort(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa_na2jen.jl:94\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa_na2jen.jl:94\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpktjpwmmk.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpktjpwmmk.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpktjpwmmk.jl:35\ntest set: Test Failed at /tmp/tmpktjpwmmk.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpktjpwmmk.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpktjpwmmk.jl:35\ntest set: Test Failed at /tmp/tmpktjpwmmk.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpktjpwmmk.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpktjpwmmk.jl:35\ntest set: Test Failed at /tmp/tmpktjpwmmk.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpktjpwmmk.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpktjpwmmk.jl:35\ntest set: Test Failed at /tmp/tmpktjpwmmk.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpktjpwmmk.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpktjpwmmk.jl:35\ntest set: Test Failed at /tmp/tmpktjpwmmk.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpktjpwmmk.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpktjpwmmk.jl:35\ntest set: Test Failed at /tmp/tmpktjpwmmk.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpktjpwmmk.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpktjpwmmk.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpktjpwmmk.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr)[(n-1):n]\n\
    \    end\n    if k == 3\n        return sort(arr)[(n-2):n]\n    end\n    if k\
    \ == 4\n        return sort(arr)[(n-3):n]\n    end\n    if k == 5\n        return\
    \ sort(arr)[(n-4):n]\n    end\n    if k == 6\n        return sort(arr)[(n-5):n]\n\
    \    end\n    if k == 7\n        return sort(arr)[(n-6):n]\n    end\n    if k\
    \ == 8\n        return sort(arr)[(n-7):n]\n    end\n    if k == 9\n        return\
    \ sort(arr)[(n-8):n]\n    end\n    if k == 10\n        return sort(arr)[(n-9):n]\n\
    \    end\n    if k == 11\n        return sort(arr)[(n-10):n]\n    end\n    if\
    \ k == 12\n        return sort(arr)[(n-11):n]\n    end\n    if k == 13\n     \
    \   return sort(arr)[(n-12):n]\n    end\n    if k == 14\n        return sort(arr)[(n-13):n]\n\
    \    end\n    if k == 15\n        return sort(arr)[(n-14):n]\n    end\n    if\
    \ k == 16\n        return sort(arr)[(n-15):n]\n    end\n    if k == 17\n     \
    \   return sort(arr)[(n-16):n]\n    end\n    if k == 18\n        return sort(arr)[(n-17):n]\n\
    \    end\n    if k == 19\n        return sort(arr)[(n-18):n]\n    end\n    if\
    \ k == 20\n        return sort(arr)[(n-19):n]\n    end\n    if k == 21\n     \
    \   return sort(arr)[(n-20):n]\n    end\n    if k == 22\n        return sort(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnllawhx5.jl:97\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnllawhx5.jl:97\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp363woltj.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp363woltj.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp363woltj.jl:35\ntest set: Test Failed at /tmp/tmp363woltj.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp363woltj.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp363woltj.jl:35\ntest set: Test Failed at /tmp/tmp363woltj.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp363woltj.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp363woltj.jl:35\ntest set: Test Failed at /tmp/tmp363woltj.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp363woltj.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp363woltj.jl:35\ntest set: Test Failed at /tmp/tmp363woltj.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp363woltj.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp363woltj.jl:35\ntest set: Test Failed at /tmp/tmp363woltj.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmp363woltj.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp363woltj.jl:35\ntest set: Test Failed at /tmp/tmp363woltj.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmp363woltj.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp363woltj.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp363woltj.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    heap = Vector{Int64}(undef,\
    \ k)\n    for i in 1:k\n        heap[i] = arr[i]\n    end\n    heap = build_max_heap(heap)\n\
    \    for i in k+1:n\n        if arr[i] > heap[1]\n            heap[1] = arr[i]\n\
    \            heap = max_heapify(heap, 1)\n        end\n    end\n    return heap\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy6hnvspq.jl:49\n  Test threw exception\n\
    \  Expression: candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: build_max_heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy6hnvspq.jl:34\n\
    \   [2] top-level scope at /tmp/tmpy6hnvspq.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy6hnvspq.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpy6hnvspq.jl:50\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: build_max_heap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy6hnvspq.jl:34\n\
    \   [2] top-level scope at /tmp/tmpy6hnvspq.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy6hnvspq.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpy6hnvspq.jl:51\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: build_max_heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy6hnvspq.jl:34\n\
    \   [2] top-level scope at /tmp/tmpy6hnvspq.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy6hnvspq.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpy6hnvspq.jl:52\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: build_max_heap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy6hnvspq.jl:34\n\
    \   [2] top-level scope at /tmp/tmpy6hnvspq.jl:52\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy6hnvspq.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpy6hnvspq.jl:54\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: build_max_heap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy6hnvspq.jl:34\n\
    \   [2] top-level scope at /tmp/tmpy6hnvspq.jl:54\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy6hnvspq.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpy6hnvspq.jl:55\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: build_max_heap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy6hnvspq.jl:34\n   [2] top-level\
    \ scope at /tmp/tmpy6hnvspq.jl:55\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy6hnvspq.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpy6hnvspq.jl:58\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: build_max_heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy6hnvspq.jl:34\n\
    \   [2] top-level scope at /tmp/tmpy6hnvspq.jl:58\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy6hnvspq.jl:47\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    4      7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy6hnvspq.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr, rev=true)\n    end\n    pivot\
    \ = arr[1]\n    left = [x for x in arr if x < pivot]\n    right = [x for x in\
    \ arr if x > pivot]\n    if length(left) == k - 1\n        return sort(vcat(left,\
    \ [pivot]), rev=true)\n    elseif length(left) > k - 1\n        return maximum(left,\
    \ k)\n    else\n        return maximum(right, k - length(left) - 1)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpr_0gymdw.jl:51\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpr_0gymdw.jl:51\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr_0gymdw.jl:50\\ntest set: Test Failed at /tmp/tmpr_0gymdw.jl:52\\\
    n  Expression: candidate([4, -4, 4], 2) == [4, 4]\\n   Evaluated: [4, -4] == [4,\
    \ 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpr_0gymdw.jl:52\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr_0gymdw.jl:50\\ntest set: Error During Test\
    \ at /tmp/tmpr_0gymdw.jl:53\\n  Test threw exception\\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpr_0gymdw.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpr_0gymdw.jl:30\\\
    n   [2] top-level scope at /tmp/tmpr_0gymdw.jl:53\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpr_0gymdw.jl:50\\n  \\ntest set: Test Failed\
    \ at /tmp/tmpr_0gymdw.jl:54\\n  Expression: candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\\n   Evaluated: [0, -3] == [2, 20, 123]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpr_0gymdw.jl:54\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr_0gymdw.jl:50\\ntest set: Error During Test\
    \ at /tmp/tmpr_0gymdw.jl:55\\n  Test threw exception\\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpr_0gymdw.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpr_0gymdw.jl:30\\\
    n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpr_0gymdw.jl:43\\n   [3]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpr_0gymdw.jl:41\\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpr_0gymdw.jl:43\\n   [5] top-level scope at /tmp/tmpr_0gymdw.jl:55\\\
    n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [7] top-level scope at /tmp/tmpr_0gymdw.jl:50\\n  \\ntest set: Test Failed\
    \ at /tmp/tmpr_0gymdw.jl:56\\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] ==\
    \ [-13, -8, 0, 0, 3, 5, 15]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpr_0gymdw.jl:56\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr_0gymdw.jl:50\\ntest set: Test Failed at /tmp/tmpr_0gymdw.jl:57\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [-1,\
    \ -10] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpr_0gymdw.jl:57\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr_0gymdw.jl:50\\ntest set: Error During Test\
    \ at /tmp/tmpr_0gymdw.jl:58\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpr_0gymdw.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpr_0gymdw.jl:30\\\
    n   [2] top-level scope at /tmp/tmpr_0gymdw.jl:58\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpr_0gymdw.jl:50\\n  \\ntest set: Test Failed\
    \ at /tmp/tmpr_0gymdw.jl:59\\n  Expression: candidate([4, -4], 2) == [-4, 4]\\\
    n   Evaluated: [4, -4] == [-4, 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpr_0gymdw.jl:59\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr_0gymdw.jl:50\\ntest set: Test Failed at /tmp/tmpr_0gymdw.jl:60\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpr_0gymdw.jl:60\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr_0gymdw.jl:50\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    sorted_arr = sort(arr,\
    \ rev=true)\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ne9y3cm.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4ne9y3cm.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ne9y3cm.jl:33\ntest set: Test Failed at /tmp/tmp4ne9y3cm.jl:37\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp4ne9y3cm.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ne9y3cm.jl:33\ntest set: Test Failed at /tmp/tmp4ne9y3cm.jl:38\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp4ne9y3cm.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ne9y3cm.jl:33\ntest set: Test Failed at /tmp/tmp4ne9y3cm.jl:39\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4ne9y3cm.jl:39\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ne9y3cm.jl:33\ntest set: Test Failed at /tmp/tmp4ne9y3cm.jl:40\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp4ne9y3cm.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ne9y3cm.jl:33\ntest set: Test Failed at /tmp/tmp4ne9y3cm.jl:42\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmp4ne9y3cm.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ne9y3cm.jl:33\ntest set: Test Failed at /tmp/tmp4ne9y3cm.jl:43\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmp4ne9y3cm.jl:43\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ne9y3cm.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ne9y3cm.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpx8_nt6e2.jl:36\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpx8_nt6e2.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx8_nt6e2.jl:35\\ntest set: Test Failed at /tmp/tmpx8_nt6e2.jl:39\\\
    n  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n \
    \  Evaluated: [123, 20, 2] == [2, 20, 123]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpx8_nt6e2.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx8_nt6e2.jl:35\\ntest set: Test Failed at /tmp/tmpx8_nt6e2.jl:40\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpx8_nt6e2.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx8_nt6e2.jl:35\\ntest set: Test Failed at /tmp/tmpx8_nt6e2.jl:41\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpx8_nt6e2.jl:41\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx8_nt6e2.jl:35\\ntest set: Test Failed at /tmp/tmpx8_nt6e2.jl:42\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [5,\
    \ 3] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpx8_nt6e2.jl:42\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx8_nt6e2.jl:35\\ntest set: Test Failed at /tmp/tmpx8_nt6e2.jl:44\\\
    n  Expression: candidate([4, -4], 2) == [-4, 4]\\n   Evaluated: [4, -4] == [-4,\
    \ 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpx8_nt6e2.jl:44\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx8_nt6e2.jl:35\\ntest set: Test Failed at /tmp/tmpx8_nt6e2.jl:45\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpx8_nt6e2.jl:45\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx8_nt6e2.jl:35\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     7     11\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order.\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements.\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5fa8h4g8.jl:36\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5fa8h4g8.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5fa8h4g8.jl:35\\ntest set: Test Failed at /tmp/tmp5fa8h4g8.jl:39\\\
    n  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n \
    \  Evaluated: [123, 20, 2] == [2, 20, 123]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp5fa8h4g8.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5fa8h4g8.jl:35\\ntest set: Test Failed at /tmp/tmp5fa8h4g8.jl:40\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5fa8h4g8.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5fa8h4g8.jl:35\\ntest set: Test Failed at /tmp/tmp5fa8h4g8.jl:41\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp5fa8h4g8.jl:41\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5fa8h4g8.jl:35\\ntest set: Test Failed at /tmp/tmp5fa8h4g8.jl:42\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [5,\
    \ 3] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5fa8h4g8.jl:42\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5fa8h4g8.jl:35\\ntest set: Test Failed at /tmp/tmp5fa8h4g8.jl:44\\\
    n  Expression: candidate([4, -4], 2) == [-4, 4]\\n   Evaluated: [4, -4] == [-4,\
    \ 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5fa8h4g8.jl:44\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5fa8h4g8.jl:35\\ntest set: Test Failed at /tmp/tmp5fa8h4g8.jl:45\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5fa8h4g8.jl:45\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5fa8h4g8.jl:35\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     7     11\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if n == k + 1\n        return sort(arr)[1:k]\n\
    \    end\n    if n == k + 2\n        return sort(arr)[2:k+1]\n    end\n    if\
    \ n == k + 3\n        return sort(arr)[3:k+2]\n    end\n    if n == k + 4\n  \
    \      return sort(arr)[4:k+3]\n    end\n    if n == k + 5\n        return sort(arr)[5:k+4]\n\
    \    end\n    if n == k + 6\n        return sort(arr)[6:k+5]\n    end\n    if\
    \ n == k + 7\n        return sort(arr)[7:k+6]\n    end\n    if n == k + 8\n  \
    \      return sort(arr)[8:k+7]\n    end\n    if n == k + 9\n        return sort(arr)[9:k+8]\n\
    \    end\n    if n == k + 10\n        return sort(arr)[10:k+9]\n    end\n    if\
    \ n == k + 11\n        return sort(arr)[11:k+10]\n    end\n    if n == k + 12\n\
    \        return sort(arr)[12:k+11]\n    end\n    if n == k + 13\n        return\
    \ sort(arr)[13:k+12]\n    end\n    if n == k + 14\n        return sort(arr)[14:k+13]\n\
    \    end\n    if n == k + 15\n        return sort(arr)[15:k+14]\n    end\n   \
    \ if n == k + 16\n        return sort(arr)[16:k+15]\n    end\n    if n == k +\
    \ 17\n        return sort(arr)[17:k+16]\n    end\n    if n == k + 18\n       \
    \ return sort(arr)[18:k+17]\n    end\n    if n == k + 19\n        return sort(arr)[19:k+18]\n\
    \    end\n    if n == k + 20\n        return sort(arr)[20:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp87fb9lrl.jl:92\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp87fb9lrl.jl:92\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\n\
    \    sorted_arr = sort(arr)\n    # Return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr)\n    end\n    if k > length(arr)\n\
    \        return maximum(arr, length(arr))\n    end\n    if k < length(arr)\n \
    \       return sort(vcat(maximum(arr[1:end-1], k), arr[end]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwntubx1n.jl:48\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4, 4] == [4, 4]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwntubx1n.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwntubx1n.jl:46\ntest set: Error During Test at\
    \ /tmp/tmpwntubx1n.jl:49\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpwntubx1n.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpwntubx1n.jl:30\n   [2] top-level\
    \ scope at /tmp/tmpwntubx1n.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwntubx1n.jl:46\n  \ntest set: Test Failed at\
    \ /tmp/tmpwntubx1n.jl:50\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0, 1, 2, 20, 123] == [2, 20, 123]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwntubx1n.jl:50\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwntubx1n.jl:46\ntest set: Test Failed at /tmp/tmpwntubx1n.jl:51\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1, 2, 20] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpwntubx1n.jl:51\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwntubx1n.jl:46\ntest set: Test Failed at /tmp/tmpwntubx1n.jl:53\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [-10,\
    \ -1, 0, 2, 3, 5] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpwntubx1n.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwntubx1n.jl:46\ntest set: Error During Test at\
    \ /tmp/tmpwntubx1n.jl:54\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpwntubx1n.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpwntubx1n.jl:30\n   [2] top-level\
    \ scope at /tmp/tmpwntubx1n.jl:54\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwntubx1n.jl:46\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    5     4      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 4 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwntubx1n.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr, rev=true)\n    # return the first k elements\n   \
    \ return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpw7skh4ww.jl:36\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw7skh4ww.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw7skh4ww.jl:35\\ntest set: Test Failed at /tmp/tmpw7skh4ww.jl:39\\\
    n  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n \
    \  Evaluated: [123, 20, 2] == [2, 20, 123]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpw7skh4ww.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw7skh4ww.jl:35\\ntest set: Test Failed at /tmp/tmpw7skh4ww.jl:40\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw7skh4ww.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw7skh4ww.jl:35\\ntest set: Test Failed at /tmp/tmpw7skh4ww.jl:41\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpw7skh4ww.jl:41\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw7skh4ww.jl:35\\ntest set: Test Failed at /tmp/tmpw7skh4ww.jl:42\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [5,\
    \ 3] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw7skh4ww.jl:42\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw7skh4ww.jl:35\\ntest set: Test Failed at /tmp/tmpw7skh4ww.jl:44\\\
    n  Expression: candidate([4, -4], 2) == [-4, 4]\\n   Evaluated: [4, -4] == [-4,\
    \ 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw7skh4ww.jl:44\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw7skh4ww.jl:35\\ntest set: Test Failed at /tmp/tmpw7skh4ww.jl:45\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw7skh4ww.jl:45\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw7skh4ww.jl:35\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     7     11\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr)[n-1:n]\n  \
    \  end\n    if k == 3\n        return sort(arr)[n-2:n]\n    end\n    if k == 4\n\
    \        return sort(arr)[n-3:n]\n    end\n    if k == 5\n        return sort(arr)[n-4:n]\n\
    \    end\n    if k == 6\n        return sort(arr)[n-5:n]\n    end\n    if k ==\
    \ 7\n        return sort(arr)[n-6:n]\n    end\n    if k == 8\n        return sort(arr)[n-7:n]\n\
    \    end\n    if k == 9\n        return sort(arr)[n-8:n]\n    end\n    if k ==\
    \ 10\n        return sort(arr)[n-9:n]\n    end\n    if k == 11\n        return\
    \ sort(arr)[n-10:n]\n    end\n    if k == 12\n        return sort(arr)[n-11:n]\n\
    \    end\n    if k == 13\n        return sort(arr)[n-12:n]\n    end\n    if k\
    \ == 14\n        return sort(arr)[n-13:n]\n    end\n    if k == 15\n        return\
    \ sort(arr)[n-14:n]\n    end\n    if k == 16\n        return sort(arr)[n-15:n]\n\
    \    end\n    if k == 17\n        return sort(arr)[n-16:n]\n    end\n    if k\
    \ == 18\n        return sort(arr)[n-17:n]\n    end\n    if k == 19\n        return\
    \ sort(arr)[n-18:n]\n    end\n    if k == 20\n        return sort(arr)[n-19:n]\n\
    \    end\n    if k == 21\n        return sort(arr)[n-20:n]\n    end\n    if k\
    \ == 22\n        return sort(arr)[n-21:n]\n    end\n    if k == 23\n        return\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj9ym80du.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj9ym80du.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr, rev=true)\n    end\n    pivot\
    \ = arr[rand(1:length(arr))]\n    left = []\n    right = []\n    for i in 1:length(arr)\n\
    \        if arr[i] < pivot\n            push!(left, arr[i])\n        elseif arr[i]\
    \ > pivot\n            push!(right, arr[i])\n        end\n    end\n    if length(left)\
    \ >= k\n        return maximum(left, k)\n    elseif length(left) + 1 == k\n  \
    \      return sort(left, rev=true)\n    else\n        return sort(left, rev=true)\
    \ * maximum(right, k - length(left) - 1)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwrpslwwd.jl:58\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwrpslwwd.jl:58\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwrpslwwd.jl:57\ntest set: Test Failed at /tmp/tmpwrpslwwd.jl:59\n\
    \  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated: [-4] == [4, 4]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwrpslwwd.jl:59\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwrpslwwd.jl:57\ntest set: Error During Test at\
    \ /tmp/tmpwrpslwwd.jl:60\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpwrpslwwd.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpwrpslwwd.jl:30\n   [2] top-level\
    \ scope at /tmp/tmpwrpslwwd.jl:60\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwrpslwwd.jl:57\n  \ntest set: Error During\
    \ Test at /tmp/tmpwrpslwwd.jl:61\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: no method matching\
    \ maximum(::Array{Any,1}, ::Int64)\n  You may have intended to import Base.maximum\n\
    \  Closest candidates are:\n    maximum(!Matched::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpwrpslwwd.jl:26\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpwrpslwwd.jl:46\n   [2] top-level scope at /tmp/tmpwrpslwwd.jl:61\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwrpslwwd.jl:57\n  \ntest set: Error During\
    \ Test at /tmp/tmpwrpslwwd.jl:62\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: no method matching maximum(::Array{Any,1},\
    \ ::Int64)\n  You may have intended to import Base.maximum\n  Closest candidates\
    \ are:\n    maximum(!Matched::Array{Int64,1}, ::Int64) at /tmp/tmpwrpslwwd.jl:26\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpwrpslwwd.jl:46\n\
    \   [2] top-level scope at /tmp/tmpwrpslwwd.jl:62\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwrpslwwd.jl:57\n  \ntest set: Test Failed at\
    \ /tmp/tmpwrpslwwd.jl:63\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7)\
    \ == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13,\
    \ -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] top-level scope at /tmp/tmpwrpslwwd.jl:63\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwrpslwwd.jl:57\ntest set: Error During Test at\
    \ /tmp/tmpwrpslwwd.jl:64\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: no method matching maximum(::Array{Any,1},\
    \ ::Int64)\n  You may have intended to import Base.maximum\n  Closest candidates\
    \ are:\n    maximum(!Matched::Array{Int64,1}, ::Int64) at /tmp/tmpwrpslwwd.jl:26\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpwrpslwwd.jl:46\n\
    \   [2] top-level scope at /tmp/tmpwrpslwwd.jl:64\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwrpslwwd.jl:57\n  \ntest set: Error During\
    \ Test at /tmp/tmpwrpslwwd.jl:65\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpwrpslwwd.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpwrpslwwd.jl:30\n   [2] top-level\
    \ scope at /tmp/tmpwrpslwwd.jl:65\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwrpslwwd.jl:57\n  \ntest set: Test Failed at\
    \ /tmp/tmpwrpslwwd.jl:66\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpwrpslwwd.jl:66\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwrpslwwd.jl:57\ntest set: Test Failed at /tmp/tmpwrpslwwd.jl:67\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpwrpslwwd.jl:67\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwrpslwwd.jl:57\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    1     5      5     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwrpslwwd.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmposflc7wx.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmposflc7wx.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmposflc7wx.jl:34\ntest set: Test Failed at /tmp/tmposflc7wx.jl:37\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3]\
    \ == [2]\nStacktrace:\n [1] top-level scope at /tmp/tmposflc7wx.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmposflc7wx.jl:34\ntest set: Test Failed at /tmp/tmposflc7wx.jl:38\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmposflc7wx.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmposflc7wx.jl:34\ntest set: Test Failed at /tmp/tmposflc7wx.jl:39\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmposflc7wx.jl:39\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmposflc7wx.jl:34\ntest set: Test Failed at /tmp/tmposflc7wx.jl:41\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [-10,\
    \ -1] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmposflc7wx.jl:41\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmposflc7wx.jl:34\ntest set: Test Failed at /tmp/tmposflc7wx.jl:42\n\
    \  Expression: candidate([1, 0, 5, -7], 1) == [5]\n   Evaluated: [-7] == [5]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmposflc7wx.jl:42\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmposflc7wx.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     6     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmposflc7wx.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap = MaxHeap(arr)\n\
    \    return heap.pop(k)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgo_9szcf.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgo_9szcf.jl:26\n\
    \   [2] top-level scope at /tmp/tmpgo_9szcf.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgo_9szcf.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpgo_9szcf.jl:35\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgo_9szcf.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpgo_9szcf.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgo_9szcf.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpgo_9szcf.jl:36\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgo_9szcf.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpgo_9szcf.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgo_9szcf.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpgo_9szcf.jl:37\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: MaxHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgo_9szcf.jl:26\n\
    \   [2] top-level scope at /tmp/tmpgo_9szcf.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgo_9szcf.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpgo_9szcf.jl:38\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: MaxHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgo_9szcf.jl:26\n\
    \   [2] top-level scope at /tmp/tmpgo_9szcf.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgo_9szcf.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpgo_9szcf.jl:39\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgo_9szcf.jl:26\n\
    \   [2] top-level scope at /tmp/tmpgo_9szcf.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgo_9szcf.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpgo_9szcf.jl:40\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgo_9szcf.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpgo_9szcf.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgo_9szcf.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpgo_9szcf.jl:41\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgo_9szcf.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpgo_9szcf.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgo_9szcf.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpgo_9szcf.jl:42\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n  \
    \ [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgo_9szcf.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpgo_9szcf.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgo_9szcf.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpgo_9szcf.jl:43\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgo_9szcf.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpgo_9szcf.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgo_9szcf.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpgo_9szcf.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgo_9szcf.jl:26\n\
    \   [2] top-level scope at /tmp/tmpgo_9szcf.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgo_9szcf.jl:33\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgo_9szcf.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements of the sorted array\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # Return the first k elements\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9dh9wvli.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9dh9wvli.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9dh9wvli.jl:35\ntest set: Test Failed at /tmp/tmp9dh9wvli.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp9dh9wvli.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9dh9wvli.jl:35\ntest set: Test Failed at /tmp/tmp9dh9wvli.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp9dh9wvli.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9dh9wvli.jl:35\ntest set: Test Failed at /tmp/tmp9dh9wvli.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9dh9wvli.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9dh9wvli.jl:35\ntest set: Test Failed at /tmp/tmp9dh9wvli.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp9dh9wvli.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9dh9wvli.jl:35\ntest set: Test Failed at /tmp/tmp9dh9wvli.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmp9dh9wvli.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9dh9wvli.jl:35\ntest set: Test Failed at /tmp/tmp9dh9wvli.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmp9dh9wvli.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9dh9wvli.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9dh9wvli.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr)[n-1:n]\n  \
    \  end\n    if k == 3\n        return sort(arr)[n-2:n]\n    end\n    if k == 4\n\
    \        return sort(arr)[n-3:n]\n    end\n    if k == 5\n        return sort(arr)[n-4:n]\n\
    \    end\n    if k == 6\n        return sort(arr)[n-5:n]\n    end\n    if k ==\
    \ 7\n        return sort(arr)[n-6:n]\n    end\n    if k == 8\n        return sort(arr)[n-7:n]\n\
    \    end\n    if k == 9\n        return sort(arr)[n-8:n]\n    end\n    if k ==\
    \ 10\n        return sort(arr)[n-9:n]\n    end\n    if k == 11\n        return\
    \ sort(arr)[n-10:n]\n    end\n    if k == 12\n        return sort(arr)[n-11:n]\n\
    \    end\n    if k == 13\n        return sort(arr)[n-12:n]\n    end\n    if k\
    \ == 14\n        return sort(arr)[n-13:n]\n    end\n    if k == 15\n        return\
    \ sort(arr)[n-14:n]\n    end\n    if k == 16\n        return sort(arr)[n-15:n]\n\
    \    end\n    if k == 17\n        return sort(arr)[n-16:n]\n    end\n    if k\
    \ == 18\n        return sort(arr)[n-17:n]\n    end\n    if k == 19\n        return\
    \ sort(arr)[n-18:n]\n    end\n    if k == 20\n        return sort(arr)[n-19:n]\n\
    \    end\n    if k == 21\n        return sort(arr)[n-20:n]\n    end\n    if k\
    \ == 22\n        return sort(arr)[n-21:n]\n    end\n    if k == 23\n        return\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjywlrx9p.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjywlrx9p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpez1mlgcc.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpez1mlgcc.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpez1mlgcc.jl:35\ntest set: Test Failed at /tmp/tmpez1mlgcc.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpez1mlgcc.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpez1mlgcc.jl:35\ntest set: Test Failed at /tmp/tmpez1mlgcc.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpez1mlgcc.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpez1mlgcc.jl:35\ntest set: Test Failed at /tmp/tmpez1mlgcc.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpez1mlgcc.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpez1mlgcc.jl:35\ntest set: Test Failed at /tmp/tmpez1mlgcc.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpez1mlgcc.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpez1mlgcc.jl:35\ntest set: Test Failed at /tmp/tmpez1mlgcc.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpez1mlgcc.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpez1mlgcc.jl:35\ntest set: Test Failed at /tmp/tmpez1mlgcc.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpez1mlgcc.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpez1mlgcc.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpez1mlgcc.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize a heap\n\
    \    heap = BinaryHeap()\n    for i in 1:k\n        push!(heap, arr[i])\n    end\n\
    \    for i in k+1:length(arr)\n        if arr[i] > top(heap)\n            pop!(heap)\n\
    \            push!(heap, arr[i])\n        end\n    end\n    return sort(collect(heap))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw72nej4r.jl:44\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw72nej4r.jl:27\n\
    \   [2] top-level scope at /tmp/tmpw72nej4r.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw72nej4r.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmpw72nej4r.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw72nej4r.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpw72nej4r.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw72nej4r.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmpw72nej4r.jl:46\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw72nej4r.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpw72nej4r.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw72nej4r.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmpw72nej4r.jl:47\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: BinaryHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw72nej4r.jl:27\n\
    \   [2] top-level scope at /tmp/tmpw72nej4r.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw72nej4r.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmpw72nej4r.jl:48\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: BinaryHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw72nej4r.jl:27\n\
    \   [2] top-level scope at /tmp/tmpw72nej4r.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw72nej4r.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmpw72nej4r.jl:49\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw72nej4r.jl:27\n\
    \   [2] top-level scope at /tmp/tmpw72nej4r.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw72nej4r.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmpw72nej4r.jl:50\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw72nej4r.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpw72nej4r.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw72nej4r.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmpw72nej4r.jl:51\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw72nej4r.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpw72nej4r.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw72nej4r.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmpw72nej4r.jl:52\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw72nej4r.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpw72nej4r.jl:52\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw72nej4r.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmpw72nej4r.jl:53\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw72nej4r.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpw72nej4r.jl:53\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw72nej4r.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmpw72nej4r.jl:54\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpw72nej4r.jl:27\n\
    \   [2] top-level scope at /tmp/tmpw72nej4r.jl:54\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw72nej4r.jl:43\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw72nej4r.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # Return the first k elements\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzaguuxpq.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzaguuxpq.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzaguuxpq.jl:35\ntest set: Test Failed at /tmp/tmpzaguuxpq.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpzaguuxpq.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzaguuxpq.jl:35\ntest set: Test Failed at /tmp/tmpzaguuxpq.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpzaguuxpq.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzaguuxpq.jl:35\ntest set: Test Failed at /tmp/tmpzaguuxpq.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzaguuxpq.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzaguuxpq.jl:35\ntest set: Test Failed at /tmp/tmpzaguuxpq.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpzaguuxpq.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzaguuxpq.jl:35\ntest set: Test Failed at /tmp/tmpzaguuxpq.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpzaguuxpq.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzaguuxpq.jl:35\ntest set: Test Failed at /tmp/tmpzaguuxpq.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpzaguuxpq.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzaguuxpq.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzaguuxpq.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr, rev=true)\n    end\n    return\
    \ sort(maximum(arr[1:end-1], k-1) .* (arr[end] .> maximum(arr[1:end-1], k-1))\
    \ .+ arr[end] .* (arr[end] .<= maximum(arr[1:end-1], k-1)))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmptm9angwq.jl:42\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptm9angwq.jl:42\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptm9angwq.jl:41\\ntest set: Error During Test\
    \ at /tmp/tmptm9angwq.jl:43\\n  Test threw exception\\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmptm9angwq.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmptm9angwq.jl:30\\\
    n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmptm9angwq.jl:35\\n   [3]\
    \ top-level scope at /tmp/tmptm9angwq.jl:43\\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmptm9angwq.jl:41\\n  \\ntest set: Error During\
    \ Test at /tmp/tmptm9angwq.jl:44\\n  Test threw exception\\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmptm9angwq.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmptm9angwq.jl:30\\\
    n   [2] top-level scope at /tmp/tmptm9angwq.jl:44\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmptm9angwq.jl:41\\n  \\ntest set: Error During\
    \ Test at /tmp/tmptm9angwq.jl:45\\n  Test threw exception\\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  MethodError: no method matching\
    \ maximum(::Array{Int64,1})\\n  You may have intended to import Base.maximum\\\
    n  Closest candidates are:\\n    maximum(::Array{Int64,1}, !Matched::Int64) at\
    \ /tmp/tmptm9angwq.jl:26\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmptm9angwq.jl:30\\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmptm9angwq.jl:35\
    \ (repeats 2 times)\\n   [3] top-level scope at /tmp/tmptm9angwq.jl:45\\n   [4]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmptm9angwq.jl:41\\n  \\ntest set: Error During\
    \ Test at /tmp/tmptm9angwq.jl:46\\n  Test threw exception\\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmptm9angwq.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmptm9angwq.jl:30\\\
    n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmptm9angwq.jl:35 (repeats\
    \ 3 times)\\n   [3] top-level scope at /tmp/tmptm9angwq.jl:46\\n   [4] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmptm9angwq.jl:41\\n  \\ntest set: Test Failed\
    \ at /tmp/tmptm9angwq.jl:47\\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] ==\
    \ [-13, -8, 0, 0, 3, 5, 15]\\nStacktrace:\\n [1] top-level scope at /tmp/tmptm9angwq.jl:47\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptm9angwq.jl:41\\ntest set: Error During Test\
    \ at /tmp/tmptm9angwq.jl:48\\n  Test threw exception\\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmptm9angwq.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmptm9angwq.jl:30\\\
    n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmptm9angwq.jl:35\\n   [3]\
    \ top-level scope at /tmp/tmptm9angwq.jl:48\\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmptm9angwq.jl:41\\n  \\ntest set: Error During\
    \ Test at /tmp/tmptm9angwq.jl:49\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmptm9angwq.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmptm9angwq.jl:30\\\
    n   [2] top-level scope at /tmp/tmptm9angwq.jl:49\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmptm9angwq.jl:41\\n  \\ntest set: Test Failed\
    \ at /tmp/tmptm9angwq.jl:50\\n  Expression: candidate([4, -4], 2) == [-4, 4]\\\
    n   Evaluated: [4, -4] == [-4, 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmptm9angwq.jl:50\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptm9angwq.jl:41\\ntest set: Test Failed at /tmp/tmptm9angwq.jl:51\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmptm9angwq.jl:51\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptm9angwq.jl:41\\nTest Summary: | Pass  Fail \
    \ Error  Total'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8usnnntm.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8usnnntm.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8usnnntm.jl:34\ntest set: Test Failed at /tmp/tmp8usnnntm.jl:37\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3]\
    \ == [2]\nStacktrace:\n [1] top-level scope at /tmp/tmp8usnnntm.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8usnnntm.jl:34\ntest set: Test Failed at /tmp/tmp8usnnntm.jl:38\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp8usnnntm.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8usnnntm.jl:34\ntest set: Test Failed at /tmp/tmp8usnnntm.jl:39\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp8usnnntm.jl:39\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8usnnntm.jl:34\ntest set: Test Failed at /tmp/tmp8usnnntm.jl:41\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [-10,\
    \ -1] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp8usnnntm.jl:41\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8usnnntm.jl:34\ntest set: Test Failed at /tmp/tmp8usnnntm.jl:42\n\
    \  Expression: candidate([1, 0, 5, -7], 1) == [5]\n   Evaluated: [-7] == [5]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8usnnntm.jl:42\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8usnnntm.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     6     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8usnnntm.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements of the sorted array\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # Return the first k elements\
    \ of the sorted array\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw92tb6gu.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw92tb6gu.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw92tb6gu.jl:35\ntest set: Test Failed at /tmp/tmpw92tb6gu.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpw92tb6gu.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw92tb6gu.jl:35\ntest set: Test Failed at /tmp/tmpw92tb6gu.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpw92tb6gu.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw92tb6gu.jl:35\ntest set: Test Failed at /tmp/tmpw92tb6gu.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpw92tb6gu.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw92tb6gu.jl:35\ntest set: Test Failed at /tmp/tmpw92tb6gu.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpw92tb6gu.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw92tb6gu.jl:35\ntest set: Test Failed at /tmp/tmpw92tb6gu.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpw92tb6gu.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw92tb6gu.jl:35\ntest set: Test Failed at /tmp/tmpw92tb6gu.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpw92tb6gu.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw92tb6gu.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw92tb6gu.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvbfcvhpz.jl:36\\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\\n   Evaluated: [-4, 4] == [4, 4]\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpvbfcvhpz.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvbfcvhpz.jl:34\\ntest set: Test Failed at /tmp/tmpvbfcvhpz.jl:37\\\
    n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n   Evaluated: [-3]\
    \ == [2]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvbfcvhpz.jl:37\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvbfcvhpz.jl:34\\ntest set: Test Failed at /tmp/tmpvbfcvhpz.jl:38\\\
    n  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n \
    \  Evaluated: [-123, -3, 0] == [2, 20, 123]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpvbfcvhpz.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvbfcvhpz.jl:34\\ntest set: Test Failed at /tmp/tmpvbfcvhpz.jl:39\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvbfcvhpz.jl:39\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvbfcvhpz.jl:34\\ntest set: Test Failed at /tmp/tmpvbfcvhpz.jl:41\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [-10,\
    \ -1] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvbfcvhpz.jl:41\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvbfcvhpz.jl:34\\ntest set: Test Failed at /tmp/tmpvbfcvhpz.jl:42\\\
    n  Expression: candidate([1, 0, 5, -7], 1) == [5]\\n   Evaluated: [-7] == [5]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpvbfcvhpz.jl:42\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvbfcvhpz.jl:34\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     6  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    sort(arr)[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1x6hkbh3.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1x6hkbh3.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1x6hkbh3.jl:34\ntest set: Test Failed at /tmp/tmp1x6hkbh3.jl:37\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3]\
    \ == [2]\nStacktrace:\n [1] top-level scope at /tmp/tmp1x6hkbh3.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1x6hkbh3.jl:34\ntest set: Test Failed at /tmp/tmp1x6hkbh3.jl:38\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp1x6hkbh3.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1x6hkbh3.jl:34\ntest set: Test Failed at /tmp/tmp1x6hkbh3.jl:39\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp1x6hkbh3.jl:39\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1x6hkbh3.jl:34\ntest set: Test Failed at /tmp/tmp1x6hkbh3.jl:41\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [-10,\
    \ -1] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp1x6hkbh3.jl:41\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1x6hkbh3.jl:34\ntest set: Test Failed at /tmp/tmp1x6hkbh3.jl:42\n\
    \  Expression: candidate([1, 0, 5, -7], 1) == [5]\n   Evaluated: [-7] == [5]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1x6hkbh3.jl:42\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1x6hkbh3.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     6     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1x6hkbh3.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr), median(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)])])\n    end\n    if k == 6\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 7\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 8\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)]), median(arr\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprqfn9_f9.jl:56\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprqfn9_f9.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # Return the first k elements\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkdb0ec79.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkdb0ec79.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkdb0ec79.jl:35\ntest set: Test Failed at /tmp/tmpkdb0ec79.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpkdb0ec79.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkdb0ec79.jl:35\ntest set: Test Failed at /tmp/tmpkdb0ec79.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpkdb0ec79.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkdb0ec79.jl:35\ntest set: Test Failed at /tmp/tmpkdb0ec79.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkdb0ec79.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkdb0ec79.jl:35\ntest set: Test Failed at /tmp/tmpkdb0ec79.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpkdb0ec79.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkdb0ec79.jl:35\ntest set: Test Failed at /tmp/tmpkdb0ec79.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpkdb0ec79.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkdb0ec79.jl:35\ntest set: Test Failed at /tmp/tmpkdb0ec79.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpkdb0ec79.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkdb0ec79.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkdb0ec79.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize a heap\n\
    \    heap = Heap()\n    for i in 1:k\n        push!(heap, arr[i])\n    end\n \
    \   for i in k+1:length(arr)\n        if arr[i] > heap[1]\n            pop!(heap)\n\
    \            push!(heap, arr[i])\n        end\n    end\n    return sort(heap)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp12i_myfw.jl:44\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp12i_myfw.jl:27\n\
    \   [2] top-level scope at /tmp/tmp12i_myfw.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12i_myfw.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp12i_myfw.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp12i_myfw.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp12i_myfw.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12i_myfw.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp12i_myfw.jl:46\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp12i_myfw.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp12i_myfw.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12i_myfw.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp12i_myfw.jl:47\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp12i_myfw.jl:27\n\
    \   [2] top-level scope at /tmp/tmp12i_myfw.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12i_myfw.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp12i_myfw.jl:48\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: Heap not defined\n \
    \ Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp12i_myfw.jl:27\n\
    \   [2] top-level scope at /tmp/tmp12i_myfw.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12i_myfw.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp12i_myfw.jl:49\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp12i_myfw.jl:27\n\
    \   [2] top-level scope at /tmp/tmp12i_myfw.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12i_myfw.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp12i_myfw.jl:50\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp12i_myfw.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp12i_myfw.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12i_myfw.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp12i_myfw.jl:51\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp12i_myfw.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp12i_myfw.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12i_myfw.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp12i_myfw.jl:52\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp12i_myfw.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp12i_myfw.jl:52\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12i_myfw.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp12i_myfw.jl:53\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp12i_myfw.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp12i_myfw.jl:53\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12i_myfw.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp12i_myfw.jl:54\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: Heap not\
    \ defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp12i_myfw.jl:27\n\
    \   [2] top-level scope at /tmp/tmp12i_myfw.jl:54\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12i_myfw.jl:43\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp12i_myfw.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), arr[div(n, 2)], minimum(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), arr[div(n, 2)], minimum(arr),\
    \ arr[div(n, 2) + 1]])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ arr[div(n, 2)], minimum(arr), arr[div(n, 2) + 1], arr[div(n, 2) - 1]])\n   \
    \ end\n    if k == 6\n        return sort([maximum(arr), arr[div(n, 2)], minimum(arr),\
    \ arr[div(n, 2) + 1], arr[div(n, 2) - 1], arr[div(n, 2) + 2]])\n    end\n    if\
    \ k == 7\n        return sort([maximum(arr), arr[div(n, 2)], minimum(arr), arr[div(n,\
    \ 2) + 1], arr[div(n, 2) - 1], arr[div(n, 2) + 2], arr[div(n, 2) - 2]])\n    end\n\
    \    if k == 8\n        return sort([maximum(arr), arr[div(n, 2)], minimum(arr),\
    \ arr[div(n, 2) + 1], arr[div(n, 2) - 1], arr[div(n, 2) + 2], arr[div(n, 2) -\
    \ 2], arr[div(n, 2) + 3]])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ arr[div(n, 2)], minimum(arr), arr[div(n, 2) + 1], arr[div(n, 2) - 1], arr[div(n,\
    \ 2) + 2], arr[div(n, 2) - 2], arr[div(n, 2) + 3], arr[div(n, 2)\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxbv60ve9.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxbv60ve9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements of the sorted array\n    return sorted_arr[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpzt_xaewy.jl:36\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpzt_xaewy.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzt_xaewy.jl:35\\ntest set: Test Failed at /tmp/tmpzt_xaewy.jl:39\\\
    n  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n \
    \  Evaluated: [123, 20, 2] == [2, 20, 123]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpzt_xaewy.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzt_xaewy.jl:35\\ntest set: Test Failed at /tmp/tmpzt_xaewy.jl:40\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpzt_xaewy.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzt_xaewy.jl:35\\ntest set: Test Failed at /tmp/tmpzt_xaewy.jl:41\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpzt_xaewy.jl:41\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzt_xaewy.jl:35\\ntest set: Test Failed at /tmp/tmpzt_xaewy.jl:42\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [5,\
    \ 3] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpzt_xaewy.jl:42\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzt_xaewy.jl:35\\ntest set: Test Failed at /tmp/tmpzt_xaewy.jl:44\\\
    n  Expression: candidate([4, -4], 2) == [-4, 4]\\n   Evaluated: [4, -4] == [-4,\
    \ 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpzt_xaewy.jl:44\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzt_xaewy.jl:35\\ntest set: Test Failed at /tmp/tmpzt_xaewy.jl:45\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpzt_xaewy.jl:45\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzt_xaewy.jl:35\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     7     11\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpqexslv5f.jl:36\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpqexslv5f.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqexslv5f.jl:35\\ntest set: Test Failed at /tmp/tmpqexslv5f.jl:39\\\
    n  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n \
    \  Evaluated: [123, 20, 2] == [2, 20, 123]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpqexslv5f.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqexslv5f.jl:35\\ntest set: Test Failed at /tmp/tmpqexslv5f.jl:40\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqexslv5f.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqexslv5f.jl:35\\ntest set: Test Failed at /tmp/tmpqexslv5f.jl:41\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpqexslv5f.jl:41\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqexslv5f.jl:35\\ntest set: Test Failed at /tmp/tmpqexslv5f.jl:42\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [5,\
    \ 3] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqexslv5f.jl:42\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqexslv5f.jl:35\\ntest set: Test Failed at /tmp/tmpqexslv5f.jl:44\\\
    n  Expression: candidate([4, -4], 2) == [-4, 4]\\n   Evaluated: [4, -4] == [-4,\
    \ 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqexslv5f.jl:44\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqexslv5f.jl:35\\ntest set: Test Failed at /tmp/tmpqexslv5f.jl:45\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqexslv5f.jl:45\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqexslv5f.jl:35\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     7     11\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Create a vector\
    \ of length k\n    max_arr = zeros(Int64, k)\n    # Iterate through the array\n\
    \    for i in 1:length(arr)\n        # If the value is greater than the smallest\
    \ value in the max_arr\n        if arr[i] > min(max_arr)\n            # Replace\
    \ the smallest value in the max_arr with the value\n            max_arr[findmin(max_arr)[2]]\
    \ = arr[i]\n        end\n    end\n    # Return the sorted max_arr\n    sort(max_arr)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7cs3ogx6.jl:44\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching min(::Array{Int64,1})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7cs3ogx6.jl:31\n\
    \   [2] top-level scope at /tmp/tmp7cs3ogx6.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7cs3ogx6.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp7cs3ogx6.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: no method matching min(::Array{Int64,1})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n\
    \    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7cs3ogx6.jl:31\n   [2] top-level\
    \ scope at /tmp/tmp7cs3ogx6.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7cs3ogx6.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp7cs3ogx6.jl:46\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching min(::Array{Int64,1})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n\
    \    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7cs3ogx6.jl:31\n   [2] top-level\
    \ scope at /tmp/tmp7cs3ogx6.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7cs3ogx6.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp7cs3ogx6.jl:47\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: no method matching\
    \ min(::Array{Int64,1})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7cs3ogx6.jl:31\n\
    \   [2] top-level scope at /tmp/tmp7cs3ogx6.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7cs3ogx6.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp7cs3ogx6.jl:48\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: no method matching min(::Array{Int64,1})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n\
    \    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7cs3ogx6.jl:31\n   [2] top-level\
    \ scope at /tmp/tmp7cs3ogx6.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7cs3ogx6.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp7cs3ogx6.jl:49\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: no method\
    \ matching min(::Array{Int64,1})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7cs3ogx6.jl:31\n\
    \   [2] top-level scope at /tmp/tmp7cs3ogx6.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7cs3ogx6.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp7cs3ogx6.jl:50\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: no method matching min(::Array{Int64,1})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n\
    \    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7cs3ogx6.jl:31\n   [2] top-level\
    \ scope at /tmp/tmp7cs3ogx6.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7cs3ogx6.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp7cs3ogx6.jl:51\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: no method matching min(::Array{Int64,1})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n\
    \    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7cs3ogx6.jl:31\n   [2] top-level\
    \ scope at /tmp/tmp7cs3ogx6.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7cs3ogx6.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp7cs3ogx6.jl:52\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: no method matching min(::Array{Int64,1})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n\
    \    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7cs3ogx6.jl:31\n   [2] top-level\
    \ scope at /tmp/tmp7cs3ogx6.jl:52\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7cs3ogx6.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp7cs3ogx6.jl:53\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: no method matching min(::Array{Int64,1})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n\
    \    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7cs3ogx6.jl:31\n   [2] top-level\
    \ scope at /tmp/tmp7cs3ogx6.jl:53\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7cs3ogx6.jl:43\n  \ntest set: Error During\
    \ Test at /tmp/tmp7cs3ogx6.jl:54\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  MethodError: no method\
    \ matching min(::Array{Int64,1})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7cs3ogx6.jl:31\n\
    \   [2] top-level scope at /tmp/tmp7cs3ogx6.jl:54\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7cs3ogx6.jl:43\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7cs3ogx6.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpov_tk56s.jl:36\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpov_tk56s.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpov_tk56s.jl:35\\ntest set: Test Failed at /tmp/tmpov_tk56s.jl:39\\\
    n  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n \
    \  Evaluated: [123, 20, 2] == [2, 20, 123]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpov_tk56s.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpov_tk56s.jl:35\\ntest set: Test Failed at /tmp/tmpov_tk56s.jl:40\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpov_tk56s.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpov_tk56s.jl:35\\ntest set: Test Failed at /tmp/tmpov_tk56s.jl:41\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpov_tk56s.jl:41\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpov_tk56s.jl:35\\ntest set: Test Failed at /tmp/tmpov_tk56s.jl:42\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [5,\
    \ 3] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpov_tk56s.jl:42\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpov_tk56s.jl:35\\ntest set: Test Failed at /tmp/tmpov_tk56s.jl:44\\\
    n  Expression: candidate([4, -4], 2) == [-4, 4]\\n   Evaluated: [4, -4] == [-4,\
    \ 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpov_tk56s.jl:44\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpov_tk56s.jl:35\\ntest set: Test Failed at /tmp/tmpov_tk56s.jl:45\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpov_tk56s.jl:45\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpov_tk56s.jl:35\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     7     11\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), median(arr), minimum(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), maximum(arr[arr .!=\
    \ maximum(arr)]), \n            minimum(arr), minimum(arr[arr .!= minimum(arr)])])\n\
    \    end\n    if k == 5\n        return sort([maximum(arr), maximum(arr[arr .!=\
    \ maximum(arr)]), \n            median(arr), minimum(arr), minimum(arr[arr .!=\
    \ minimum(arr)])])\n    end\n    if k == 6\n        return sort([maximum(arr),\
    \ maximum(arr[arr .!= maximum(arr)]), \n            median(arr), median(arr[arr\
    \ .!= median(arr)]), \n            minimum(arr), minimum(arr[arr .!= minimum(arr)])])\n\
    \    end\n    if k == 7\n        return sort([maximum(arr), maximum(arr[arr .!=\
    \ maximum(arr)]), \n            median(arr), median(arr[arr .!= median(arr)]),\
    \ \n            minimum(arr), minimum(arr[arr .!= minimum(arr)]), \n         \
    \   median(arr[arr .!= maximum(arr)])])\n    end\n    if k == 8\n        return\
    \ sort([maximum(arr), maximum(arr[arr .!= maximum(arr)]), \n            median(arr),\
    \ median(arr[arr .!= median(arr)]), \n            minimum(arr), minimum(arr[arr\
    \ .!= minimum(arr)]), \n            median(arr[arr .!= maximum(arr)]), median(arr[arr\
    \ .!= minimum(arr)])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ maximum(arr[arr .!= maximum(arr)]), \n            median(arr), median(arr[arr\
    \ .!= median(arr)]), \n            minimum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkz0cv2o0.jl:68\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkz0cv2o0.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr, rev=true)\n    end\n    if k == 1\n \
    \       return [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr,\
    \ rev=true)[1:2]\n    end\n    if k == 3\n        return sort(arr, rev=true)[1:3]\n\
    \    end\n    if k == 4\n        return sort(arr, rev=true)[1:4]\n    end\n  \
    \  if k == 5\n        return sort(arr, rev=true)[1:5]\n    end\n    if k == 6\n\
    \        return sort(arr, rev=true)[1:6]\n    end\n    if k == 7\n        return\
    \ sort(arr, rev=true)[1:7]\n    end\n    if k == 8\n        return sort(arr, rev=true)[1:8]\n\
    \    end\n    if k == 9\n        return sort(arr, rev=true)[1:9]\n    end\n  \
    \  if k == 10\n        return sort(arr, rev=true)[1:10]\n    end\n    if k ==\
    \ 11\n        return sort(arr, rev=true)[1:11]\n    end\n    if k == 12\n    \
    \    return sort(arr, rev=true)[1:12]\n    end\n    if k == 13\n        return\
    \ sort(arr, rev=true)[1:13]\n    end\n    if k == 14\n        return sort(arr,\
    \ rev=true)[1:14]\n    end\n    if k == 15\n        return sort(arr, rev=true)[1:15]\n\
    \    end\n    if k == 16\n        return sort(arr, rev=true)[1:16]\n    end\n\
    \    if k == 17\n        return sort(arr, rev=true)[1:17]\n    end\n    if k ==\
    \ 18\n        return sort(arr, rev=true)[1:18]\n    end\n    if k == 19\n    \
    \    return sort(arr, rev=true)[1:19]\n    end\n    if k == 20\n        return\
    \ sort(arr, rev=true)[1:20]\n    end\n    if k == 21\n        return sort(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgd9kujoh.jl:94\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgd9kujoh.jl:94\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr), median(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr[arr .!= median(arr)])])])\n    end\n    if k == 6\n        return\
    \ sort([maximum(arr), minimum(arr), median(arr), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr[arr .!= median(arr)])]), median(arr[arr .!= median(arr[arr\
    \ .!= median(arr[arr .!= median(arr)])])])])\n    end\n    if k == 7\n       \
    \ return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr[arr .!= median(arr)])]), median(arr[arr .!= median(arr[arr\
    \ .!= median(arr[arr .!= median(arr)])])]), median(arr[arr .!= median(arr[arr\
    \ .!= median(arr[arr .!= median(arr[arr .!= median(arr)])])])])])\n    end\n \
    \   if k == 8\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr[arr .!= median(arr)])]), median(arr[arr\
    \ .!= median(arr[arr .!= median(arr[arr .!= median(arr)])])]), median(arr[\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1qgtprnx.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1qgtprnx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap = BinaryHeap(arr[1:k])\n\
    \    for i in k+1:length(arr)\n        if arr[i] > heap.top()\n            heap.pop()\n\
    \            heap.push(arr[i])\n        end\n    end\n    return sort(heap.data,\
    \ rev=true)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj12ceu9o.jl:40\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj12ceu9o.jl:26\n\
    \   [2] top-level scope at /tmp/tmpj12ceu9o.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj12ceu9o.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpj12ceu9o.jl:41\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj12ceu9o.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpj12ceu9o.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj12ceu9o.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpj12ceu9o.jl:42\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj12ceu9o.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpj12ceu9o.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj12ceu9o.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpj12ceu9o.jl:43\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: BinaryHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj12ceu9o.jl:26\n\
    \   [2] top-level scope at /tmp/tmpj12ceu9o.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj12ceu9o.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpj12ceu9o.jl:44\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: BinaryHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj12ceu9o.jl:26\n\
    \   [2] top-level scope at /tmp/tmpj12ceu9o.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj12ceu9o.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpj12ceu9o.jl:45\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj12ceu9o.jl:26\n\
    \   [2] top-level scope at /tmp/tmpj12ceu9o.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj12ceu9o.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpj12ceu9o.jl:46\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj12ceu9o.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpj12ceu9o.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj12ceu9o.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpj12ceu9o.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj12ceu9o.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpj12ceu9o.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj12ceu9o.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpj12ceu9o.jl:48\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj12ceu9o.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpj12ceu9o.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj12ceu9o.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpj12ceu9o.jl:49\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj12ceu9o.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpj12ceu9o.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj12ceu9o.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpj12ceu9o.jl:50\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj12ceu9o.jl:26\n\
    \   [2] top-level scope at /tmp/tmpj12ceu9o.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj12ceu9o.jl:39\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj12ceu9o.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    heap = BinaryHeap()\n \
    \   for i in 1:k\n        push!(heap, arr[i])\n    end\n    for i in k+1:n\n \
    \       if arr[i] > peek(heap)\n            pop!(heap)\n            push!(heap,\
    \ arr[i])\n        end\n    end\n    return sort(collect(heap))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpamncp8k1.jl:48\n  Test threw exception\n\
    \  Expression: candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpamncp8k1.jl:30\n\
    \   [2] top-level scope at /tmp/tmpamncp8k1.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpamncp8k1.jl:46\n  \ntest set: Error During\
    \ Test at /tmp/tmpamncp8k1.jl:49\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpamncp8k1.jl:30\n   [2] top-level\
    \ scope at /tmp/tmpamncp8k1.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpamncp8k1.jl:46\n  \ntest set: Error During\
    \ Test at /tmp/tmpamncp8k1.jl:50\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: BinaryHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpamncp8k1.jl:30\n\
    \   [2] top-level scope at /tmp/tmpamncp8k1.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpamncp8k1.jl:46\n  \ntest set: Error During\
    \ Test at /tmp/tmpamncp8k1.jl:51\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: BinaryHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpamncp8k1.jl:30\n\
    \   [2] top-level scope at /tmp/tmpamncp8k1.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpamncp8k1.jl:46\n  \ntest set: Error During\
    \ Test at /tmp/tmpamncp8k1.jl:53\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpamncp8k1.jl:30\n   [2] top-level\
    \ scope at /tmp/tmpamncp8k1.jl:53\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpamncp8k1.jl:46\n  \ntest set: Error During\
    \ Test at /tmp/tmpamncp8k1.jl:54\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpamncp8k1.jl:30\n   [2] top-level\
    \ scope at /tmp/tmpamncp8k1.jl:54\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpamncp8k1.jl:46\n  \ntest set: Error During\
    \ Test at /tmp/tmpamncp8k1.jl:57\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpamncp8k1.jl:30\n\
    \   [2] top-level scope at /tmp/tmpamncp8k1.jl:57\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpamncp8k1.jl:46\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    4      7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpamncp8k1.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv2ecis33.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv2ecis33.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv2ecis33.jl:35\ntest set: Test Failed at /tmp/tmpv2ecis33.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpv2ecis33.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv2ecis33.jl:35\ntest set: Test Failed at /tmp/tmpv2ecis33.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpv2ecis33.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv2ecis33.jl:35\ntest set: Test Failed at /tmp/tmpv2ecis33.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv2ecis33.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv2ecis33.jl:35\ntest set: Test Failed at /tmp/tmpv2ecis33.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpv2ecis33.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv2ecis33.jl:35\ntest set: Test Failed at /tmp/tmpv2ecis33.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpv2ecis33.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv2ecis33.jl:35\ntest set: Test Failed at /tmp/tmpv2ecis33.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpv2ecis33.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv2ecis33.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv2ecis33.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements of the sorted array\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr, rev=true)\n    end\n    if\
    \ k > length(arr)\n        return maximum(arr, length(arr))\n    end\n    if k\
    \ < length(arr)\n        return sort(arr, rev=true)[1:k]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpi_l7cmh5.jl:47\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpi_l7cmh5.jl:47\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi_l7cmh5.jl:46\\ntest set: Error During Test\
    \ at /tmp/tmpi_l7cmh5.jl:49\\n  Test threw exception\\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpi_l7cmh5.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpi_l7cmh5.jl:30\\\
    n   [2] top-level scope at /tmp/tmpi_l7cmh5.jl:49\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpi_l7cmh5.jl:46\\n  \\ntest set: Test Failed\
    \ at /tmp/tmpi_l7cmh5.jl:50\\n  Expression: candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\\n   Evaluated: [123, 20, 2] == [2, 20, 123]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpi_l7cmh5.jl:50\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi_l7cmh5.jl:46\\ntest set: Test Failed at /tmp/tmpi_l7cmh5.jl:51\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi_l7cmh5.jl:51\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi_l7cmh5.jl:46\\ntest set: Test Failed at /tmp/tmpi_l7cmh5.jl:52\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpi_l7cmh5.jl:52\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi_l7cmh5.jl:46\\ntest set: Test Failed at /tmp/tmpi_l7cmh5.jl:53\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [5,\
    \ 3] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi_l7cmh5.jl:53\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi_l7cmh5.jl:46\\ntest set: Error During Test\
    \ at /tmp/tmpi_l7cmh5.jl:54\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpi_l7cmh5.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpi_l7cmh5.jl:30\\\
    n   [2] top-level scope at /tmp/tmpi_l7cmh5.jl:54\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpi_l7cmh5.jl:46\\n  \\ntest set: Test Failed\
    \ at /tmp/tmpi_l7cmh5.jl:55\\n  Expression: candidate([4, -4], 2) == [-4, 4]\\\
    n   Evaluated: [4, -4] == [-4, 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi_l7cmh5.jl:55\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi_l7cmh5.jl:46\\ntest set: Test Failed at /tmp/tmpi_l7cmh5.jl:56\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi_l7cmh5.jl:56\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi_l7cmh5.jl:46\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Create a heap of\
    \ size k\n    heap = Heap(k)\n    # Insert the first k elements into the heap\n\
    \    for i in 1:k\n        push!(heap, arr[i])\n    end\n    # For the rest of\
    \ the elements, if the element is greater than the root of the heap,\n    # pop\
    \ the root and insert the element\n    for i in k+1:length(arr)\n        if arr[i]\
    \ > heap[1]\n            pop!(heap)\n            push!(heap, arr[i])\n       \
    \ end\n    end\n    # Return the heap\n    return heap\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdb7_0099.jl:48\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpdb7_0099.jl:27\n\
    \   [2] top-level scope at /tmp/tmpdb7_0099.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdb7_0099.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpdb7_0099.jl:49\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpdb7_0099.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpdb7_0099.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdb7_0099.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpdb7_0099.jl:50\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpdb7_0099.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpdb7_0099.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdb7_0099.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpdb7_0099.jl:51\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpdb7_0099.jl:27\n\
    \   [2] top-level scope at /tmp/tmpdb7_0099.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdb7_0099.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpdb7_0099.jl:52\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: Heap not defined\n \
    \ Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpdb7_0099.jl:27\n\
    \   [2] top-level scope at /tmp/tmpdb7_0099.jl:52\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdb7_0099.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpdb7_0099.jl:53\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpdb7_0099.jl:27\n\
    \   [2] top-level scope at /tmp/tmpdb7_0099.jl:53\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdb7_0099.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpdb7_0099.jl:54\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpdb7_0099.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpdb7_0099.jl:54\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdb7_0099.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpdb7_0099.jl:55\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpdb7_0099.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpdb7_0099.jl:55\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdb7_0099.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpdb7_0099.jl:56\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpdb7_0099.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpdb7_0099.jl:56\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdb7_0099.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpdb7_0099.jl:57\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpdb7_0099.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpdb7_0099.jl:57\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdb7_0099.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmpdb7_0099.jl:58\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: Heap not\
    \ defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpdb7_0099.jl:27\n\
    \   [2] top-level scope at /tmp/tmpdb7_0099.jl:58\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdb7_0099.jl:47\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdb7_0099.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpulb1zl1i.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpulb1zl1i.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulb1zl1i.jl:35\ntest set: Test Failed at /tmp/tmpulb1zl1i.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpulb1zl1i.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulb1zl1i.jl:35\ntest set: Test Failed at /tmp/tmpulb1zl1i.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpulb1zl1i.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulb1zl1i.jl:35\ntest set: Test Failed at /tmp/tmpulb1zl1i.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpulb1zl1i.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulb1zl1i.jl:35\ntest set: Test Failed at /tmp/tmpulb1zl1i.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpulb1zl1i.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulb1zl1i.jl:35\ntest set: Test Failed at /tmp/tmpulb1zl1i.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpulb1zl1i.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulb1zl1i.jl:35\ntest set: Test Failed at /tmp/tmpulb1zl1i.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpulb1zl1i.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulb1zl1i.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpulb1zl1i.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k >= length(arr)\n        return sort(arr, rev=true)\n    end\n    pivot\
    \ = arr[rand(1:length(arr))]\n    left = [x for x in arr if x < pivot]\n    right\
    \ = [x for x in arr if x > pivot]\n    if length(left) >= k\n        return maximum(left,\
    \ k)\n    elseif length(left) + 1 == k\n        return sort([pivot] .+ maximum(right,\
    \ 0), rev=true)\n    else\n        return sort([pivot] .+ maximum(right, k - length(left)\
    \ - 1), rev=true)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp7x5_6d0b.jl:51\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp7x5_6d0b.jl:51\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7x5_6d0b.jl:50\\ntest set: Test Failed at /tmp/tmp7x5_6d0b.jl:52\\\
    n  Expression: candidate([4, -4, 4], 2) == [4, 4]\\n   Evaluated: Int64[] == [4,\
    \ 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp7x5_6d0b.jl:52\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7x5_6d0b.jl:50\\ntest set: Error During Test\
    \ at /tmp/tmp7x5_6d0b.jl:53\\n  Test threw exception\\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmp7x5_6d0b.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7x5_6d0b.jl:30\\\
    n   [2] top-level scope at /tmp/tmp7x5_6d0b.jl:53\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp7x5_6d0b.jl:50\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp7x5_6d0b.jl:54\\n  Test threw exception\\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  MethodError: no method matching\
    \ maximum(::Array{Int64,1})\\n  You may have intended to import Base.maximum\\\
    n  Closest candidates are:\\n    maximum(::Array{Int64,1}, !Matched::Int64) at\
    \ /tmp/tmp7x5_6d0b.jl:26\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmp7x5_6d0b.jl:30\\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7x5_6d0b.jl:43\\\
    n   [3] top-level scope at /tmp/tmp7x5_6d0b.jl:54\\n   [4] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp7x5_6d0b.jl:50\\n  \\ntest set: Test Failed\
    \ at /tmp/tmp7x5_6d0b.jl:55\\n  Expression: candidate([-123, 20, 0, 1, 2, -3],\
    \ 4) == [0, 1, 2, 20]\\n   Evaluated: [-2, -3] == [0, 1, 2, 20]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp7x5_6d0b.jl:55\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7x5_6d0b.jl:50\\ntest set: Test Failed at /tmp/tmp7x5_6d0b.jl:56\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp7x5_6d0b.jl:56\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7x5_6d0b.jl:50\\ntest set: Test Failed at /tmp/tmp7x5_6d0b.jl:57\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [-1,\
    \ -10] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp7x5_6d0b.jl:57\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7x5_6d0b.jl:50\\ntest set: Error During Test\
    \ at /tmp/tmp7x5_6d0b.jl:58\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmp7x5_6d0b.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7x5_6d0b.jl:30\\\
    n   [2] top-level scope at /tmp/tmp7x5_6d0b.jl:58\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp7x5_6d0b.jl:50\\n  \\ntest set: Test Failed\
    \ at /tmp/tmp7x5_6d0b.jl:59\\n  Expression: candidate([4, -4], 2) == [-4, 4]\\\
    n   Evaluated: [4, -4] == [-4, 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp7x5_6d0b.jl:59\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7x5_6d0b.jl:50\\ntest set: Test Failed at /tmp/tmp7x5_6d0b.jl:60\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp7x5_6d0b.jl:60\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7x5_6d0b.jl:50\\nTest Summary: | Pass  Fail \
    \ Error  Total\\ntest set      |    1     7      3     11\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements of the sorted array\n    return sorted_arr[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpqrmrisuw.jl:36\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpqrmrisuw.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqrmrisuw.jl:35\\ntest set: Test Failed at /tmp/tmpqrmrisuw.jl:39\\\
    n  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n \
    \  Evaluated: [123, 20, 2] == [2, 20, 123]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpqrmrisuw.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqrmrisuw.jl:35\\ntest set: Test Failed at /tmp/tmpqrmrisuw.jl:40\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqrmrisuw.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqrmrisuw.jl:35\\ntest set: Test Failed at /tmp/tmpqrmrisuw.jl:41\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpqrmrisuw.jl:41\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqrmrisuw.jl:35\\ntest set: Test Failed at /tmp/tmpqrmrisuw.jl:42\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [5,\
    \ 3] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqrmrisuw.jl:42\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqrmrisuw.jl:35\\ntest set: Test Failed at /tmp/tmpqrmrisuw.jl:44\\\
    n  Expression: candidate([4, -4], 2) == [-4, 4]\\n   Evaluated: [4, -4] == [-4,\
    \ 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqrmrisuw.jl:44\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqrmrisuw.jl:35\\ntest set: Test Failed at /tmp/tmpqrmrisuw.jl:45\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqrmrisuw.jl:45\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqrmrisuw.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    \"\"\"\n    Given\
    \ an array arr of integers and a positive integer k, return a sorted list \n \
    \   of length k with the maximum k numbers in arr.\n    \"\"\"\n    # Sort the\
    \ array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn4pp9jdt.jl:40\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn4pp9jdt.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4pp9jdt.jl:39\ntest set: Test Failed at /tmp/tmpn4pp9jdt.jl:43\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpn4pp9jdt.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4pp9jdt.jl:39\ntest set: Test Failed at /tmp/tmpn4pp9jdt.jl:44\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpn4pp9jdt.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4pp9jdt.jl:39\ntest set: Test Failed at /tmp/tmpn4pp9jdt.jl:45\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn4pp9jdt.jl:45\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4pp9jdt.jl:39\ntest set: Test Failed at /tmp/tmpn4pp9jdt.jl:46\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpn4pp9jdt.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4pp9jdt.jl:39\ntest set: Test Failed at /tmp/tmpn4pp9jdt.jl:48\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpn4pp9jdt.jl:48\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4pp9jdt.jl:39\ntest set: Test Failed at /tmp/tmpn4pp9jdt.jl:49\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpn4pp9jdt.jl:49\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4pp9jdt.jl:39\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn4pp9jdt.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps_yjqpzs.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmps_yjqpzs.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps_yjqpzs.jl:34\ntest set: Test Failed at /tmp/tmps_yjqpzs.jl:37\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3]\
    \ == [2]\nStacktrace:\n [1] top-level scope at /tmp/tmps_yjqpzs.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps_yjqpzs.jl:34\ntest set: Test Failed at /tmp/tmps_yjqpzs.jl:38\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmps_yjqpzs.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps_yjqpzs.jl:34\ntest set: Test Failed at /tmp/tmps_yjqpzs.jl:39\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmps_yjqpzs.jl:39\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps_yjqpzs.jl:34\ntest set: Test Failed at /tmp/tmps_yjqpzs.jl:41\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [-10,\
    \ -1] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmps_yjqpzs.jl:41\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps_yjqpzs.jl:34\ntest set: Test Failed at /tmp/tmps_yjqpzs.jl:42\n\
    \  Expression: candidate([1, 0, 5, -7], 1) == [5]\n   Evaluated: [-7] == [5]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps_yjqpzs.jl:42\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps_yjqpzs.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     6     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps_yjqpzs.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements of the sorted array\n    return sorted_arr[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp08pk1e_y.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp08pk1e_y.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp08pk1e_y.jl:35\ntest set: Test Failed at /tmp/tmp08pk1e_y.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp08pk1e_y.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp08pk1e_y.jl:35\ntest set: Test Failed at /tmp/tmp08pk1e_y.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp08pk1e_y.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp08pk1e_y.jl:35\ntest set: Test Failed at /tmp/tmp08pk1e_y.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp08pk1e_y.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp08pk1e_y.jl:35\ntest set: Test Failed at /tmp/tmp08pk1e_y.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp08pk1e_y.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp08pk1e_y.jl:35\ntest set: Test Failed at /tmp/tmp08pk1e_y.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmp08pk1e_y.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp08pk1e_y.jl:35\ntest set: Test Failed at /tmp/tmp08pk1e_y.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmp08pk1e_y.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp08pk1e_y.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp08pk1e_y.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr, rev=true)\n    # return the first k elements\n   \
    \ return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpefe05_ae.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpefe05_ae.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpefe05_ae.jl:35\ntest set: Test Failed at /tmp/tmpefe05_ae.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpefe05_ae.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpefe05_ae.jl:35\ntest set: Test Failed at /tmp/tmpefe05_ae.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpefe05_ae.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpefe05_ae.jl:35\ntest set: Test Failed at /tmp/tmpefe05_ae.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpefe05_ae.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpefe05_ae.jl:35\ntest set: Test Failed at /tmp/tmpefe05_ae.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpefe05_ae.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpefe05_ae.jl:35\ntest set: Test Failed at /tmp/tmpefe05_ae.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpefe05_ae.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpefe05_ae.jl:35\ntest set: Test Failed at /tmp/tmpefe05_ae.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpefe05_ae.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpefe05_ae.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpefe05_ae.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), arr[2], minimum(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), arr[2], arr[3], minimum(arr)])\n\
    \    end\n    if k == 5\n        return sort([maximum(arr), arr[2], arr[3], arr[4],\
    \ minimum(arr)])\n    end\n    if k == 6\n        return sort([maximum(arr), arr[2],\
    \ arr[3], arr[4], arr[5], minimum(arr)])\n    end\n    if k == 7\n        return\
    \ sort([maximum(arr), arr[2], arr[3], arr[4], arr[5], arr[6], minimum(arr)])\n\
    \    end\n    if k == 8\n        return sort([maximum(arr), arr[2], arr[3], arr[4],\
    \ arr[5], arr[6], arr[7], minimum(arr)])\n    end\n    if k == 9\n        return\
    \ sort([maximum(arr), arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8],\
    \ minimum(arr)])\n    end\n    if k == 10\n        return sort([maximum(arr),\
    \ arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], minimum(arr)])\n\
    \    end\n    if k == 11\n        return sort([maximum(arr), arr[2], arr[3], arr[4],\
    \ arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], minimum(arr)])\n    end\n \
    \   if k == 12\n        return sort([maximum(arr), arr[2], arr[3], arr[4], arr[5],\
    \ arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], minimum(arr)])\n\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpscs4wsc_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpscs4wsc_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize a max\
    \ heap\n    heap = MaxHeap()\n    # Push the first k elements into the heap\n\
    \    for i in 1:k\n        push!(heap, arr[i])\n    end\n    # For the remaining\
    \ elements, if the element is greater than the root of the heap,\n    # pop the\
    \ root and push the element\n    for i in k+1:length(arr)\n        if arr[i] >\
    \ peek(heap)\n            pop!(heap)\n            push!(heap, arr[i])\n      \
    \  end\n    end\n    # Return the sorted heap\n    return sort(heap)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8c79ybf4.jl:48\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp8c79ybf4.jl:27\n\
    \   [2] top-level scope at /tmp/tmp8c79ybf4.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8c79ybf4.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp8c79ybf4.jl:49\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp8c79ybf4.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp8c79ybf4.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8c79ybf4.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp8c79ybf4.jl:50\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp8c79ybf4.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp8c79ybf4.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8c79ybf4.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp8c79ybf4.jl:51\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: MaxHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp8c79ybf4.jl:27\n\
    \   [2] top-level scope at /tmp/tmp8c79ybf4.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8c79ybf4.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp8c79ybf4.jl:52\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: MaxHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp8c79ybf4.jl:27\n\
    \   [2] top-level scope at /tmp/tmp8c79ybf4.jl:52\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8c79ybf4.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp8c79ybf4.jl:53\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp8c79ybf4.jl:27\n\
    \   [2] top-level scope at /tmp/tmp8c79ybf4.jl:53\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8c79ybf4.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp8c79ybf4.jl:54\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp8c79ybf4.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp8c79ybf4.jl:54\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8c79ybf4.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp8c79ybf4.jl:55\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp8c79ybf4.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp8c79ybf4.jl:55\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8c79ybf4.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp8c79ybf4.jl:56\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n  \
    \ [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp8c79ybf4.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp8c79ybf4.jl:56\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8c79ybf4.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp8c79ybf4.jl:57\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp8c79ybf4.jl:27\n   [2] top-level\
    \ scope at /tmp/tmp8c79ybf4.jl:57\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8c79ybf4.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp8c79ybf4.jl:58\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp8c79ybf4.jl:27\n\
    \   [2] top-level scope at /tmp/tmp8c79ybf4.jl:58\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8c79ybf4.jl:47\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8c79ybf4.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1v5z5aru.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1v5z5aru.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1v5z5aru.jl:34\ntest set: Test Failed at /tmp/tmp1v5z5aru.jl:37\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3]\
    \ == [2]\nStacktrace:\n [1] top-level scope at /tmp/tmp1v5z5aru.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1v5z5aru.jl:34\ntest set: Test Failed at /tmp/tmp1v5z5aru.jl:38\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp1v5z5aru.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1v5z5aru.jl:34\ntest set: Test Failed at /tmp/tmp1v5z5aru.jl:39\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp1v5z5aru.jl:39\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1v5z5aru.jl:34\ntest set: Test Failed at /tmp/tmp1v5z5aru.jl:41\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [-10,\
    \ -1] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp1v5z5aru.jl:41\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1v5z5aru.jl:34\ntest set: Test Failed at /tmp/tmp1v5z5aru.jl:42\n\
    \  Expression: candidate([1, 0, 5, -7], 1) == [5]\n   Evaluated: [-7] == [5]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1v5z5aru.jl:42\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1v5z5aru.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     6     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1v5z5aru.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnu_v44e1.jl:36\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpnu_v44e1.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnu_v44e1.jl:35\\ntest set: Test Failed at /tmp/tmpnu_v44e1.jl:39\\\
    n  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n \
    \  Evaluated: [123, 20, 2] == [2, 20, 123]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpnu_v44e1.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnu_v44e1.jl:35\\ntest set: Test Failed at /tmp/tmpnu_v44e1.jl:40\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnu_v44e1.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnu_v44e1.jl:35\\ntest set: Test Failed at /tmp/tmpnu_v44e1.jl:41\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpnu_v44e1.jl:41\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnu_v44e1.jl:35\\ntest set: Test Failed at /tmp/tmpnu_v44e1.jl:42\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [5,\
    \ 3] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnu_v44e1.jl:42\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnu_v44e1.jl:35\\ntest set: Test Failed at /tmp/tmpnu_v44e1.jl:44\\\
    n  Expression: candidate([4, -4], 2) == [-4, 4]\\n   Evaluated: [4, -4] == [-4,\
    \ 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnu_v44e1.jl:44\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnu_v44e1.jl:35\\ntest set: Test Failed at /tmp/tmpnu_v44e1.jl:45\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnu_v44e1.jl:45\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnu_v44e1.jl:35\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     7     11\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvmfk9c_t.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpvmfk9c_t.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvmfk9c_t.jl:34\ntest set: Test Failed at /tmp/tmpvmfk9c_t.jl:37\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3]\
    \ == [2]\nStacktrace:\n [1] top-level scope at /tmp/tmpvmfk9c_t.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvmfk9c_t.jl:34\ntest set: Test Failed at /tmp/tmpvmfk9c_t.jl:38\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpvmfk9c_t.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvmfk9c_t.jl:34\ntest set: Test Failed at /tmp/tmpvmfk9c_t.jl:39\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpvmfk9c_t.jl:39\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvmfk9c_t.jl:34\ntest set: Test Failed at /tmp/tmpvmfk9c_t.jl:41\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [-10,\
    \ -1] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpvmfk9c_t.jl:41\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvmfk9c_t.jl:34\ntest set: Test Failed at /tmp/tmpvmfk9c_t.jl:42\n\
    \  Expression: candidate([1, 0, 5, -7], 1) == [5]\n   Evaluated: [-7] == [5]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvmfk9c_t.jl:42\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvmfk9c_t.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     6     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvmfk9c_t.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr, rev=true)\n    end\n    if\
    \ k > length(arr)\n        return sort(arr, rev=true)\n    end\n    if k < length(arr)\n\
    \        return sort(arr, rev=true)[1:k]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6ir2oppm.jl:47\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp6ir2oppm.jl:47\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6ir2oppm.jl:46\\ntest set: Error During Test\
    \ at /tmp/tmp6ir2oppm.jl:49\\n  Test threw exception\\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmp6ir2oppm.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6ir2oppm.jl:30\\\
    n   [2] top-level scope at /tmp/tmp6ir2oppm.jl:49\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp6ir2oppm.jl:46\\n  \\ntest set: Test Failed\
    \ at /tmp/tmp6ir2oppm.jl:50\\n  Expression: candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\\n   Evaluated: [123, 20, 2] == [2, 20, 123]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp6ir2oppm.jl:50\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6ir2oppm.jl:46\\ntest set: Test Failed at /tmp/tmp6ir2oppm.jl:51\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6ir2oppm.jl:51\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6ir2oppm.jl:46\\ntest set: Test Failed at /tmp/tmp6ir2oppm.jl:52\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp6ir2oppm.jl:52\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6ir2oppm.jl:46\\ntest set: Test Failed at /tmp/tmp6ir2oppm.jl:53\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [5,\
    \ 3] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6ir2oppm.jl:53\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6ir2oppm.jl:46\\ntest set: Error During Test\
    \ at /tmp/tmp6ir2oppm.jl:54\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmp6ir2oppm.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6ir2oppm.jl:30\\\
    n   [2] top-level scope at /tmp/tmp6ir2oppm.jl:54\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp6ir2oppm.jl:46\\n  \\ntest set: Test Failed\
    \ at /tmp/tmp6ir2oppm.jl:55\\n  Expression: candidate([4, -4], 2) == [-4, 4]\\\
    n   Evaluated: [4, -4] == [-4, 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6ir2oppm.jl:55\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6ir2oppm.jl:46\\ntest set: Test Failed at /tmp/tmp6ir2oppm.jl:56\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6ir2oppm.jl:56\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6ir2oppm.jl:46\\nTest Summary: | Pass  Fail \
    \ Error  Total\\ntest set      |    2     7      2     11\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # create a heap\n\
    \    heap = Heap(arr)\n    # pop k elements from the heap\n    maximum_k = [heap.pop()\
    \ for _ in 1:k]\n    # return the elements in reverse order\n    return reverse(maximum_k)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoi637bzt.jl:38\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpoi637bzt.jl:27\n\
    \   [2] top-level scope at /tmp/tmpoi637bzt.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoi637bzt.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpoi637bzt.jl:39\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpoi637bzt.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpoi637bzt.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoi637bzt.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpoi637bzt.jl:40\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpoi637bzt.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpoi637bzt.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoi637bzt.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpoi637bzt.jl:41\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpoi637bzt.jl:27\n\
    \   [2] top-level scope at /tmp/tmpoi637bzt.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoi637bzt.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpoi637bzt.jl:42\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: Heap not defined\n \
    \ Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpoi637bzt.jl:27\n\
    \   [2] top-level scope at /tmp/tmpoi637bzt.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoi637bzt.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpoi637bzt.jl:43\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpoi637bzt.jl:27\n\
    \   [2] top-level scope at /tmp/tmpoi637bzt.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoi637bzt.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpoi637bzt.jl:44\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpoi637bzt.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpoi637bzt.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoi637bzt.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpoi637bzt.jl:45\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpoi637bzt.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpoi637bzt.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoi637bzt.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpoi637bzt.jl:46\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpoi637bzt.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpoi637bzt.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoi637bzt.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpoi637bzt.jl:47\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpoi637bzt.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpoi637bzt.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoi637bzt.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpoi637bzt.jl:48\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: Heap not\
    \ defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpoi637bzt.jl:27\n\
    \   [2] top-level scope at /tmp/tmpoi637bzt.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoi637bzt.jl:37\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoi637bzt.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Create a priority\
    \ queue\n    pq = PriorityQueue()\n    # Push the first k elements into the priority\
    \ queue\n    for i in 1:k\n        push!(pq, arr[i])\n    end\n    # Iterate through\
    \ the rest of the elements in the array\n    for i in k+1:length(arr)\n      \
    \  # If the current element is greater than the minimum element in the priority\
    \ queue\n        if arr[i] > peek(pq)\n            # Pop the minimum element from\
    \ the priority queue\n            pop!(pq)\n            # Push the current element\
    \ into the priority queue\n            push!(pq, arr[i])\n        end\n    end\n\
    \    # Return the priority queue as a sorted array\n    return sort(collect(pq))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_6kqorl6.jl:50\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ PriorityQueue not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmp_6kqorl6.jl:27\\n   [2] top-level scope at /tmp/tmp_6kqorl6.jl:50\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_6kqorl6.jl:49\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_6kqorl6.jl:51\\n  Test threw exception\\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\\n  UndefVarError: PriorityQueue not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_6kqorl6.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmp_6kqorl6.jl:51\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_6kqorl6.jl:49\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_6kqorl6.jl:52\\n  Test threw exception\\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: PriorityQueue not defined\\\
    n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_6kqorl6.jl:27\\\
    n   [2] top-level scope at /tmp/tmp_6kqorl6.jl:52\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_6kqorl6.jl:49\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_6kqorl6.jl:53\\n  Test threw exception\\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError: PriorityQueue\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_6kqorl6.jl:27\\\
    n   [2] top-level scope at /tmp/tmp_6kqorl6.jl:53\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_6kqorl6.jl:49\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_6kqorl6.jl:54\\n  Test threw exception\\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n  UndefVarError: PriorityQueue not defined\\\
    n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_6kqorl6.jl:27\\\
    n   [2] top-level scope at /tmp/tmp_6kqorl6.jl:54\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_6kqorl6.jl:49\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_6kqorl6.jl:55\\n  Test threw exception\\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\\n  UndefVarError: PriorityQueue\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_6kqorl6.jl:27\\\
    n   [2] top-level scope at /tmp/tmp_6kqorl6.jl:55\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_6kqorl6.jl:49\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_6kqorl6.jl:56\\n  Test threw exception\\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\\n  UndefVarError: PriorityQueue not defined\\\
    n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_6kqorl6.jl:27\\\
    n   [2] top-level scope at /tmp/tmp_6kqorl6.jl:56\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_6kqorl6.jl:49\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_6kqorl6.jl:57\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\\n  UndefVarError: PriorityQueue not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_6kqorl6.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmp_6kqorl6.jl:57\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_6kqorl6.jl:49\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_6kqorl6.jl:58\\n  Test threw exception\\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\\n  UndefVarError: PriorityQueue not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_6kqorl6.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmp_6kqorl6.jl:58\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_6kqorl6.jl:49\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_6kqorl6.jl:59\\n  Test threw exception\\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\\n  UndefVarError: PriorityQueue not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_6kqorl6.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmp_6kqorl6.jl:59\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_6kqorl6.jl:49\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_6kqorl6.jl:60\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\\n  UndefVarError: PriorityQueue\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_6kqorl6.jl:27\\\
    n   [2] top-level scope at /tmp/tmp_6kqorl6.jl:60\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_6kqorl6.jl:49\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |    11     11\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # create a heap\n\
    \    heap = MaxHeap(arr)\n    # pop the first k elements\n    return pop!(heap,\
    \ k)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpemsa5rzi.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ MaxHeap not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpemsa5rzi.jl:27\\n   [2] top-level scope at /tmp/tmpemsa5rzi.jl:36\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpemsa5rzi.jl:35\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpemsa5rzi.jl:37\\n  Test threw exception\\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpemsa5rzi.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpemsa5rzi.jl:37\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpemsa5rzi.jl:35\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpemsa5rzi.jl:38\\n  Test threw exception\\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpemsa5rzi.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpemsa5rzi.jl:38\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpemsa5rzi.jl:35\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpemsa5rzi.jl:39\\n  Test threw exception\\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError: MaxHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpemsa5rzi.jl:27\\\
    n   [2] top-level scope at /tmp/tmpemsa5rzi.jl:39\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpemsa5rzi.jl:35\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpemsa5rzi.jl:40\\n  Test threw exception\\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n  UndefVarError: MaxHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpemsa5rzi.jl:27\\\
    n   [2] top-level scope at /tmp/tmpemsa5rzi.jl:40\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpemsa5rzi.jl:35\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpemsa5rzi.jl:41\\n  Test threw exception\\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\\n  UndefVarError: MaxHeap\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpemsa5rzi.jl:27\\\
    n   [2] top-level scope at /tmp/tmpemsa5rzi.jl:41\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpemsa5rzi.jl:35\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpemsa5rzi.jl:42\\n  Test threw exception\\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpemsa5rzi.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpemsa5rzi.jl:42\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpemsa5rzi.jl:35\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpemsa5rzi.jl:43\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpemsa5rzi.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpemsa5rzi.jl:43\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpemsa5rzi.jl:35\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpemsa5rzi.jl:44\\n  Test threw exception\\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpemsa5rzi.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpemsa5rzi.jl:44\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpemsa5rzi.jl:35\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpemsa5rzi.jl:45\\n  Test threw exception\\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpemsa5rzi.jl:27\\n   [2]\
    \ top-level scope at /tmp/tmpemsa5rzi.jl:45\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpemsa5rzi.jl:35\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpemsa5rzi.jl:46\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\\n  UndefVarError: MaxHeap\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpemsa5rzi.jl:27\\\
    n   [2] top-level scope at /tmp/tmpemsa5rzi.jl:46\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpemsa5rzi.jl:35\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    arr_len = length(arr)\n\
    \    if arr_len == k\n        return arr\n    end\n    if arr_len < k\n      \
    \  return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    arr_sorted = sort(arr, rev=true)\n    return arr_sorted[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnxmf3yff.jl:44\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnxmf3yff.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnxmf3yff.jl:43\ntest set: Error During Test at\
    \ /tmp/tmpnxmf3yff.jl:46\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpnxmf3yff.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpnxmf3yff.jl:34\n   [2] top-level\
    \ scope at /tmp/tmpnxmf3yff.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnxmf3yff.jl:43\n  \ntest set: Test Failed at\
    \ /tmp/tmpnxmf3yff.jl:47\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnxmf3yff.jl:47\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnxmf3yff.jl:43\ntest set: Test Failed at /tmp/tmpnxmf3yff.jl:48\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpnxmf3yff.jl:48\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnxmf3yff.jl:43\ntest set: Test Failed at /tmp/tmpnxmf3yff.jl:49\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [5, 15, 0, 3, -13, -8, 0] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnxmf3yff.jl:49\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnxmf3yff.jl:43\ntest set: Test Failed at /tmp/tmpnxmf3yff.jl:50\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpnxmf3yff.jl:50\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnxmf3yff.jl:43\ntest set: Error During Test at\
    \ /tmp/tmpnxmf3yff.jl:51\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpnxmf3yff.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpnxmf3yff.jl:34\n   [2] top-level\
    \ scope at /tmp/tmpnxmf3yff.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnxmf3yff.jl:43\n  \ntest set: Test Failed at\
    \ /tmp/tmpnxmf3yff.jl:52\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpnxmf3yff.jl:52\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnxmf3yff.jl:43\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    3     6      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnxmf3yff.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize a heap\n\
    \    heap = Heap(arr)\n    # Initialize a vector to store the maximum k elements\n\
    \    max_k = Vector{Int64}(undef, k)\n    # Pop the maximum k elements from the\
    \ heap\n    for i in 1:k\n        max_k[i] = pop!(heap)\n    end\n    return max_k\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpptc7i_uf.jl:41\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpptc7i_uf.jl:27\n\
    \   [2] top-level scope at /tmp/tmpptc7i_uf.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpptc7i_uf.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpptc7i_uf.jl:42\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpptc7i_uf.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpptc7i_uf.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpptc7i_uf.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpptc7i_uf.jl:43\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpptc7i_uf.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpptc7i_uf.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpptc7i_uf.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpptc7i_uf.jl:44\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpptc7i_uf.jl:27\n\
    \   [2] top-level scope at /tmp/tmpptc7i_uf.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpptc7i_uf.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpptc7i_uf.jl:45\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: Heap not defined\n \
    \ Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpptc7i_uf.jl:27\n\
    \   [2] top-level scope at /tmp/tmpptc7i_uf.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpptc7i_uf.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpptc7i_uf.jl:46\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpptc7i_uf.jl:27\n\
    \   [2] top-level scope at /tmp/tmpptc7i_uf.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpptc7i_uf.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpptc7i_uf.jl:47\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpptc7i_uf.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpptc7i_uf.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpptc7i_uf.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpptc7i_uf.jl:48\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpptc7i_uf.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpptc7i_uf.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpptc7i_uf.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpptc7i_uf.jl:49\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpptc7i_uf.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpptc7i_uf.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpptc7i_uf.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpptc7i_uf.jl:50\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: Heap not defined\n  Stacktrace:\n   [1]\
    \ maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpptc7i_uf.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpptc7i_uf.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpptc7i_uf.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpptc7i_uf.jl:51\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: Heap not\
    \ defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpptc7i_uf.jl:27\n\
    \   [2] top-level scope at /tmp/tmpptc7i_uf.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpptc7i_uf.jl:40\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpptc7i_uf.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr, rev=true)\n    end\n    if\
    \ k > length(arr)\n        return sort(arr, rev=true)\n    end\n    if k < length(arr)\n\
    \        return sort(arr, rev=true)[1:k]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdq__676g.jl:47\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdq__676g.jl:47\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdq__676g.jl:46\ntest set: Error During Test at\
    \ /tmp/tmpdq__676g.jl:49\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpdq__676g.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpdq__676g.jl:30\n   [2] top-level\
    \ scope at /tmp/tmpdq__676g.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdq__676g.jl:46\n  \ntest set: Test Failed at\
    \ /tmp/tmpdq__676g.jl:50\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdq__676g.jl:50\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdq__676g.jl:46\ntest set: Test Failed at /tmp/tmpdq__676g.jl:51\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpdq__676g.jl:51\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdq__676g.jl:46\ntest set: Test Failed at /tmp/tmpdq__676g.jl:52\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdq__676g.jl:52\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdq__676g.jl:46\ntest set: Test Failed at /tmp/tmpdq__676g.jl:53\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpdq__676g.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdq__676g.jl:46\ntest set: Error During Test at\
    \ /tmp/tmpdq__676g.jl:54\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpdq__676g.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpdq__676g.jl:30\n   [2] top-level\
    \ scope at /tmp/tmpdq__676g.jl:54\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdq__676g.jl:46\n  \ntest set: Test Failed at\
    \ /tmp/tmpdq__676g.jl:55\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpdq__676g.jl:55\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdq__676g.jl:46\ntest set: Test Failed at /tmp/tmpdq__676g.jl:56\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpdq__676g.jl:56\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdq__676g.jl:46\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    2     7      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdq__676g.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp22uhu9pc.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp22uhu9pc.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp22uhu9pc.jl:35\ntest set: Test Failed at /tmp/tmp22uhu9pc.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp22uhu9pc.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp22uhu9pc.jl:35\ntest set: Test Failed at /tmp/tmp22uhu9pc.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp22uhu9pc.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp22uhu9pc.jl:35\ntest set: Test Failed at /tmp/tmp22uhu9pc.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp22uhu9pc.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp22uhu9pc.jl:35\ntest set: Test Failed at /tmp/tmp22uhu9pc.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp22uhu9pc.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp22uhu9pc.jl:35\ntest set: Test Failed at /tmp/tmp22uhu9pc.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmp22uhu9pc.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp22uhu9pc.jl:35\ntest set: Test Failed at /tmp/tmp22uhu9pc.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmp22uhu9pc.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp22uhu9pc.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp22uhu9pc.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr)\n    end\n    pivot = arr[rand(1:length(arr))]\n\
    \    left = [x for x in arr if x < pivot]\n    right = [x for x in arr if x >\
    \ pivot]\n    if length(left) >= k\n        return maximum(left, k)\n    elseif\
    \ length(left) + 1 == k\n        return [pivot]\n    else\n        return [pivot]\
    \ .+ maximum(right, k - length(left) - 1)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnuw20lzt.jl:52\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [4] == [4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnuw20lzt.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnuw20lzt.jl:50\ntest set: Error During Test at\
    \ /tmp/tmpnuw20lzt.jl:53\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpnuw20lzt.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpnuw20lzt.jl:30\n   [2] top-level\
    \ scope at /tmp/tmpnuw20lzt.jl:53\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnuw20lzt.jl:50\n  \ntest set: Error During\
    \ Test at /tmp/tmpnuw20lzt.jl:54\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: no method matching\
    \ maximum(::Array{Int64,1})\n  You may have intended to import Base.maximum\n\
    \  Closest candidates are:\n    maximum(::Array{Int64,1}, !Matched::Int64) at\
    \ /tmp/tmpnuw20lzt.jl:26\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpnuw20lzt.jl:30\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpnuw20lzt.jl:43\n\
    \   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpnuw20lzt.jl:39 (repeats\
    \ 3 times)\n   [4] top-level scope at /tmp/tmpnuw20lzt.jl:54\n   [5] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpnuw20lzt.jl:50\n  \ntest set: Test Failed at\
    \ /tmp/tmpnuw20lzt.jl:55\n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4)\
    \ == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnuw20lzt.jl:55\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnuw20lzt.jl:50\ntest set: Test Failed at /tmp/tmpnuw20lzt.jl:57\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [-1]\
    \ == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpnuw20lzt.jl:57\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnuw20lzt.jl:50\ntest set: Error During Test at\
    \ /tmp/tmpnuw20lzt.jl:58\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpnuw20lzt.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpnuw20lzt.jl:30\n   [2] top-level\
    \ scope at /tmp/tmpnuw20lzt.jl:58\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnuw20lzt.jl:50\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    5     3      3     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnuw20lzt.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr, rev=true)\n    # return the first k elements\n   \
    \ return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgp3o4jzv.jl:36\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpgp3o4jzv.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgp3o4jzv.jl:35\\ntest set: Test Failed at /tmp/tmpgp3o4jzv.jl:39\\\
    n  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n \
    \  Evaluated: [123, 20, 2] == [2, 20, 123]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpgp3o4jzv.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgp3o4jzv.jl:35\\ntest set: Test Failed at /tmp/tmpgp3o4jzv.jl:40\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpgp3o4jzv.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgp3o4jzv.jl:35\\ntest set: Test Failed at /tmp/tmpgp3o4jzv.jl:41\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpgp3o4jzv.jl:41\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgp3o4jzv.jl:35\\ntest set: Test Failed at /tmp/tmpgp3o4jzv.jl:42\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [5,\
    \ 3] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpgp3o4jzv.jl:42\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgp3o4jzv.jl:35\\ntest set: Test Failed at /tmp/tmpgp3o4jzv.jl:44\\\
    n  Expression: candidate([4, -4], 2) == [-4, 4]\\n   Evaluated: [4, -4] == [-4,\
    \ 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpgp3o4jzv.jl:44\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgp3o4jzv.jl:35\\ntest set: Test Failed at /tmp/tmpgp3o4jzv.jl:45\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpgp3o4jzv.jl:45\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgp3o4jzv.jl:35\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     7     11\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ and return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7z_dnz4_.jl:35\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp7z_dnz4_.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7z_dnz4_.jl:33\ntest set: Test Failed at /tmp/tmp7z_dnz4_.jl:36\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3]\
    \ == [2]\nStacktrace:\n [1] top-level scope at /tmp/tmp7z_dnz4_.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7z_dnz4_.jl:33\ntest set: Test Failed at /tmp/tmp7z_dnz4_.jl:37\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp7z_dnz4_.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7z_dnz4_.jl:33\ntest set: Test Failed at /tmp/tmp7z_dnz4_.jl:38\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp7z_dnz4_.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7z_dnz4_.jl:33\ntest set: Test Failed at /tmp/tmp7z_dnz4_.jl:40\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [-10,\
    \ -1] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp7z_dnz4_.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7z_dnz4_.jl:33\ntest set: Test Failed at /tmp/tmp7z_dnz4_.jl:41\n\
    \  Expression: candidate([1, 0, 5, -7], 1) == [5]\n   Evaluated: [-7] == [5]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7z_dnz4_.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7z_dnz4_.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     6     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7z_dnz4_.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0uo6yf9i.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0uo6yf9i.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0uo6yf9i.jl:34\ntest set: Test Failed at /tmp/tmp0uo6yf9i.jl:38\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp0uo6yf9i.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0uo6yf9i.jl:34\ntest set: Test Failed at /tmp/tmp0uo6yf9i.jl:39\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp0uo6yf9i.jl:39\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0uo6yf9i.jl:34\ntest set: Test Failed at /tmp/tmp0uo6yf9i.jl:40\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0uo6yf9i.jl:40\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0uo6yf9i.jl:34\ntest set: Test Failed at /tmp/tmp0uo6yf9i.jl:41\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp0uo6yf9i.jl:41\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0uo6yf9i.jl:34\ntest set: Test Failed at /tmp/tmp0uo6yf9i.jl:43\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmp0uo6yf9i.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0uo6yf9i.jl:34\ntest set: Test Failed at /tmp/tmp0uo6yf9i.jl:44\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmp0uo6yf9i.jl:44\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0uo6yf9i.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0uo6yf9i.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr, rev=true)\n    end\n    if k == 1\n \
    \       return [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr,\
    \ rev=true)[1:2]\n    end\n    if k == 3\n        return sort(arr, rev=true)[1:3]\n\
    \    end\n    if k == 4\n        return sort(arr, rev=true)[1:4]\n    end\n  \
    \  if k == 5\n        return sort(arr, rev=true)[1:5]\n    end\n    if k == 6\n\
    \        return sort(arr, rev=true)[1:6]\n    end\n    if k == 7\n        return\
    \ sort(arr, rev=true)[1:7]\n    end\n    if k == 8\n        return sort(arr, rev=true)[1:8]\n\
    \    end\n    if k == 9\n        return sort(arr, rev=true)[1:9]\n    end\n  \
    \  if k == 10\n        return sort(arr, rev=true)[1:10]\n    end\n    if k ==\
    \ 11\n        return sort(arr, rev=true)[1:11]\n    end\n    if k == 12\n    \
    \    return sort(arr, rev=true)[1:12]\n    end\n    if k == 13\n        return\
    \ sort(arr, rev=true)[1:13]\n    end\n    if k == 14\n        return sort(arr,\
    \ rev=true)[1:14]\n    end\n    if k == 15\n        return sort(arr, rev=true)[1:15]\n\
    \    end\n    if k == 16\n        return sort(arr, rev=true)[1:16]\n    end\n\
    \    if k == 17\n        return sort(arr, rev=true)[1:17]\n    end\n    if k ==\
    \ 18\n        return sort(arr, rev=true)[1:18]\n    end\n    if k == 19\n    \
    \    return sort(arr, rev=true)[1:19]\n    end\n    if k == 20\n        return\
    \ sort(arr, rev=true)[1:20]\n    end\n    if k == 21\n        return sort(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfggem27w.jl:94\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfggem27w.jl:94\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsjgwtg8g.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsjgwtg8g.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsjgwtg8g.jl:35\ntest set: Test Failed at /tmp/tmpsjgwtg8g.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpsjgwtg8g.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsjgwtg8g.jl:35\ntest set: Test Failed at /tmp/tmpsjgwtg8g.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpsjgwtg8g.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsjgwtg8g.jl:35\ntest set: Test Failed at /tmp/tmpsjgwtg8g.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsjgwtg8g.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsjgwtg8g.jl:35\ntest set: Test Failed at /tmp/tmpsjgwtg8g.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpsjgwtg8g.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsjgwtg8g.jl:35\ntest set: Test Failed at /tmp/tmpsjgwtg8g.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpsjgwtg8g.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsjgwtg8g.jl:35\ntest set: Test Failed at /tmp/tmpsjgwtg8g.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpsjgwtg8g.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsjgwtg8g.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsjgwtg8g.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr)[end-1:end]\n\
    \    end\n    if k == 3\n        return sort(arr)[end-2:end]\n    end\n    if\
    \ k == 4\n        return sort(arr)[end-3:end]\n    end\n    if k == 5\n      \
    \  return sort(arr)[end-4:end]\n    end\n    if k == 6\n        return sort(arr)[end-5:end]\n\
    \    end\n    if k == 7\n        return sort(arr)[end-6:end]\n    end\n    if\
    \ k == 8\n        return sort(arr)[end-7:end]\n    end\n    if k == 9\n      \
    \  return sort(arr)[end-8:end]\n    end\n    if k == 10\n        return sort(arr)[end-9:end]\n\
    \    end\n    if k == 11\n        return sort(arr)[end-10:end]\n    end\n    if\
    \ k == 12\n        return sort(arr)[end-11:end]\n    end\n    if k == 13\n   \
    \     return sort(arr)[end-12:end]\n    end\n    if k == 14\n        return sort(arr)[end-13:end]\n\
    \    end\n    if k == 15\n        return sort(arr)[end-14:end]\n    end\n    if\
    \ k == 16\n        return sort(arr)[end-15:end]\n    end\n    if k == 17\n   \
    \     return sort(arr)[end-16:end]\n    end\n    if k == 18\n        return sort(arr)[end-17:end]\n\
    \    end\n    if k == 19\n        return sort(arr)[end-18:end]\n    end\n    if\
    \ k == 20\n        return sort(arr)[end-19:end]\n    end\n    if k == 21\n   \
    \     return sort(arr)[end-20:end]\n    end\n    if k == 22\n        return sort(arr)[end-21:end]\n\
    \    end\n    if k == 23\n        return\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7l9vv2t0.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7l9vv2t0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap = MaxHeap()\n\
    \    for i in 1:k\n        push!(heap, arr[i])\n    end\n    for i in k+1:length(arr)\n\
    \        if arr[i] > peek(heap)\n            pop!(heap)\n            push!(heap,\
    \ arr[i])\n        end\n    end\n    return sort(collect(heap), rev=true)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuz_e8s5z.jl:43\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ MaxHeap not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpuz_e8s5z.jl:26\\n   [2] top-level scope at /tmp/tmpuz_e8s5z.jl:43\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuz_e8s5z.jl:42\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpuz_e8s5z.jl:44\\n  Test threw exception\\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpuz_e8s5z.jl:26\\n   [2]\
    \ top-level scope at /tmp/tmpuz_e8s5z.jl:44\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuz_e8s5z.jl:42\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpuz_e8s5z.jl:45\\n  Test threw exception\\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpuz_e8s5z.jl:26\\n   [2]\
    \ top-level scope at /tmp/tmpuz_e8s5z.jl:45\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuz_e8s5z.jl:42\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpuz_e8s5z.jl:46\\n  Test threw exception\\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError: MaxHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpuz_e8s5z.jl:26\\\
    n   [2] top-level scope at /tmp/tmpuz_e8s5z.jl:46\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuz_e8s5z.jl:42\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpuz_e8s5z.jl:47\\n  Test threw exception\\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n  UndefVarError: MaxHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpuz_e8s5z.jl:26\\\
    n   [2] top-level scope at /tmp/tmpuz_e8s5z.jl:47\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuz_e8s5z.jl:42\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpuz_e8s5z.jl:48\\n  Test threw exception\\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\\n  UndefVarError: MaxHeap\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpuz_e8s5z.jl:26\\\
    n   [2] top-level scope at /tmp/tmpuz_e8s5z.jl:48\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuz_e8s5z.jl:42\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpuz_e8s5z.jl:49\\n  Test threw exception\\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpuz_e8s5z.jl:26\\n   [2]\
    \ top-level scope at /tmp/tmpuz_e8s5z.jl:49\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuz_e8s5z.jl:42\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpuz_e8s5z.jl:50\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpuz_e8s5z.jl:26\\n   [2]\
    \ top-level scope at /tmp/tmpuz_e8s5z.jl:50\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuz_e8s5z.jl:42\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpuz_e8s5z.jl:51\\n  Test threw exception\\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpuz_e8s5z.jl:26\\n   [2]\
    \ top-level scope at /tmp/tmpuz_e8s5z.jl:51\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuz_e8s5z.jl:42\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpuz_e8s5z.jl:52\\n  Test threw exception\\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\\n  UndefVarError: MaxHeap not defined\\n  Stacktrace:\\\
    n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpuz_e8s5z.jl:26\\n   [2]\
    \ top-level scope at /tmp/tmpuz_e8s5z.jl:52\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuz_e8s5z.jl:42\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpuz_e8s5z.jl:53\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\\n  UndefVarError: MaxHeap\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpuz_e8s5z.jl:26\\\
    n   [2] top-level scope at /tmp/tmpuz_e8s5z.jl:53\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuz_e8s5z.jl:42\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements of the sorted array\n    return sorted_arr[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1fpwkvoo.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1fpwkvoo.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1fpwkvoo.jl:35\ntest set: Test Failed at /tmp/tmp1fpwkvoo.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp1fpwkvoo.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1fpwkvoo.jl:35\ntest set: Test Failed at /tmp/tmp1fpwkvoo.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp1fpwkvoo.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1fpwkvoo.jl:35\ntest set: Test Failed at /tmp/tmp1fpwkvoo.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1fpwkvoo.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1fpwkvoo.jl:35\ntest set: Test Failed at /tmp/tmp1fpwkvoo.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp1fpwkvoo.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1fpwkvoo.jl:35\ntest set: Test Failed at /tmp/tmp1fpwkvoo.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmp1fpwkvoo.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1fpwkvoo.jl:35\ntest set: Test Failed at /tmp/tmp1fpwkvoo.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmp1fpwkvoo.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1fpwkvoo.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1fpwkvoo.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjm1845bl.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjm1845bl.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjm1845bl.jl:35\ntest set: Test Failed at /tmp/tmpjm1845bl.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpjm1845bl.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjm1845bl.jl:35\ntest set: Test Failed at /tmp/tmpjm1845bl.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpjm1845bl.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjm1845bl.jl:35\ntest set: Test Failed at /tmp/tmpjm1845bl.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjm1845bl.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjm1845bl.jl:35\ntest set: Test Failed at /tmp/tmpjm1845bl.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpjm1845bl.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjm1845bl.jl:35\ntest set: Test Failed at /tmp/tmpjm1845bl.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpjm1845bl.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjm1845bl.jl:35\ntest set: Test Failed at /tmp/tmpjm1845bl.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpjm1845bl.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjm1845bl.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjm1845bl.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap = MaxHeap(arr)\n\
    \    return heap.pop(k)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmmtlw_5u.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpmmtlw_5u.jl:26\n\
    \   [2] top-level scope at /tmp/tmpmmtlw_5u.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmmtlw_5u.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpmmtlw_5u.jl:35\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpmmtlw_5u.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpmmtlw_5u.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmmtlw_5u.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpmmtlw_5u.jl:36\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpmmtlw_5u.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpmmtlw_5u.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmmtlw_5u.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpmmtlw_5u.jl:37\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: MaxHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpmmtlw_5u.jl:26\n\
    \   [2] top-level scope at /tmp/tmpmmtlw_5u.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmmtlw_5u.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpmmtlw_5u.jl:38\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: MaxHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpmmtlw_5u.jl:26\n\
    \   [2] top-level scope at /tmp/tmpmmtlw_5u.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmmtlw_5u.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpmmtlw_5u.jl:39\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpmmtlw_5u.jl:26\n\
    \   [2] top-level scope at /tmp/tmpmmtlw_5u.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmmtlw_5u.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpmmtlw_5u.jl:40\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpmmtlw_5u.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpmmtlw_5u.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmmtlw_5u.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpmmtlw_5u.jl:41\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpmmtlw_5u.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpmmtlw_5u.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmmtlw_5u.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpmmtlw_5u.jl:42\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n  \
    \ [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpmmtlw_5u.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpmmtlw_5u.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmmtlw_5u.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpmmtlw_5u.jl:43\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpmmtlw_5u.jl:26\n   [2] top-level\
    \ scope at /tmp/tmpmmtlw_5u.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmmtlw_5u.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpmmtlw_5u.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpmmtlw_5u.jl:26\n\
    \   [2] top-level scope at /tmp/tmpmmtlw_5u.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmmtlw_5u.jl:33\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmmtlw_5u.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\n\
    \    sorted_arr = sort(arr)\n    # Return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        if arr[1] > arr[2]\n       \
    \     return [arr[1], arr[2]]\n        else\n            return [arr[2], arr[1]]\n\
    \        end\n    end\n    if k == 3\n        if arr[1] > arr[2]\n           \
    \ if arr[1] > arr[3]\n                if arr[2] > arr[3]\n                   \
    \ return [arr[1], arr[2], arr[3]]\n                else\n                    return\
    \ [arr[1], arr[3], arr[2]]\n                end\n            else\n          \
    \      return [arr[3], arr[1], arr[2]]\n            end\n        else\n      \
    \      if arr[2] > arr[3]\n                if arr[1] > arr[3]\n              \
    \      return [arr[2], arr[1], arr[3]]\n                else\n               \
    \     return [arr[2], arr[3], arr[1]]\n                end\n            else\n\
    \                return [arr[3], arr[2], arr[1]]\n            end\n        end\n\
    \    end\n    if k > 3\n        if arr[1] > arr[2]\n            if arr[1] > arr[3]\n\
    \                if arr[2] > arr[3]\n                    return [arr[1], arr[2],\
    \ arr[3]]\n                else\n                    return [arr[1], arr[3], arr[2]]\n\
    \                end\n            else\n                return [arr[3], arr[1],\
    \ arr[2]]\n            end\n        else\n            if arr[2] > arr[3]\n   \
    \             if arr[1] > arr[3]\n                    return [arr[2], arr[1],\
    \ arr[3]]\n                else\n                    return [arr[2], arr[3], arr[1]]\n\
    \                end\n            else\n                return [arr[3], arr[2],\
    \ arr[1]]\n            end\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps_zxabsw.jl:93\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [4, -4] == [4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmps_zxabsw.jl:93\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps_zxabsw.jl:91\ntest set: Error During Test at\
    \ /tmp/tmps_zxabsw.jl:94\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmps_zxabsw.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps_zxabsw.jl:31\n   [2] top-level\
    \ scope at /tmp/tmps_zxabsw.jl:94\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps_zxabsw.jl:91\n  \ntest set: Test Failed at\
    \ /tmp/tmps_zxabsw.jl:95\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n   Evaluated: [123, 20, -123] == [2, 20, 123]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps_zxabsw.jl:95\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps_zxabsw.jl:91\ntest set: Test Failed at /tmp/tmps_zxabsw.jl:96\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 0, -123] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmps_zxabsw.jl:96\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps_zxabsw.jl:91\ntest set: Test Failed at /tmp/tmps_zxabsw.jl:98\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [0,\
    \ -1] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmps_zxabsw.jl:98\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps_zxabsw.jl:91\ntest set: Error During Test at\
    \ /tmp/tmps_zxabsw.jl:99\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmps_zxabsw.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps_zxabsw.jl:31\n   [2] top-level\
    \ scope at /tmp/tmps_zxabsw.jl:99\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps_zxabsw.jl:91\n  \ntest set: Error During\
    \ Test at /tmp/tmps_zxabsw.jl:102\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps_zxabsw.jl:82\n\
    \   [2] top-level scope at /tmp/tmps_zxabsw.jl:102\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps_zxabsw.jl:91\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    4     4      3     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps_zxabsw.jl:89\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpa93yye0j.jl:36\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpa93yye0j.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpa93yye0j.jl:35\\ntest set: Test Failed at /tmp/tmpa93yye0j.jl:39\\\
    n  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n \
    \  Evaluated: [123, 20, 2] == [2, 20, 123]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpa93yye0j.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpa93yye0j.jl:35\\ntest set: Test Failed at /tmp/tmpa93yye0j.jl:40\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpa93yye0j.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpa93yye0j.jl:35\\ntest set: Test Failed at /tmp/tmpa93yye0j.jl:41\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpa93yye0j.jl:41\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpa93yye0j.jl:35\\ntest set: Test Failed at /tmp/tmpa93yye0j.jl:42\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [5,\
    \ 3] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpa93yye0j.jl:42\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpa93yye0j.jl:35\\ntest set: Test Failed at /tmp/tmpa93yye0j.jl:44\\\
    n  Expression: candidate([4, -4], 2) == [-4, 4]\\n   Evaluated: [4, -4] == [-4,\
    \ 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpa93yye0j.jl:44\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpa93yye0j.jl:35\\ntest set: Test Failed at /tmp/tmpa93yye0j.jl:45\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpa93yye0j.jl:45\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpa93yye0j.jl:35\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     7     11\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # create a new vector\
    \ of length k\n    max_k = Vector{Int64}(undef, k)\n    # loop through the array\n\
    \    for i in 1:length(arr)\n        # if the value at the current index is greater\
    \ than the value at the last index\n        if arr[i] > max_k[end]\n         \
    \   # remove the last value\n            pop!(max_k)\n            # and add the\
    \ current value\n            push!(max_k, arr[i])\n        end\n    end\n    #\
    \ sort the vector\n    sort!(max_k)\n    # return the vector\n    return max_k\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpavabhey_.jl:48\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [0, 0, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpavabhey_.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpavabhey_.jl:47\ntest set: Test Failed at /tmp/tmpavabhey_.jl:49\n\
    \  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated: [85, 5678] ==\
    \ [4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpavabhey_.jl:49\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpavabhey_.jl:47\ntest set: Test Failed at /tmp/tmpavabhey_.jl:50\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [139655485703792]\
    \ == [2]\nStacktrace:\n [1] top-level scope at /tmp/tmpavabhey_.jl:50\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpavabhey_.jl:47\ntest set: Test Failed at /tmp/tmpavabhey_.jl:51\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [139655541837104, 139655542389872, 139655548586192] == [2, 20, 123]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpavabhey_.jl:51\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpavabhey_.jl:47\ntest set: Test Failed at /tmp/tmpavabhey_.jl:52\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 139655456130048, 139655542389872, 139655544881488] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpavabhey_.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpavabhey_.jl:47\ntest set: Test Failed at /tmp/tmpavabhey_.jl:53\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [24, 25, 27, 139655450988928, 139655450988976, 139655451021344,\
    \ 139655510292704] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpavabhey_.jl:53\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpavabhey_.jl:47\ntest set: Test Failed at /tmp/tmpavabhey_.jl:54\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [139655542379296,\
    \ 139655563425888] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpavabhey_.jl:54\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpavabhey_.jl:47\ntest set: Test Failed at /tmp/tmpavabhey_.jl:55\n\
    \  Expression: candidate([1, 0, 5, -7], 1) == [5]\n   Evaluated: [139655451021792]\
    \ == [5]\nStacktrace:\n [1] top-level scope at /tmp/tmpavabhey_.jl:55\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpavabhey_.jl:47\ntest set: Test Failed at /tmp/tmpavabhey_.jl:56\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [139655451021472,\
    \ 139655451021536] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpavabhey_.jl:56\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpavabhey_.jl:47\ntest set: Test Failed at /tmp/tmpavabhey_.jl:57\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [139655451031520,\
    \ 139655485714976] == [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpavabhey_.jl:57\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpavabhey_.jl:47\ntest set: Error During Test at\
    \ /tmp/tmpavabhey_.jl:58\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access 0-element Array{Int64,1} at index [0]\n  Stacktrace:\n   [1] getindex\
    \ at ./array.jl:788 [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpavabhey_.jl:31\n\
    \   [3] top-level scope at /tmp/tmpavabhey_.jl:58\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpavabhey_.jl:47\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |   10      1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpavabhey_.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr), median(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)])])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_5h2mys6.jl:52\\n  Test threw\
    \ exception\\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\\n  MethodError:\
    \ no method matching maximum(::Array{Int64,1})\\n  You may have intended to import\
    \ Base.maximum\\n  Closest candidates are:\\n    maximum(::Array{Int64,1}, !Matched::Int64)\
    \ at /tmp/tmp_5h2mys6.jl:26\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmp_5h2mys6.jl:34\\n   [2] top-level scope at /tmp/tmp_5h2mys6.jl:52\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_5h2mys6.jl:50\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_5h2mys6.jl:53\\n  Test threw exception\\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmp_5h2mys6.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_5h2mys6.jl:31\\\
    n   [2] top-level scope at /tmp/tmp_5h2mys6.jl:53\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_5h2mys6.jl:50\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_5h2mys6.jl:54\\n  Test threw exception\\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  MethodError: no method matching\
    \ maximum(::Array{Int64,1})\\n  You may have intended to import Base.maximum\\\
    n  Closest candidates are:\\n    maximum(::Array{Int64,1}, !Matched::Int64) at\
    \ /tmp/tmp_5h2mys6.jl:26\\n  Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmp_5h2mys6.jl:37\\n   [2] top-level scope at /tmp/tmp_5h2mys6.jl:54\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_5h2mys6.jl:50\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_5h2mys6.jl:55\\n  Test threw exception\\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmp_5h2mys6.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_5h2mys6.jl:40\\\
    n   [2] top-level scope at /tmp/tmp_5h2mys6.jl:55\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_5h2mys6.jl:50\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_5h2mys6.jl:57\\n  Test threw exception\\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmp_5h2mys6.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_5h2mys6.jl:34\\\
    n   [2] top-level scope at /tmp/tmp_5h2mys6.jl:57\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_5h2mys6.jl:50\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_5h2mys6.jl:58\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\\n  MethodError: no method matching maximum(::Array{Int64,1})\\\
    n  You may have intended to import Base.maximum\\n  Closest candidates are:\\\
    n    maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmp_5h2mys6.jl:26\\n \
    \ Stacktrace:\\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp_5h2mys6.jl:31\\\
    n   [2] top-level scope at /tmp/tmp_5h2mys6.jl:58\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_5h2mys6.jl:50\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpx13ul667.jl:36\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpx13ul667.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx13ul667.jl:35\\ntest set: Test Failed at /tmp/tmpx13ul667.jl:39\\\
    n  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n \
    \  Evaluated: [123, 20, 2] == [2, 20, 123]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpx13ul667.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx13ul667.jl:35\\ntest set: Test Failed at /tmp/tmpx13ul667.jl:40\\\
    n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpx13ul667.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx13ul667.jl:35\\ntest set: Test Failed at /tmp/tmpx13ul667.jl:41\\\
    n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpx13ul667.jl:41\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx13ul667.jl:35\\ntest set: Test Failed at /tmp/tmpx13ul667.jl:42\\\
    n  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\\n   Evaluated: [5,\
    \ 3] == [3, 5]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpx13ul667.jl:42\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx13ul667.jl:35\\ntest set: Test Failed at /tmp/tmpx13ul667.jl:44\\\
    n  Expression: candidate([4, -4], 2) == [-4, 4]\\n   Evaluated: [4, -4] == [-4,\
    \ 4]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpx13ul667.jl:44\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx13ul667.jl:35\\ntest set: Test Failed at /tmp/tmpx13ul667.jl:45\\\
    n  Expression: candidate([-10, 10], 2) == [-10, 10]\\n   Evaluated: [10, -10]\
    \ == [-10, 10]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpx13ul667.jl:45\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx13ul667.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\n\
    \    sorted_arr = sort(arr)\n    # Return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaxlqd29_.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaxlqd29_.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaxlqd29_.jl:35\ntest set: Test Failed at /tmp/tmpaxlqd29_.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpaxlqd29_.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaxlqd29_.jl:35\ntest set: Test Failed at /tmp/tmpaxlqd29_.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpaxlqd29_.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaxlqd29_.jl:35\ntest set: Test Failed at /tmp/tmpaxlqd29_.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpaxlqd29_.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaxlqd29_.jl:35\ntest set: Test Failed at /tmp/tmpaxlqd29_.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpaxlqd29_.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaxlqd29_.jl:35\ntest set: Test Failed at /tmp/tmpaxlqd29_.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpaxlqd29_.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaxlqd29_.jl:35\ntest set: Test Failed at /tmp/tmpaxlqd29_.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpaxlqd29_.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaxlqd29_.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaxlqd29_.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap = MaxHeap()\n\
    \    for i in 1:k\n        push!(heap, arr[i])\n    end\n    for i in k+1:length(arr)\n\
    \        if arr[i] > heap[1]\n            pop!(heap)\n            push!(heap,\
    \ arr[i])\n        end\n    end\n    return sort(heap, rev=true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5h9cxq8l.jl:43\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5h9cxq8l.jl:26\n\
    \   [2] top-level scope at /tmp/tmp5h9cxq8l.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5h9cxq8l.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmp5h9cxq8l.jl:44\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5h9cxq8l.jl:26\n   [2] top-level\
    \ scope at /tmp/tmp5h9cxq8l.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5h9cxq8l.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmp5h9cxq8l.jl:45\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5h9cxq8l.jl:26\n   [2] top-level\
    \ scope at /tmp/tmp5h9cxq8l.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5h9cxq8l.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmp5h9cxq8l.jl:46\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: MaxHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5h9cxq8l.jl:26\n\
    \   [2] top-level scope at /tmp/tmp5h9cxq8l.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5h9cxq8l.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmp5h9cxq8l.jl:47\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: MaxHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5h9cxq8l.jl:26\n\
    \   [2] top-level scope at /tmp/tmp5h9cxq8l.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5h9cxq8l.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmp5h9cxq8l.jl:48\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5h9cxq8l.jl:26\n\
    \   [2] top-level scope at /tmp/tmp5h9cxq8l.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5h9cxq8l.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmp5h9cxq8l.jl:49\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5h9cxq8l.jl:26\n   [2] top-level\
    \ scope at /tmp/tmp5h9cxq8l.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5h9cxq8l.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmp5h9cxq8l.jl:50\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5h9cxq8l.jl:26\n   [2] top-level\
    \ scope at /tmp/tmp5h9cxq8l.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5h9cxq8l.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmp5h9cxq8l.jl:51\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n  \
    \ [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5h9cxq8l.jl:26\n   [2] top-level\
    \ scope at /tmp/tmp5h9cxq8l.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5h9cxq8l.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmp5h9cxq8l.jl:52\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: MaxHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5h9cxq8l.jl:26\n   [2] top-level\
    \ scope at /tmp/tmp5h9cxq8l.jl:52\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5h9cxq8l.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmp5h9cxq8l.jl:53\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5h9cxq8l.jl:26\n\
    \   [2] top-level scope at /tmp/tmp5h9cxq8l.jl:53\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5h9cxq8l.jl:42\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5h9cxq8l.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # return the first k elements\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6_1js6qb.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6_1js6qb.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_1js6qb.jl:35\ntest set: Test Failed at /tmp/tmp6_1js6qb.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp6_1js6qb.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_1js6qb.jl:35\ntest set: Test Failed at /tmp/tmp6_1js6qb.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp6_1js6qb.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_1js6qb.jl:35\ntest set: Test Failed at /tmp/tmp6_1js6qb.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6_1js6qb.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_1js6qb.jl:35\ntest set: Test Failed at /tmp/tmp6_1js6qb.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp6_1js6qb.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_1js6qb.jl:35\ntest set: Test Failed at /tmp/tmp6_1js6qb.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmp6_1js6qb.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_1js6qb.jl:35\ntest set: Test Failed at /tmp/tmp6_1js6qb.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmp6_1js6qb.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_1js6qb.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6_1js6qb.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return arr\n    end\n    if k == 1\n        return [maximum(arr)]\n\
    \    end\n    if k == 2\n        return [maximum(arr), minimum(arr)]\n    end\n\
    \    if k == 3\n        return [maximum(arr), minimum(arr), maximum(arr[arr .!=\
    \ maximum(arr)])]\n    end\n    if k == 4\n        return [maximum(arr), minimum(arr),\
    \ maximum(arr[arr .!= maximum(arr)]), minimum(arr[arr .!= minimum(arr)])]\n  \
    \  end\n    if k == 5\n        return [maximum(arr), minimum(arr), maximum(arr[arr\
    \ .!= maximum(arr)]), minimum(arr[arr .!= minimum(arr)]), maximum(arr[arr .!=\
    \ maximum(arr)])]\n    end\n    if k == 6\n        return [maximum(arr), minimum(arr),\
    \ maximum(arr[arr .!= maximum(arr)]), minimum(arr[arr .!= minimum(arr)]), maximum(arr[arr\
    \ .!= maximum(arr)]), minimum(arr[arr .!= minimum(arr)])]\n    end\n    if k ==\
    \ 7\n        return [maximum(arr), minimum(arr), maximum(arr[arr .!= maximum(arr)]),\
    \ minimum(arr[arr .!= minimum(arr)]), maximum(arr[arr .!= maximum(arr)]), minimum(arr[arr\
    \ .!= minimum(arr)]), maximum(arr[arr .!= maximum(arr)])]\n    end\n    if k ==\
    \ 8\n        return [maximum(arr), minimum(arr), maximum(arr[arr .!= maximum(arr)]),\
    \ minimum(arr[arr .!= minimum(arr)]), maximum(arr[arr .!= maximum(arr)]), minimum(arr[arr\
    \ .!= minimum(arr)]), maximum(arr[arr .!= maximum(arr)]), minimum(arr[arr .!=\
    \ minimum(arr)])]\n    end\n    if k == 9\n        return [maximum(arr), minimum(arr),\
    \ maximum(arr[arr .!= maximum(arr)]), minimum(arr[arr .!= minimum(arr)]), maximum(arr[\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3f1dsey8.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3f1dsey8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements of the sorted array\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # Return the first k elements\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqtjmoagi.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqtjmoagi.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqtjmoagi.jl:35\ntest set: Test Failed at /tmp/tmpqtjmoagi.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpqtjmoagi.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqtjmoagi.jl:35\ntest set: Test Failed at /tmp/tmpqtjmoagi.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpqtjmoagi.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqtjmoagi.jl:35\ntest set: Test Failed at /tmp/tmpqtjmoagi.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqtjmoagi.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqtjmoagi.jl:35\ntest set: Test Failed at /tmp/tmpqtjmoagi.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpqtjmoagi.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqtjmoagi.jl:35\ntest set: Test Failed at /tmp/tmpqtjmoagi.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpqtjmoagi.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqtjmoagi.jl:35\ntest set: Test Failed at /tmp/tmpqtjmoagi.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpqtjmoagi.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqtjmoagi.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqtjmoagi.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr, rev=true)\n    end\n    return\
    \ sort(arr, rev=true)[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcgty31qy.jl:42\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcgty31qy.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcgty31qy.jl:41\ntest set: Error During Test at\
    \ /tmp/tmpcgty31qy.jl:44\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpcgty31qy.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcgty31qy.jl:30\n   [2] top-level\
    \ scope at /tmp/tmpcgty31qy.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcgty31qy.jl:41\n  \ntest set: Test Failed at\
    \ /tmp/tmpcgty31qy.jl:45\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcgty31qy.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcgty31qy.jl:41\ntest set: Test Failed at /tmp/tmpcgty31qy.jl:46\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpcgty31qy.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcgty31qy.jl:41\ntest set: Test Failed at /tmp/tmpcgty31qy.jl:47\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcgty31qy.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcgty31qy.jl:41\ntest set: Test Failed at /tmp/tmpcgty31qy.jl:48\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpcgty31qy.jl:48\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcgty31qy.jl:41\ntest set: Error During Test at\
    \ /tmp/tmpcgty31qy.jl:49\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmpcgty31qy.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcgty31qy.jl:30\n   [2] top-level\
    \ scope at /tmp/tmpcgty31qy.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcgty31qy.jl:41\n  \ntest set: Test Failed at\
    \ /tmp/tmpcgty31qy.jl:50\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpcgty31qy.jl:50\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcgty31qy.jl:41\ntest set: Test Failed at /tmp/tmpcgty31qy.jl:51\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpcgty31qy.jl:51\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcgty31qy.jl:41\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    2     7      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcgty31qy.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == 0\n        return []\n    end\n    if k == 0\n        return []\n\
    \    end\n    if k >= n\n        return sort(arr, rev=true)\n    end\n    if k\
    \ == 1\n        return [maximum(arr)]\n    end\n    if k == 2\n        return\
    \ sort([arr[1], arr[end]], rev=true)\n    end\n    if k == 3\n        return sort([arr[1],\
    \ arr[end], maximum(arr[2:end-1])], rev=true)\n    end\n    if k == 4\n      \
    \  return sort([arr[1], arr[end], maximum(arr[2:end-1]), minimum(arr[2:end-1])],\
    \ rev=true)\n    end\n    if k == 5\n        return sort([arr[1], arr[end], maximum(arr[2:end-1]),\
    \ minimum(arr[2:end-1]), arr[3]], rev=true)\n    end\n    if k == 6\n        return\
    \ sort([arr[1], arr[end], maximum(arr[2:end-1]), minimum(arr[2:end-1]), arr[3],\
    \ arr[end-2]], rev=true)\n    end\n    if k == 7\n        return sort([arr[1],\
    \ arr[end], maximum(arr[2:end-1]), minimum(arr[2:end-1]), arr[3], arr[end-2],\
    \ maximum(arr[4:end-3])], rev=true)\n    end\n    if k == 8\n        return sort([arr[1],\
    \ arr[end], maximum(arr[2:end-1]), minimum(arr[2:end-1]), arr[3], arr[end-2],\
    \ maximum(arr[4:end-3]), minimum(arr[4:end-3])], rev=true)\n    end\n    if k\
    \ == 9\n        return sort([arr[1], arr[end], maximum(arr[2:end-1]), minimum(arr[2:end-1]),\
    \ arr[3], arr[end-2], maximum(arr[4:end-3]), minimum(arr[4:end-3]), arr[4]], rev=true)\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzsz2_l5l.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzsz2_l5l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements of the sorted array\n    return sorted_arr[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4qr2dace.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4qr2dace.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4qr2dace.jl:35\ntest set: Test Failed at /tmp/tmp4qr2dace.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp4qr2dace.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4qr2dace.jl:35\ntest set: Test Failed at /tmp/tmp4qr2dace.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp4qr2dace.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4qr2dace.jl:35\ntest set: Test Failed at /tmp/tmp4qr2dace.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4qr2dace.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4qr2dace.jl:35\ntest set: Test Failed at /tmp/tmp4qr2dace.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp4qr2dace.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4qr2dace.jl:35\ntest set: Test Failed at /tmp/tmp4qr2dace.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmp4qr2dace.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4qr2dace.jl:35\ntest set: Test Failed at /tmp/tmp4qr2dace.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmp4qr2dace.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4qr2dace.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4qr2dace.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # create a new array\
    \ to store the k maximum numbers\n    max_arr = zeros(Int64, k)\n    # loop through\
    \ the array\n    for i in 1:length(arr)\n        # if the current number is greater\
    \ than the minimum number in the max_arr\n        if arr[i] > minimum(max_arr)\n\
    \            # replace the minimum number with the current number\n          \
    \  max_arr[findmin(max_arr)[2]] = arr[i]\n        end\n    end\n    # sort the\
    \ max_arr\n    sort(max_arr)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphsgm58dh.jl:44\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [0, 0, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphsgm58dh.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphsgm58dh.jl:43\ntest set: Test Failed at /tmp/tmphsgm58dh.jl:49\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [0, 0, 0, 0, 3, 5, 15] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphsgm58dh.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphsgm58dh.jl:43\ntest set: Test Failed at /tmp/tmphsgm58dh.jl:52\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [0, 4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmphsgm58dh.jl:52\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphsgm58dh.jl:43\ntest set: Test Failed at /tmp/tmphsgm58dh.jl:53\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [0, 10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmphsgm58dh.jl:53\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphsgm58dh.jl:43\ntest set: Error During Test at\
    \ /tmp/tmphsgm58dh.jl:54\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\n   [12] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmphsgm58dh.jl:31\n\
    \   [13] top-level scope at /tmp/tmphsgm58dh.jl:54\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmphsgm58dh.jl:43\n  \nTest Summary: | Pass \
    \ Fail  Error  Total\ntest set      |    6     4      1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphsgm58dh.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzu82o8cc.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzu82o8cc.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzu82o8cc.jl:35\ntest set: Test Failed at /tmp/tmpzu82o8cc.jl:39\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpzu82o8cc.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzu82o8cc.jl:35\ntest set: Test Failed at /tmp/tmpzu82o8cc.jl:40\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpzu82o8cc.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzu82o8cc.jl:35\ntest set: Test Failed at /tmp/tmpzu82o8cc.jl:41\n\
    \  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15]\n   Evaluated: [15, 5, 3, 0, 0, -8, -13] == [-13, -8, 0, 0, 3, 5, 15]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzu82o8cc.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzu82o8cc.jl:35\ntest set: Test Failed at /tmp/tmpzu82o8cc.jl:42\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmpzu82o8cc.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzu82o8cc.jl:35\ntest set: Test Failed at /tmp/tmpzu82o8cc.jl:44\n\
    \  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated: [4, -4] == [-4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpzu82o8cc.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzu82o8cc.jl:35\ntest set: Test Failed at /tmp/tmpzu82o8cc.jl:45\n\
    \  Expression: candidate([-10, 10], 2) == [-10, 10]\n   Evaluated: [10, -10] ==\
    \ [-10, 10]\nStacktrace:\n [1] top-level scope at /tmp/tmpzu82o8cc.jl:45\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzu82o8cc.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzu82o8cc.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize the\
    \ heap\n    heap = BinaryHeap(arr[1:k])\n    # Loop through the remaining elements\n\
    \    for i in k+1:length(arr)\n        # If the current element is greater than\
    \ the min element in the heap\n        if arr[i] > heap.min\n            # Remove\
    \ the min element from the heap\n            pop!(heap)\n            # Push the\
    \ current element into the heap\n            push!(heap, arr[i])\n        end\n\
    \    end\n    # Return the sorted heap\n    sort(heap)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqrs08ylp.jl:46\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqrs08ylp.jl:27\n\
    \   [2] top-level scope at /tmp/tmpqrs08ylp.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqrs08ylp.jl:45\n  \ntest set: Error During\
    \ Test at /tmp/tmpqrs08ylp.jl:47\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqrs08ylp.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpqrs08ylp.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqrs08ylp.jl:45\n  \ntest set: Error During\
    \ Test at /tmp/tmpqrs08ylp.jl:48\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqrs08ylp.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpqrs08ylp.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqrs08ylp.jl:45\n  \ntest set: Error During\
    \ Test at /tmp/tmpqrs08ylp.jl:49\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: BinaryHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqrs08ylp.jl:27\n\
    \   [2] top-level scope at /tmp/tmpqrs08ylp.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqrs08ylp.jl:45\n  \ntest set: Error During\
    \ Test at /tmp/tmpqrs08ylp.jl:50\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: BinaryHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqrs08ylp.jl:27\n\
    \   [2] top-level scope at /tmp/tmpqrs08ylp.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqrs08ylp.jl:45\n  \ntest set: Error During\
    \ Test at /tmp/tmpqrs08ylp.jl:51\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqrs08ylp.jl:27\n\
    \   [2] top-level scope at /tmp/tmpqrs08ylp.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqrs08ylp.jl:45\n  \ntest set: Error During\
    \ Test at /tmp/tmpqrs08ylp.jl:52\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqrs08ylp.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpqrs08ylp.jl:52\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqrs08ylp.jl:45\n  \ntest set: Error During\
    \ Test at /tmp/tmpqrs08ylp.jl:53\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqrs08ylp.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpqrs08ylp.jl:53\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqrs08ylp.jl:45\n  \ntest set: Error During\
    \ Test at /tmp/tmpqrs08ylp.jl:54\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqrs08ylp.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpqrs08ylp.jl:54\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqrs08ylp.jl:45\n  \ntest set: Error During\
    \ Test at /tmp/tmpqrs08ylp.jl:55\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: BinaryHeap not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqrs08ylp.jl:27\n   [2] top-level\
    \ scope at /tmp/tmpqrs08ylp.jl:55\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqrs08ylp.jl:45\n  \ntest set: Error During\
    \ Test at /tmp/tmpqrs08ylp.jl:56\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqrs08ylp.jl:27\n\
    \   [2] top-level scope at /tmp/tmpqrs08ylp.jl:56\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqrs08ylp.jl:45\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqrs08ylp.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr)\n    end\n    if k > length(arr)\n\
    \        return sort(arr, rev=true)\n    end\n    if k < length(arr)\n       \
    \ return sort(arr, rev=true)[1:k]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4jeicctc.jl:49\n  Test threw exception\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no\
    \ method matching maximum(::Array{Int64,1})\n  You may have intended to import\
    \ Base.maximum\n  Closest candidates are:\n    maximum(::Array{Int64,1}, !Matched::Int64)\
    \ at /tmp/tmp4jeicctc.jl:26\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmp4jeicctc.jl:30\n   [2] top-level scope at /tmp/tmp4jeicctc.jl:49\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4jeicctc.jl:46\n  \ntest set: Test Failed at\
    \ /tmp/tmp4jeicctc.jl:50\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4jeicctc.jl:50\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4jeicctc.jl:46\ntest set: Test Failed at /tmp/tmp4jeicctc.jl:51\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp4jeicctc.jl:51\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4jeicctc.jl:46\ntest set: Test Failed at /tmp/tmp4jeicctc.jl:53\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [5,\
    \ 3] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp4jeicctc.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4jeicctc.jl:46\ntest set: Error During Test at\
    \ /tmp/tmp4jeicctc.jl:54\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: no method matching maximum(::Array{Int64,1})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Array{Int64,1}, !Matched::Int64) at /tmp/tmp4jeicctc.jl:26\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp4jeicctc.jl:30\n   [2] top-level\
    \ scope at /tmp/tmp4jeicctc.jl:54\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4jeicctc.jl:46\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    6     3      2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4jeicctc.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    sort(arr)[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp79mh_ke5.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp79mh_ke5.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp79mh_ke5.jl:34\ntest set: Test Failed at /tmp/tmp79mh_ke5.jl:37\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3]\
    \ == [2]\nStacktrace:\n [1] top-level scope at /tmp/tmp79mh_ke5.jl:37\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp79mh_ke5.jl:34\ntest set: Test Failed at /tmp/tmp79mh_ke5.jl:38\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp79mh_ke5.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp79mh_ke5.jl:34\ntest set: Test Failed at /tmp/tmp79mh_ke5.jl:39\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp79mh_ke5.jl:39\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp79mh_ke5.jl:34\ntest set: Test Failed at /tmp/tmp79mh_ke5.jl:41\n\
    \  Expression: candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   Evaluated: [-10,\
    \ -1] == [3, 5]\nStacktrace:\n [1] top-level scope at /tmp/tmp79mh_ke5.jl:41\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp79mh_ke5.jl:34\ntest set: Test Failed at /tmp/tmp79mh_ke5.jl:42\n\
    \  Expression: candidate([1, 0, 5, -7], 1) == [5]\n   Evaluated: [-7] == [5]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp79mh_ke5.jl:42\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp79mh_ke5.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     6     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp79mh_ke5.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
