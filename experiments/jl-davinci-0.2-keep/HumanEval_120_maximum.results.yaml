name: HumanEval_120_maximum
language: julia
results:
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr), median(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)])])\n    end\n    if k == 6\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 7\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 8\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)]), median(arr\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe6w9l3pn.jl:56\nin expression starting at\
    \ /tmp/tmpe6w9l3pn.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == 0\n        return []\n    end\n    if k == n\n        return sort(arr)\n\
    \    end\n    if k == 1\n        return [maximum(arr)]\n    end\n    if k == 2\n\
    \        return sort([maximum(arr), minimum(arr)])\n    end\n    if k == 3\n \
    \       return sort([maximum(arr), minimum(arr), median(arr)])\n    end\n    if\
    \ k == 4\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)])])\n    end\n    if k == 6\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 7\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 8\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_8nvhmly.jl:59\nin expression starting at\
    \ /tmp/tmp_8nvhmly.jl:59\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpetnz64pr.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpetnz64pr.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpetnz64pr.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpetnz64pr.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpetnz64pr.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpetnz64pr.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpetnz64pr.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpetnz64pr.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpetnz64pr.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpetnz64pr.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpetnz64pr.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpetnz64pr.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpetnz64pr.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpetnz64pr.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpetnz64pr.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpetnz64pr.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl6lj8h2s.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpl6lj8h2s.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl6lj8h2s.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpl6lj8h2s.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpl6lj8h2s.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl6lj8h2s.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpl6lj8h2s.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpl6lj8h2s.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl6lj8h2s.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpl6lj8h2s.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpl6lj8h2s.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl6lj8h2s.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpl6lj8h2s.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpl6lj8h2s.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl6lj8h2s.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpl6lj8h2s.jl:42\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl6lj8h2s.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr, rev=true)\n    end\n    heap = Heap(arr[1:k])\n\
    \    for i in k+1:n\n        if arr[i] > heap.peek()\n            heap.pop()\n\
    \            heap.push(arr[i])\n        end\n    end\n    return sort(heap.data,\
    \ rev=true)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8us0zpo9.jl:44\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmp8us0zpo9.jl:44 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp8us0zpo9.jl:43\\ntest set: Error\
    \ During Test at /tmp/tmp8us0zpo9.jl:45\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError: Heap not defined\\n  Stacktrace:\\\
    n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmp8us0zpo9.jl:30\\\
    n   [2] macro expansion\\n     @ /tmp/tmp8us0zpo9.jl:45 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8us0zpo9.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmp8us0zpo9.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: Heap not defined\\\
    n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmp8us0zpo9.jl:30\\\
    n   [2] macro expansion\\n     @ /tmp/tmp8us0zpo9.jl:46 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8us0zpo9.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmp8us0zpo9.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ Heap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmp8us0zpo9.jl:30\\n   [2] macro expansion\\n     @ /tmp/tmp8us0zpo9.jl:47\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8us0zpo9.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmp8us0zpo9.jl:48\\n  Test th"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\n\
    \    sort!(arr)\n    # Return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    # find the maximum\n    max_val = maximum(arr)\n\
    \    # find the index of the maximum\n    max_index = findall(x -> x == max_val,\
    \ arr)[1]\n    # remove the maximum from the array\n    arr = vcat(arr[1:max_index-1],\
    \ arr[max_index+1:end])\n    # return the maximum and the result of the function\
    \ on the rest of the array\n    return vcat([max_val], maximum(arr, k-1))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi0osr8xn.jl:48\\n  Test threw\
    \ exception\\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\\n  MethodError:\
    \ no method matching maximum(::Vector{Int64})\\n  You may have intended to import\
    \ Base.maximum\\n  Closest candidates are:\\n    maximum(::Vector{Int64}, !Matched::Int64)\
    \ at /tmp/tmpi0osr8xn.jl:25\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmpi0osr8xn.jl:0\\n   [2] macro expansion\\n  \
    \   @ /tmp/tmpi0osr8xn.jl:48 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi0osr8xn.jl:46\\ntest set:\
    \ Error During Test at /tmp/tmpi0osr8xn.jl:49\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\\n  You may have intended to import Base.maximum\\\
    n  Closest candidates are:\\n    maximum(::Vector{Int64}, !Matched::Int64) at\
    \ /tmp/tmpi0osr8xn.jl:25\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmpi0osr8xn.jl:0\\n   [2] macro expansion\\n  \
    \   @ /tmp/tmpi0osr8xn.jl:49 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi0osr8xn.jl:46\\ntest set:\
    \ Error During Test at /tmp/tmpi0osr8xn.jl:50\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  MethodError:\
    \ no method matching maximum(::Vector{Int64})\\n  You may have intended to import\
    \ Base.maximum\\n  Closest candidates are:\\n    maximum(::Vector{Int64}, !Matched::Int64)\
    \ at /tmp/tmpi0osr8xn.jl:25\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmpi0osr8xn.jl:0\\n   [2] macro expansion\\n  \
    \   @ /tmp/tmpi0osr8xn.jl:50 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # create a new vector\
    \ to store the maximum k numbers\n    max_k = Vector{Int64}(undef, k)\n    # iterate\
    \ through the array\n    for i in 1:length(arr)\n        # if the current element\
    \ is greater than the minimum of the max_k vector\n        if arr[i] > minimum(max_k)\n\
    \            # replace the minimum with the current element\n            max_k[findmin(max_k)[2]]\
    \ = arr[i]\n        end\n    end\n    # sort the max_k vector\n    sort!(max_k)\n\
    \    # return the max_k vector\n    return max_k\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp00j39g1s.jl:46\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [0, 0, 5] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmp00j39g1s.jl:46 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp00j39g1s.jl:45\\ntest set: Test\
    \ Failed at /tmp/tmp00j39g1s.jl:48\\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\\n   Evaluated: [140018861899344] == [2]\\nStacktrace:\\n\
    \ [1] macro expansion\\n   @ /tmp/tmp00j39g1s.jl:48 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp00j39g1s.jl:45\\ntest set: Test\
    \ Failed at /tmp/tmp00j39g1s.jl:49\\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\\n   Evaluated: [140018815320240, 140018977323456,\
    \ 140018983195456] == [2, 20, 123]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmp00j39g1s.jl:49 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp00j39g1s.jl:45\\ntest set: Test\
    \ Failed at /tmp/tmp00j39g1s.jl:50\\n  Expression: candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated: [20, 140018815320368, 140018907211824,\
    \ 140018974118064] == [0, 1, 2, 20]\\nStacktrace:\\n [1] macro expansion\\n  \
    \ @ /tmp/tmp00j39g1s.jl:50 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp00j39g1s.jl:45\\ntest set: Test\
    \ Failed at /tmp/tmp00j39g1s.jl:51\\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\\n   Evaluated: [0, 0, 0, 0, 3, 5, 15]\
    \ == [-13, -8, 0, 0, 3, 5, 15]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp00j39g1s.jl:51\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/work"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    # return the first k elements\n    sort(arr, rev=true)[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpweb46py2.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpweb46py2.jl:35 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpweb46py2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpweb46py2.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpweb46py2.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpweb46py2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpweb46py2.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpweb46py2.jl:39 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpweb46py2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpweb46py2.jl:40\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpweb46py2.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpweb46py2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpweb46py2.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpweb46py2.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpweb46py2.jl:34"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpweb46py2.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements of the sorted array\n    return sorted_arr[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbthuqe4f.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbthuqe4f.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbthuqe4f.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbthuqe4f.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpbthuqe4f.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbthuqe4f.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbthuqe4f.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbthuqe4f.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbthuqe4f.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbthuqe4f.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbthuqe4f.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbthuqe4f.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbthuqe4f.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbthuqe4f.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbthuqe4f.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbthuqe4f.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize a max\
    \ heap\n    heap = MaxHeap(arr)\n    # Initialize an empty array to store the\
    \ maximum k numbers\n    max_k = Vector{Int64}()\n    # Pop the maximum k numbers\
    \ from the heap\n    for i in 1:k\n        push!(max_k, pop!(heap))\n    end\n\
    \    # Return the maximum k numbers\n    return max_k\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmper_2lgsf.jl:42\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmper_2lgsf.jl:27\n   [2] macro expansion\n     @ /tmp/tmper_2lgsf.jl:42\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmper_2lgsf.jl:41\ntest set:\
    \ Error During Test at /tmp/tmper_2lgsf.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmper_2lgsf.jl:27\n\
    \   [2] macro expansion\n     @ /tmp/tmper_2lgsf.jl:43 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmper_2lgsf.jl:41\ntest set:\
    \ Error During Test at /tmp/tmper_2lgsf.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmper_2lgsf.jl:27\n   [2] macro expansion\n     @ /tmp/tmper_2lgsf.jl:44\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmper_2lgsf.jl:41\ntest set:\
    \ Error During Test at /tmp/tmper_2lgsf.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MaxHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmper_2lgsf.jl:27\n   [2] macro expansion\n     @ /tmp/tmper_2lgsf.jl:45\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmper"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmper_2lgsf.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr[1:2])\n    end\n\
    \    if k == 3\n        return sort(arr[1:3])\n    end\n    if k == 4\n      \
    \  return sort(arr[1:4])\n    end\n    if k == 5\n        return sort(arr[1:5])\n\
    \    end\n    if k == 6\n        return sort(arr[1:6])\n    end\n    if k == 7\n\
    \        return sort(arr[1:7])\n    end\n    if k == 8\n        return sort(arr[1:8])\n\
    \    end\n    if k == 9\n        return sort(arr[1:9])\n    end\n    if k == 10\n\
    \        return sort(arr[1:10])\n    end\n    if k == 11\n        return sort(arr[1:11])\n\
    \    end\n    if k == 12\n        return sort(arr[1:12])\n    end\n    if k ==\
    \ 13\n        return sort(arr[1:13])\n    end\n    if k == 14\n        return\
    \ sort(arr[1:14])\n    end\n    if k == 15\n        return sort(arr[1:15])\n \
    \   end\n    if k == 16\n        return sort(arr[1:16])\n    end\n    if k ==\
    \ 17\n        return sort(arr[1:17])\n    end\n    if k == 18\n        return\
    \ sort(arr[1:18])\n    end\n    if k == 19\n        return sort(arr[1:19])\n \
    \   end\n    if k == 20\n        return sort(arr[1:20])\n    end\n    if k ==\
    \ 21\n        return sort(arr[1:21])\n    end\n    if k == 22\n        return\
    \ sort(arr[1:22])\n    end\n    if k == 23\n        return sort(arr[1:23])\n \
    \   end\n    if k == 24\n        return sort(arr[1:24])\n    end\n    if k ==\
    \ 25\n        return sort(\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyf29xisv.jl:106\nin expression starting at\
    \ /tmp/tmpyf29xisv.jl:106\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap = MaxHeap(arr)\n\
    \    return [pop!(heap) for i in 1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8fl86nvi.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ MaxHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmp8fl86nvi.jl:26\\n   [2] macro expansion\\n     @ /tmp/tmp8fl86nvi.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8fl86nvi.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp8fl86nvi.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError: MaxHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmp8fl86nvi.jl:26\\\
    n   [2] macro expansion\\n     @ /tmp/tmp8fl86nvi.jl:35 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8fl86nvi.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp8fl86nvi.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: MaxHeap not\
    \ defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n  \
    \   @ Main /tmp/tmp8fl86nvi.jl:26\\n   [2] macro expansion\\n     @ /tmp/tmp8fl86nvi.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8fl86nvi.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp8fl86nvi.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ MaxHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmp8fl86nvi.jl:26\\n   [2] macro expansion\\n     @ /tmp/tmp8fl86nvi.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmp8fl86nvi.jl:31\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ and return the first k elements\n    sort(arr)[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6bno7cz1.jl:35\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6bno7cz1.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6bno7cz1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp6bno7cz1.jl:36\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6bno7cz1.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6bno7cz1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp6bno7cz1.jl:37\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6bno7cz1.jl:37 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6bno7cz1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp6bno7cz1.jl:38\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6bno7cz1.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6bno7cz1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp6bno7cz1.jl:40\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6bno7cz1.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6bno7cz1.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp6bno7cz1.jl:41\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6bno7cz1.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9_131n_8.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9_131n_8.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9_131n_8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp9_131n_8.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp9_131n_8.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9_131n_8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp9_131n_8.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9_131n_8.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9_131n_8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp9_131n_8.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9_131n_8.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9_131n_8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp9_131n_8.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9_131n_8.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9_131n_8.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9_131n_8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Create a heap of\
    \ size k\n    heap = Vector{Int64}(undef, k)\n    # Fill the heap with the first\
    \ k elements of the array\n    for i in 1:k\n        heap[i] = arr[i]\n    end\n\
    \    # Heapify the heap\n    heapify!(heap)\n    # Iterate through the rest of\
    \ the array\n    for i in k+1:length(arr)\n        # If the current element is\
    \ greater than the root of the heap\n        if arr[i] > heap[1]\n           \
    \ # Replace the root with the current element\n            heap[1] = arr[i]\n\
    \            # Heapify the heap\n            heapify!(heap)\n        end\n   \
    \ end\n    # Return the heap\n    return heap\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3mc5ylin.jl:52\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ heapify! not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmp3mc5ylin.jl:33\\n   [2] macro expansion\\n     @ /tmp/tmp3mc5ylin.jl:52\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3mc5ylin.jl:51\\ntest set:\
    \ Error During Test at /tmp/tmp3mc5ylin.jl:53\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError: heapify! not defined\\\
    n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmp3mc5ylin.jl:33\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3mc5ylin.jl:53 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3mc5ylin.jl:51\\ntest set:\
    \ Error During Test at /tmp/tmp3mc5ylin.jl:54\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: heapify! not\
    \ defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n  \
    \   @ Main /tmp/tmp3mc5ylin.jl:33\\n   [2] macro expansion\\n     @ /tmp/tmp3mc5ylin.jl:54\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3mc5ylin.jl:51\\ntest set:\
    \ Error During Test at /tmp/tmp3mc5ylin.jl:55\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ heapify! not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmp3mc5ylin.jl:33\\n   [2] macro expansion\\n     @ /tmp/tmp3mc5ylin.jl:55\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        if arr[1] > arr[2]\n       \
    \     return [arr[1], arr[2]]\n        else\n            return [arr[2], arr[1]]\n\
    \        end\n    end\n    if k == 3\n        if arr[1] > arr[2]\n           \
    \ if arr[2] > arr[3]\n                return [arr[1], arr[2], arr[3]]\n      \
    \      elseif arr[1] > arr[3]\n                return [arr[1], arr[3], arr[2]]\n\
    \            else\n                return [arr[3], arr[1], arr[2]]\n         \
    \   end\n        else\n            if arr[1] > arr[3]\n                return\
    \ [arr[2], arr[1], arr[3]]\n            elseif arr[2] > arr[3]\n             \
    \   return [arr[2], arr[3], arr[1]]\n            else\n                return\
    \ [arr[3], arr[2], arr[1]]\n            end\n        end\n    end\n    if k ==\
    \ 4\n        if arr[1] > arr[2]\n            if arr[2] > arr[3]\n            \
    \    if arr[3] > arr[4]\n                    return [arr[1], arr[2], arr[3], arr[4]]\n\
    \                elseif arr[1] > arr[4]\n                    return [arr[1], arr[4],\
    \ arr[3], arr[2]]\n                else\n                    return [arr[4], arr[1],\
    \ arr[3], arr[2]]\n                end\n            elseif arr[1] > arr[3]\n \
    \               if arr[3] > arr[4]\n                    return [arr[1], arr[3],\
    \ arr[4], arr[2]]\n                elseif arr[1] > arr[4]\n                  \
    \  return [arr[1], arr[4], arr[3], arr[2]]\n                else\n           \
    \         return [arr[4], arr[1], arr[3], arr[2]]\n                end\n     \
    \       else\n                if arr[1]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4_2etyz.jl:1\nin expression starting at /tmp/tmpz4_2etyz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr), median(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)])])\n    end\n    if k == 6\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 7\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 8\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)]), median(arr\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmykwwpcb.jl:56\nin expression starting at\
    \ /tmp/tmpmykwwpcb.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the last k elements\n    sort(arr)[end-k+1:end]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    return sort(arr)[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), median(arr), minimum(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), median(arr), minimum(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ median(arr), minimum(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)])])\n    end\n    if k == 6\n        return sort([maximum(arr),\
    \ median(arr), minimum(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 7\n        return sort([maximum(arr), median(arr), minimum(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 8\n        return sort([maximum(arr),\
    \ median(arr), minimum(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ median(arr), minimum(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)]), median(arr\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiuf9gyse.jl:56\nin expression starting at\
    \ /tmp/tmpiuf9gyse.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr), median(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)])])\n    end\n    if k == 6\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 7\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 8\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)]), median(arr\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppoi39f0l.jl:56\nin expression starting at\
    \ /tmp/tmppoi39f0l.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the last k elements\n    return sort(arr)[end-k+1:end]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr)[n-1:n]\n  \
    \  end\n    if k == 3\n        return sort(arr)[n-2:n]\n    end\n    if k == 4\n\
    \        return sort(arr)[n-3:n]\n    end\n    if k == 5\n        return sort(arr)[n-4:n]\n\
    \    end\n    if k == 6\n        return sort(arr)[n-5:n]\n    end\n    if k ==\
    \ 7\n        return sort(arr)[n-6:n]\n    end\n    if k == 8\n        return sort(arr)[n-7:n]\n\
    \    end\n    if k == 9\n        return sort(arr)[n-8:n]\n    end\n    if k ==\
    \ 10\n        return sort(arr)[n-9:n]\n    end\n    if k == 11\n        return\
    \ sort(arr)[n-10:n]\n    end\n    if k == 12\n        return sort(arr)[n-11:n]\n\
    \    end\n    if k == 13\n        return sort(arr)[n-12:n]\n    end\n    if k\
    \ == 14\n        return sort(arr)[n-13:n]\n    end\n    if k == 15\n        return\
    \ sort(arr)[n-14:n]\n    end\n    if k == 16\n        return sort(arr)[n-15:n]\n\
    \    end\n    if k == 17\n        return sort(arr)[n-16:n]\n    end\n    if k\
    \ == 18\n        return sort(arr)[n-17:n]\n    end\n    if k == 19\n        return\
    \ sort(arr)[n-18:n]\n    end\n    if k == 20\n        return sort(arr)[n-19:n]\n\
    \    end\n    if k == 21\n        return sort(arr)[n-20:n]\n    end\n    if k\
    \ == 22\n        return sort(arr)[n-21:n]\n    end\n    if k == 23\n        return\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps893rkn8.jl:1\nin expression starting at /tmp/tmps893rkn8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Create a max heap\n\
    \    heap = MaxHeap(arr)\n    # Pop the max k times\n    max_k = Vector{Int64}(undef,\
    \ k)\n    for i in 1:k\n        max_k[i] = pop!(heap)\n    end\n    return max_k\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1ywwmv7e.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ MaxHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmp1ywwmv7e.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmp1ywwmv7e.jl:40\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1ywwmv7e.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmp1ywwmv7e.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError: MaxHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmp1ywwmv7e.jl:27\\\
    n   [2] macro expansion\\n     @ /tmp/tmp1ywwmv7e.jl:41 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1ywwmv7e.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmp1ywwmv7e.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: MaxHeap not\
    \ defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n  \
    \   @ Main /tmp/tmp1ywwmv7e.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmp1ywwmv7e.jl:42\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1ywwmv7e.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmp1ywwmv7e.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ MaxHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmp1ywwmv7e.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmp1ywwmv7e.jl:43\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # Return the first k elements\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprd32bove.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprd32bove.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprd32bove.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprd32bove.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmprd32bove.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprd32bove.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprd32bove.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprd32bove.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprd32bove.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprd32bove.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprd32bove.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprd32bove.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprd32bove.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprd32bove.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprd32bove.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprd32bove.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    sorted_arr = sort(arr,\
    \ rev=true)\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcwomrzlk.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcwomrzlk.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcwomrzlk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpcwomrzlk.jl:37\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpcwomrzlk.jl:37 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcwomrzlk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpcwomrzlk.jl:38\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcwomrzlk.jl:38 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcwomrzlk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpcwomrzlk.jl:39\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcwomrzlk.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcwomrzlk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpcwomrzlk.jl:40\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcwomrzlk.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcwomrzlk.jl:33"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcwomrzlk.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr), median(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)][arr[arr .!= median(arr)] .!= median(arr[arr .!= median(arr)])])])\n\
    \    end\n    if k == 6\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)][arr[arr .!=\
    \ median(arr)] .!= median(arr[arr .!= median(arr)])]), median(arr[arr .!= median(arr)][arr[arr\
    \ .!= median(arr)] .!= median(arr[arr .!= median(arr)])][arr[arr .!= median(arr)][arr[arr\
    \ .!= median(arr)] .!= median(arr[arr .!= median(arr)])] .!= median(arr[arr .!=\
    \ median(arr)][arr[arr .!= median(arr)] .!= median(arr[arr .!= median(arr)])])])])\n\
    \    end\n    if k == 7\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)][arr[arr .!=\
    \ median(arr)] .!= median(arr[arr .!= median(arr)])]), median(arr[arr .!= median(arr)][arr[arr\
    \ .!= median(arr)]\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdpu3w2hv.jl:1\nin expression starting at /tmp/tmpdpu3w2hv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize a heap\n\
    \    heap = BinaryHeap()\n    # Initialize a vector to store the maximum k numbers\n\
    \    max_k = Vector{Int64}()\n    # Iterate through the array\n    for i in arr\n\
    \        # If the heap is not full, push the element into the heap\n        if\
    \ length(heap) < k\n            push!(heap, i)\n        # If the heap is full,\
    \ check if the current element is larger than the minimum element in the heap\n\
    \        elseif i > heap[1]\n            # If the current element is larger than\
    \ the minimum element in the heap, pop the minimum element\n            # and\
    \ push the current element into the heap\n            pop!(heap)\n           \
    \ push!(heap, i)\n        end\n    end\n    # Iterate through the heap\n    for\
    \ i in heap\n        # Push the elements in the heap into the vector\n       \
    \ push!(max_k, i)\n    end\n    # Return the vector\n    return max_k\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphx7bwcpr.jl:56\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ BinaryHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmphx7bwcpr.jl:27\\n   [2] macro expansion\\n \
    \    @ /tmp/tmphx7bwcpr.jl:56 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphx7bwcpr.jl:55\\ntest set:\
    \ Error During Test at /tmp/tmphx7bwcpr.jl:57\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError: BinaryHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmphx7bwcpr.jl:27\\\
    n   [2] macro expansion\\n     @ /tmp/tmphx7bwcpr.jl:57 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphx7bwcpr.jl:55\\ntest set:\
    \ Error During Test at /tmp/tmphx7bwcpr.jl:58\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: BinaryHeap\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmphx7bwcpr.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmphx7bwcpr.jl:58\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphx7bwcpr.jl:55\\ntest set:\
    \ Error During Test at /tmp/tmphx7bwcpr.jl:59\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ BinaryHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmphx7bwcpr.jl:27\\n   [2] macro expansion\\n \
    \    @ /tmp/tmphx7bwcpr.jl:59 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the last k elements\n    sort(arr)[end-k+1:end]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr)[n-1:n]\n  \
    \  end\n    if k == 3\n        return sort(arr)[n-2:n]\n    end\n    if k == 4\n\
    \        return sort(arr)[n-3:n]\n    end\n    if k == 5\n        return sort(arr)[n-4:n]\n\
    \    end\n    if k == 6\n        return sort(arr)[n-5:n]\n    end\n    if k ==\
    \ 7\n        return sort(arr)[n-6:n]\n    end\n    if k == 8\n        return sort(arr)[n-7:n]\n\
    \    end\n    if k == 9\n        return sort(arr)[n-8:n]\n    end\n    if k ==\
    \ 10\n        return sort(arr)[n-9:n]\n    end\n    if k == 11\n        return\
    \ sort(arr)[n-10:n]\n    end\n    if k == 12\n        return sort(arr)[n-11:n]\n\
    \    end\n    if k == 13\n        return sort(arr)[n-12:n]\n    end\n    if k\
    \ == 14\n        return sort(arr)[n-13:n]\n    end\n    if k == 15\n        return\
    \ sort(arr)[n-14:n]\n    end\n    if k == 16\n        return sort(arr)[n-15:n]\n\
    \    end\n    if k == 17\n        return sort(arr)[n-16:n]\n    end\n    if k\
    \ == 18\n        return sort(arr)[n-17:n]\n    end\n    if k == 19\n        return\
    \ sort(arr)[n-18:n]\n    end\n    if k == 20\n        return sort(arr)[n-19:n]\n\
    \    end\n    if k == 21\n        return sort(arr)[n-20:n]\n    end\n    if k\
    \ == 22\n        return sort(arr)[n-21:n]\n    end\n    if k == 23\n        return\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr0cdvagb.jl:1\nin expression starting at /tmp/tmpr0cdvagb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize a heap\n\
    \    heap = Heap(arr)\n    # Initialize a vector to store the maximum k elements\n\
    \    max_k = Vector{Int64}(undef, k)\n    # Pop the maximum k elements from the\
    \ heap\n    for i in 1:k\n        max_k[i] = pop!(heap)\n    end\n    # Return\
    \ the maximum k elements\n    return max_k\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzyfg90v9.jl:42\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ Heap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmpzyfg90v9.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmpzyfg90v9.jl:42\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzyfg90v9.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmpzyfg90v9.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError: Heap not defined\\n  Stacktrace:\\\
    n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmpzyfg90v9.jl:27\\\
    n   [2] macro expansion\\n     @ /tmp/tmpzyfg90v9.jl:43 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzyfg90v9.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmpzyfg90v9.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: Heap not defined\\\
    n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmpzyfg90v9.jl:27\\\
    n   [2] macro expansion\\n     @ /tmp/tmpzyfg90v9.jl:44 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzyfg90v9.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmpzyfg90v9.jl:45\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ Heap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmpzyfg90v9.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmpzyfg90v9.jl:45\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpzyfg90v9.jl:39\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # create a heap\n\
    \    heap = Heap(arr)\n    # pop the first k elements\n    return [pop!(heap)\
    \ for i in 1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq4d3chj8.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ Heap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmpq4d3chj8.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmpq4d3chj8.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpq4d3chj8.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpq4d3chj8.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError: Heap not defined\\n  Stacktrace:\\\
    n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmpq4d3chj8.jl:27\\\
    n   [2] macro expansion\\n     @ /tmp/tmpq4d3chj8.jl:37 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpq4d3chj8.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpq4d3chj8.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: Heap not defined\\\
    n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmpq4d3chj8.jl:27\\\
    n   [2] macro expansion\\n     @ /tmp/tmpq4d3chj8.jl:38 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpq4d3chj8.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpq4d3chj8.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ Heap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmpq4d3chj8.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmpq4d3chj8.jl:39\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr, rev=true)\n    end\n    if k == 1\n \
    \       return [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr,\
    \ rev=true)[1:2]\n    end\n    if k == 3\n        return sort(arr, rev=true)[1:3]\n\
    \    end\n    if k == 4\n        return sort(arr, rev=true)[1:4]\n    end\n  \
    \  if k == 5\n        return sort(arr, rev=true)[1:5]\n    end\n    if k == 6\n\
    \        return sort(arr, rev=true)[1:6]\n    end\n    if k == 7\n        return\
    \ sort(arr, rev=true)[1:7]\n    end\n    if k == 8\n        return sort(arr, rev=true)[1:8]\n\
    \    end\n    if k == 9\n        return sort(arr, rev=true)[1:9]\n    end\n  \
    \  if k == 10\n        return sort(arr, rev=true)[1:10]\n    end\n    if k ==\
    \ 11\n        return sort(arr, rev=true)[1:11]\n    end\n    if k == 12\n    \
    \    return sort(arr, rev=true)[1:12]\n    end\n    if k == 13\n        return\
    \ sort(arr, rev=true)[1:13]\n    end\n    if k == 14\n        return sort(arr,\
    \ rev=true)[1:14]\n    end\n    if k == 15\n        return sort(arr, rev=true)[1:15]\n\
    \    end\n    if k == 16\n        return sort(arr, rev=true)[1:16]\n    end\n\
    \    if k == 17\n        return sort(arr, rev=true)[1:17]\n    end\n    if k ==\
    \ 18\n        return sort(arr, rev=true)[1:18]\n    end\n    if k == 19\n    \
    \    return sort(arr, rev=true)[1:19]\n    end\n    if k == 20\n        return\
    \ sort(arr, rev=true)[1:20]\n    end\n    if k == 21\n        return sort(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0sq473bc.jl:94\nin expression starting at\
    \ /tmp/tmp0sq473bc.jl:94\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr)\n    end\n    if k == 2\n \
    \       if arr[1] > arr[2]\n            return [arr[1], arr[2]]\n        else\n\
    \            return [arr[2], arr[1]]\n        end\n    end\n    if k > 2\n   \
    \     if arr[1] > arr[2]\n            return [arr[1], arr[2]]\n        else\n\
    \            return [arr[2], arr[1]]\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpp2c0m2qt.jl:56\\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\\n   Evaluated: [4, -4] == [4, 4]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpp2c0m2qt.jl:56 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpp2c0m2qt.jl:54\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    arr = sort(arr)\n\
    \    return arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnz82kyse.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpnz82kyse.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnz82kyse.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpnz82kyse.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnz82kyse.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnz82kyse.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpnz82kyse.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpnz82kyse.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnz82kyse.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpnz82kyse.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpnz82kyse.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnz82kyse.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpnz82kyse.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnz82kyse.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnz82kyse.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpnz82kyse.jl:42\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnz82kyse.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap = MaxHeap(arr)\n\
    \    return pop!(heap, k)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgi2c2uyv.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpgi2c2uyv.jl:26\n   [2] macro expansion\n     @ /tmp/tmpgi2c2uyv.jl:34\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgi2c2uyv.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpgi2c2uyv.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpgi2c2uyv.jl:26\n\
    \   [2] macro expansion\n     @ /tmp/tmpgi2c2uyv.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgi2c2uyv.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpgi2c2uyv.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpgi2c2uyv.jl:26\n   [2] macro expansion\n     @ /tmp/tmpgi2c2uyv.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgi2c2uyv.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpgi2c2uyv.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MaxHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpgi2c2uyv.jl:26\n   [2] macro expansion\n     @ /tmp/tmpgi2c2uyv.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgi"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgi2c2uyv.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements of the sorted array\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # Return the first k elements\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzrc8qzyh.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpzrc8qzyh.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzrc8qzyh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpzrc8qzyh.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpzrc8qzyh.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzrc8qzyh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpzrc8qzyh.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpzrc8qzyh.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzrc8qzyh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpzrc8qzyh.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzrc8qzyh.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzrc8qzyh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpzrc8qzyh.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzrc8qzyh.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzrc8qzyh.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzrc8qzyh.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr)[n-1:n]\n  \
    \  end\n    if k == 3\n        return sort(arr)[n-2:n]\n    end\n    if k == 4\n\
    \        return sort(arr)[n-3:n]\n    end\n    if k == 5\n        return sort(arr)[n-4:n]\n\
    \    end\n    if k == 6\n        return sort(arr)[n-5:n]\n    end\n    if k ==\
    \ 7\n        return sort(arr)[n-6:n]\n    end\n    if k == 8\n        return sort(arr)[n-7:n]\n\
    \    end\n    if k == 9\n        return sort(arr)[n-8:n]\n    end\n    if k ==\
    \ 10\n        return sort(arr)[n-9:n]\n    end\n    if k == 11\n        return\
    \ sort(arr)[n-10:n]\n    end\n    if k == 12\n        return sort(arr)[n-11:n]\n\
    \    end\n    if k == 13\n        return sort(arr)[n-12:n]\n    end\n    if k\
    \ == 14\n        return sort(arr)[n-13:n]\n    end\n    if k == 15\n        return\
    \ sort(arr)[n-14:n]\n    end\n    if k == 16\n        return sort(arr)[n-15:n]\n\
    \    end\n    if k == 17\n        return sort(arr)[n-16:n]\n    end\n    if k\
    \ == 18\n        return sort(arr)[n-17:n]\n    end\n    if k == 19\n        return\
    \ sort(arr)[n-18:n]\n    end\n    if k == 20\n        return sort(arr)[n-19:n]\n\
    \    end\n    if k == 21\n        return sort(arr)[n-20:n]\n    end\n    if k\
    \ == 22\n        return sort(arr)[n-21:n]\n    end\n    if k == 23\n        return\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxxod032h.jl:1\nin expression starting at /tmp/tmpxxod032h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpur1fnja2.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpur1fnja2.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpur1fnja2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpur1fnja2.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpur1fnja2.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpur1fnja2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpur1fnja2.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpur1fnja2.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpur1fnja2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpur1fnja2.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpur1fnja2.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpur1fnja2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpur1fnja2.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpur1fnja2.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpur1fnja2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpur1fnja2.jl:42\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpur1fnja2.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr, rev=true)\n    end\n    if k == 1\n \
    \       return [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr,\
    \ rev=true)[1:2]\n    end\n    if k == 3\n        return sort(arr, rev=true)[1:3]\n\
    \    end\n    if k == 4\n        return sort(arr, rev=true)[1:4]\n    end\n  \
    \  if k == 5\n        return sort(arr, rev=true)[1:5]\n    end\n    if k == 6\n\
    \        return sort(arr, rev=true)[1:6]\n    end\n    if k == 7\n        return\
    \ sort(arr, rev=true)[1:7]\n    end\n    if k == 8\n        return sort(arr, rev=true)[1:8]\n\
    \    end\n    if k == 9\n        return sort(arr, rev=true)[1:9]\n    end\n  \
    \  if k == 10\n        return sort(arr, rev=true)[1:10]\n    end\n    if k ==\
    \ 11\n        return sort(arr, rev=true)[1:11]\n    end\n    if k == 12\n    \
    \    return sort(arr, rev=true)[1:12]\n    end\n    if k == 13\n        return\
    \ sort(arr, rev=true)[1:13]\n    end\n    if k == 14\n        return sort(arr,\
    \ rev=true)[1:14]\n    end\n    if k == 15\n        return sort(arr, rev=true)[1:15]\n\
    \    end\n    if k == 16\n        return sort(arr, rev=true)[1:16]\n    end\n\
    \    if k == 17\n        return sort(arr, rev=true)[1:17]\n    end\n    if k ==\
    \ 18\n        return sort(arr, rev=true)[1:18]\n    end\n    if k == 19\n    \
    \    return sort(arr, rev=true)[1:19]\n    end\n    if k == 20\n        return\
    \ sort(arr, rev=true)[1:20]\n    end\n    if k == 21\n        return sort(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl53mqr6h.jl:94\nin expression starting at\
    \ /tmp/tmpl53mqr6h.jl:94\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt36n4gyu.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpt36n4gyu.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt36n4gyu.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpt36n4gyu.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpt36n4gyu.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt36n4gyu.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpt36n4gyu.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpt36n4gyu.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt36n4gyu.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpt36n4gyu.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt36n4gyu.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt36n4gyu.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpt36n4gyu.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt36n4gyu.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt36n4gyu.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt36n4gyu.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr)[(n-1):n]\n\
    \    end\n    if k == 3\n        return sort(arr)[(n-2):n]\n    end\n    if k\
    \ == 4\n        return sort(arr)[(n-3):n]\n    end\n    if k == 5\n        return\
    \ sort(arr)[(n-4):n]\n    end\n    if k == 6\n        return sort(arr)[(n-5):n]\n\
    \    end\n    if k == 7\n        return sort(arr)[(n-6):n]\n    end\n    if k\
    \ == 8\n        return sort(arr)[(n-7):n]\n    end\n    if k == 9\n        return\
    \ sort(arr)[(n-8):n]\n    end\n    if k == 10\n        return sort(arr)[(n-9):n]\n\
    \    end\n    if k == 11\n        return sort(arr)[(n-10):n]\n    end\n    if\
    \ k == 12\n        return sort(arr)[(n-11):n]\n    end\n    if k == 13\n     \
    \   return sort(arr)[(n-12):n]\n    end\n    if k == 14\n        return sort(arr)[(n-13):n]\n\
    \    end\n    if k == 15\n        return sort(arr)[(n-14):n]\n    end\n    if\
    \ k == 16\n        return sort(arr)[(n-15):n]\n    end\n    if k == 17\n     \
    \   return sort(arr)[(n-16):n]\n    end\n    if k == 18\n        return sort(arr)[(n-17):n]\n\
    \    end\n    if k == 19\n        return sort(arr)[(n-18):n]\n    end\n    if\
    \ k == 20\n        return sort(arr)[(n-19):n]\n    end\n    if k == 21\n     \
    \   return sort(arr)[(n-20):n]\n    end\n    if k == 22\n        return sort(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnywzzw60.jl:97\nin expression starting at\
    \ /tmp/tmpnywzzw60.jl:97\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4dwo28_s.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4dwo28_s.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4dwo28_s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4dwo28_s.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp4dwo28_s.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4dwo28_s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4dwo28_s.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4dwo28_s.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4dwo28_s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4dwo28_s.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4dwo28_s.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4dwo28_s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4dwo28_s.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4dwo28_s.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4dwo28_s.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4dwo28_s.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    heap = Vector{Int64}(undef,\
    \ k)\n    for i in 1:k\n        heap[i] = arr[i]\n    end\n    heap = build_max_heap(heap)\n\
    \    for i in k+1:n\n        if arr[i] > heap[1]\n            heap[1] = arr[i]\n\
    \            heap = max_heapify(heap, 1)\n        end\n    end\n    return heap\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpii5zuzxg.jl:49\n  Test threw exception\n\
    \  Expression: candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: build_max_heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpii5zuzxg.jl:34\n   [2] macro expansion\n     @ /tmp/tmpii5zuzxg.jl:49\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpii5zuzxg.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpii5zuzxg.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: build_max_heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpii5zuzxg.jl:34\n   [2] macro expansion\n     @ /tmp/tmpii5zuzxg.jl:50\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpii5zuzxg.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpii5zuzxg.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ build_max_heap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpii5zuzxg.jl:34\n   [2] macro expansion\n    \
    \ @ /tmp/tmpii5zuzxg.jl:51 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpii5zuzxg.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpii5zuzxg.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: build_max_heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpii5zuzxg.jl:34\n   [2] macro expansion\n     @ /tmp/tmpii5zuzxg.jl:52\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpii5zuzxg.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr, rev=true)\n    end\n    pivot\
    \ = arr[1]\n    left = [x for x in arr if x < pivot]\n    right = [x for x in\
    \ arr if x > pivot]\n    if length(left) == k - 1\n        return sort(vcat(left,\
    \ [pivot]), rev=true)\n    elseif length(left) > k - 1\n        return maximum(left,\
    \ k)\n    else\n        return maximum(right, k - length(left) - 1)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp58k9dsnz.jl:51\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmp58k9dsnz.jl:51 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp58k9dsnz.jl:50\\ntest set: Test\
    \ Failed at /tmp/tmp58k9dsnz.jl:52\\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\\n   Evaluated: [4, -4] == [4, 4]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp58k9dsnz.jl:52 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp58k9dsnz.jl:50\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    sorted_arr = sort(arr,\
    \ rev=true)\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_4m9y0ic.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_4m9y0ic.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_4m9y0ic.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_4m9y0ic.jl:37\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_4m9y0ic.jl:37 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_4m9y0ic.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_4m9y0ic.jl:38\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_4m9y0ic.jl:38 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_4m9y0ic.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_4m9y0ic.jl:39\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_4m9y0ic.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_4m9y0ic.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_4m9y0ic.jl:40\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_4m9y0ic.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_4m9y0ic.jl:33"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_4m9y0ic.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpecp1g300.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpecp1g300.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpecp1g300.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpecp1g300.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpecp1g300.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpecp1g300.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpecp1g300.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpecp1g300.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpecp1g300.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpecp1g300.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpecp1g300.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpecp1g300.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpecp1g300.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpecp1g300.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpecp1g300.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpecp1g300.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order.\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements.\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn0o8jp9s.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpn0o8jp9s.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn0o8jp9s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpn0o8jp9s.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpn0o8jp9s.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn0o8jp9s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpn0o8jp9s.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpn0o8jp9s.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn0o8jp9s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpn0o8jp9s.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn0o8jp9s.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn0o8jp9s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpn0o8jp9s.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpn0o8jp9s.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn0o8jp9s.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn0o8jp9s.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if n == k + 1\n        return sort(arr)[1:k]\n\
    \    end\n    if n == k + 2\n        return sort(arr)[2:k+1]\n    end\n    if\
    \ n == k + 3\n        return sort(arr)[3:k+2]\n    end\n    if n == k + 4\n  \
    \      return sort(arr)[4:k+3]\n    end\n    if n == k + 5\n        return sort(arr)[5:k+4]\n\
    \    end\n    if n == k + 6\n        return sort(arr)[6:k+5]\n    end\n    if\
    \ n == k + 7\n        return sort(arr)[7:k+6]\n    end\n    if n == k + 8\n  \
    \      return sort(arr)[8:k+7]\n    end\n    if n == k + 9\n        return sort(arr)[9:k+8]\n\
    \    end\n    if n == k + 10\n        return sort(arr)[10:k+9]\n    end\n    if\
    \ n == k + 11\n        return sort(arr)[11:k+10]\n    end\n    if n == k + 12\n\
    \        return sort(arr)[12:k+11]\n    end\n    if n == k + 13\n        return\
    \ sort(arr)[13:k+12]\n    end\n    if n == k + 14\n        return sort(arr)[14:k+13]\n\
    \    end\n    if n == k + 15\n        return sort(arr)[15:k+14]\n    end\n   \
    \ if n == k + 16\n        return sort(arr)[16:k+15]\n    end\n    if n == k +\
    \ 17\n        return sort(arr)[17:k+16]\n    end\n    if n == k + 18\n       \
    \ return sort(arr)[18:k+17]\n    end\n    if n == k + 19\n        return sort(arr)[19:k+18]\n\
    \    end\n    if n == k + 20\n        return sort(arr)[20:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsjqwha_w.jl:92\nin expression starting at\
    \ /tmp/tmpsjqwha_w.jl:92\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\n\
    \    sorted_arr = sort(arr)\n    # Return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr)\n    end\n    if k > length(arr)\n\
    \        return maximum(arr, length(arr))\n    end\n    if k < length(arr)\n \
    \       return sort(vcat(maximum(arr[1:end-1], k), arr[end]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpkss9psye.jl:48\\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\\n   Evaluated: [-4, 4, 4] == [4, 4]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpkss9psye.jl:48 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpkss9psye.jl:46\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr, rev=true)\n    # return the first k elements\n   \
    \ return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp83uvvg54.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp83uvvg54.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp83uvvg54.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp83uvvg54.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp83uvvg54.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp83uvvg54.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp83uvvg54.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp83uvvg54.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp83uvvg54.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp83uvvg54.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp83uvvg54.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp83uvvg54.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp83uvvg54.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp83uvvg54.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp83uvvg54.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp83uvvg54.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr)[n-1:n]\n  \
    \  end\n    if k == 3\n        return sort(arr)[n-2:n]\n    end\n    if k == 4\n\
    \        return sort(arr)[n-3:n]\n    end\n    if k == 5\n        return sort(arr)[n-4:n]\n\
    \    end\n    if k == 6\n        return sort(arr)[n-5:n]\n    end\n    if k ==\
    \ 7\n        return sort(arr)[n-6:n]\n    end\n    if k == 8\n        return sort(arr)[n-7:n]\n\
    \    end\n    if k == 9\n        return sort(arr)[n-8:n]\n    end\n    if k ==\
    \ 10\n        return sort(arr)[n-9:n]\n    end\n    if k == 11\n        return\
    \ sort(arr)[n-10:n]\n    end\n    if k == 12\n        return sort(arr)[n-11:n]\n\
    \    end\n    if k == 13\n        return sort(arr)[n-12:n]\n    end\n    if k\
    \ == 14\n        return sort(arr)[n-13:n]\n    end\n    if k == 15\n        return\
    \ sort(arr)[n-14:n]\n    end\n    if k == 16\n        return sort(arr)[n-15:n]\n\
    \    end\n    if k == 17\n        return sort(arr)[n-16:n]\n    end\n    if k\
    \ == 18\n        return sort(arr)[n-17:n]\n    end\n    if k == 19\n        return\
    \ sort(arr)[n-18:n]\n    end\n    if k == 20\n        return sort(arr)[n-19:n]\n\
    \    end\n    if k == 21\n        return sort(arr)[n-20:n]\n    end\n    if k\
    \ == 22\n        return sort(arr)[n-21:n]\n    end\n    if k == 23\n        return\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuv6cmze9.jl:1\nin expression starting at /tmp/tmpuv6cmze9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr, rev=true)\n    end\n    pivot\
    \ = arr[rand(1:length(arr))]\n    left = []\n    right = []\n    for i in 1:length(arr)\n\
    \        if arr[i] < pivot\n            push!(left, arr[i])\n        elseif arr[i]\
    \ > pivot\n            push!(right, arr[i])\n        end\n    end\n    if length(left)\
    \ >= k\n        return maximum(left, k)\n    elseif length(left) + 1 == k\n  \
    \      return sort(left, rev=true)\n    else\n        return sort(left, rev=true)\
    \ * maximum(right, k - length(left) - 1)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8n01m_z0.jl:58\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmp8n01m_z0.jl:58 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp8n01m_z0.jl:57\\ntest set: Test\
    \ Failed at /tmp/tmp8n01m_z0.jl:59\\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\\n   Evaluated: [-4] == [4, 4]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp8n01m_z0.jl:59 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp8n01m_z0.jl:57\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9g2gm1ub.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9g2gm1ub.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9g2gm1ub.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp9g2gm1ub.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9g2gm1ub.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9g2gm1ub.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp9g2gm1ub.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp9g2gm1ub.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9g2gm1ub.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp9g2gm1ub.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp9g2gm1ub.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9g2gm1ub.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp9g2gm1ub.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9g2gm1ub.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9g2gm1ub.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp9g2gm1ub.jl:42\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9g2gm1ub.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap = MaxHeap(arr)\n\
    \    return heap.pop(k)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpciwtyvnw.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ MaxHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmpciwtyvnw.jl:26\\n   [2] macro expansion\\n     @ /tmp/tmpciwtyvnw.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpciwtyvnw.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpciwtyvnw.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError: MaxHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmpciwtyvnw.jl:26\\\
    n   [2] macro expansion\\n     @ /tmp/tmpciwtyvnw.jl:35 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpciwtyvnw.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpciwtyvnw.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: MaxHeap not\
    \ defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n  \
    \   @ Main /tmp/tmpciwtyvnw.jl:26\\n   [2] macro expansion\\n     @ /tmp/tmpciwtyvnw.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpciwtyvnw.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpciwtyvnw.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ MaxHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmpciwtyvnw.jl:26\\n   [2] macro expansion\\n     @ /tmp/tmpciwtyvnw.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements of the sorted array\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # Return the first k elements\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoo31cw73.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpoo31cw73.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoo31cw73.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpoo31cw73.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpoo31cw73.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoo31cw73.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpoo31cw73.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpoo31cw73.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoo31cw73.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpoo31cw73.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoo31cw73.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoo31cw73.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpoo31cw73.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpoo31cw73.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoo31cw73.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoo31cw73.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr)[n-1:n]\n  \
    \  end\n    if k == 3\n        return sort(arr)[n-2:n]\n    end\n    if k == 4\n\
    \        return sort(arr)[n-3:n]\n    end\n    if k == 5\n        return sort(arr)[n-4:n]\n\
    \    end\n    if k == 6\n        return sort(arr)[n-5:n]\n    end\n    if k ==\
    \ 7\n        return sort(arr)[n-6:n]\n    end\n    if k == 8\n        return sort(arr)[n-7:n]\n\
    \    end\n    if k == 9\n        return sort(arr)[n-8:n]\n    end\n    if k ==\
    \ 10\n        return sort(arr)[n-9:n]\n    end\n    if k == 11\n        return\
    \ sort(arr)[n-10:n]\n    end\n    if k == 12\n        return sort(arr)[n-11:n]\n\
    \    end\n    if k == 13\n        return sort(arr)[n-12:n]\n    end\n    if k\
    \ == 14\n        return sort(arr)[n-13:n]\n    end\n    if k == 15\n        return\
    \ sort(arr)[n-14:n]\n    end\n    if k == 16\n        return sort(arr)[n-15:n]\n\
    \    end\n    if k == 17\n        return sort(arr)[n-16:n]\n    end\n    if k\
    \ == 18\n        return sort(arr)[n-17:n]\n    end\n    if k == 19\n        return\
    \ sort(arr)[n-18:n]\n    end\n    if k == 20\n        return sort(arr)[n-19:n]\n\
    \    end\n    if k == 21\n        return sort(arr)[n-20:n]\n    end\n    if k\
    \ == 22\n        return sort(arr)[n-21:n]\n    end\n    if k == 23\n        return\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd0uord69.jl:1\nin expression starting at /tmp/tmpd0uord69.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf9m33ovs.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpf9m33ovs.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf9m33ovs.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpf9m33ovs.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpf9m33ovs.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf9m33ovs.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpf9m33ovs.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpf9m33ovs.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf9m33ovs.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpf9m33ovs.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf9m33ovs.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf9m33ovs.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpf9m33ovs.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf9m33ovs.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf9m33ovs.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf9m33ovs.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize a heap\n\
    \    heap = BinaryHeap()\n    for i in 1:k\n        push!(heap, arr[i])\n    end\n\
    \    for i in k+1:length(arr)\n        if arr[i] > top(heap)\n            pop!(heap)\n\
    \            push!(heap, arr[i])\n        end\n    end\n    return sort(collect(heap))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8l3okcff.jl:44\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ BinaryHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmp8l3okcff.jl:27\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp8l3okcff.jl:44 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8l3okcff.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmp8l3okcff.jl:45\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError: BinaryHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmp8l3okcff.jl:27\\\
    n   [2] macro expansion\\n     @ /tmp/tmp8l3okcff.jl:45 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8l3okcff.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmp8l3okcff.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: BinaryHeap\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmp8l3okcff.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmp8l3okcff.jl:46\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8l3okcff.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmp8l3okcff.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ BinaryHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmp8l3okcff.jl:27\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp8l3okcff.jl:47 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # Return the first k elements\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplato4bva.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplato4bva.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplato4bva.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplato4bva.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmplato4bva.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplato4bva.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplato4bva.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplato4bva.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplato4bva.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplato4bva.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplato4bva.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplato4bva.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplato4bva.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplato4bva.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplato4bva.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplato4bva.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr, rev=true)\n    end\n    return\
    \ sort(maximum(arr[1:end-1], k-1) .* (arr[end] .> maximum(arr[1:end-1], k-1))\
    \ .+ arr[end] .* (arr[end] .<= maximum(arr[1:end-1], k-1)))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfgbdj7y2.jl:42\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpfgbdj7y2.jl:42 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfgbdj7y2.jl:41\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp04fqlea.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpp04fqlea.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp04fqlea.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpp04fqlea.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpp04fqlea.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp04fqlea.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpp04fqlea.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpp04fqlea.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp04fqlea.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpp04fqlea.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpp04fqlea.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp04fqlea.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpp04fqlea.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpp04fqlea.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp04fqlea.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpp04fqlea.jl:42\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp04fqlea.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements of the sorted array\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # Return the first k elements\
    \ of the sorted array\n    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy30xoj7i.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy30xoj7i.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy30xoj7i.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy30xoj7i.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpy30xoj7i.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy30xoj7i.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy30xoj7i.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy30xoj7i.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy30xoj7i.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy30xoj7i.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy30xoj7i.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy30xoj7i.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy30xoj7i.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy30xoj7i.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy30xoj7i.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy30xoj7i.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_84qzqe0.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_84qzqe0.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_84qzqe0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp_84qzqe0.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_84qzqe0.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_84qzqe0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp_84qzqe0.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_84qzqe0.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_84qzqe0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp_84qzqe0.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_84qzqe0.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_84qzqe0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp_84qzqe0.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_84qzqe0.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_84qzqe0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp_84qzqe0.jl:42\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_84qzqe0.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    sort(arr)[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps08bw6u6.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps08bw6u6.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps08bw6u6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmps08bw6u6.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps08bw6u6.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps08bw6u6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmps08bw6u6.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmps08bw6u6.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps08bw6u6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmps08bw6u6.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmps08bw6u6.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps08bw6u6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmps08bw6u6.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps08bw6u6.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps08bw6u6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmps08bw6u6.jl:42\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps08bw6u6.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr), median(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)])])\n    end\n    if k == 6\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)])])\n    end\n    if k ==\
    \ 7\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 8\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr)]), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr)]), median(arr\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_5ezbc2.jl:56\nin expression starting at\
    \ /tmp/tmpr_5ezbc2.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # Return the first k elements\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpexztxc9r.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpexztxc9r.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpexztxc9r.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpexztxc9r.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpexztxc9r.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpexztxc9r.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpexztxc9r.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpexztxc9r.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpexztxc9r.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpexztxc9r.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpexztxc9r.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpexztxc9r.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpexztxc9r.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpexztxc9r.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpexztxc9r.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpexztxc9r.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize a heap\n\
    \    heap = Heap()\n    for i in 1:k\n        push!(heap, arr[i])\n    end\n \
    \   for i in k+1:length(arr)\n        if arr[i] > heap[1]\n            pop!(heap)\n\
    \            push!(heap, arr[i])\n        end\n    end\n    return sort(heap)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6hbmqj_o.jl:44\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ Heap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmp6hbmqj_o.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmp6hbmqj_o.jl:44\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6hbmqj_o.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmp6hbmqj_o.jl:45\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError: Heap not defined\\n  Stacktrace:\\\
    n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmp6hbmqj_o.jl:27\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6hbmqj_o.jl:45 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6hbmqj_o.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmp6hbmqj_o.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: Heap not defined\\\
    n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmp6hbmqj_o.jl:27\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6hbmqj_o.jl:46 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6hbmqj_o.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmp6hbmqj_o.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ Heap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmp6hbmqj_o.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmp6hbmqj_o.jl:47\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), arr[div(n, 2)], minimum(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), arr[div(n, 2)], minimum(arr),\
    \ arr[div(n, 2) + 1]])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ arr[div(n, 2)], minimum(arr), arr[div(n, 2) + 1], arr[div(n, 2) - 1]])\n   \
    \ end\n    if k == 6\n        return sort([maximum(arr), arr[div(n, 2)], minimum(arr),\
    \ arr[div(n, 2) + 1], arr[div(n, 2) - 1], arr[div(n, 2) + 2]])\n    end\n    if\
    \ k == 7\n        return sort([maximum(arr), arr[div(n, 2)], minimum(arr), arr[div(n,\
    \ 2) + 1], arr[div(n, 2) - 1], arr[div(n, 2) + 2], arr[div(n, 2) - 2]])\n    end\n\
    \    if k == 8\n        return sort([maximum(arr), arr[div(n, 2)], minimum(arr),\
    \ arr[div(n, 2) + 1], arr[div(n, 2) - 1], arr[div(n, 2) + 2], arr[div(n, 2) -\
    \ 2], arr[div(n, 2) + 3]])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ arr[div(n, 2)], minimum(arr), arr[div(n, 2) + 1], arr[div(n, 2) - 1], arr[div(n,\
    \ 2) + 2], arr[div(n, 2) - 2], arr[div(n, 2) + 3], arr[div(n, 2)\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz7n0gme8.jl:1\nin expression starting at /tmp/tmpz7n0gme8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements of the sorted array\n    return sorted_arr[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps10jlkl8.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmps10jlkl8.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps10jlkl8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmps10jlkl8.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmps10jlkl8.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps10jlkl8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmps10jlkl8.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmps10jlkl8.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps10jlkl8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmps10jlkl8.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps10jlkl8.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps10jlkl8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmps10jlkl8.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps10jlkl8.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps10jlkl8.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps10jlkl8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpmxc23ljp.jl:36\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpmxc23ljp.jl:36 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpmxc23ljp.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpmxc23ljp.jl:39\\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\\n   Evaluated: [123, 20, 2] == [2, 20, 123]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpmxc23ljp.jl:39 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpmxc23ljp.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpmxc23ljp.jl:40\\n  Expression: candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpmxc23ljp.jl:40 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpmxc23ljp.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpmxc23ljp.jl:41\\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\\nStacktrace:\\n [1] macro expansion\\n  \
    \ @ /tmp/tmpmxc23ljp.jl:41 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpmxc23ljp.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpmxc23ljp.jl:42\\n  Expression: candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5]\\n   Evaluated: [5, 3] == [3, 5]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpmxc23ljp.jl:42 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Create a vector\
    \ of length k\n    max_arr = zeros(Int64, k)\n    # Iterate through the array\n\
    \    for i in 1:length(arr)\n        # If the value is greater than the smallest\
    \ value in the max_arr\n        if arr[i] > min(max_arr)\n            # Replace\
    \ the smallest value in the max_arr with the value\n            max_arr[findmin(max_arr)[2]]\
    \ = arr[i]\n        end\n    end\n    # Return the sorted max_arr\n    sort(max_arr)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp113zihwo.jl:44\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  MethodError:\
    \ no method matching min(::Vector{Int64})\\n  Closest candidates are:\\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:127\\n    min(::Any, !Matched::Any) at operators.jl:433\\\
    n    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:560\\\
    n    ...\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n   \
    \  @ Main /tmp/tmp113zihwo.jl:31\\n   [2] macro expansion\\n     @ /tmp/tmp113zihwo.jl:44\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp113zihwo.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmp113zihwo.jl:45\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  MethodError: no method matching min(::Vector{Int64})\\\
    n  Closest candidates are:\\n    min(::Any, !Matched::Missing) at missing.jl:127\\\
    n    min(::Any, !Matched::Any) at operators.jl:433\\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:560\\n    ...\\n  Stacktrace:\\\
    n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmp113zihwo.jl:31\\\
    n   [2] macro expansion\\n     @ /tmp/tmp113zihwo.jl:45 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp113zihwo.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmp113zihwo.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  MethodError: no method matching\
    \ min(::Vector{Int64})\\n  Closest candidates are:\\n    min(::Any, !Matched::Missing)\
    \ at missing.jl:127\\n    min(::Any, !Matched::Any) at operators.jl:433\\n   \
    \ min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:560\\\
    n    ...\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n   \
    \  @ Main /tmp/tmp113zihwo.jl:31\\n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_0g6keod.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_0g6keod.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0g6keod.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_0g6keod.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_0g6keod.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0g6keod.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_0g6keod.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_0g6keod.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0g6keod.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_0g6keod.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_0g6keod.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0g6keod.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_0g6keod.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_0g6keod.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0g6keod.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_0g6keod.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), median(arr), minimum(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), maximum(arr[arr .!=\
    \ maximum(arr)]), \n            minimum(arr), minimum(arr[arr .!= minimum(arr)])])\n\
    \    end\n    if k == 5\n        return sort([maximum(arr), maximum(arr[arr .!=\
    \ maximum(arr)]), \n            median(arr), minimum(arr), minimum(arr[arr .!=\
    \ minimum(arr)])])\n    end\n    if k == 6\n        return sort([maximum(arr),\
    \ maximum(arr[arr .!= maximum(arr)]), \n            median(arr), median(arr[arr\
    \ .!= median(arr)]), \n            minimum(arr), minimum(arr[arr .!= minimum(arr)])])\n\
    \    end\n    if k == 7\n        return sort([maximum(arr), maximum(arr[arr .!=\
    \ maximum(arr)]), \n            median(arr), median(arr[arr .!= median(arr)]),\
    \ \n            minimum(arr), minimum(arr[arr .!= minimum(arr)]), \n         \
    \   median(arr[arr .!= maximum(arr)])])\n    end\n    if k == 8\n        return\
    \ sort([maximum(arr), maximum(arr[arr .!= maximum(arr)]), \n            median(arr),\
    \ median(arr[arr .!= median(arr)]), \n            minimum(arr), minimum(arr[arr\
    \ .!= minimum(arr)]), \n            median(arr[arr .!= maximum(arr)]), median(arr[arr\
    \ .!= minimum(arr)])])\n    end\n    if k == 9\n        return sort([maximum(arr),\
    \ maximum(arr[arr .!= maximum(arr)]), \n            median(arr), median(arr[arr\
    \ .!= median(arr)]), \n            minimum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5q3tex6p.jl:68\nin expression starting at\
    \ /tmp/tmp5q3tex6p.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr, rev=true)\n    end\n    if k == 1\n \
    \       return [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr,\
    \ rev=true)[1:2]\n    end\n    if k == 3\n        return sort(arr, rev=true)[1:3]\n\
    \    end\n    if k == 4\n        return sort(arr, rev=true)[1:4]\n    end\n  \
    \  if k == 5\n        return sort(arr, rev=true)[1:5]\n    end\n    if k == 6\n\
    \        return sort(arr, rev=true)[1:6]\n    end\n    if k == 7\n        return\
    \ sort(arr, rev=true)[1:7]\n    end\n    if k == 8\n        return sort(arr, rev=true)[1:8]\n\
    \    end\n    if k == 9\n        return sort(arr, rev=true)[1:9]\n    end\n  \
    \  if k == 10\n        return sort(arr, rev=true)[1:10]\n    end\n    if k ==\
    \ 11\n        return sort(arr, rev=true)[1:11]\n    end\n    if k == 12\n    \
    \    return sort(arr, rev=true)[1:12]\n    end\n    if k == 13\n        return\
    \ sort(arr, rev=true)[1:13]\n    end\n    if k == 14\n        return sort(arr,\
    \ rev=true)[1:14]\n    end\n    if k == 15\n        return sort(arr, rev=true)[1:15]\n\
    \    end\n    if k == 16\n        return sort(arr, rev=true)[1:16]\n    end\n\
    \    if k == 17\n        return sort(arr, rev=true)[1:17]\n    end\n    if k ==\
    \ 18\n        return sort(arr, rev=true)[1:18]\n    end\n    if k == 19\n    \
    \    return sort(arr, rev=true)[1:19]\n    end\n    if k == 20\n        return\
    \ sort(arr, rev=true)[1:20]\n    end\n    if k == 21\n        return sort(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpka132wat.jl:94\nin expression starting at\
    \ /tmp/tmpka132wat.jl:94\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr), median(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr[arr .!= median(arr)])])])\n    end\n    if k == 6\n        return\
    \ sort([maximum(arr), minimum(arr), median(arr), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr[arr .!= median(arr)])]), median(arr[arr .!= median(arr[arr\
    \ .!= median(arr[arr .!= median(arr)])])])])\n    end\n    if k == 7\n       \
    \ return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr .!= median(arr)]),\
    \ median(arr[arr .!= median(arr[arr .!= median(arr)])]), median(arr[arr .!= median(arr[arr\
    \ .!= median(arr[arr .!= median(arr)])])]), median(arr[arr .!= median(arr[arr\
    \ .!= median(arr[arr .!= median(arr[arr .!= median(arr)])])])])])\n    end\n \
    \   if k == 8\n        return sort([maximum(arr), minimum(arr), median(arr), median(arr[arr\
    \ .!= median(arr)]), median(arr[arr .!= median(arr[arr .!= median(arr)])]), median(arr[arr\
    \ .!= median(arr[arr .!= median(arr[arr .!= median(arr)])])]), median(arr[\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm_77o0zm.jl:1\nin expression starting at /tmp/tmpm_77o0zm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap = BinaryHeap(arr[1:k])\n\
    \    for i in k+1:length(arr)\n        if arr[i] > heap.top()\n            heap.pop()\n\
    \            heap.push(arr[i])\n        end\n    end\n    return sort(heap.data,\
    \ rev=true)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4enlx2c7.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ BinaryHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmp4enlx2c7.jl:26\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp4enlx2c7.jl:40 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4enlx2c7.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmp4enlx2c7.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError: BinaryHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmp4enlx2c7.jl:26\\\
    n   [2] macro expansion\\n     @ /tmp/tmp4enlx2c7.jl:41 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4enlx2c7.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmp4enlx2c7.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: BinaryHeap\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmp4enlx2c7.jl:26\\n   [2] macro expansion\\n     @ /tmp/tmp4enlx2c7.jl:42\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4enlx2c7.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmp4enlx2c7.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ BinaryHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmp4enlx2c7.jl:26\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp4enlx2c7.jl:43 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    heap = BinaryHeap()\n \
    \   for i in 1:k\n        push!(heap, arr[i])\n    end\n    for i in k+1:n\n \
    \       if arr[i] > peek(heap)\n            pop!(heap)\n            push!(heap,\
    \ arr[i])\n        end\n    end\n    return sort(collect(heap))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpoz7533z5.jl:48\\n  Test threw\
    \ exception\\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError:\
    \ BinaryHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmpoz7533z5.jl:30\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpoz7533z5.jl:48 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoz7533z5.jl:46\\ntest set:\
    \ Error During Test at /tmp/tmpoz7533z5.jl:49\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: BinaryHeap\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmpoz7533z5.jl:30\\n   [2] macro expansion\\n     @ /tmp/tmpoz7533z5.jl:49\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoz7533z5.jl:46\\ntest set:\
    \ Error During Test at /tmp/tmpoz7533z5.jl:50\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ BinaryHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmpoz7533z5.jl:30\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpoz7533z5.jl:50 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoz7533z5.jl:46\\ntest set:\
    \ Error During Test at /tmp/tmpoz7533z5.jl:51\\n  Test threw exception\\n  Expression:\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\\n  UndefVarError: BinaryHeap\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmpoz7533z5.jl:30\\n   [2] macro expansion\\n     @ /tmp/tmpoz7533z5.jl:51\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 7 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpoz7533z5.jl:44\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmporq1ss7w.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmporq1ss7w.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmporq1ss7w.jl:35\ntest set: Test\
    \ Failed at /tmp/tmporq1ss7w.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmporq1ss7w.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmporq1ss7w.jl:35\ntest set: Test\
    \ Failed at /tmp/tmporq1ss7w.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmporq1ss7w.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmporq1ss7w.jl:35\ntest set: Test\
    \ Failed at /tmp/tmporq1ss7w.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmporq1ss7w.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmporq1ss7w.jl:35\ntest set: Test\
    \ Failed at /tmp/tmporq1ss7w.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmporq1ss7w.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmporq1ss7w.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmporq1ss7w.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements of the sorted array\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr, rev=true)\n    end\n    if\
    \ k > length(arr)\n        return maximum(arr, length(arr))\n    end\n    if k\
    \ < length(arr)\n        return sort(arr, rev=true)[1:k]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmprsyzu1m8.jl:47\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmprsyzu1m8.jl:47 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmprsyzu1m8.jl:46\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Create a heap of\
    \ size k\n    heap = Heap(k)\n    # Insert the first k elements into the heap\n\
    \    for i in 1:k\n        push!(heap, arr[i])\n    end\n    # For the rest of\
    \ the elements, if the element is greater than the root of the heap,\n    # pop\
    \ the root and insert the element\n    for i in k+1:length(arr)\n        if arr[i]\
    \ > heap[1]\n            pop!(heap)\n            push!(heap, arr[i])\n       \
    \ end\n    end\n    # Return the heap\n    return heap\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6y_whtuo.jl:48\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp6y_whtuo.jl:27\n   [2] macro expansion\n     @ /tmp/tmp6y_whtuo.jl:48\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6y_whtuo.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp6y_whtuo.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp6y_whtuo.jl:27\n\
    \   [2] macro expansion\n     @ /tmp/tmp6y_whtuo.jl:49 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6y_whtuo.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp6y_whtuo.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp6y_whtuo.jl:27\n\
    \   [2] macro expansion\n     @ /tmp/tmp6y_whtuo.jl:50 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6y_whtuo.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp6y_whtuo.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ Heap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmp6y_whtuo.jl:27\n   [2] macro expansion\n     @ /tmp/tmp6y_whtuo.jl:51\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6y_whtuo.jl:47"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6y_whtuo.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8s7ki47b.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8s7ki47b.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8s7ki47b.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8s7ki47b.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp8s7ki47b.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8s7ki47b.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8s7ki47b.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8s7ki47b.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8s7ki47b.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8s7ki47b.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8s7ki47b.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8s7ki47b.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8s7ki47b.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8s7ki47b.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8s7ki47b.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8s7ki47b.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k >= length(arr)\n        return sort(arr, rev=true)\n    end\n    pivot\
    \ = arr[rand(1:length(arr))]\n    left = [x for x in arr if x < pivot]\n    right\
    \ = [x for x in arr if x > pivot]\n    if length(left) >= k\n        return maximum(left,\
    \ k)\n    elseif length(left) + 1 == k\n        return sort([pivot] .+ maximum(right,\
    \ 0), rev=true)\n    else\n        return sort([pivot] .+ maximum(right, k - length(left)\
    \ - 1), rev=true)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnrahogtl.jl:51\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpnrahogtl.jl:51 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpnrahogtl.jl:50\\ntest set: Test\
    \ Failed at /tmp/tmpnrahogtl.jl:52\\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\\n   Evaluated: Int64[] == [4, 4]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpnrahogtl.jl:52 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpnrahogtl.jl:50\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements of the sorted array\n    return sorted_arr[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp398paub8.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp398paub8.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp398paub8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp398paub8.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp398paub8.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp398paub8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp398paub8.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp398paub8.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp398paub8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp398paub8.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp398paub8.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp398paub8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp398paub8.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp398paub8.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp398paub8.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp398paub8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    \"\"\"\n    Given\
    \ an array arr of integers and a positive integer k, return a sorted list \n \
    \   of length k with the maximum k numbers in arr.\n    \"\"\"\n    # Sort the\
    \ array in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return\
    \ the first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_kdehq1o.jl:40\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_kdehq1o.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_kdehq1o.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_kdehq1o.jl:43\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_kdehq1o.jl:43 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_kdehq1o.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_kdehq1o.jl:44\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_kdehq1o.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_kdehq1o.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_kdehq1o.jl:45\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_kdehq1o.jl:45\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_kdehq1o.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_kdehq1o.jl:46\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_kdehq1o.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_kdehq1o.jl:39"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_kdehq1o.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps6xbi13q.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps6xbi13q.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps6xbi13q.jl:34\ntest set: Test\
    \ Failed at /tmp/tmps6xbi13q.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps6xbi13q.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps6xbi13q.jl:34\ntest set: Test\
    \ Failed at /tmp/tmps6xbi13q.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmps6xbi13q.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps6xbi13q.jl:34\ntest set: Test\
    \ Failed at /tmp/tmps6xbi13q.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmps6xbi13q.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps6xbi13q.jl:34\ntest set: Test\
    \ Failed at /tmp/tmps6xbi13q.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps6xbi13q.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps6xbi13q.jl:34\ntest set: Test\
    \ Failed at /tmp/tmps6xbi13q.jl:42\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps6xbi13q.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements of the sorted array\n    return sorted_arr[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdu_s7mir.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdu_s7mir.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdu_s7mir.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdu_s7mir.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpdu_s7mir.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdu_s7mir.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdu_s7mir.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdu_s7mir.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdu_s7mir.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdu_s7mir.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdu_s7mir.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdu_s7mir.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdu_s7mir.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdu_s7mir.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdu_s7mir.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdu_s7mir.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr, rev=true)\n    # return the first k elements\n   \
    \ return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4pi7arw3.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4pi7arw3.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4pi7arw3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4pi7arw3.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp4pi7arw3.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4pi7arw3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4pi7arw3.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4pi7arw3.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4pi7arw3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4pi7arw3.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4pi7arw3.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4pi7arw3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4pi7arw3.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4pi7arw3.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4pi7arw3.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4pi7arw3.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), arr[2], minimum(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), arr[2], arr[3], minimum(arr)])\n\
    \    end\n    if k == 5\n        return sort([maximum(arr), arr[2], arr[3], arr[4],\
    \ minimum(arr)])\n    end\n    if k == 6\n        return sort([maximum(arr), arr[2],\
    \ arr[3], arr[4], arr[5], minimum(arr)])\n    end\n    if k == 7\n        return\
    \ sort([maximum(arr), arr[2], arr[3], arr[4], arr[5], arr[6], minimum(arr)])\n\
    \    end\n    if k == 8\n        return sort([maximum(arr), arr[2], arr[3], arr[4],\
    \ arr[5], arr[6], arr[7], minimum(arr)])\n    end\n    if k == 9\n        return\
    \ sort([maximum(arr), arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8],\
    \ minimum(arr)])\n    end\n    if k == 10\n        return sort([maximum(arr),\
    \ arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], minimum(arr)])\n\
    \    end\n    if k == 11\n        return sort([maximum(arr), arr[2], arr[3], arr[4],\
    \ arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], minimum(arr)])\n    end\n \
    \   if k == 12\n        return sort([maximum(arr), arr[2], arr[3], arr[4], arr[5],\
    \ arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], minimum(arr)])\n\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpenlgx9rs.jl:1\nin expression starting at /tmp/tmpenlgx9rs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize a max\
    \ heap\n    heap = MaxHeap()\n    # Push the first k elements into the heap\n\
    \    for i in 1:k\n        push!(heap, arr[i])\n    end\n    # For the remaining\
    \ elements, if the element is greater than the root of the heap,\n    # pop the\
    \ root and push the element\n    for i in k+1:length(arr)\n        if arr[i] >\
    \ peek(heap)\n            pop!(heap)\n            push!(heap, arr[i])\n      \
    \  end\n    end\n    # Return the sorted heap\n    return sort(heap)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3n9l3moc.jl:48\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ MaxHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmp3n9l3moc.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmp3n9l3moc.jl:48\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3n9l3moc.jl:47\\ntest set:\
    \ Error During Test at /tmp/tmp3n9l3moc.jl:49\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError: MaxHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmp3n9l3moc.jl:27\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3n9l3moc.jl:49 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3n9l3moc.jl:47\\ntest set:\
    \ Error During Test at /tmp/tmp3n9l3moc.jl:50\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: MaxHeap not\
    \ defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n  \
    \   @ Main /tmp/tmp3n9l3moc.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmp3n9l3moc.jl:50\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3n9l3moc.jl:47\\ntest set:\
    \ Error During Test at /tmp/tmp3n9l3moc.jl:51\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ MaxHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmp3n9l3moc.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmp3n9l3moc.jl:51\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbgop0isn.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbgop0isn.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbgop0isn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpbgop0isn.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbgop0isn.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbgop0isn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpbgop0isn.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpbgop0isn.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbgop0isn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpbgop0isn.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpbgop0isn.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbgop0isn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpbgop0isn.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbgop0isn.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbgop0isn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpbgop0isn.jl:42\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbgop0isn.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxud4p58j.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxud4p58j.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxud4p58j.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxud4p58j.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpxud4p58j.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxud4p58j.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxud4p58j.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxud4p58j.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxud4p58j.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxud4p58j.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxud4p58j.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxud4p58j.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxud4p58j.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxud4p58j.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxud4p58j.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxud4p58j.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq3xqzy1e.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpq3xqzy1e.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq3xqzy1e.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpq3xqzy1e.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpq3xqzy1e.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq3xqzy1e.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpq3xqzy1e.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpq3xqzy1e.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq3xqzy1e.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpq3xqzy1e.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpq3xqzy1e.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq3xqzy1e.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpq3xqzy1e.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpq3xqzy1e.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq3xqzy1e.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpq3xqzy1e.jl:42\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq3xqzy1e.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr, rev=true)\n    end\n    if\
    \ k > length(arr)\n        return sort(arr, rev=true)\n    end\n    if k < length(arr)\n\
    \        return sort(arr, rev=true)[1:k]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4bidg4a9.jl:47\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmp4bidg4a9.jl:47 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp4bidg4a9.jl:46\\ntest set: Error\
    \ During Test at /tmp/tmp4bidg4a9.jl:49\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\\n  You may have intended to import Base.maximum\\\
    n  Closest candidates are:\\n    maximum(::Vector{Int64}, !Matched::Int64) at\
    \ /tmp/tmp4bidg4a9.jl:25\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmp4bidg4a9.jl:30\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp4bidg4a9.jl:49 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4bidg4a9.jl:46\\ntest set:\
    \ Test Failed at /tmp/tmp4bidg4a9.jl:50\\n  Expression: candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n   Evaluated: [123, 20, 2] == [2, 20,\
    \ 123]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp4bidg4a9.jl:50 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp4bidg4a9.jl:46\\ntest set: Test\
    \ Failed at /tmp/tmp4bidg4a9.jl:51\\n  Expression: candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp4bidg4a9.jl:51 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp4bidg4a9.jl:46\\ntest set: Test\
    \ Failed at /tmp/tmp4bidg4a9.jl:52\\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # create a heap\n\
    \    heap = Heap(arr)\n    # pop k elements from the heap\n    maximum_k = [heap.pop()\
    \ for _ in 1:k]\n    # return the elements in reverse order\n    return reverse(maximum_k)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp141mn5q_.jl:38\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp141mn5q_.jl:27\n   [2] macro expansion\n     @ /tmp/tmp141mn5q_.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp141mn5q_.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp141mn5q_.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp141mn5q_.jl:27\n\
    \   [2] macro expansion\n     @ /tmp/tmp141mn5q_.jl:39 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp141mn5q_.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp141mn5q_.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp141mn5q_.jl:27\n\
    \   [2] macro expansion\n     @ /tmp/tmp141mn5q_.jl:40 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp141mn5q_.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp141mn5q_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ Heap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmp141mn5q_.jl:27\n   [2] macro expansion\n     @ /tmp/tmp141mn5q_.jl:41\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp141mn5q_.jl:37"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp141mn5q_.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Create a priority\
    \ queue\n    pq = PriorityQueue()\n    # Push the first k elements into the priority\
    \ queue\n    for i in 1:k\n        push!(pq, arr[i])\n    end\n    # Iterate through\
    \ the rest of the elements in the array\n    for i in k+1:length(arr)\n      \
    \  # If the current element is greater than the minimum element in the priority\
    \ queue\n        if arr[i] > peek(pq)\n            # Pop the minimum element from\
    \ the priority queue\n            pop!(pq)\n            # Push the current element\
    \ into the priority queue\n            push!(pq, arr[i])\n        end\n    end\n\
    \    # Return the priority queue as a sorted array\n    return sort(collect(pq))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxezq_kvu.jl:50\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ PriorityQueue not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmpxezq_kvu.jl:27\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpxezq_kvu.jl:50 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxezq_kvu.jl:49\\ntest set:\
    \ Error During Test at /tmp/tmpxezq_kvu.jl:51\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError: PriorityQueue not defined\\\
    n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmpxezq_kvu.jl:27\\\
    n   [2] macro expansion\\n     @ /tmp/tmpxezq_kvu.jl:51 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxezq_kvu.jl:49\\ntest set:\
    \ Error During Test at /tmp/tmpxezq_kvu.jl:52\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: PriorityQueue\
    \ not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmpxezq_kvu.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmpxezq_kvu.jl:52\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxezq_kvu.jl:49\\ntest set:\
    \ Error During Test at /tmp/tmpxezq_kvu.jl:53\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ PriorityQueue not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmpxezq_kvu.jl:27\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpxezq_kvu.jl:53 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # create a heap\n\
    \    heap = MaxHeap(arr)\n    # pop the first k elements\n    return pop!(heap,\
    \ k)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzb6rxdh_.jl:36\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpzb6rxdh_.jl:27\n   [2] macro expansion\n     @ /tmp/tmpzb6rxdh_.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzb6rxdh_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzb6rxdh_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpzb6rxdh_.jl:27\n\
    \   [2] macro expansion\n     @ /tmp/tmpzb6rxdh_.jl:37 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzb6rxdh_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzb6rxdh_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpzb6rxdh_.jl:27\n   [2] macro expansion\n     @ /tmp/tmpzb6rxdh_.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzb6rxdh_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzb6rxdh_.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MaxHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpzb6rxdh_.jl:27\n   [2] macro expansion\n     @ /tmp/tmpzb6rxdh_.jl:39\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpzb"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzb6rxdh_.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    arr_len = length(arr)\n\
    \    if arr_len == k\n        return arr\n    end\n    if arr_len < k\n      \
    \  return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    arr_sorted = sort(arr, rev=true)\n    return arr_sorted[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmps1371evc.jl:44\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmps1371evc.jl:44 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmps1371evc.jl:43\\ntest set: Error\
    \ During Test at /tmp/tmps1371evc.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\\n  You may have intended to import Base.maximum\\\
    n  Closest candidates are:\\n    maximum(::Vector{Int64}, !Matched::Int64) at\
    \ /tmp/tmps1371evc.jl:25\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmps1371evc.jl:34\\n   [2] macro expansion\\n \
    \    @ /tmp/tmps1371evc.jl:46 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmps1371evc.jl:43\\ntest set:\
    \ Test Failed at /tmp/tmps1371evc.jl:47\\n  Expression: candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n   Evaluated: [123, 20, 2] == [2, 20,\
    \ 123]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmps1371evc.jl:47 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmps1371evc.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmps1371evc.jl:48\\n  Expression: candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmps1371evc.jl:48 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmps1371evc.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmps1371evc.jl:49\\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize a heap\n\
    \    heap = Heap(arr)\n    # Initialize a vector to store the maximum k elements\n\
    \    max_k = Vector{Int64}(undef, k)\n    # Pop the maximum k elements from the\
    \ heap\n    for i in 1:k\n        max_k[i] = pop!(heap)\n    end\n    return max_k\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv23u8flh.jl:41\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: Heap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpv23u8flh.jl:27\n   [2] macro expansion\n     @ /tmp/tmpv23u8flh.jl:41\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpv23u8flh.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpv23u8flh.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: Heap not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpv23u8flh.jl:27\n\
    \   [2] macro expansion\n     @ /tmp/tmpv23u8flh.jl:42 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpv23u8flh.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpv23u8flh.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: Heap not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpv23u8flh.jl:27\n\
    \   [2] macro expansion\n     @ /tmp/tmpv23u8flh.jl:43 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpv23u8flh.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpv23u8flh.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ Heap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpv23u8flh.jl:27\n   [2] macro expansion\n     @ /tmp/tmpv23u8flh.jl:44\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpv23u8flh.jl:40"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv23u8flh.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr, rev=true)\n    end\n    if\
    \ k > length(arr)\n        return sort(arr, rev=true)\n    end\n    if k < length(arr)\n\
    \        return sort(arr, rev=true)[1:k]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpu3z7ivju.jl:47\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpu3z7ivju.jl:47 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpu3z7ivju.jl:46\\ntest set: Error\
    \ During Test at /tmp/tmpu3z7ivju.jl:49\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\\n  You may have intended to import Base.maximum\\\
    n  Closest candidates are:\\n    maximum(::Vector{Int64}, !Matched::Int64) at\
    \ /tmp/tmpu3z7ivju.jl:25\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmpu3z7ivju.jl:30\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpu3z7ivju.jl:49 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpu3z7ivju.jl:46\\ntest set:\
    \ Test Failed at /tmp/tmpu3z7ivju.jl:50\\n  Expression: candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n   Evaluated: [123, 20, 2] == [2, 20,\
    \ 123]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpu3z7ivju.jl:50 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpu3z7ivju.jl:46\\ntest set: Test\
    \ Failed at /tmp/tmpu3z7ivju.jl:51\\n  Expression: candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpu3z7ivju.jl:51 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpu3z7ivju.jl:46\\ntest set: Test\
    \ Failed at /tmp/tmpu3z7ivju.jl:52\\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprq83bv9c.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprq83bv9c.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprq83bv9c.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprq83bv9c.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmprq83bv9c.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprq83bv9c.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprq83bv9c.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprq83bv9c.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprq83bv9c.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprq83bv9c.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprq83bv9c.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprq83bv9c.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprq83bv9c.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprq83bv9c.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprq83bv9c.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprq83bv9c.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr)\n    end\n    pivot = arr[rand(1:length(arr))]\n\
    \    left = [x for x in arr if x < pivot]\n    right = [x for x in arr if x >\
    \ pivot]\n    if length(left) >= k\n        return maximum(left, k)\n    elseif\
    \ length(left) + 1 == k\n        return [pivot]\n    else\n        return [pivot]\
    \ .+ maximum(right, k - length(left) - 1)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp260stuqp.jl:52\\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\\n   Evaluated: [4] == [4, 4]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp260stuqp.jl:52 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp260stuqp.jl:50\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sort!(arr)\n    # return the last k elements\n    return arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr, rev=true)\n    # return the first k elements\n   \
    \ return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwgy2axro.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwgy2axro.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwgy2axro.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpwgy2axro.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpwgy2axro.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwgy2axro.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpwgy2axro.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwgy2axro.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwgy2axro.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpwgy2axro.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwgy2axro.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwgy2axro.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpwgy2axro.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwgy2axro.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwgy2axro.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwgy2axro.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ and return the first k elements\n    return sort(arr)[1:k]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpji8re28m.jl:35\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpji8re28m.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpji8re28m.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpji8re28m.jl:36\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpji8re28m.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpji8re28m.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpji8re28m.jl:37\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpji8re28m.jl:37 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpji8re28m.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpji8re28m.jl:38\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpji8re28m.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpji8re28m.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpji8re28m.jl:40\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpji8re28m.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpji8re28m.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpji8re28m.jl:41\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpji8re28m.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    return sorted_arr[1:k]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxsoioii6.jl:35\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxsoioii6.jl:35 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxsoioii6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpxsoioii6.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpxsoioii6.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxsoioii6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpxsoioii6.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxsoioii6.jl:39 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxsoioii6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpxsoioii6.jl:40\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxsoioii6.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxsoioii6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpxsoioii6.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxsoioii6.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxsoioii6.jl:34"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxsoioii6.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr, rev=true)\n    end\n    if k == 1\n \
    \       return [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr,\
    \ rev=true)[1:2]\n    end\n    if k == 3\n        return sort(arr, rev=true)[1:3]\n\
    \    end\n    if k == 4\n        return sort(arr, rev=true)[1:4]\n    end\n  \
    \  if k == 5\n        return sort(arr, rev=true)[1:5]\n    end\n    if k == 6\n\
    \        return sort(arr, rev=true)[1:6]\n    end\n    if k == 7\n        return\
    \ sort(arr, rev=true)[1:7]\n    end\n    if k == 8\n        return sort(arr, rev=true)[1:8]\n\
    \    end\n    if k == 9\n        return sort(arr, rev=true)[1:9]\n    end\n  \
    \  if k == 10\n        return sort(arr, rev=true)[1:10]\n    end\n    if k ==\
    \ 11\n        return sort(arr, rev=true)[1:11]\n    end\n    if k == 12\n    \
    \    return sort(arr, rev=true)[1:12]\n    end\n    if k == 13\n        return\
    \ sort(arr, rev=true)[1:13]\n    end\n    if k == 14\n        return sort(arr,\
    \ rev=true)[1:14]\n    end\n    if k == 15\n        return sort(arr, rev=true)[1:15]\n\
    \    end\n    if k == 16\n        return sort(arr, rev=true)[1:16]\n    end\n\
    \    if k == 17\n        return sort(arr, rev=true)[1:17]\n    end\n    if k ==\
    \ 18\n        return sort(arr, rev=true)[1:18]\n    end\n    if k == 19\n    \
    \    return sort(arr, rev=true)[1:19]\n    end\n    if k == 20\n        return\
    \ sort(arr, rev=true)[1:20]\n    end\n    if k == 21\n        return sort(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuoxbci6s.jl:94\nin expression starting at\
    \ /tmp/tmpuoxbci6s.jl:94\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6o4xn0z2.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6o4xn0z2.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6o4xn0z2.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp6o4xn0z2.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6o4xn0z2.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6o4xn0z2.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp6o4xn0z2.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6o4xn0z2.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6o4xn0z2.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp6o4xn0z2.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6o4xn0z2.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6o4xn0z2.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp6o4xn0z2.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6o4xn0z2.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6o4xn0z2.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6o4xn0z2.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort(arr)[end-1:end]\n\
    \    end\n    if k == 3\n        return sort(arr)[end-2:end]\n    end\n    if\
    \ k == 4\n        return sort(arr)[end-3:end]\n    end\n    if k == 5\n      \
    \  return sort(arr)[end-4:end]\n    end\n    if k == 6\n        return sort(arr)[end-5:end]\n\
    \    end\n    if k == 7\n        return sort(arr)[end-6:end]\n    end\n    if\
    \ k == 8\n        return sort(arr)[end-7:end]\n    end\n    if k == 9\n      \
    \  return sort(arr)[end-8:end]\n    end\n    if k == 10\n        return sort(arr)[end-9:end]\n\
    \    end\n    if k == 11\n        return sort(arr)[end-10:end]\n    end\n    if\
    \ k == 12\n        return sort(arr)[end-11:end]\n    end\n    if k == 13\n   \
    \     return sort(arr)[end-12:end]\n    end\n    if k == 14\n        return sort(arr)[end-13:end]\n\
    \    end\n    if k == 15\n        return sort(arr)[end-14:end]\n    end\n    if\
    \ k == 16\n        return sort(arr)[end-15:end]\n    end\n    if k == 17\n   \
    \     return sort(arr)[end-16:end]\n    end\n    if k == 18\n        return sort(arr)[end-17:end]\n\
    \    end\n    if k == 19\n        return sort(arr)[end-18:end]\n    end\n    if\
    \ k == 20\n        return sort(arr)[end-19:end]\n    end\n    if k == 21\n   \
    \     return sort(arr)[end-20:end]\n    end\n    if k == 22\n        return sort(arr)[end-21:end]\n\
    \    end\n    if k == 23\n        return\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpot9fxxvs.jl:1\nin expression starting at /tmp/tmpot9fxxvs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap = MaxHeap()\n\
    \    for i in 1:k\n        push!(heap, arr[i])\n    end\n    for i in k+1:length(arr)\n\
    \        if arr[i] > peek(heap)\n            pop!(heap)\n            push!(heap,\
    \ arr[i])\n        end\n    end\n    return sort(collect(heap), rev=true)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp456mqizz.jl:43\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ MaxHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmp456mqizz.jl:26\\n   [2] macro expansion\\n     @ /tmp/tmp456mqizz.jl:43\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp456mqizz.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmp456mqizz.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError: MaxHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmp456mqizz.jl:26\\\
    n   [2] macro expansion\\n     @ /tmp/tmp456mqizz.jl:44 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp456mqizz.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmp456mqizz.jl:45\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: MaxHeap not\
    \ defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n  \
    \   @ Main /tmp/tmp456mqizz.jl:26\\n   [2] macro expansion\\n     @ /tmp/tmp456mqizz.jl:45\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp456mqizz.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmp456mqizz.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ MaxHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmp456mqizz.jl:26\\n   [2] macro expansion\\n     @ /tmp/tmp456mqizz.jl:46\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements of the sorted array\n    return sorted_arr[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgyhhx27l.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgyhhx27l.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgyhhx27l.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgyhhx27l.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpgyhhx27l.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgyhhx27l.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgyhhx27l.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgyhhx27l.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgyhhx27l.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgyhhx27l.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgyhhx27l.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgyhhx27l.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpgyhhx27l.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgyhhx27l.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgyhhx27l.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgyhhx27l.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy2pghny_.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy2pghny_.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2pghny_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy2pghny_.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpy2pghny_.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2pghny_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy2pghny_.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy2pghny_.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2pghny_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy2pghny_.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy2pghny_.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2pghny_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpy2pghny_.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy2pghny_.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2pghny_.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy2pghny_.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap = MaxHeap(arr)\n\
    \    return heap.pop(k)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplk616ac1.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: MaxHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmplk616ac1.jl:26\n   [2] macro expansion\n     @ /tmp/tmplk616ac1.jl:34\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplk616ac1.jl:33\ntest set:\
    \ Error During Test at /tmp/tmplk616ac1.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: MaxHeap not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmplk616ac1.jl:26\n\
    \   [2] macro expansion\n     @ /tmp/tmplk616ac1.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplk616ac1.jl:33\ntest set:\
    \ Error During Test at /tmp/tmplk616ac1.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: MaxHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmplk616ac1.jl:26\n   [2] macro expansion\n     @ /tmp/tmplk616ac1.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplk616ac1.jl:33\ntest set:\
    \ Error During Test at /tmp/tmplk616ac1.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ MaxHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmplk616ac1.jl:26\n   [2] macro expansion\n     @ /tmp/tmplk616ac1.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmplk"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplk616ac1.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\n\
    \    sorted_arr = sort(arr)\n    # Return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        if arr[1] > arr[2]\n       \
    \     return [arr[1], arr[2]]\n        else\n            return [arr[2], arr[1]]\n\
    \        end\n    end\n    if k == 3\n        if arr[1] > arr[2]\n           \
    \ if arr[1] > arr[3]\n                if arr[2] > arr[3]\n                   \
    \ return [arr[1], arr[2], arr[3]]\n                else\n                    return\
    \ [arr[1], arr[3], arr[2]]\n                end\n            else\n          \
    \      return [arr[3], arr[1], arr[2]]\n            end\n        else\n      \
    \      if arr[2] > arr[3]\n                if arr[1] > arr[3]\n              \
    \      return [arr[2], arr[1], arr[3]]\n                else\n               \
    \     return [arr[2], arr[3], arr[1]]\n                end\n            else\n\
    \                return [arr[3], arr[2], arr[1]]\n            end\n        end\n\
    \    end\n    if k > 3\n        if arr[1] > arr[2]\n            if arr[1] > arr[3]\n\
    \                if arr[2] > arr[3]\n                    return [arr[1], arr[2],\
    \ arr[3]]\n                else\n                    return [arr[1], arr[3], arr[2]]\n\
    \                end\n            else\n                return [arr[3], arr[1],\
    \ arr[2]]\n            end\n        else\n            if arr[2] > arr[3]\n   \
    \             if arr[1] > arr[3]\n                    return [arr[2], arr[1],\
    \ arr[3]]\n                else\n                    return [arr[2], arr[3], arr[1]]\n\
    \                end\n            else\n                return [arr[3], arr[2],\
    \ arr[1]]\n            end\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6bcpvfzh.jl:93\\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\\n   Evaluated: [4, -4] == [4, 4]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp6bcpvfzh.jl:93 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp6bcpvfzh.jl:91\\ntest set: Error\
    \ During Test at /tmp/tmp6bcpvfzh.jl:94\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkdx2705q.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkdx2705q.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkdx2705q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkdx2705q.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpkdx2705q.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkdx2705q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkdx2705q.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkdx2705q.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkdx2705q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkdx2705q.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkdx2705q.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkdx2705q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkdx2705q.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkdx2705q.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkdx2705q.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkdx2705q.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # create a new vector\
    \ of length k\n    max_k = Vector{Int64}(undef, k)\n    # loop through the array\n\
    \    for i in 1:length(arr)\n        # if the value at the current index is greater\
    \ than the value at the last index\n        if arr[i] > max_k[end]\n         \
    \   # remove the last value\n            pop!(max_k)\n            # and add the\
    \ current value\n            push!(max_k, arr[i])\n        end\n    end\n    #\
    \ sort the vector\n    sort!(max_k)\n    # return the vector\n    return max_k\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp7g8ju9nd.jl:48\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [0, 0, 5] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmp7g8ju9nd.jl:48 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp7g8ju9nd.jl:47\\ntest set: Test\
    \ Failed at /tmp/tmp7g8ju9nd.jl:49\\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\\n   Evaluated: [4, 140171275512864] == [4, 4]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp7g8ju9nd.jl:49 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp7g8ju9nd.jl:47\\ntest set: Test\
    \ Failed at /tmp/tmp7g8ju9nd.jl:51\\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\\n   Evaluated: [1, 2, 140171252842848] == [2,\
    \ 20, 123]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp7g8ju9nd.jl:51\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp7g8ju9nd.jl:47\\ntest set: Test\
    \ Failed at /tmp/tmp7g8ju9nd.jl:52\\n  Expression: candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated: [140171317246976, 140171318784736,\
    \ 140171320436624, 140171326240736] == [0, 1, 2, 20]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp7g8ju9nd.jl:52 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp7g8ju9nd.jl:47\\ntest set: Test\
    \ Failed at /tmp/tmp7g8ju9nd.jl:53\\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\\n   Evaluated: [0, 0, 0, 0, 0, 0, 15]\
    \ == [-13, -8, 0, 0, 3, 5, 15]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp7g8ju9nd.jl:53\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if k == n\n        return sort(arr)\n    end\n    if k == 1\n        return\
    \ [maximum(arr)]\n    end\n    if k == 2\n        return sort([maximum(arr), minimum(arr)])\n\
    \    end\n    if k == 3\n        return sort([maximum(arr), minimum(arr), median(arr)])\n\
    \    end\n    if k == 4\n        return sort([maximum(arr), minimum(arr), median(arr),\
    \ median(arr[arr .!= median(arr)])])\n    end\n    if k == 5\n        return sort([maximum(arr),\
    \ minimum(arr), median(arr), median(arr[arr .!= median(arr)]), median(arr[arr\
    \ .!= median(arr)])])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6f47s8q0.jl:52\\n  Test threw\
    \ exception\\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\\n  MethodError:\
    \ no method matching maximum(::Vector{Int64})\\n  You may have intended to import\
    \ Base.maximum\\n  Closest candidates are:\\n    maximum(::Vector{Int64}, !Matched::Int64)\
    \ at /tmp/tmp6f47s8q0.jl:25\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmp6f47s8q0.jl:34\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp6f47s8q0.jl:52 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6f47s8q0.jl:50\\ntest set:\
    \ Error During Test at /tmp/tmp6f47s8q0.jl:53\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\\n  You may have intended to import Base.maximum\\\
    n  Closest candidates are:\\n    maximum(::Vector{Int64}, !Matched::Int64) at\
    \ /tmp/tmp6f47s8q0.jl:25\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmp6f47s8q0.jl:31\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp6f47s8q0.jl:53 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6f47s8q0.jl:50\\ntest set:\
    \ Error During Test at /tmp/tmp6f47s8q0.jl:54\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  MethodError:\
    \ no method matching maximum(::Vector{Int64})\\n  You may have intended to import\
    \ Base.maximum\\n  Closest candidates are:\\n    maximum(::Vector{Int64}, !Matched::Int64)\
    \ at /tmp/tmp6f47s8q0.jl:25\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmp6f47s8q0.jl:37\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp6f47s8q0.jl:54 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcoebiq4p.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcoebiq4p.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcoebiq4p.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpcoebiq4p.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpcoebiq4p.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcoebiq4p.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpcoebiq4p.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcoebiq4p.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcoebiq4p.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpcoebiq4p.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcoebiq4p.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcoebiq4p.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpcoebiq4p.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcoebiq4p.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcoebiq4p.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcoebiq4p.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\n\
    \    sorted_arr = sort(arr)\n    # Return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6zittkgy.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6zittkgy.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6zittkgy.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp6zittkgy.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6zittkgy.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6zittkgy.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp6zittkgy.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6zittkgy.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6zittkgy.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp6zittkgy.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6zittkgy.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6zittkgy.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp6zittkgy.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6zittkgy.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6zittkgy.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6zittkgy.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    heap = MaxHeap()\n\
    \    for i in 1:k\n        push!(heap, arr[i])\n    end\n    for i in k+1:length(arr)\n\
    \        if arr[i] > heap[1]\n            pop!(heap)\n            push!(heap,\
    \ arr[i])\n        end\n    end\n    return sort(heap, rev=true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpunqm8swz.jl:43\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\\n  UndefVarError:\
    \ MaxHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmpunqm8swz.jl:26\\n   [2] macro expansion\\n     @ /tmp/tmpunqm8swz.jl:43\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpunqm8swz.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmpunqm8swz.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\\n  UndefVarError: MaxHeap not defined\\\
    n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n     @ Main /tmp/tmpunqm8swz.jl:26\\\
    n   [2] macro expansion\\n     @ /tmp/tmpunqm8swz.jl:44 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpunqm8swz.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmpunqm8swz.jl:45\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  UndefVarError: MaxHeap not\
    \ defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\n  \
    \   @ Main /tmp/tmpunqm8swz.jl:26\\n   [2] macro expansion\\n     @ /tmp/tmpunqm8swz.jl:45\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpunqm8swz.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmpunqm8swz.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n  UndefVarError:\
    \ MaxHeap not defined\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64}, k::Int64)\\\
    n     @ Main /tmp/tmpunqm8swz.jl:26\\n   [2] macro expansion\\n     @ /tmp/tmpunqm8swz.jl:46\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # return the first k elements\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfnz31id7.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfnz31id7.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfnz31id7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpfnz31id7.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpfnz31id7.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfnz31id7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpfnz31id7.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfnz31id7.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfnz31id7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpfnz31id7.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfnz31id7.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfnz31id7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpfnz31id7.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfnz31id7.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfnz31id7.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfnz31id7.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == k\n        return arr\n    end\n    if k == 1\n        return [maximum(arr)]\n\
    \    end\n    if k == 2\n        return [maximum(arr), minimum(arr)]\n    end\n\
    \    if k == 3\n        return [maximum(arr), minimum(arr), maximum(arr[arr .!=\
    \ maximum(arr)])]\n    end\n    if k == 4\n        return [maximum(arr), minimum(arr),\
    \ maximum(arr[arr .!= maximum(arr)]), minimum(arr[arr .!= minimum(arr)])]\n  \
    \  end\n    if k == 5\n        return [maximum(arr), minimum(arr), maximum(arr[arr\
    \ .!= maximum(arr)]), minimum(arr[arr .!= minimum(arr)]), maximum(arr[arr .!=\
    \ maximum(arr)])]\n    end\n    if k == 6\n        return [maximum(arr), minimum(arr),\
    \ maximum(arr[arr .!= maximum(arr)]), minimum(arr[arr .!= minimum(arr)]), maximum(arr[arr\
    \ .!= maximum(arr)]), minimum(arr[arr .!= minimum(arr)])]\n    end\n    if k ==\
    \ 7\n        return [maximum(arr), minimum(arr), maximum(arr[arr .!= maximum(arr)]),\
    \ minimum(arr[arr .!= minimum(arr)]), maximum(arr[arr .!= maximum(arr)]), minimum(arr[arr\
    \ .!= minimum(arr)]), maximum(arr[arr .!= maximum(arr)])]\n    end\n    if k ==\
    \ 8\n        return [maximum(arr), minimum(arr), maximum(arr[arr .!= maximum(arr)]),\
    \ minimum(arr[arr .!= minimum(arr)]), maximum(arr[arr .!= maximum(arr)]), minimum(arr[arr\
    \ .!= minimum(arr)]), maximum(arr[arr .!= maximum(arr)]), minimum(arr[arr .!=\
    \ minimum(arr)])]\n    end\n    if k == 9\n        return [maximum(arr), minimum(arr),\
    \ maximum(arr[arr .!= maximum(arr)]), minimum(arr[arr .!= minimum(arr)]), maximum(arr[\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpme9g9ubq.jl:1\nin expression starting at /tmp/tmpme9g9ubq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements of the sorted array\n\
    \    return sorted_arr[end-k+1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sort!(arr, rev=true)\n    # Return the first k elements\n\
    \    return arr[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppco2tf_e.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppco2tf_e.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppco2tf_e.jl:35\ntest set: Test\
    \ Failed at /tmp/tmppco2tf_e.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmppco2tf_e.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppco2tf_e.jl:35\ntest set: Test\
    \ Failed at /tmp/tmppco2tf_e.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppco2tf_e.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppco2tf_e.jl:35\ntest set: Test\
    \ Failed at /tmp/tmppco2tf_e.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppco2tf_e.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppco2tf_e.jl:35\ntest set: Test\
    \ Failed at /tmp/tmppco2tf_e.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppco2tf_e.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppco2tf_e.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppco2tf_e.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr, rev=true)\n    end\n    return\
    \ sort(arr, rev=true)[1:k]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnex31shx.jl:42\\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpnex31shx.jl:42 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpnex31shx.jl:41\\ntest set: Error\
    \ During Test at /tmp/tmpnex31shx.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\\n  You may have intended to import Base.maximum\\\
    n  Closest candidates are:\\n    maximum(::Vector{Int64}, !Matched::Int64) at\
    \ /tmp/tmpnex31shx.jl:25\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmpnex31shx.jl:30\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpnex31shx.jl:44 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnex31shx.jl:41\\ntest set:\
    \ Test Failed at /tmp/tmpnex31shx.jl:45\\n  Expression: candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n   Evaluated: [123, 20, 2] == [2, 20,\
    \ 123]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpnex31shx.jl:45 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpnex31shx.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpnex31shx.jl:46\\n  Expression: candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpnex31shx.jl:46 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpnex31shx.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpnex31shx.jl:47\\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    n = length(arr)\n\
    \    if n == 0\n        return []\n    end\n    if k == 0\n        return []\n\
    \    end\n    if k >= n\n        return sort(arr, rev=true)\n    end\n    if k\
    \ == 1\n        return [maximum(arr)]\n    end\n    if k == 2\n        return\
    \ sort([arr[1], arr[end]], rev=true)\n    end\n    if k == 3\n        return sort([arr[1],\
    \ arr[end], maximum(arr[2:end-1])], rev=true)\n    end\n    if k == 4\n      \
    \  return sort([arr[1], arr[end], maximum(arr[2:end-1]), minimum(arr[2:end-1])],\
    \ rev=true)\n    end\n    if k == 5\n        return sort([arr[1], arr[end], maximum(arr[2:end-1]),\
    \ minimum(arr[2:end-1]), arr[3]], rev=true)\n    end\n    if k == 6\n        return\
    \ sort([arr[1], arr[end], maximum(arr[2:end-1]), minimum(arr[2:end-1]), arr[3],\
    \ arr[end-2]], rev=true)\n    end\n    if k == 7\n        return sort([arr[1],\
    \ arr[end], maximum(arr[2:end-1]), minimum(arr[2:end-1]), arr[3], arr[end-2],\
    \ maximum(arr[4:end-3])], rev=true)\n    end\n    if k == 8\n        return sort([arr[1],\
    \ arr[end], maximum(arr[2:end-1]), minimum(arr[2:end-1]), arr[3], arr[end-2],\
    \ maximum(arr[4:end-3]), minimum(arr[4:end-3])], rev=true)\n    end\n    if k\
    \ == 9\n        return sort([arr[1], arr[end], maximum(arr[2:end-1]), minimum(arr[2:end-1]),\
    \ arr[3], arr[end-2], maximum(arr[4:end-3]), minimum(arr[4:end-3]), arr[4]], rev=true)\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3oaue900.jl:1\nin expression starting at /tmp/tmp3oaue900.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # Return the\
    \ first k elements of the sorted array\n    return sorted_arr[1:k]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvfd0z844.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvfd0z844.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvfd0z844.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpvfd0z844.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpvfd0z844.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvfd0z844.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpvfd0z844.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvfd0z844.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvfd0z844.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpvfd0z844.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvfd0z844.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvfd0z844.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpvfd0z844.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvfd0z844.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvfd0z844.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvfd0z844.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # create a new array\
    \ to store the k maximum numbers\n    max_arr = zeros(Int64, k)\n    # loop through\
    \ the array\n    for i in 1:length(arr)\n        # if the current number is greater\
    \ than the minimum number in the max_arr\n        if arr[i] > minimum(max_arr)\n\
    \            # replace the minimum number with the current number\n          \
    \  max_arr[findmin(max_arr)[2]] = arr[i]\n        end\n    end\n    # sort the\
    \ max_arr\n    sort(max_arr)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7y41s5k_.jl:44\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [0, 0, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7y41s5k_.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7y41s5k_.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp7y41s5k_.jl:49\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [0, 0, 0, 0, 3, 5, 15]\
    \ == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7y41s5k_.jl:49\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7y41s5k_.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp7y41s5k_.jl:52\n  Expression: candidate([4, -4], 2) == [-4,\
    \ 4]\n   Evaluated: [0, 4] == [-4, 4]\nStacktrace:\n [1] macro expansion\n   @\
    \ /tmp/tmp7y41s5k_.jl:52 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7y41s5k_.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp7y41s5k_.jl:53\n  Expression: candidate([-10, 10], 2) == [-10,\
    \ 10]\n   Evaluated: [0, 10] == [-10, 10]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7y41s5k_.jl:53 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7y41s5k_.jl:43\ntest set: Error\
    \ During Test at /tmp/tmp7y41s5k_.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:299\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:309\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7y41s5k_.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\
    \ in descending order\n    sorted_arr = sort(arr, rev=true)\n    # return the\
    \ first k elements\n    return sorted_arr[1:k]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsu89midw.jl:36\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5, -3, -4] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsu89midw.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsu89midw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsu89midw.jl:39\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, 20, 2] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpsu89midw.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsu89midw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsu89midw.jl:40\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsu89midw.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsu89midw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsu89midw.jl:41\n  Expression: candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [15, 5, 3, 0, 0, -8,\
    \ -13] == [-13, -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsu89midw.jl:41\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsu89midw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpsu89midw.jl:42\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [5, 3] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsu89midw.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsu89midw.jl:35"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsu89midw.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # Initialize the\
    \ heap\n    heap = BinaryHeap(arr[1:k])\n    # Loop through the remaining elements\n\
    \    for i in k+1:length(arr)\n        # If the current element is greater than\
    \ the min element in the heap\n        if arr[i] > heap.min\n            # Remove\
    \ the min element from the heap\n            pop!(heap)\n            # Push the\
    \ current element into the heap\n            push!(heap, arr[i])\n        end\n\
    \    end\n    # Return the sorted heap\n    sort(heap)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppbp2ekh4.jl:46\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: BinaryHeap\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmppbp2ekh4.jl:27\n   [2] macro expansion\n     @ /tmp/tmppbp2ekh4.jl:46\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppbp2ekh4.jl:45\ntest set:\
    \ Error During Test at /tmp/tmppbp2ekh4.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: BinaryHeap not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmppbp2ekh4.jl:27\n\
    \   [2] macro expansion\n     @ /tmp/tmppbp2ekh4.jl:47 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppbp2ekh4.jl:45\ntest set:\
    \ Error During Test at /tmp/tmppbp2ekh4.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: BinaryHeap not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmppbp2ekh4.jl:27\n   [2] macro expansion\n     @ /tmp/tmppbp2ekh4.jl:48\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppbp2ekh4.jl:45\ntest set:\
    \ Error During Test at /tmp/tmppbp2ekh4.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ BinaryHeap not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmppbp2ekh4.jl:27\n   [2] macro expansion\n     @ /tmp/tmppbp2ekh4.jl:49\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppbp2ekh4.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0\n     \
    \   return []\n    end\n    if k == 1\n        return [maximum(arr)]\n    end\n\
    \    if k == length(arr)\n        return sort(arr)\n    end\n    if k > length(arr)\n\
    \        return sort(arr, rev=true)\n    end\n    if k < length(arr)\n       \
    \ return sort(arr, rev=true)[1:k]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0p3ft2_7.jl:49\\n  Test threw\
    \ exception\\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\\n \
    \ MethodError: no method matching maximum(::Vector{Int64})\\n  You may have intended\
    \ to import Base.maximum\\n  Closest candidates are:\\n    maximum(::Vector{Int64},\
    \ !Matched::Int64) at /tmp/tmp0p3ft2_7.jl:25\\n  Stacktrace:\\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\\n     @ Main /tmp/tmp0p3ft2_7.jl:30\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp0p3ft2_7.jl:49 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0p3ft2_7.jl:46\\ntest set:\
    \ Test Failed at /tmp/tmp0p3ft2_7.jl:50\\n  Expression: candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\\n   Evaluated: [123, 20, 2] == [2, 20,\
    \ 123]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp0p3ft2_7.jl:50 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0p3ft2_7.jl:46\\ntest set: Test\
    \ Failed at /tmp/tmp0p3ft2_7.jl:51\\n  Expression: candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\\n   Evaluated: [20, 2, 1, 0] == [0, 1, 2, 20]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp0p3ft2_7.jl:51 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0p3ft2_7.jl:46\\ntest set: Test\
    \ Failed at /tmp/tmp0p3ft2_7.jl:53\\n  Expression: candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5]\\n   Evaluated: [5, 3] == [3, 5]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp0p3ft2_7.jl:53 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0p3ft2_7.jl:46\\ntest set: Error\
    \ During Test at /tmp/tmp0p3ft2_7.jl:54\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 0"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    # return the first k elements\n    sort(arr)[1:k]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgxx_33pj.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgxx_33pj.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgxx_33pj.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgxx_33pj.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgxx_33pj.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgxx_33pj.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgxx_33pj.jl:38\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpgxx_33pj.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgxx_33pj.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgxx_33pj.jl:39\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [-123, -3, 0, 1] == [0, 1, 2, 20]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpgxx_33pj.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgxx_33pj.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgxx_33pj.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, 5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgxx_33pj.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgxx_33pj.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgxx_33pj.jl:42\n  Expression: candidate(["
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgxx_33pj.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    # sort the array\n\
    \    sorted_arr = sort(arr)\n    # return the last k elements\n    return sorted_arr[end-k+1:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
