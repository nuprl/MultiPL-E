name: HumanEval_93_encode
language: julia
results:
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    message = uppercase(message)\n    message = replace(message, \"A\" => \"\
    C\")\n    message = replace(message, \"E\" => \"G\")\n    message = replace(message,\
    \ \"I\" => \"K\")\n    message = replace(message, \"O\" => \"Q\")\n    message\
    \ = replace(message, \"U\" => \"W\")\n    message = replace(message, \"Y\" =>\
    \ \"A\")\n    return message\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwhchr77h.jl:29\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwhchr77h.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwhchr77h.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwhchr77h.jl:30\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"MWDCSKR\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwhchr77h.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwhchr77h.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwhchr77h.jl:31\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"AGS\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwhchr77h.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwhchr77h.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwhchr77h.jl:32\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"THKS KS C MGSSCGG\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwhchr77h.jl:32 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwhchr77h.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwhchr77h.jl:33\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"K DQNT KNQW WHCT\
    \ TQ WRKTG\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwhchr77h.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwhchr77h.jl:28\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwhchr77h.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: write your code here\n    return \"TGST\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu37c99sh.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpu37c99sh.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu37c99sh.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpu37c99sh.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpu37c99sh.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu37c99sh.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpu37c99sh.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu37c99sh.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu37c99sh.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpu37c99sh.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpu37c99sh.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu37c99sh.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpu37c99sh.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu37c99sh.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu37c99sh.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu37c99sh.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    vowels = \"aeiou\"\n    new_message = \"\"\n    for i in 1:length(message)\n\
    \        if message[i] in vowels\n            new_message = new_message * message[i+2]\n\
    \        elseif message[i] in lowercase(vowels)\n            new_message = new_message\
    \ * message[i+2]\n        else\n            new_message = new_message * message[i]\n\
    \        end\n    end\n    return new_message\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgk2ax1d2.jl:33\\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\\n   Evaluated: \"TEST\" == \"tgst\"\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpgk2ax1d2.jl:33 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgk2ax1d2.jl:32\\ntest set: Error\
    \ During Test at /tmp/tmpgk2ax1d2.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  BoundsError: attempt to access 7-codeunit\
    \ String at index [8]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102 [inlined]\\n  \
    \ [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n   [4] encode(message::String)\\\
    n     @ Main /tmp/tmpgk2ax1d2.jl:19\\n   [5] macro expansion\\n     @ /tmp/tmpgk2ax1d2.jl:34\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpgk2ax1d2.jl:32\\ntest set:\
    \ Test Failed at /tmp/tmpgk2ax1d2.jl:35\\n  Expression: candidate(\"YES\") ==\
    \ \"ygs\"\\n   Evaluated: \"YES\" == \"ygs\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpgk2ax1d2.jl:35 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgk2ax1d2.jl:32\\ntest set: Error\
    \ During Test at /tmp/tmpgk2ax1d2.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\\n  BoundsError: attempt\
    \ to access 17-codeunit String at index [19]\\n  Stacktrace:\\n   [1] checkbounds\\\
    n     @ ./strings/basic.jl:216 [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102\
    \ [inlined]\\n   [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n  \
    \ [4] encode(message::String)\\n     @ Main /tmp/tmpgk2ax1d2.jl:19\\n   [5] macro\
    \ expansion\\n     @ /tmp/tmpgk2ax1d2.jl:36 [inlined]\\n   [6] macro expansion\\\
    n     @ /buildwork"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\n    return message\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2w_kjc4e.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TEST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2w_kjc4e.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2w_kjc4e.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2w_kjc4e.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"Mudasir\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2w_kjc4e.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2w_kjc4e.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2w_kjc4e.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"YES\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2w_kjc4e.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2w_kjc4e.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2w_kjc4e.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"This is a message\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2w_kjc4e.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2w_kjc4e.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2w_kjc4e.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"I DoNt KnOw WhAt\
    \ tO WrItE\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2w_kjc4e.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2w_kjc4e.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2w_kjc4e.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpa88kdodx.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpa88kdodx.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpa88kdodx.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpa88kdodx.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpa88kdodx.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpa88kdodx.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpa88kdodx.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpa88kdodx.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpa88kdodx.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\n    return message\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps_4rte_3.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TEST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps_4rte_3.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps_4rte_3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmps_4rte_3.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"Mudasir\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps_4rte_3.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps_4rte_3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmps_4rte_3.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"YES\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps_4rte_3.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps_4rte_3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmps_4rte_3.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"This is a message\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps_4rte_3.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps_4rte_3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmps_4rte_3.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"I DoNt KnOw WhAt\
    \ tO WrItE\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps_4rte_3.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps_4rte_3.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps_4rte_3.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # create a dictionary of vowels\n    vowels = Dict('a'=>'c', 'e'=>'g', 'i'=>'k',\
    \ 'o'=>'q', 'u'=>'y')\n    # create a dictionary of letters\n    letters = Dict('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z')\n    # create a dictionary of letters\n    letters2 = Dict('A'=>'a',\
    \ 'B'=>'b', 'C'=>'c', 'D'=>'d', 'E'=>'e', 'F'=>'f', 'G'=>'g', 'H'=>'h', 'I'=>'i',\
    \ 'J'=>'j', 'K'=>'k', 'L'=>'l', 'M'=>'m', 'N'=>'n', 'O'=>'o', 'P'=>'p', 'Q'=>'q',\
    \ 'R'=>'r', 'S'=>'s', 'T'=>'t', 'U'=>'u', 'V'=>'v', 'W'=>'w', 'X'=>'x', 'Y'=>'y',\
    \ 'Z'=>'z')\n    # create an empty string\n    new_message = \"\"\n    # iterate\
    \ through the message\n    for i in message\n        # if the letter is in the\
    \ vowels dictionary\n        if i in keys(vowels)\n            # add the value\
    \ of the letter to the new message\n            push!\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6guj_w1m.jl:1\nin expression starting at /tmp/tmp6guj_w1m.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\n    return \"TGST\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpugqf0l8n.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpugqf0l8n.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpugqf0l8n.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpugqf0l8n.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpugqf0l8n.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpugqf0l8n.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpugqf0l8n.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpugqf0l8n.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpugqf0l8n.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpugqf0l8n.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpugqf0l8n.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpugqf0l8n.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpugqf0l8n.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpugqf0l8n.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpugqf0l8n.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpugqf0l8n.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_fiymja_.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp_fiymja_.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_fiymja_.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_fiymja_.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp_fiymja_.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp_fiymja_.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_fiymja_.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_fiymja_.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp_fiymja_.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiqljdquh.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpiqljdquh.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpiqljdquh.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpiqljdquh.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpiqljdquh.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpiqljdquh.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpiqljdquh.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpiqljdquh.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpiqljdquh.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcjukimhx.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpcjukimhx.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpcjukimhx.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcjukimhx.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpcjukimhx.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpcjukimhx.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpcjukimhx.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcjukimhx.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpcjukimhx.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\n    return \"TGST\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_do9jbfl.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_do9jbfl.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_do9jbfl.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_do9jbfl.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_do9jbfl.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_do9jbfl.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_do9jbfl.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_do9jbfl.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_do9jbfl.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_do9jbfl.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_do9jbfl.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_do9jbfl.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_do9jbfl.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_do9jbfl.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_do9jbfl.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_do9jbfl.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\n    return \"TGST\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkbda0zwa.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkbda0zwa.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbda0zwa.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkbda0zwa.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkbda0zwa.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbda0zwa.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkbda0zwa.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkbda0zwa.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbda0zwa.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkbda0zwa.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpkbda0zwa.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbda0zwa.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpkbda0zwa.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkbda0zwa.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbda0zwa.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkbda0zwa.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe9qsek5j.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpe9qsek5j.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpe9qsek5j.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe9qsek5j.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpe9qsek5j.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpe9qsek5j.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpe9qsek5j.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe9qsek5j.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpe9qsek5j.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzxgrcjbc.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpzxgrcjbc.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpzxgrcjbc.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzxgrcjbc.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpzxgrcjbc.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpzxgrcjbc.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpzxgrcjbc.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzxgrcjbc.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpzxgrcjbc.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    message = uppercase(message)\n    message = replace(message, \"A\", \"C\"\
    )\n    message = replace(message, \"E\", \"G\")\n    message = replace(message,\
    \ \"I\", \"K\")\n    message = replace(message, \"O\", \"Q\")\n    message = replace(message,\
    \ \"U\", \"W\")\n    message = replace(message, \"Y\", \"A\")\n    message = lowercase(message)\n\
    \    return message\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphu62i44u.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: no\
    \ method matching replace(::String, ::String, ::String)\\n  Closest candidates\
    \ are:\\n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\\
    n    replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] encode(message::String)\\n     @ Main /tmp/tmphu62i44u.jl:16\\n   [2]\
    \ macro expansion\\n     @ /tmp/tmphu62i44u.jl:30 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphu62i44u.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmphu62i44u.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"\
    #s75\", B} where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\\
    n    replace(::String, !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmphu62i44u.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmphu62i44u.jl:31 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphu62i44u.jl:29\\ntest set:\
    \ Er"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp92mmzdgj.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp92mmzdgj.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp92mmzdgj.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp92mmzdgj.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp92mmzdgj.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp92mmzdgj.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp92mmzdgj.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp92mmzdgj.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp92mmzdgj.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyb788sbo.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpyb788sbo.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpyb788sbo.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyb788sbo.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpyb788sbo.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpyb788sbo.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpyb788sbo.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyb788sbo.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpyb788sbo.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprxpyz_6u.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmprxpyz_6u.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmprxpyz_6u.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprxpyz_6u.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmprxpyz_6u.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmprxpyz_6u.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmprxpyz_6u.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprxpyz_6u.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmprxpyz_6u.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi7wy_wan.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpi7wy_wan.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpi7wy_wan.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi7wy_wan.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpi7wy_wan.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpi7wy_wan.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpi7wy_wan.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi7wy_wan.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpi7wy_wan.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\n    return \"TGST\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp33zkcehz.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp33zkcehz.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp33zkcehz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp33zkcehz.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp33zkcehz.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp33zkcehz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp33zkcehz.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp33zkcehz.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp33zkcehz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp33zkcehz.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp33zkcehz.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp33zkcehz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp33zkcehz.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp33zkcehz.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp33zkcehz.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp33zkcehz.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4zfdmbwt.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp4zfdmbwt.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp4zfdmbwt.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4zfdmbwt.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp4zfdmbwt.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp4zfdmbwt.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp4zfdmbwt.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4zfdmbwt.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp4zfdmbwt.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4zfdmbwt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy9oalgmb.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpy9oalgmb.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpy9oalgmb.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy9oalgmb.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpy9oalgmb.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpy9oalgmb.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpy9oalgmb.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy9oalgmb.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpy9oalgmb.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    new_message = \"\"\n    for i in message\n        if i in \"aeiou\"\n   \
    \         new_message = new_message * i[3]\n        elseif i in \"AEIOU\"\n  \
    \          new_message = new_message * i[3]\n        else\n            new_message\
    \ = new_message * i\n        end\n    end\n    return new_message\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") ==\
    \ \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
    YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjdz11mfk.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  BoundsError\n  Stacktrace:\n\
    \   [1] getindex(c::Char, i::Int64)\n     @ Base ./char.jl:198\n   [2] encode(message::String)\n\
    \     @ Main /tmp/tmpjdz11mfk.jl:20\n   [3] macro expansion\n     @ /tmp/tmpjdz11mfk.jl:32\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjdz11mfk.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpjdz11mfk.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  BoundsError\n  Stacktrace:\n   [1]\
    \ getindex(c::Char, i::Int64)\n     @ Base ./char.jl:198\n   [2] encode(message::String)\n\
    \     @ Main /tmp/tmpjdz11mfk.jl:18\n   [3] macro expansion\n     @ /tmp/tmpjdz11mfk.jl:33\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjdz11mfk.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpjdz11mfk.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  BoundsError\n  Stacktrace:\n   [1] getindex(c::Char,\
    \ i::Int64)\n     @ Base ./char.jl:198\n   [2] encode(message::String)\n     @\
    \ Main /tmp/tmpjdz11mfk.jl:20\n   [3] macro expansion\n     @ /tmp/tmpjdz11mfk.jl:34\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjdz11mfk.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpjdz11mfk.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  BoundsError\n \
    \ Stacktrace:\n   [1] getindex(c::Char, i::Int64)\n     @ Base ./char.jl:198\n\
    \   [2] encode(message::String)\n     @ Main /tmp/tmpjdz11mfk.jl:18\n   [3] macro\
    \ expansion\n     @ /tmp/tmpjdz11mfk.jl:35 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjdz11mfk.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9e7fsj9i.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp9e7fsj9i.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp9e7fsj9i.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9e7fsj9i.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp9e7fsj9i.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp9e7fsj9i.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp9e7fsj9i.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9e7fsj9i.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp9e7fsj9i.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9e7fsj9i.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqz3ttx_1.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpqz3ttx_1.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpqz3ttx_1.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqz3ttx_1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpqz3ttx_1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpqz3ttx_1.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpqz3ttx_1.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqz3ttx_1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpqz3ttx_1.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqz3ttx_1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptvzksf26.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmptvzksf26.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmptvzksf26.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptvzksf26.jl:21\ntest set:\
    \ Error During Test at /tmp/tmptvzksf26.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmptvzksf26.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmptvzksf26.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptvzksf26.jl:21\ntest set:\
    \ Error During Test at /tmp/tmptvzksf26.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptvzksf26.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa_xzb2an.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpa_xzb2an.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpa_xzb2an.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpa_xzb2an.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpa_xzb2an.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpa_xzb2an.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpa_xzb2an.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpa_xzb2an.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpa_xzb2an.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_xzb2an.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    new_message = \"\"\n    for i in message\n        if i in \"aeiouAEIOU\"\n\
    \            if i in \"aeiou\"\n                new_message *= string(i+2)\n \
    \           else\n                new_message *= string(i+2)\n            end\n\
    \        else\n            new_message *= string(i)\n        end\n    end\n  \
    \  return new_message\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8332qrla.jl:34\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8332qrla.jl:34 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8332qrla.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8332qrla.jl:35\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"Mwdcskr\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8332qrla.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8332qrla.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8332qrla.jl:36\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"YGS\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8332qrla.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8332qrla.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8332qrla.jl:37\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"Thks ks c mgsscgg\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8332qrla.jl:37 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8332qrla.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8332qrla.jl:38\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"K DqNt KnQw WhCt\
    \ tQ WrKtG\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8332qrla.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8332qrla.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8332qrla.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: Write your code here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv2hkhxfv.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpv2hkhxfv.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpv2hkhxfv.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv2hkhxfv.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpv2hkhxfv.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpv2hkhxfv.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpv2hkhxfv.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv2hkhxfv.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpv2hkhxfv.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # create a dictionary to map vowels to the next two letters\n    # in the\
    \ alphabet\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    next_two = [\"c\"\
    ,\"f\",\"j\",\"m\",\"q\"]\n    mapping = Dict()\n    for i in 1:length(vowels)\n\
    \        mapping[vowels[i]] = next_two[i]\n    end\n    # create a string to store\
    \ the encoded message\n    encoded = \"\"\n    # iterate through the message\n\
    \    for i in 1:length(message)\n        # if the letter is a vowel, replace it\
    \ with the next two letters\n        if message[i] in vowels\n            encoded\
    \ = encoded * mapping[message[i]]\n        # if the letter is a capital letter,\
    \ make it lowercase\n        elseif message[i] in uppercase(message)\n       \
    \     encoded = encoded * lowercase(message[i])\n        # if the letter is a\
    \ lowercase letter, make it uppercase\n        elseif message[i] in lowercase(message)\n\
    \            encoded = encoded * uppercase(message[i])\n        # if the letter\
    \ is not a letter, leave it alone\n        else\n            encoded = encoded\
    \ * message[i]\n        end\n    end\n    return encoded\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\"\
    )\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\")\
    \ == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphzmdebvb.jl:48\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"test\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphzmdebvb.jl:48 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzmdebvb.jl:47\ntest set: Test\
    \ Failed at /tmp/tmphzmdebvb.jl:49\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"mUDASIR\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphzmdebvb.jl:49 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzmdebvb.jl:47\ntest set: Test\
    \ Failed at /tmp/tmphzmdebvb.jl:50\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"yes\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphzmdebvb.jl:50\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzmdebvb.jl:47\ntest set: Test\
    \ Failed at /tmp/tmphzmdebvb.jl:51\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"tHIS IS A MESSAGE\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphzmdebvb.jl:51 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzmdebvb.jl:47\ntest set: Test\
    \ Failed at /tmp/tmphzmdebvb.jl:52\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"i dOnT kNoW wHaT\
    \ To wRiTe\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphzmdebvb.jl:52 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzmdebvb.jl:47\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphzmdebvb.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw58_r823.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpw58_r823.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpw58_r823.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpw58_r823.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpw58_r823.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpw58_r823.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpw58_r823.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpw58_r823.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpw58_r823.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw58_r823.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_1zgeukz.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp_1zgeukz.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp_1zgeukz.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_1zgeukz.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp_1zgeukz.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp_1zgeukz.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp_1zgeukz.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_1zgeukz.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp_1zgeukz.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_1zgeukz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    message = uppercase(message)\n    message = replace(message, \"A\", \"C\"\
    )\n    message = replace(message, \"E\", \"G\")\n    message = replace(message,\
    \ \"I\", \"K\")\n    message = replace(message, \"O\", \"Q\")\n    message = replace(message,\
    \ \"U\", \"W\")\n    message = replace(message, \"Y\", \"A\")\n    message = lowercase(message)\n\
    \    return message\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpned3gc_r.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: no method matching\
    \ replace(::String, ::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at set.jl:605\n    replace(::String, !Matched::Pair{var\"\
    #s75\", B} where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\n\
    \    replace(::String, !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpned3gc_r.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpned3gc_r.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpned3gc_r.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpned3gc_r.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at set.jl:605\n    replace(::String, !Matched::Pair{var\"\
    #s75\", B} where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\n\
    \    replace(::String, !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpned3gc_r.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpned3gc_r.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpned3gc_r.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpned3gc_r.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpned3gc_r.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    encoded = \"\"\n    for i in 1:length(message)\n        if islower(message[i])\n\
    \            encoded = encoded * uppercase(message[i])\n        elseif isupper(message[i])\n\
    \            encoded = encoded * lowercase(message[i])\n        else\n       \
    \     encoded = encoded * message[i]\n        end\n    end\n    return encoded\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"\
    TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
    YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk_3n689h.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpk_3n689h.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpk_3n689h.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk_3n689h.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpk_3n689h.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpk_3n689h.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpk_3n689h.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk_3n689h.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpk_3n689h.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: islower not defined\n  Stacktrace:\n\
    \   [1] encode(message::String)\n     @ Main /tmp/tmpk_3n689h.jl:17\n   [2] macro\
    \ expansion\n     @ /tmp/tmpk_3n689h.jl:34 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk_3n689h.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpk_3n689h.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ islower not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmpk_3n689h.jl:17\n   [2] macro expansion\n     @ /tmp/tmpk_3n689h.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk_3n689h.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpk_3n689h.jl:36\n  Test threw exception\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk_3n689h.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    return encode(collect(message))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp79bf866a.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: no method matching\
    \ encode(::Vector{Char})\n  Closest candidates are:\n    encode(!Matched::String)\
    \ at /tmp/tmp79bf866a.jl:14\n  Stacktrace:\n   [1] encode(message::String)\n \
    \    @ Main /tmp/tmp79bf866a.jl:15\n   [2] macro expansion\n     @ /tmp/tmp79bf866a.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp79bf866a.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp79bf866a.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: no method matching encode(::Vector{Char})\n\
    \  Closest candidates are:\n    encode(!Matched::String) at /tmp/tmp79bf866a.jl:14\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp79bf866a.jl:15\n\
    \   [2] macro expansion\n     @ /tmp/tmp79bf866a.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp79bf866a.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp79bf866a.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: no method matching encode(::Vector{Char})\n\
    \  Closest candidates are:\n    encode(!Matched::String) at /tmp/tmp79bf866a.jl:14\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp79bf866a.jl:15\n\
    \   [2] macro expansion\n     @ /tmp/tmp79bf866a.jl:24 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp79bf866a.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp79bf866a.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  MethodError: no\
    \ method matching encode(::Vector{Char})\n  Closest candidates are:\n    encode(!Matched::String)\
    \ at /tmp/tmp79bf866a.jl:14\n  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp79bf866a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # convert message to lowercase\n    message = lowercase(message)\n    # create\
    \ a dictionary to map letters to their encoded values\n    dict = Dict()\n   \
    \ # create a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    # create\
    \ a list of letters\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z']\n    # create a list of encoded letters\n    encoded_letters = ['c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b']\n    # loop through the letters and\
    \ encoded letters\n    for i in 1:length(letters)\n        # add the letter and\
    \ encoded letter to the dictionary\n        dict[letters[i]] = encoded_letters[i]\n\
    \    end\n    # create an empty string to store the encoded message\n    encoded_message\
    \ = \"\"\n    # loop through the message\n    for i in 1:length(message)\n   \
    \     # check if the letter is a vowel\n        if message[i] in vowels\n    \
    \        # add the encoded letter to the encoded message\n            encoded_message\
    \ = encoded_message * string(dict[message[i]])\n        else\n            # add\
    \ the letter to the encoded message\n            encoded_message = encoded_message\
    \ * string(message[i])\n        end\n    end\n    # return the encoded message\n\
    \    return uppercase(encoded_message)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpftrplnm9.jl:51\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpftrplnm9.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpftrplnm9.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpftrplnm9.jl:52\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"MWDCSKR\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpftrplnm9.jl:52 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpftrplnm9.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpftrplnm9.jl:53\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"YGS\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpftrplnm9.jl:53\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpftrplnm9.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpftrplnm9.jl:54\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"THKS KS C MGSSCGG\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpftrplnm9.jl:54 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpftrplnm9.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpftrplnm9.jl:55\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"K DQNT KNQW WHCT\
    \ TQ WRKTG\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpftrplnm9.jl:55 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpftrplnm9.jl:50\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpftrplnm9.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    message = uppercase(message)\n    vowels = \"AEIOU\"\n    for i in 1:length(message)\n\
    \        if message[i] in vowels\n            message[i] = vowels[(findfirst(vowels,\
    \ message[i]) + 2) % 5]\n        else\n            message[i] = lowercase(message[i])\n\
    \        end\n    end\n    return message\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz4s54jww.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: no method matching\
    \ setindex!(::String, ::Char, ::Int64)\n  Stacktrace:\n   [1] encode(message::String)\n\
    \     @ Main /tmp/tmpz4s54jww.jl:21\n   [2] macro expansion\n     @ /tmp/tmpz4s54jww.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz4s54jww.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpz4s54jww.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: no method matching setindex!(::String,\
    \ ::Char, ::Int64)\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmpz4s54jww.jl:21\n   [2] macro expansion\n     @ /tmp/tmpz4s54jww.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz4s54jww.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpz4s54jww.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: no method matching setindex!(::String,\
    \ ::Char, ::Int64)\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmpz4s54jww.jl:21\n   [2] macro expansion\n     @ /tmp/tmpz4s54jww.jl:33\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz4s54jww.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpz4s54jww.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  MethodError: no\
    \ method matching setindex!(::String, ::Char, ::Int64)\n  Stacktrace:\n   [1]\
    \ encode(message::String)\n     @ Main /tmp/tmpz4s54jww.jl:21\n   [2] macro expansion\n\
    \     @ /tmp/tmpz4s54jww.jl:34 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz4s54jww.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    new_message = \"\"\n    for i in message\n        if i in \"aeiou\"\n   \
    \         new_message = new_message * i[3]\n        elseif i in \"AEIOU\"\n  \
    \          new_message = new_message * i[3]\n        else\n            new_message\
    \ = new_message * i\n        end\n    end\n    return new_message\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") ==\
    \ \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
    YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn5ydwn4a.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  BoundsError\n  Stacktrace:\n\
    \   [1] getindex(c::Char, i::Int64)\n     @ Base ./char.jl:198\n   [2] encode(message::String)\n\
    \     @ Main /tmp/tmpn5ydwn4a.jl:20\n   [3] macro expansion\n     @ /tmp/tmpn5ydwn4a.jl:32\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn5ydwn4a.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpn5ydwn4a.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  BoundsError\n  Stacktrace:\n   [1]\
    \ getindex(c::Char, i::Int64)\n     @ Base ./char.jl:198\n   [2] encode(message::String)\n\
    \     @ Main /tmp/tmpn5ydwn4a.jl:18\n   [3] macro expansion\n     @ /tmp/tmpn5ydwn4a.jl:33\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn5ydwn4a.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpn5ydwn4a.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  BoundsError\n  Stacktrace:\n   [1] getindex(c::Char,\
    \ i::Int64)\n     @ Base ./char.jl:198\n   [2] encode(message::String)\n     @\
    \ Main /tmp/tmpn5ydwn4a.jl:20\n   [3] macro expansion\n     @ /tmp/tmpn5ydwn4a.jl:34\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn5ydwn4a.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpn5ydwn4a.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  BoundsError\n \
    \ Stacktrace:\n   [1] getindex(c::Char, i::Int64)\n     @ Base ./char.jl:198\n\
    \   [2] encode(message::String)\n     @ Main /tmp/tmpn5ydwn4a.jl:18\n   [3] macro\
    \ expansion\n     @ /tmp/tmpn5ydwn4a.jl:35 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn5ydwn4a.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpttjce2_x.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpttjce2_x.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpttjce2_x.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpttjce2_x.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpttjce2_x.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpttjce2_x.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpttjce2_x.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpttjce2_x.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpttjce2_x.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpttjce2_x.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdm6bvltt.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpdm6bvltt.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpdm6bvltt.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdm6bvltt.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpdm6bvltt.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpdm6bvltt.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpdm6bvltt.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdm6bvltt.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpdm6bvltt.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5x4jykkv.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp5x4jykkv.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5x4jykkv.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5x4jykkv.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp5x4jykkv.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp5x4jykkv.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5x4jykkv.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5x4jykkv.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp5x4jykkv.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # create a dictionary that maps vowels to the next two letters\n    # in\
    \ the alphabet\n    vowels = \"aeiou\"\n    next_two = Dict()\n    for i in 1:length(vowels)\n\
    \        next_two[vowels[i]] = vowels[i+2]\n    end\n    # create a dictionary\
    \ that maps uppercase letters to lowercase\n    # and vice versa\n    upper_to_lower\
    \ = Dict()\n    lower_to_upper = Dict()\n    for i in 'a':'z'\n        upper_to_lower[i]\
    \ = i\n        lower_to_upper[i] = i\n    end\n    for i in 'A':'Z'\n        upper_to_lower[i]\
    \ = i\n        lower_to_upper[i] = i\n    end\n    # create a dictionary that\
    \ maps letters to their next two letters\n    # in the alphabet\n    next_two\
    \ = Dict()\n    for i in 'a':'z'\n        next_two[i] = i\n    end\n    for i\
    \ in 'A':'Z'\n        next_two[i] = i\n    end\n    # create a dictionary that\
    \ maps letters to their next two letters\n    # in the alphabet\n    next_two\
    \ = Dict()\n    for i in 'a':'z'\n        next_two[i] = i\n    end\n    for i\
    \ in 'A':'Z'\n        next_two[i] = i\n    end\n    # create a dictionary that\
    \ maps letters to their next two letters\n    # in the alphabet\n    next_two\
    \ = Dict()\n    for i in 'a':'z'\n        next_two[i] = i\n    end\n    for i\
    \ in 'A':'Z'\n        next_two[i] = i\n    end\n    # create a dictionary that\
    \ maps letters to their next two letters\n    # in the alphabet\n    next_two\
    \ = Dict()\n    for i in 'a':'z'\n        next_two[i] = i\n    end\n    for i\
    \ in 'A':'Z'\n        next_two[i] = i\n    end\n    # create a dictionary that\
    \ maps letters\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"\
    TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
    YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp367par2_.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp367par2_.jl:1\n\
    in expression starting at /tmp/tmp367par2_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9gwoj016.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp9gwoj016.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp9gwoj016.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9gwoj016.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp9gwoj016.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp9gwoj016.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp9gwoj016.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9gwoj016.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp9gwoj016.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    new_message = \"\"\n    for i in 1:length(message)\n        if islower(message[i])\n\
    \            new_message *= uppercase(message[i])\n        elseif isupper(message[i])\n\
    \            new_message *= lowercase(message[i])\n        elseif message[i] in\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n            new_message *= next_vowel(message[i])\n\
    \        else\n            new_message *= message[i]\n        end\n    end\n \
    \   return new_message\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkuy8kkhf.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpkuy8kkhf.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpkuy8kkhf.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkuy8kkhf.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpkuy8kkhf.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpkuy8kkhf.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpkuy8kkhf.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkuy8kkhf.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpkuy8kkhf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: islower not defined\n  Stacktrace:\n\
    \   [1] encode(message::String)\n     @ Main /tmp/tmpkuy8kkhf.jl:17\n   [2] macro\
    \ expansion\n     @ /tmp/tmpkuy8kkhf.jl:36 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkuy8kkhf.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpkuy8kkhf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ islower not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmpkuy8kkhf.jl:17\n   [2] macro expansion\n     @ /tmp/tmpkuy8kkhf.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkuy8kkhf.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpkuy8kkhf.jl:38\n  Test threw exception\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkuy8kkhf.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcqdl6fo6.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpcqdl6fo6.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpcqdl6fo6.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcqdl6fo6.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpcqdl6fo6.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpcqdl6fo6.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpcqdl6fo6.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcqdl6fo6.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpcqdl6fo6.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvgbdyg_f.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpvgbdyg_f.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpvgbdyg_f.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvgbdyg_f.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpvgbdyg_f.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpvgbdyg_f.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpvgbdyg_f.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvgbdyg_f.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpvgbdyg_f.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvgbdyg_f.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe33x38sv.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpe33x38sv.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpe33x38sv.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpe33x38sv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpe33x38sv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpe33x38sv.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpe33x38sv.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpe33x38sv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpe33x38sv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe33x38sv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwhwrx6l2.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpwhwrx6l2.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpwhwrx6l2.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwhwrx6l2.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpwhwrx6l2.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpwhwrx6l2.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpwhwrx6l2.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwhwrx6l2.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpwhwrx6l2.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwhwrx6l2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpikiq4d0b.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpikiq4d0b.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpikiq4d0b.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpikiq4d0b.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpikiq4d0b.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpikiq4d0b.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpikiq4d0b.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpikiq4d0b.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpikiq4d0b.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpikiq4d0b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    new_message = \"\"\n    for i in 1:length(message)\n        if islower(message[i])\n\
    \            new_message = new_message * uppercase(message[i])\n        elseif\
    \ isupper(message[i])\n            new_message = new_message * lowercase(message[i])\n\
    \        else\n            new_message = new_message * message[i]\n        end\n\
    \    end\n    for i in 1:length(new_message)\n        if new_message[i] in ['a','e','i','o','u']\n\
    \            new_message[i] = new_message[i+2]\n        end\n    end\n    return\
    \ new_message\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"\
    TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
    YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpey6blop_.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpey6blop_.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpey6blop_.jl:37 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpey6blop_.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpey6blop_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpey6blop_.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpey6blop_.jl:38 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpey6blop_.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpey6blop_.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: islower not defined\n  Stacktrace:\n\
    \   [1] encode(message::String)\n     @ Main /tmp/tmpey6blop_.jl:17\n   [2] macro\
    \ expansion\n     @ /tmp/tmpey6blop_.jl:39 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpey6blop_.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpey6blop_.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ islower not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmpey6blop_.jl:17\n   [2] macro expansion\n     @ /tmp/tmpey6blop_.jl:40\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpey6blop_.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpey6blop_.jl:41\n  Test threw exception\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpey6blop_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz2tdrgwh.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpz2tdrgwh.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpz2tdrgwh.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz2tdrgwh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpz2tdrgwh.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpz2tdrgwh.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpz2tdrgwh.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz2tdrgwh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpz2tdrgwh.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz2tdrgwh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqdorqbr4.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpqdorqbr4.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpqdorqbr4.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqdorqbr4.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpqdorqbr4.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpqdorqbr4.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpqdorqbr4.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqdorqbr4.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpqdorqbr4.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqdorqbr4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    new_message = \"\"\n    for i in 1:length(message)\n        if message[i]\
    \ in ['a','e','i','o','u']\n            new_message = new_message * string(message[i]\
    \ + 2)\n        elseif message[i] in ['A','E','I','O','U']\n            new_message\
    \ = new_message * string(message[i] + 2)\n        else\n            new_message\
    \ = new_message * string(message[i])\n        end\n    end\n    return new_message\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"\
    TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
    YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptly996v1.jl:32\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmptly996v1.jl:32 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptly996v1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptly996v1.jl:33\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"Mwdcskr\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptly996v1.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptly996v1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptly996v1.jl:34\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"YGS\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptly996v1.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptly996v1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptly996v1.jl:35\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"Thks ks c mgsscgg\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptly996v1.jl:35 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptly996v1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptly996v1.jl:36\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"K DqNt KnQw WhCt\
    \ tQ WrKtG\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptly996v1.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptly996v1.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptly996v1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # create a dictionary of vowels\n    vowels = Dict('a'=>'c', 'e'=>'g', 'i'=>'k',\
    \ 'o'=>'q', 'u'=>'y')\n    # create an empty string to store the encoded message\n\
    \    encoded_message = \"\"\n    # iterate through the message\n    for letter\
    \ in message\n        # if the letter is a vowel, replace it with the value in\
    \ the dictionary\n        if letter in keys(vowels)\n            encoded_message\
    \ *= vowels[letter]\n        # if the letter is not a vowel, swap the case and\
    \ add it to the encoded message\n        else\n            encoded_message *=\
    \ swapcase(letter)\n        end\n    end\n    # return the encoded message\n \
    \   return encoded_message\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpinxofgfk.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: swapcase not\
    \ defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpinxofgfk.jl:26\n\
    \   [2] macro expansion\n     @ /tmp/tmpinxofgfk.jl:37 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpinxofgfk.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpinxofgfk.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: swapcase not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpinxofgfk.jl:26\n\
    \   [2] macro expansion\n     @ /tmp/tmpinxofgfk.jl:38 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpinxofgfk.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpinxofgfk.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: swapcase not defined\n  Stacktrace:\n\
    \   [1] encode(message::String)\n     @ Main /tmp/tmpinxofgfk.jl:26\n   [2] macro\
    \ expansion\n     @ /tmp/tmpinxofgfk.jl:39 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpinxofgfk.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpinxofgfk.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ swapcase not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @\
    \ Main /tmp/tmpinxofgfk.jl:26\n   [2] macro expansion\n     @ /tmp/tmpinxofgfk.jl:40\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpinxofgfk.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpinxofgfk.jl:41\n  Test threw exception\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpinxofgfk.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\n    return message\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp16k3u18d.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TEST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp16k3u18d.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp16k3u18d.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp16k3u18d.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"Mudasir\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp16k3u18d.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp16k3u18d.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp16k3u18d.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"YES\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp16k3u18d.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp16k3u18d.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp16k3u18d.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"This is a message\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp16k3u18d.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp16k3u18d.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp16k3u18d.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"I DoNt KnOw WhAt\
    \ tO WrItE\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp16k3u18d.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp16k3u18d.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp16k3u18d.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # convert to lowercase\n    message = lowercase(message)\n    # create a\
    \ dictionary that maps vowels to the next vowel\n    vowels = Dict('a'=>'c', 'e'=>'g',\
    \ 'i'=>'k', 'o'=>'q', 'u'=>'w')\n    # create a dictionary that maps vowels to\
    \ the next vowel\n    consonants = Dict('b'=>'d', 'c'=>'e', 'd'=>'f', 'f'=>'h',\
    \ 'g'=>'j', 'h'=>'k', 'j'=>'l', 'k'=>'m', 'l'=>'n', 'm'=>'p', 'n'=>'r', 'p'=>'t',\
    \ 'q'=>'v', 'r'=>'w', 's'=>'x', 't'=>'z', 'v'=>'b', 'w'=>'d', 'x'=>'f', 'y'=>'h',\
    \ 'z'=>'j')\n    # create an empty string to store the encoded message\n    encoded_message\
    \ = \"\"\n    # iterate through the message\n    for letter in message\n     \
    \   # if the letter is a vowel, replace it with the next vowel\n        if letter\
    \ in keys(vowels)\n            encoded_message = encoded_message * vowels[letter]\n\
    \        # if the letter is a consonant, replace it with the next consonant\n\
    \        elseif letter in keys(consonants)\n            encoded_message = encoded_message\
    \ * consonants[letter]\n        # otherwise, just add the letter to the encoded\
    \ message\n        else\n            encoded_message = encoded_message * letter\n\
    \        end\n    end\n    # return the encoded message\n    return uppercase(encoded_message)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"\
    TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
    YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfrkryj_g.jl:44\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"ZGXZ\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpfrkryj_g.jl:44 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfrkryj_g.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpfrkryj_g.jl:45\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"PWFCXKW\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfrkryj_g.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfrkryj_g.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpfrkryj_g.jl:46\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"HGX\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfrkryj_g.jl:46\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfrkryj_g.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpfrkryj_g.jl:47\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"ZKKX KX C PGXXCJG\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfrkryj_g.jl:47 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfrkryj_g.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpfrkryj_g.jl:48\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"K FQRZ MRQD DKCZ\
    \ ZQ DWKZG\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfrkryj_g.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfrkryj_g.jl:43\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfrkryj_g.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: write your code here\n    return \"\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf221g4z3.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"\" == \"tgst\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf221g4z3.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf221g4z3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpf221g4z3.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf221g4z3.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf221g4z3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpf221g4z3.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf221g4z3.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf221g4z3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpf221g4z3.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"\" == \"tHKS KS C MGSSCGG\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpf221g4z3.jl:26 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf221g4z3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpf221g4z3.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"\" == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf221g4z3.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf221g4z3.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf221g4z3.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    vowels = \"aeiou\"\n    new_message = \"\"\n    for letter in message\n \
    \       if letter in vowels\n            index = findfirst(vowels, letter)\n \
    \           new_message *= vowels[index + 2]\n        else\n            new_message\
    \ *= letter\n        end\n    end\n    return new_message\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\"\
    )\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\")\
    \ == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4t6o_922.jl:32\\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\\n   Evaluated: \"TEST\" == \"tgst\"\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp4t6o_922.jl:32 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp4t6o_922.jl:31\\ntest set: Error\
    \ During Test at /tmp/tmp4t6o_922.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encode(message::String)\\n     @ Main /tmp/tmp4t6o_922.jl:19\\n   [2]\
    \ macro expansion\\n     @ /tmp/tmp4t6o_922.jl:33 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4t6o_922.jl:31\\ntest set:\
    \ Test Failed at /tmp/tmp4t6o_922.jl:34\\n  Expression: candidate(\"YES\") ==\
    \ \"ygs\"\\n   Evaluated: \"YES\" == \"ygs\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp4t6o_922.jl:34 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp4t6o_922.jl:31\\ntest set: Error\
    \ During Test at /tmp/tmp4t6o_922.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\\n  MethodError: no\
    \ method matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n \
    \   findfirst(!Matched::Function, ::Any) at array.jl:1902\\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at strings/search.jl:104\\n    findfirst(::Any) at\
    \ array.jl:1818\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main\
    \ /tmp/tmp4t6o_922.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmp4t6o_922.jl:3"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl48vz96a.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpl48vz96a.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpl48vz96a.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl48vz96a.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpl48vz96a.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpl48vz96a.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpl48vz96a.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl48vz96a.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpl48vz96a.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvmbiehaf.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpvmbiehaf.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpvmbiehaf.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvmbiehaf.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpvmbiehaf.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpvmbiehaf.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpvmbiehaf.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvmbiehaf.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpvmbiehaf.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6d2phfb0.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp6d2phfb0.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6d2phfb0.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6d2phfb0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp6d2phfb0.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp6d2phfb0.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6d2phfb0.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6d2phfb0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp6d2phfb0.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # create a dictionary for the vowels\n    vowels = Dict('a'=>'c', 'e'=>'g',\
    \ 'i'=>'k', 'o'=>'q', 'u'=>'y')\n    # create a dictionary for the letters\n \
    \   letters = Dict('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F',\
    \ 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N',\
    \ 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V',\
    \ 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z')\n    # create a dictionary for the lower\
    \ case letters\n    lower_letters = Dict('a'=>'a', 'b'=>'b', 'c'=>'c', 'd'=>'d',\
    \ 'e'=>'e', 'f'=>'f', 'g'=>'g', 'h'=>'h', 'i'=>'i', 'j'=>'j', 'k'=>'k', 'l'=>'l',\
    \ 'm'=>'m', 'n'=>'n', 'o'=>'o', 'p'=>'p', 'q'=>'q', 'r'=>'r', 's'=>'s', 't'=>'t',\
    \ 'u'=>'u', 'v'=>'v', 'w'=>'w', 'x'=>'x', 'y'=>'y', 'z'=>'z')\n    # create a\
    \ dictionary for the upper case letters\n    upper_letters = Dict('A'=>'A', 'B'=>'B',\
    \ 'C'=>'C', 'D'=>'D', 'E'=>'E', 'F'=>'F', '\nusing Test\n\n@testset begin\n\n\
    candidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmp0wymxmqa.jl:28\nin expression starting at /tmp/tmp0wymxmqa.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmy0ydhsk.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpmy0ydhsk.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpmy0ydhsk.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmy0ydhsk.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpmy0ydhsk.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpmy0ydhsk.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpmy0ydhsk.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmy0ydhsk.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpmy0ydhsk.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: Write your code here\n    return \"TGST\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph9uy8w7a.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmph9uy8w7a.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph9uy8w7a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmph9uy8w7a.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmph9uy8w7a.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph9uy8w7a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmph9uy8w7a.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph9uy8w7a.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph9uy8w7a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmph9uy8w7a.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmph9uy8w7a.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph9uy8w7a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmph9uy8w7a.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph9uy8w7a.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph9uy8w7a.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9uy8w7a.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprmnqh1fc.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmprmnqh1fc.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmprmnqh1fc.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprmnqh1fc.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmprmnqh1fc.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmprmnqh1fc.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmprmnqh1fc.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprmnqh1fc.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmprmnqh1fc.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuqvhj49r.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpuqvhj49r.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpuqvhj49r.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuqvhj49r.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpuqvhj49r.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpuqvhj49r.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpuqvhj49r.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuqvhj49r.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpuqvhj49r.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6u8npoop.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp6u8npoop.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6u8npoop.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6u8npoop.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp6u8npoop.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp6u8npoop.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6u8npoop.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6u8npoop.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp6u8npoop.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: complete this function\n    return \"TGST\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\"\
    )\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\")\
    \ == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp05vsnisn.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp05vsnisn.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp05vsnisn.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp05vsnisn.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp05vsnisn.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp05vsnisn.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp05vsnisn.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp05vsnisn.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp05vsnisn.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp05vsnisn.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp05vsnisn.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp05vsnisn.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp05vsnisn.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp05vsnisn.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp05vsnisn.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp05vsnisn.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkxag9wdn.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpkxag9wdn.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpkxag9wdn.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkxag9wdn.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpkxag9wdn.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpkxag9wdn.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpkxag9wdn.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkxag9wdn.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpkxag9wdn.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6a9l6836.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp6a9l6836.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6a9l6836.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6a9l6836.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp6a9l6836.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp6a9l6836.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6a9l6836.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6a9l6836.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp6a9l6836.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_7stzyh7.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp_7stzyh7.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_7stzyh7.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_7stzyh7.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp_7stzyh7.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp_7stzyh7.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_7stzyh7.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_7stzyh7.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp_7stzyh7.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpay1qfj2h.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpay1qfj2h.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpay1qfj2h.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpay1qfj2h.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpay1qfj2h.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpay1qfj2h.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpay1qfj2h.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpay1qfj2h.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpay1qfj2h.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi90cuasa.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpi90cuasa.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpi90cuasa.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi90cuasa.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpi90cuasa.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpi90cuasa.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpi90cuasa.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi90cuasa.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpi90cuasa.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptttjfmlg.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmptttjfmlg.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmptttjfmlg.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptttjfmlg.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmptttjfmlg.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmptttjfmlg.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmptttjfmlg.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptttjfmlg.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmptttjfmlg.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjydalvqx.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpjydalvqx.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjydalvqx.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjydalvqx.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpjydalvqx.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpjydalvqx.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjydalvqx.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjydalvqx.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpjydalvqx.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # create a dictionary of vowels and their corresponding letters\n    vowels\
    \ = Dict('a'=>'c', 'e'=>'g', 'i'=>'k', 'o'=>'q', 'u'=>'y')\n    # create an empty\
    \ string to store the encoded message\n    encoded_message = \"\"\n    # iterate\
    \ through the message\n    for i in 1:length(message)\n        # if the letter\
    \ is a vowel, replace it with the corresponding letter\n        if message[i]\
    \ in keys(vowels)\n            encoded_message = encoded_message * vowels[message[i]]\n\
    \        # if the letter is not a vowel, swap the case\n        else\n       \
    \     if islower(message[i])\n                encoded_message = encoded_message\
    \ * uppercase(message[i])\n            else\n                encoded_message =\
    \ encoded_message * lowercase(message[i])\n            end\n        end\n    end\n\
    \    return encoded_message\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp28xhap1u.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp28xhap1u.jl:26\n\
    \   [2] macro expansion\n     @ /tmp/tmp28xhap1u.jl:40 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp28xhap1u.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp28xhap1u.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp28xhap1u.jl:26\n\
    \   [2] macro expansion\n     @ /tmp/tmp28xhap1u.jl:41 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp28xhap1u.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp28xhap1u.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: islower not defined\n  Stacktrace:\n\
    \   [1] encode(message::String)\n     @ Main /tmp/tmp28xhap1u.jl:26\n   [2] macro\
    \ expansion\n     @ /tmp/tmp28xhap1u.jl:42 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp28xhap1u.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp28xhap1u.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ islower not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmp28xhap1u.jl:26\n   [2] macro expansion\n     @ /tmp/tmp28xhap1u.jl:43\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp28xhap1u.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp28xhap1u.jl:44\n  Test threw exception\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp28xhap1u.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    vowels = \"aeiou\"\n    new_message = \"\"\n    for i in 1:length(message)\n\
    \        if message[i] in vowels\n            new_message = new_message * message[i+2]\n\
    \        else\n            new_message = new_message * message[i]\n        end\n\
    \    end\n    return new_message\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjthi4ls4.jl:31\\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\\n   Evaluated: \"TEST\" == \"tgst\"\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpjthi4ls4.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjthi4ls4.jl:30\\ntest set: Error\
    \ During Test at /tmp/tmpjthi4ls4.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  BoundsError: attempt to access 7-codeunit\
    \ String at index [8]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102 [inlined]\\n  \
    \ [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n   [4] encode(message::String)\\\
    n     @ Main /tmp/tmpjthi4ls4.jl:19\\n   [5] macro expansion\\n     @ /tmp/tmpjthi4ls4.jl:32\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpjthi4ls4.jl:30\\ntest set:\
    \ Test Failed at /tmp/tmpjthi4ls4.jl:33\\n  Expression: candidate(\"YES\") ==\
    \ \"ygs\"\\n   Evaluated: \"YES\" == \"ygs\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpjthi4ls4.jl:33 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjthi4ls4.jl:30\\ntest set: Error\
    \ During Test at /tmp/tmpjthi4ls4.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\\n  BoundsError: attempt\
    \ to access 17-codeunit String at index [19]\\n  Stacktrace:\\n   [1] checkbounds\\\
    n     @ ./strings/basic.jl:216 [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102\
    \ [inlined]\\n   [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n  \
    \ [4] encode(message::String)\\n     @ Main /tmp/tmpjthi4ls4.jl:19\\n   [5] macro\
    \ expansion\\n     @ /tmp/tmpjthi4ls4.jl:34 [inlined]\\n   [6] macro expansion\\\
    n     @ /buildwork"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7ltpl25z.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp7ltpl25z.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7ltpl25z.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7ltpl25z.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7ltpl25z.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp7ltpl25z.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7ltpl25z.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7ltpl25z.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7ltpl25z.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpa9qpf74x.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpa9qpf74x.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpa9qpf74x.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpa9qpf74x.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpa9qpf74x.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpa9qpf74x.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpa9qpf74x.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpa9qpf74x.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpa9qpf74x.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\n    return \"TGST\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6ahseivp.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6ahseivp.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ahseivp.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6ahseivp.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6ahseivp.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ahseivp.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6ahseivp.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ahseivp.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ahseivp.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6ahseivp.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ahseivp.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ahseivp.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6ahseivp.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ahseivp.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ahseivp.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ahseivp.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjjbs84ez.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpjjbs84ez.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjjbs84ez.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjjbs84ez.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpjjbs84ez.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpjjbs84ez.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjjbs84ez.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjjbs84ez.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpjjbs84ez.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9qunodhj.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp9qunodhj.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp9qunodhj.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9qunodhj.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp9qunodhj.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp9qunodhj.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp9qunodhj.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9qunodhj.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp9qunodhj.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpid73r9dc.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpid73r9dc.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpid73r9dc.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpid73r9dc.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpid73r9dc.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpid73r9dc.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpid73r9dc.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpid73r9dc.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpid73r9dc.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpab8z1gaz.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpab8z1gaz.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpab8z1gaz.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpab8z1gaz.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpab8z1gaz.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpab8z1gaz.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpab8z1gaz.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpab8z1gaz.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpab8z1gaz.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8jh6t26e.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp8jh6t26e.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp8jh6t26e.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8jh6t26e.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp8jh6t26e.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp8jh6t26e.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp8jh6t26e.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8jh6t26e.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp8jh6t26e.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8pv_03p1.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp8pv_03p1.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp8pv_03p1.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8pv_03p1.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp8pv_03p1.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp8pv_03p1.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp8pv_03p1.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8pv_03p1.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp8pv_03p1.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # create a dictionary of vowels and their replacements\n    vowels = Dict('a'=>'c',\
    \ 'e'=>'g', 'i'=>'k', 'o'=>'q', 'u'=>'y')\n    # create an empty string to store\
    \ the encoded message\n    encoded = \"\"\n    # loop through each character in\
    \ the message\n    for c in message\n        # if the character is a vowel, replace\
    \ it with the value in the dictionary\n        if c in keys(vowels)\n        \
    \    encoded *= vowels[c]\n        # if the character is a lowercase letter, swap\
    \ it to uppercase\n        elseif c in 'abcdefghijklmnopqrstuvwxyz'\n        \
    \    encoded *= uppercase(c)\n        # if the character is an uppercase letter,\
    \ swap it to lowercase\n        elseif c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n   \
    \         encoded *= lowercase(c)\n        # if the character is not a letter,\
    \ leave it as is\n        else\n            encoded *= c\n        end\n    end\n\
    \    # return the encoded message\n    return encoded\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpsbrpdrck.jl:25\nin expression\
    \ starting at /tmp/tmpsbrpdrck.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\n    return \"\"\nend\nusing Test\n\n@testset begin\n\n\
    candidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphviznt5o.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"\" == \"tgst\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphviznt5o.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphviznt5o.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphviznt5o.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphviznt5o.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphviznt5o.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphviznt5o.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphviznt5o.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphviznt5o.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphviznt5o.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"\" == \"tHKS KS C MGSSCGG\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphviznt5o.jl:26 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphviznt5o.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphviznt5o.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"\" == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphviznt5o.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphviznt5o.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphviznt5o.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpaflctbxw.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpaflctbxw.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpaflctbxw.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpaflctbxw.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpaflctbxw.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpaflctbxw.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpaflctbxw.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpaflctbxw.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpaflctbxw.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    encoded_message = \"\"\n    for letter in message\n        if letter in \"\
    aeiou\"\n            encoded_message *= encode_vowel(letter)\n        elseif letter\
    \ in \"AEIOU\"\n            encoded_message *= encode_vowel(letter)\n        elseif\
    \ letter in \"abcdefghijklmnopqrstuvwxyz\"\n            encoded_message *= encode_consonant(letter)\n\
    \        elseif letter in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            encoded_message\
    \ *= encode_consonant(letter)\n        else\n            encoded_message *= letter\n\
    \        end\n    end\n    return encoded_message\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3jn66eph.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: encode_consonant\
    \ not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp3jn66eph.jl:24\n\
    \   [2] macro expansion\n     @ /tmp/tmp3jn66eph.jl:36 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3jn66eph.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3jn66eph.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: encode_consonant not\
    \ defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp3jn66eph.jl:24\n\
    \   [2] macro expansion\n     @ /tmp/tmp3jn66eph.jl:37 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3jn66eph.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3jn66eph.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: encode_consonant not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp3jn66eph.jl:24\n\
    \   [2] macro expansion\n     @ /tmp/tmp3jn66eph.jl:38 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3jn66eph.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3jn66eph.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ encode_consonant not defined\n  Stacktrace:\n   [1] encode(message::String)\n\
    \     @ Main /tmp/tmp3jn66eph.jl:24\n   [2] macro expansion\n     @ /tmp/tmp3jn66eph.jl:39\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3jn66eph.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3jn66ep"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3jn66eph.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: write code here\n    return message\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbr2ftaq4.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TEST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbr2ftaq4.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbr2ftaq4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpbr2ftaq4.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"Mudasir\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbr2ftaq4.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbr2ftaq4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpbr2ftaq4.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"YES\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbr2ftaq4.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbr2ftaq4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpbr2ftaq4.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"This is a message\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbr2ftaq4.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbr2ftaq4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpbr2ftaq4.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"I DoNt KnOw WhAt\
    \ tO WrItE\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbr2ftaq4.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbr2ftaq4.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbr2ftaq4.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\n    return \"TGST\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7p7ho6zx.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7p7ho6zx.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7p7ho6zx.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp7p7ho6zx.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7p7ho6zx.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7p7ho6zx.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp7p7ho6zx.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7p7ho6zx.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7p7ho6zx.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp7p7ho6zx.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7p7ho6zx.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7p7ho6zx.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp7p7ho6zx.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7p7ho6zx.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7p7ho6zx.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7p7ho6zx.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    new_message = \"\"\n    for i in 1:length(message)\n        if islower(message[i])\n\
    \            new_message = new_message * uppercase(message[i])\n        elseif\
    \ isupper(message[i])\n            new_message = new_message * lowercase(message[i])\n\
    \        else\n            new_message = new_message * message[i]\n        end\n\
    \    end\n    return new_message\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9i2ab2hq.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp9i2ab2hq.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmp9i2ab2hq.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9i2ab2hq.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp9i2ab2hq.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp9i2ab2hq.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmp9i2ab2hq.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9i2ab2hq.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp9i2ab2hq.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: islower not defined\n  Stacktrace:\n\
    \   [1] encode(message::String)\n     @ Main /tmp/tmp9i2ab2hq.jl:17\n   [2] macro\
    \ expansion\n     @ /tmp/tmp9i2ab2hq.jl:34 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9i2ab2hq.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp9i2ab2hq.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ islower not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmp9i2ab2hq.jl:17\n   [2] macro expansion\n     @ /tmp/tmp9i2ab2hq.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9i2ab2hq.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp9i2ab2hq.jl:36\n  Test threw exception\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9i2ab2hq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7sphlf45.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp7sphlf45.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7sphlf45.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7sphlf45.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7sphlf45.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp7sphlf45.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7sphlf45.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7sphlf45.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7sphlf45.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgetwizmk.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpgetwizmk.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgetwizmk.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgetwizmk.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpgetwizmk.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpgetwizmk.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgetwizmk.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgetwizmk.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpgetwizmk.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpanx2yo47.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpanx2yo47.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpanx2yo47.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpanx2yo47.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpanx2yo47.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpanx2yo47.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpanx2yo47.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpanx2yo47.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpanx2yo47.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\n    return \"TGST\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp72qgm50a.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp72qgm50a.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp72qgm50a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp72qgm50a.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp72qgm50a.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp72qgm50a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp72qgm50a.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp72qgm50a.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp72qgm50a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp72qgm50a.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp72qgm50a.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp72qgm50a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp72qgm50a.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp72qgm50a.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp72qgm50a.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp72qgm50a.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn115q0zp.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpn115q0zp.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpn115q0zp.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpn115q0zp.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpn115q0zp.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpn115q0zp.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpn115q0zp.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpn115q0zp.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpn115q0zp.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn115q0zp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps_dl5koa.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmps_dl5koa.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmps_dl5koa.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmps_dl5koa.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmps_dl5koa.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmps_dl5koa.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmps_dl5koa.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmps_dl5koa.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmps_dl5koa.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvj62m8pn.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpvj62m8pn.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpvj62m8pn.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvj62m8pn.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpvj62m8pn.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpvj62m8pn.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpvj62m8pn.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvj62m8pn.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpvj62m8pn.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvj62m8pn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu0jv8cbo.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpu0jv8cbo.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpu0jv8cbo.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpu0jv8cbo.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpu0jv8cbo.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpu0jv8cbo.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpu0jv8cbo.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpu0jv8cbo.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpu0jv8cbo.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu0jv8cbo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: Write your code here\n    return \"TGST\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf84m3fee.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpf84m3fee.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf84m3fee.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpf84m3fee.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf84m3fee.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf84m3fee.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpf84m3fee.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf84m3fee.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf84m3fee.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpf84m3fee.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpf84m3fee.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf84m3fee.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpf84m3fee.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf84m3fee.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf84m3fee.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf84m3fee.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # convert to upper case\n    message = uppercase(message)\n    # create a\
    \ dictionary with the vowels and their replacements\n    vowels = Dict('A'=>'C',\
    \ 'E'=>'G', 'I'=>'K', 'O'=>'Q', 'U'=>'S')\n    # create an empty string to store\
    \ the encoded message\n    encoded = \"\"\n    # loop through each character in\
    \ the message\n    for char in message\n        # if the character is a vowel,\
    \ replace it with the value from the dictionary\n        if char in keys(vowels)\n\
    \            encoded *= vowels[char]\n        # if the character is not a vowel,\
    \ swap the case and add it to the encoded message\n        else\n            encoded\
    \ *= swapcase(char)\n        end\n    end\n    # return the encoded message\n\
    \    return encoded\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0p9h084o.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: swapcase not\
    \ defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp0p9h084o.jl:28\n\
    \   [2] macro expansion\n     @ /tmp/tmp0p9h084o.jl:39 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0p9h084o.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp0p9h084o.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: swapcase not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp0p9h084o.jl:28\n\
    \   [2] macro expansion\n     @ /tmp/tmp0p9h084o.jl:40 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0p9h084o.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp0p9h084o.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: swapcase not defined\n  Stacktrace:\n\
    \   [1] encode(message::String)\n     @ Main /tmp/tmp0p9h084o.jl:28\n   [2] macro\
    \ expansion\n     @ /tmp/tmp0p9h084o.jl:41 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0p9h084o.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp0p9h084o.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ swapcase not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @\
    \ Main /tmp/tmp0p9h084o.jl:28\n   [2] macro expansion\n     @ /tmp/tmp0p9h084o.jl:42\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0p9h084o.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp0p9h084o.jl:43\n  Test threw exception\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0p9h084o.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw563ywce.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpw563ywce.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpw563ywce.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw563ywce.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpw563ywce.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpw563ywce.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpw563ywce.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw563ywce.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpw563ywce.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpusw5do9k.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpusw5do9k.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpusw5do9k.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpusw5do9k.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpusw5do9k.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpusw5do9k.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpusw5do9k.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpusw5do9k.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpusw5do9k.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\n    return \"TGST\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpswo9xt9e.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpswo9xt9e.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpswo9xt9e.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpswo9xt9e.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpswo9xt9e.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpswo9xt9e.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpswo9xt9e.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpswo9xt9e.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpswo9xt9e.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpswo9xt9e.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpswo9xt9e.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpswo9xt9e.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpswo9xt9e.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpswo9xt9e.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpswo9xt9e.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpswo9xt9e.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwuldfcco.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpwuldfcco.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpwuldfcco.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwuldfcco.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpwuldfcco.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpwuldfcco.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpwuldfcco.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwuldfcco.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpwuldfcco.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\n    return \"TGST\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpno13whg6.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpno13whg6.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpno13whg6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpno13whg6.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpno13whg6.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpno13whg6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpno13whg6.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpno13whg6.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpno13whg6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpno13whg6.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpno13whg6.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpno13whg6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpno13whg6.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpno13whg6.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpno13whg6.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpno13whg6.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    result = \"\"\n    for c in message\n        if isalpha(c)\n            if\
    \ islower(c)\n                result *= uppercase(c)\n            else\n     \
    \           result *= lowercase(c)\n            end\n            if c in \"aeiou\"\
    \n                result *= nextind(c, 2)\n            elseif c in \"AEIOU\"\n\
    \                result *= nextind(c, 2)\n            else\n                result\
    \ *= c\n            end\n        else\n            result *= c\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyivukolg.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: isalpha not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpyivukolg.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpyivukolg.jl:41 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyivukolg.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpyivukolg.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: isalpha not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpyivukolg.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpyivukolg.jl:42 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyivukolg.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpyivukolg.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: isalpha not defined\n  Stacktrace:\n\
    \   [1] encode(message::String)\n     @ Main /tmp/tmpyivukolg.jl:17\n   [2] macro\
    \ expansion\n     @ /tmp/tmpyivukolg.jl:43 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyivukolg.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpyivukolg.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ isalpha not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmpyivukolg.jl:17\n   [2] macro expansion\n     @ /tmp/tmpyivukolg.jl:44\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyivukolg.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpyivukolg.jl:45\n  Test threw exception\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyivukolg.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzws1w197.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpzws1w197.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpzws1w197.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzws1w197.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpzws1w197.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpzws1w197.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpzws1w197.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzws1w197.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpzws1w197.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\n    return \"TGST\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppz0yghjy.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppz0yghjy.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppz0yghjy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppz0yghjy.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppz0yghjy.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppz0yghjy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppz0yghjy.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppz0yghjy.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppz0yghjy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppz0yghjy.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmppz0yghjy.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppz0yghjy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppz0yghjy.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppz0yghjy.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppz0yghjy.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppz0yghjy.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    new_message = \"\"\n    for i in 1:length(message)\n        if islower(message[i])\n\
    \            new_message = new_message * uppercase(message[i])\n        elseif\
    \ isupper(message[i])\n            new_message = new_message * lowercase(message[i])\n\
    \        else\n            new_message = new_message * message[i]\n        end\n\
    \    end\n    new_message\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8bjrjj9f.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp8bjrjj9f.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmp8bjrjj9f.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8bjrjj9f.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp8bjrjj9f.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp8bjrjj9f.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmp8bjrjj9f.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8bjrjj9f.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp8bjrjj9f.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: islower not defined\n  Stacktrace:\n\
    \   [1] encode(message::String)\n     @ Main /tmp/tmp8bjrjj9f.jl:17\n   [2] macro\
    \ expansion\n     @ /tmp/tmp8bjrjj9f.jl:34 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8bjrjj9f.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp8bjrjj9f.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ islower not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmp8bjrjj9f.jl:17\n   [2] macro expansion\n     @ /tmp/tmp8bjrjj9f.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8bjrjj9f.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp8bjrjj9f.jl:36\n  Test threw exception\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8bjrjj9f.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # create a dictionary of vowels and their replacements\n    vowels = Dict('a'=>'c',\
    \ 'e'=>'g', 'i'=>'k', 'o'=>'q', 'u'=>'y')\n    # create a dictionary of lowercase\
    \ letters and their replacements\n    lowercase = Dict('a'=>'A', 'b'=>'B', 'c'=>'C',\
    \ 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K',\
    \ 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S',\
    \ 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z')\n    #\
    \ create a dictionary of uppercase letters and their replacements\n    uppercase\
    \ = Dict('A'=>'a', 'B'=>'b', 'C'=>'c', 'D'=>'d', 'E'=>'e', 'F'=>'f', 'G'=>'g',\
    \ 'H'=>'h', 'I'=>'i', 'J'=>'j', 'K'=>'k', 'L'=>'l', 'M'=>'m', 'N'=>'n', 'O'=>'o',\
    \ 'P'=>'p', 'Q'=>'q', 'R'=>'r', 'S'=>'s', 'T'=>'t', 'U'=>'u', 'V'=>'v', 'W'=>'w',\
    \ 'X'=>'x', 'Y'=>'y', 'Z'=>'z')\n    # create an empty string to store the encoded\
    \ message\n    encoded = \"\"\n    # iterate through each character in the message\n\
    \    for c in message\n        # if the character is a vowel, replace it with\
    \ the value in the vow\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\t\
    @test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\"\
    )\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\")\
    \ == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp38ekml26.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp38ekml26.jl:1\n\
    in expression starting at /tmp/tmp38ekml26.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7btsm0bj.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp7btsm0bj.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7btsm0bj.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7btsm0bj.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7btsm0bj.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp7btsm0bj.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7btsm0bj.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7btsm0bj.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7btsm0bj.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpze72dbj6.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpze72dbj6.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpze72dbj6.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpze72dbj6.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpze72dbj6.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpze72dbj6.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpze72dbj6.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpze72dbj6.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpze72dbj6.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    vowels = \"aeiou\"\n    new_message = \"\"\n    for i in message\n      \
    \  if i in vowels\n            new_message *= vowels[(findfirst(vowels, i) + 2)\
    \ % 5]\n        elseif i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            new_message\
    \ *= lowercase(i)\n        elseif i in \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \      new_message *= uppercase(i)\n        else\n            new_message *= i\n\
    \        end\n    end\n    return new_message\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphgbu9gft.jl:35\\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\\n   Evaluated: \"test\" == \"tgst\"\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmphgbu9gft.jl:35 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphgbu9gft.jl:34\\ntest set: Error\
    \ During Test at /tmp/tmphgbu9gft.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encode(message::String)\\n     @ Main /tmp/tmphgbu9gft.jl:19\\n   [2]\
    \ macro expansion\\n     @ /tmp/tmphgbu9gft.jl:36 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphgbu9gft.jl:34\\ntest set:\
    \ Test Failed at /tmp/tmphgbu9gft.jl:37\\n  Expression: candidate(\"YES\") ==\
    \ \"ygs\"\\n   Evaluated: \"yes\" == \"ygs\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmphgbu9gft.jl:37 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphgbu9gft.jl:34\\ntest set: Error\
    \ During Test at /tmp/tmphgbu9gft.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\\n  MethodError: no\
    \ method matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n \
    \   findfirst(!Matched::Function, ::Any) at array.jl:1902\\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at strings/search.jl:104\\n    findfirst(::Any) at\
    \ array.jl:1818\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main\
    \ /tmp/tmphgbu9gft.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmphgbu9gft.jl:3"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpaubwshh7.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpaubwshh7.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpaubwshh7.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpaubwshh7.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpaubwshh7.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpaubwshh7.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpaubwshh7.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpaubwshh7.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpaubwshh7.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\n    return message\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc4e93r6f.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TEST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpc4e93r6f.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4e93r6f.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpc4e93r6f.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"Mudasir\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc4e93r6f.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4e93r6f.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpc4e93r6f.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"YES\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc4e93r6f.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4e93r6f.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpc4e93r6f.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"This is a message\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc4e93r6f.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4e93r6f.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpc4e93r6f.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"I DoNt KnOw WhAt\
    \ tO WrItE\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc4e93r6f.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4e93r6f.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc4e93r6f.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\n    return message\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplwen_oqh.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TEST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmplwen_oqh.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplwen_oqh.jl:22\ntest set: Test\
    \ Failed at /tmp/tmplwen_oqh.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"Mudasir\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplwen_oqh.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplwen_oqh.jl:22\ntest set: Test\
    \ Failed at /tmp/tmplwen_oqh.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"YES\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplwen_oqh.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplwen_oqh.jl:22\ntest set: Test\
    \ Failed at /tmp/tmplwen_oqh.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"This is a message\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplwen_oqh.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplwen_oqh.jl:22\ntest set: Test\
    \ Failed at /tmp/tmplwen_oqh.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"I DoNt KnOw WhAt\
    \ tO WrItE\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplwen_oqh.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplwen_oqh.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplwen_oqh.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    message = uppercase(message)\n    vowels = \"AEIOU\"\n    for i in 1:length(message)\n\
    \        if message[i] in vowels\n            message[i] = vowels[mod1(findfirst(vowels,\
    \ message[i]) + 2, length(vowels))]\n        else\n            message[i] = lowercase(message[i])\n\
    \        end\n    end\n    return message\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxzrbmajo.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: no method matching\
    \ setindex!(::String, ::Char, ::Int64)\n  Stacktrace:\n   [1] encode(message::String)\n\
    \     @ Main /tmp/tmpxzrbmajo.jl:21\n   [2] macro expansion\n     @ /tmp/tmpxzrbmajo.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxzrbmajo.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpxzrbmajo.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: no method matching setindex!(::String,\
    \ ::Char, ::Int64)\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmpxzrbmajo.jl:21\n   [2] macro expansion\n     @ /tmp/tmpxzrbmajo.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxzrbmajo.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpxzrbmajo.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: no method matching setindex!(::String,\
    \ ::Char, ::Int64)\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmpxzrbmajo.jl:21\n   [2] macro expansion\n     @ /tmp/tmpxzrbmajo.jl:33\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpxzrbmajo.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpxzrbmajo.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  MethodError: no\
    \ method matching setindex!(::String, ::Char, ::Int64)\n  Stacktrace:\n   [1]\
    \ encode(message::String)\n     @ Main /tmp/tmpxzrbmajo.jl:21\n   [2] macro expansion\n\
    \     @ /tmp/tmpxzrbmajo.jl:34 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxzrbmajo.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3h1ab7eq.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp3h1ab7eq.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3h1ab7eq.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3h1ab7eq.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp3h1ab7eq.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp3h1ab7eq.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3h1ab7eq.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3h1ab7eq.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp3h1ab7eq.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: write your code here\n    return message\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2ihcelt5.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TEST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2ihcelt5.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ihcelt5.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2ihcelt5.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"Mudasir\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2ihcelt5.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ihcelt5.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2ihcelt5.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"YES\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2ihcelt5.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ihcelt5.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2ihcelt5.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"This is a message\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2ihcelt5.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ihcelt5.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2ihcelt5.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"I DoNt KnOw WhAt\
    \ tO WrItE\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2ihcelt5.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ihcelt5.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2ihcelt5.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfsm8p0a0.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpfsm8p0a0.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfsm8p0a0.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfsm8p0a0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpfsm8p0a0.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpfsm8p0a0.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfsm8p0a0.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfsm8p0a0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpfsm8p0a0.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7tj90afy.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp7tj90afy.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp7tj90afy.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7tj90afy.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp7tj90afy.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp7tj90afy.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp7tj90afy.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp7tj90afy.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp7tj90afy.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7tj90afy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\n    return message\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwf9lhbs4.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TEST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwf9lhbs4.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwf9lhbs4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwf9lhbs4.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"Mudasir\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwf9lhbs4.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwf9lhbs4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwf9lhbs4.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"YES\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwf9lhbs4.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwf9lhbs4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwf9lhbs4.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"This is a message\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwf9lhbs4.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwf9lhbs4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwf9lhbs4.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"I DoNt KnOw WhAt\
    \ tO WrItE\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwf9lhbs4.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwf9lhbs4.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwf9lhbs4.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    message = uppercase(message)\n    vowels = [\"A\", \"E\", \"I\", \"O\", \"\
    U\"]\n    for i in 1:length(message)\n        if message[i] in vowels\n      \
    \      message[i] = vowels[mod(findfirst(vowels, message[i])+2, 5)]\n        else\n\
    \            message[i] = lowercase(message[i])\n        end\n    end\n    return\
    \ message\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"\
    TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
    YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8kwqskz6.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: no\
    \ method matching setindex!(::String, ::Char, ::Int64)\\n  Stacktrace:\\n   [1]\
    \ encode(message::String)\\n     @ Main /tmp/tmp8kwqskz6.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp8kwqskz6.jl:31 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8kwqskz6.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp8kwqskz6.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: no method matching setindex!(::String,\
    \ ::Char, ::Int64)\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main\
    \ /tmp/tmp8kwqskz6.jl:21\\n   [2] macro expansion\\n     @ /tmp/tmp8kwqskz6.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8kwqskz6.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp8kwqskz6.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: no method matching setindex!(::String,\
    \ ::Char, ::Int64)\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main\
    \ /tmp/tmp8kwqskz6.jl:21\\n   [2] macro expansion\\n     @ /tmp/tmp8kwqskz6.jl:33\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8kwqskz6.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp8kwqskz6.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\\n  MethodError: no\
    \ method matching setindex!(::String, ::Char, ::Int64)\\n  Stacktrace:\\n   [1]\
    \ encode(message::String)\\n     @ Main /tmp/tmp8kwqskz6.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp8kwqskz6.jl:34 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/shar"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    new_message = \"\"\n    for i in message\n        if i in \"aeiou\"\n   \
    \         new_message = new_message * i[3]\n        elseif i in \"AEIOU\"\n  \
    \          new_message = new_message * i[3]\n        else\n            new_message\
    \ = new_message * i\n        end\n    end\n    return new_message\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") ==\
    \ \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
    YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptq4s03u9.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  BoundsError\n  Stacktrace:\n\
    \   [1] getindex(c::Char, i::Int64)\n     @ Base ./char.jl:198\n   [2] encode(message::String)\n\
    \     @ Main /tmp/tmptq4s03u9.jl:20\n   [3] macro expansion\n     @ /tmp/tmptq4s03u9.jl:32\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptq4s03u9.jl:31\ntest set:\
    \ Error During Test at /tmp/tmptq4s03u9.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  BoundsError\n  Stacktrace:\n   [1]\
    \ getindex(c::Char, i::Int64)\n     @ Base ./char.jl:198\n   [2] encode(message::String)\n\
    \     @ Main /tmp/tmptq4s03u9.jl:18\n   [3] macro expansion\n     @ /tmp/tmptq4s03u9.jl:33\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptq4s03u9.jl:31\ntest set:\
    \ Error During Test at /tmp/tmptq4s03u9.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  BoundsError\n  Stacktrace:\n   [1] getindex(c::Char,\
    \ i::Int64)\n     @ Base ./char.jl:198\n   [2] encode(message::String)\n     @\
    \ Main /tmp/tmptq4s03u9.jl:20\n   [3] macro expansion\n     @ /tmp/tmptq4s03u9.jl:34\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptq4s03u9.jl:31\ntest set:\
    \ Error During Test at /tmp/tmptq4s03u9.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  BoundsError\n \
    \ Stacktrace:\n   [1] getindex(c::Char, i::Int64)\n     @ Base ./char.jl:198\n\
    \   [2] encode(message::String)\n     @ Main /tmp/tmptq4s03u9.jl:18\n   [3] macro\
    \ expansion\n     @ /tmp/tmptq4s03u9.jl:35 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptq4s03u9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk1eakr9n.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpk1eakr9n.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpk1eakr9n.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk1eakr9n.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpk1eakr9n.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpk1eakr9n.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpk1eakr9n.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk1eakr9n.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpk1eakr9n.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: Write your code here\n    return message\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo0gtrm1s.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TEST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpo0gtrm1s.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo0gtrm1s.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpo0gtrm1s.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"Mudasir\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo0gtrm1s.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo0gtrm1s.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpo0gtrm1s.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"YES\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo0gtrm1s.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo0gtrm1s.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpo0gtrm1s.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"This is a message\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo0gtrm1s.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo0gtrm1s.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpo0gtrm1s.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"I DoNt KnOw WhAt\
    \ tO WrItE\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo0gtrm1s.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo0gtrm1s.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo0gtrm1s.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\n    return \"TGST\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1yr4ks0t.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1yr4ks0t.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1yr4ks0t.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1yr4ks0t.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1yr4ks0t.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1yr4ks0t.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1yr4ks0t.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1yr4ks0t.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1yr4ks0t.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1yr4ks0t.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1yr4ks0t.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1yr4ks0t.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1yr4ks0t.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1yr4ks0t.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1yr4ks0t.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1yr4ks0t.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi7fk1l_i.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpi7fk1l_i.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpi7fk1l_i.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi7fk1l_i.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpi7fk1l_i.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpi7fk1l_i.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpi7fk1l_i.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi7fk1l_i.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpi7fk1l_i.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1opnq3q0.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp1opnq3q0.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp1opnq3q0.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1opnq3q0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp1opnq3q0.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp1opnq3q0.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp1opnq3q0.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1opnq3q0.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp1opnq3q0.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn4u19f83.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpn4u19f83.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpn4u19f83.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpn4u19f83.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpn4u19f83.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpn4u19f83.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpn4u19f83.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpn4u19f83.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpn4u19f83.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7lqo86af.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp7lqo86af.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7lqo86af.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7lqo86af.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7lqo86af.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp7lqo86af.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7lqo86af.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7lqo86af.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7lqo86af.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    vowels = \"aeiou\"\n    new_message = \"\"\n    for letter in message\n \
    \       if letter in vowels\n            new_message = new_message * letter[2]\n\
    \        else\n            new_message = new_message * letter\n        end\n \
    \   end\n    return new_message\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\"\
    ) == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuxpahqcn.jl:31\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TEST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpuxpahqcn.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuxpahqcn.jl:30\ntest set: Error\
    \ During Test at /tmp/tmpuxpahqcn.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  BoundsError\n  Stacktrace:\n   [1]\
    \ getindex(c::Char, i::Int64)\n     @ Base ./char.jl:198\n   [2] encode(message::String)\n\
    \     @ Main /tmp/tmpuxpahqcn.jl:19\n   [3] macro expansion\n     @ /tmp/tmpuxpahqcn.jl:32\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxpahqcn.jl:30\ntest set:\
    \ Test Failed at /tmp/tmpuxpahqcn.jl:33\n  Expression: candidate(\"YES\") == \"\
    ygs\"\n   Evaluated: \"YES\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpuxpahqcn.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuxpahqcn.jl:30\ntest set: Error\
    \ During Test at /tmp/tmpuxpahqcn.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  BoundsError\n \
    \ Stacktrace:\n   [1] getindex(c::Char, i::Int64)\n     @ Base ./char.jl:198\n\
    \   [2] encode(message::String)\n     @ Main /tmp/tmpuxpahqcn.jl:19\n   [3] macro\
    \ expansion\n     @ /tmp/tmpuxpahqcn.jl:34 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxpahqcn.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpuxpahqcn.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n\
    \  BoundsError\n  Stacktrace:\n   [1] getindex(c::Char, i::Int64)\n     @ Base\
    \ ./"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuxpahqcn.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5rlshfmp.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp5rlshfmp.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5rlshfmp.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5rlshfmp.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp5rlshfmp.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp5rlshfmp.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5rlshfmp.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5rlshfmp.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp5rlshfmp.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    message = uppercase(message)\n    vowels = [\"A\", \"E\", \"I\", \"O\", \"\
    U\"]\n    for i in 1:length(message)\n        if message[i] in vowels\n      \
    \      message[i] = vowels[mod1(findfirst(vowels, message[i]) + 2, 5)]\n     \
    \   else\n            message[i] = lowercase(message[i])\n        end\n    end\n\
    \    return message\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz87lw8lj.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: no method matching\
    \ setindex!(::String, ::Char, ::Int64)\n  Stacktrace:\n   [1] encode(message::String)\n\
    \     @ Main /tmp/tmpz87lw8lj.jl:21\n   [2] macro expansion\n     @ /tmp/tmpz87lw8lj.jl:31\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz87lw8lj.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpz87lw8lj.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: no method matching setindex!(::String,\
    \ ::Char, ::Int64)\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmpz87lw8lj.jl:21\n   [2] macro expansion\n     @ /tmp/tmpz87lw8lj.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz87lw8lj.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpz87lw8lj.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: no method matching setindex!(::String,\
    \ ::Char, ::Int64)\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmpz87lw8lj.jl:21\n   [2] macro expansion\n     @ /tmp/tmpz87lw8lj.jl:33\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz87lw8lj.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpz87lw8lj.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  MethodError: no\
    \ method matching setindex!(::String, ::Char, ::Int64)\n  Stacktrace:\n   [1]\
    \ encode(message::String)\n     @ Main /tmp/tmpz87lw8lj.jl:21\n   [2] macro expansion\n\
    \     @ /tmp/tmpz87lw8lj.jl:34 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz87lw8lj.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdagziuei.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpdagziuei.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpdagziuei.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdagziuei.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpdagziuei.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpdagziuei.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpdagziuei.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdagziuei.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpdagziuei.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdagziuei.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    new_message = \"\"\n    for i in message\n        if i in \"aeiou\"\n   \
    \         new_message *= encode_vowel(i)\n        elseif i in \"AEIOU\"\n    \
    \        new_message *= encode_vowel(i)\n        else\n            new_message\
    \ *= i\n        end\n    end\n    return new_message\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnq2algrx.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: encode_vowel\
    \ not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpnq2algrx.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmpnq2algrx.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnq2algrx.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpnq2algrx.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: encode_vowel not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpnq2algrx.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpnq2algrx.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnq2algrx.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpnq2algrx.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: encode_vowel not defined\n \
    \ Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpnq2algrx.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmpnq2algrx.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnq2algrx.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpnq2algrx.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ encode_vowel not defined\n  Stacktrace:\n   [1] encode(message::String)\n  \
    \   @ Main /tmp/tmpnq2algrx.jl:18\n   [2] macro expansion\n     @ /tmp/tmpnq2algrx.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnq2algrx.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpnq2algrx.jl:36\n  Test t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnq2algrx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnhjqe95w.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpnhjqe95w.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpnhjqe95w.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnhjqe95w.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpnhjqe95w.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpnhjqe95w.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpnhjqe95w.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnhjqe95w.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpnhjqe95w.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvlywwhrx.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpvlywwhrx.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpvlywwhrx.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvlywwhrx.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpvlywwhrx.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpvlywwhrx.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpvlywwhrx.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpvlywwhrx.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpvlywwhrx.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvlywwhrx.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_d9qgzpx.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp_d9qgzpx.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_d9qgzpx.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_d9qgzpx.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp_d9qgzpx.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp_d9qgzpx.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_d9qgzpx.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_d9qgzpx.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp_d9qgzpx.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl0gitdam.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpl0gitdam.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpl0gitdam.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl0gitdam.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpl0gitdam.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpl0gitdam.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpl0gitdam.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl0gitdam.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpl0gitdam.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: write your code here\n    return \"TGST\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwz4pyne6.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwz4pyne6.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwz4pyne6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwz4pyne6.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwz4pyne6.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwz4pyne6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwz4pyne6.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwz4pyne6.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwz4pyne6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwz4pyne6.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpwz4pyne6.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwz4pyne6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwz4pyne6.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwz4pyne6.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwz4pyne6.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwz4pyne6.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    result = \"\"\n    for i in 1:length(message)\n        if islower(message[i])\n\
    \            result = result * uppercase(message[i])\n        elseif isupper(message[i])\n\
    \            result = result * lowercase(message[i])\n        else\n         \
    \   result = result * message[i]\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\"\
    ) == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
    YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz3f8rbml.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpz3f8rbml.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpz3f8rbml.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz3f8rbml.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz3f8rbml.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpz3f8rbml.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpz3f8rbml.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz3f8rbml.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz3f8rbml.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: islower not defined\n  Stacktrace:\n\
    \   [1] encode(message::String)\n     @ Main /tmp/tmpz3f8rbml.jl:17\n   [2] macro\
    \ expansion\n     @ /tmp/tmpz3f8rbml.jl:34 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz3f8rbml.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz3f8rbml.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ islower not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmpz3f8rbml.jl:17\n   [2] macro expansion\n     @ /tmp/tmpz3f8rbml.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpz3f8rbml.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz3f8rbml.jl:36\n  Test threw exception\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz3f8rbml.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt3psvai8.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpt3psvai8.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpt3psvai8.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt3psvai8.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpt3psvai8.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpt3psvai8.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpt3psvai8.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt3psvai8.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpt3psvai8.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt3psvai8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: write your code here\n    return \"TGST\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp18p6_q9z.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp18p6_q9z.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp18p6_q9z.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp18p6_q9z.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp18p6_q9z.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp18p6_q9z.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp18p6_q9z.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp18p6_q9z.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp18p6_q9z.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp18p6_q9z.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp18p6_q9z.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp18p6_q9z.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp18p6_q9z.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp18p6_q9z.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp18p6_q9z.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp18p6_q9z.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: implement me\n    return \"TGST\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpte5cgyei.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpte5cgyei.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpte5cgyei.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpte5cgyei.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpte5cgyei.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpte5cgyei.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpte5cgyei.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpte5cgyei.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpte5cgyei.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpte5cgyei.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpte5cgyei.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpte5cgyei.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpte5cgyei.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpte5cgyei.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpte5cgyei.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpte5cgyei.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp74b96c5g.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp74b96c5g.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp74b96c5g.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp74b96c5g.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp74b96c5g.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp74b96c5g.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp74b96c5g.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp74b96c5g.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp74b96c5g.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    result = \"\"\n    for letter in message\n        if letter in \"aeiou\"\n\
    \            result *= encode_vowel(letter)\n        elseif letter in \"AEIOU\"\
    \n            result *= encode_vowel(letter)\n        else\n            result\
    \ *= letter\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbwf58jq7.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: encode_vowel\
    \ not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpbwf58jq7.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmpbwf58jq7.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbwf58jq7.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpbwf58jq7.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: encode_vowel not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpbwf58jq7.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpbwf58jq7.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbwf58jq7.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpbwf58jq7.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: encode_vowel not defined\n \
    \ Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpbwf58jq7.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmpbwf58jq7.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbwf58jq7.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpbwf58jq7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ encode_vowel not defined\n  Stacktrace:\n   [1] encode(message::String)\n  \
    \   @ Main /tmp/tmpbwf58jq7.jl:18\n   [2] macro expansion\n     @ /tmp/tmpbwf58jq7.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpbwf58jq7.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpbwf58jq7.jl:36\n  Test t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbwf58jq7.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsmetlw_m.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpsmetlw_m.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpsmetlw_m.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsmetlw_m.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpsmetlw_m.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpsmetlw_m.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpsmetlw_m.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsmetlw_m.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpsmetlw_m.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # create a dictionary of vowels and their replacements\n    vowels = Dict(('a',\
    \ 'c'), ('e', 'g'), ('i', 'k'), ('o', 'q'), ('u', 'w'))\n    # create a dictionary\
    \ of lowercase letters and their replacements\n    lowercase = Dict(('a', 'A'),\
    \ ('b', 'B'), ('c', 'C'), ('d', 'D'), ('e', 'E'), ('f', 'F'), ('g', 'G'), ('h',\
    \ 'H'), ('i', 'I'), ('j', 'J'), ('k', 'K'), ('l', 'L'), ('m', 'M'), ('n', 'N'),\
    \ ('o', 'O'), ('p', 'P'), ('q', 'Q'), ('r', 'R'), ('s', 'S'), ('t', 'T'), ('u',\
    \ 'U'), ('v', 'V'), ('w', 'W'), ('x', 'X'), ('y', 'Y'), ('z', 'Z'))\n    # create\
    \ a dictionary of uppercase letters and their replacements\n    uppercase = Dict(('A',\
    \ 'a'), ('B', 'b'), ('C', 'c'), ('D', 'd'), ('E', 'e'), ('F', 'f'), ('G', 'g'),\
    \ ('H', 'h'), ('I', 'i'), ('J', 'j'), ('K', 'k'), ('L', 'l'), ('M', 'm'), ('N',\
    \ 'n'), ('O', 'o'), ('P', 'p'), ('Q', 'q'), ('R', 'r'), ('S', 's'), ('T', 't'),\
    \ ('U', 'u'), ('V', 'v'), ('W', 'w'), ('X', 'x'), ('Y', 'y'), ('Z', 'z'))\n  \
    \  # create an empty string to store the encoded message\n    encoded = \"\"\n\
    \    # loop through the message\n    for i in message\n        # if the character\
    \ is a vowel, replace it with the value in the vowels dictionary\n        if i\
    \ in keys(vowels)\n            encoded = string(encoded, get(vowels, i, \"default\"\
    ))\n        # if the character is lowercase, replace it with the value in the\
    \ lowercase dictionary\n       \nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoau2lgqz.jl:1\nin expression starting at /tmp/tmpoau2lgqz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb_a1ncpe.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpb_a1ncpe.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpb_a1ncpe.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpb_a1ncpe.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpb_a1ncpe.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpb_a1ncpe.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpb_a1ncpe.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpb_a1ncpe.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpb_a1ncpe.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb_a1ncpe.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqmlvhqw3.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpqmlvhqw3.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpqmlvhqw3.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqmlvhqw3.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpqmlvhqw3.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpqmlvhqw3.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpqmlvhqw3.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqmlvhqw3.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpqmlvhqw3.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    message = uppercase(message)\n    message = replace(message, \"A\", \"C\"\
    )\n    message = replace(message, \"E\", \"G\")\n    message = replace(message,\
    \ \"I\", \"K\")\n    message = replace(message, \"O\", \"Q\")\n    message = replace(message,\
    \ \"U\", \"W\")\n    message = replace(message, \"Y\", \"A\")\n    return message\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"\
    TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
    YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpu4bykwmb.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: no\
    \ method matching replace(::String, ::String, ::String)\\n  Closest candidates\
    \ are:\\n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\\
    n    replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] encode(message::String)\\n     @ Main /tmp/tmpu4bykwmb.jl:16\\n   [2]\
    \ macro expansion\\n     @ /tmp/tmpu4bykwmb.jl:29 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpu4bykwmb.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpu4bykwmb.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"\
    #s75\", B} where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\\
    n    replace(::String, !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpu4bykwmb.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpu4bykwmb.jl:30 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpu4bykwmb.jl:28\\ntest set:\
    \ Er"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: Write your code here\n    return \"TGST\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2k9x_hnw.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2k9x_hnw.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2k9x_hnw.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2k9x_hnw.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2k9x_hnw.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2k9x_hnw.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2k9x_hnw.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2k9x_hnw.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2k9x_hnw.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2k9x_hnw.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp2k9x_hnw.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2k9x_hnw.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2k9x_hnw.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2k9x_hnw.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2k9x_hnw.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2k9x_hnw.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq59e0o9k.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpq59e0o9k.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpq59e0o9k.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpq59e0o9k.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpq59e0o9k.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpq59e0o9k.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpq59e0o9k.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpq59e0o9k.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpq59e0o9k.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq59e0o9k.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp68wstg8r.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp68wstg8r.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp68wstg8r.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp68wstg8r.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp68wstg8r.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp68wstg8r.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp68wstg8r.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp68wstg8r.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp68wstg8r.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg3jsfwwd.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpg3jsfwwd.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpg3jsfwwd.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg3jsfwwd.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpg3jsfwwd.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpg3jsfwwd.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpg3jsfwwd.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg3jsfwwd.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpg3jsfwwd.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # create a dictionary of vowels and their replacements\n    vowels = Dict('a'=>'c',\
    \ 'e'=>'g', 'i'=>'k', 'o'=>'q', 'u'=>'y')\n    # create a dictionary of letters\
    \ and their replacements\n    letters = Dict('a'=>'C', 'b'=>'D', 'c'=>'E', 'd'=>'F',\
    \ 'e'=>'G', 'f'=>'H', 'g'=>'I', 'h'=>'J', 'i'=>'K', 'j'=>'L', 'k'=>'M', 'l'=>'N',\
    \ 'm'=>'O', 'n'=>'P', 'o'=>'Q', 'p'=>'R', 'q'=>'S', 'r'=>'T', 's'=>'U', 't'=>'V',\
    \ 'u'=>'W', 'v'=>'X', 'w'=>'Y', 'x'=>'Z', 'y'=>'A', 'z'=>'B')\n    # create a\
    \ dictionary of letters and their replacements\n    letters2 = Dict('A'=>'C',\
    \ 'B'=>'D', 'C'=>'E', 'D'=>'F', 'E'=>'G', 'F'=>'H', 'G'=>'I', 'H'=>'J', 'I'=>'K',\
    \ 'J'=>'L', 'K'=>'M', 'L'=>'N', 'M'=>'O', 'N'=>'P', 'O'=>'Q', 'P'=>'R', 'Q'=>'S',\
    \ 'R'=>'T', 'S'=>'U', 'T'=>'V', 'U'=>'W', 'V'=>'X', 'W'=>'Y', 'X'=>'Z', 'Y'=>'A',\
    \ 'Z'=>'B')\n    # create an empty string to store the encoded message\n    encoded_message\
    \ = \"\"\n    # iterate through the message\n    for i in message\n        # check\
    \ if the letter is a vowel\n        if i in keys(vowels)\n            # if it\n\
    using Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\"\
    ) == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
    YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqq36xl_.jl:1\nin expression starting at /tmp/tmpdqq36xl_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp38m1ksgd.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp38m1ksgd.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp38m1ksgd.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp38m1ksgd.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp38m1ksgd.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp38m1ksgd.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp38m1ksgd.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp38m1ksgd.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp38m1ksgd.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpobe5t4w_.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpobe5t4w_.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpobe5t4w_.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpobe5t4w_.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpobe5t4w_.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpobe5t4w_.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpobe5t4w_.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpobe5t4w_.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpobe5t4w_.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpobe5t4w_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgyqyg9jt.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpgyqyg9jt.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpgyqyg9jt.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgyqyg9jt.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgyqyg9jt.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpgyqyg9jt.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpgyqyg9jt.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgyqyg9jt.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgyqyg9jt.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgyqyg9jt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmple4rscpo.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmple4rscpo.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmple4rscpo.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmple4rscpo.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmple4rscpo.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmple4rscpo.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmple4rscpo.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmple4rscpo.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmple4rscpo.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    vowels = \"aeiou\"\n    result = \"\"\n    for i in message\n        if i\
    \ in vowels\n            result *= string(vowels[(findfirst(vowels, i)+2)%5])\n\
    \        elseif i in \"abcdefghijklmnopqrstuvwxyz\"\n            result *= string(uppercase(i))\n\
    \        elseif i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            result *= string(lowercase(i))\n\
    \        else\n            result *= i\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"\
    TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
    YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjry7mtfo.jl:35\\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\\n   Evaluated: \"test\" == \"tgst\"\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpjry7mtfo.jl:35 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjry7mtfo.jl:34\\ntest set: Error\
    \ During Test at /tmp/tmpjry7mtfo.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encode(message::String)\\n     @ Main /tmp/tmpjry7mtfo.jl:19\\n   [2]\
    \ macro expansion\\n     @ /tmp/tmpjry7mtfo.jl:36 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjry7mtfo.jl:34\\ntest set:\
    \ Test Failed at /tmp/tmpjry7mtfo.jl:37\\n  Expression: candidate(\"YES\") ==\
    \ \"ygs\"\\n   Evaluated: \"yes\" == \"ygs\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpjry7mtfo.jl:37 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjry7mtfo.jl:34\\ntest set: Error\
    \ During Test at /tmp/tmpjry7mtfo.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\\n  MethodError: no\
    \ method matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n \
    \   findfirst(!Matched::Function, ::Any) at array.jl:1902\\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at strings/search.jl:104\\n    findfirst(::Any) at\
    \ array.jl:1818\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main\
    \ /tmp/tmpjry7mtfo.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpjry7mtfo.jl:3"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpailxsyov.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpailxsyov.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpailxsyov.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpailxsyov.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpailxsyov.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpailxsyov.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpailxsyov.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpailxsyov.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpailxsyov.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpailxsyov.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7wyzs_v3.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp7wyzs_v3.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7wyzs_v3.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7wyzs_v3.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7wyzs_v3.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp7wyzs_v3.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7wyzs_v3.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7wyzs_v3.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp7wyzs_v3.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkv9y8_45.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpkv9y8_45.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpkv9y8_45.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkv9y8_45.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkv9y8_45.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpkv9y8_45.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpkv9y8_45.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkv9y8_45.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkv9y8_45.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkv9y8_45.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5gy_6_yb.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp5gy_6_yb.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5gy_6_yb.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5gy_6_yb.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp5gy_6_yb.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp5gy_6_yb.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5gy_6_yb.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5gy_6_yb.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp5gy_6_yb.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4i4lc8zv.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp4i4lc8zv.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp4i4lc8zv.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4i4lc8zv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp4i4lc8zv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp4i4lc8zv.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp4i4lc8zv.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4i4lc8zv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp4i4lc8zv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4i4lc8zv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: implement me\n    return \"TGST\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp28hilbvc.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp28hilbvc.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28hilbvc.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp28hilbvc.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp28hilbvc.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28hilbvc.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp28hilbvc.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28hilbvc.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28hilbvc.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp28hilbvc.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp28hilbvc.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28hilbvc.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp28hilbvc.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28hilbvc.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28hilbvc.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp28hilbvc.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    encoded = \"\"\n    for i in 1:length(message)\n        if isletter(message[i])\n\
    \            if islower(message[i])\n                encoded = encoded * uppercase(message[i])\n\
    \            else\n                encoded = encoded * lowercase(message[i])\n\
    \            end\n        else\n            encoded = encoded * message[i]\n \
    \       end\n    end\n    return encoded\nend\nusing Test\n\n@testset begin\n\n\
    candidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8nzivqlb.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp8nzivqlb.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp8nzivqlb.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8nzivqlb.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp8nzivqlb.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: islower not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp8nzivqlb.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmp8nzivqlb.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8nzivqlb.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp8nzivqlb.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: islower not defined\n  Stacktrace:\n\
    \   [1] encode(message::String)\n     @ Main /tmp/tmp8nzivqlb.jl:18\n   [2] macro\
    \ expansion\n     @ /tmp/tmp8nzivqlb.jl:36 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8nzivqlb.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp8nzivqlb.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ islower not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmp8nzivqlb.jl:18\n   [2] macro expansion\n     @ /tmp/tmp8nzivqlb.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8nzivqlb.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp8nzivqlb.jl:38\n  Test threw exception\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8nzivqlb.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwss8m6gj.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpwss8m6gj.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpwss8m6gj.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwss8m6gj.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpwss8m6gj.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpwss8m6gj.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpwss8m6gj.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwss8m6gj.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpwss8m6gj.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\n    return \"TGST\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8rnaarx5.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TGST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8rnaarx5.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8rnaarx5.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8rnaarx5.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"TGST\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8rnaarx5.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8rnaarx5.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8rnaarx5.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"TGST\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8rnaarx5.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8rnaarx5.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8rnaarx5.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"TGST\" == \"tHKS KS C MGSSCGG\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp8rnaarx5.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8rnaarx5.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8rnaarx5.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"TGST\" == \"k\
    \ dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8rnaarx5.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8rnaarx5.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8rnaarx5.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # create a dictionary of vowels\n    vowels = Dict('a'=>'c', 'e'=>'g', 'i'=>'k',\
    \ 'o'=>'q', 'u'=>'y')\n    # create an empty string to store the encoded message\n\
    \    encoded_message = \"\"\n    # iterate through the message\n    for letter\
    \ in message\n        # check if the letter is a vowel\n        if letter in keys(vowels)\n\
    \            # if it is, replace it with the value in the dictionary\n       \
    \     encoded_message *= vowels[letter]\n        elseif letter in 'bcdfghjklmnpqrstvwxyz'\n\
    \            # if it is not a vowel, but is a lowercase letter, swap it to uppercase\n\
    \            encoded_message *= uppercase(letter)\n        elseif letter in 'BCDFGHJKLMNPQRSTVWXYZ'\n\
    \            # if it is not a vowel, but is an uppercase letter, swap it to lowercase\n\
    \            encoded_message *= lowercase(letter)\n        else\n            #\
    \ if it is not a letter, leave it as is\n            encoded_message *= letter\n\
    \        end\n    end\n    # return the encoded message\n    return encoded_message\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"\
    TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
    YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp3gs4121l.jl:25\nin expression\
    \ starting at /tmp/tmp3gs4121l.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnxda5g2m.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpnxda5g2m.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpnxda5g2m.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnxda5g2m.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpnxda5g2m.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpnxda5g2m.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpnxda5g2m.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnxda5g2m.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpnxda5g2m.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnxda5g2m.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqneala0m.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpqneala0m.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpqneala0m.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqneala0m.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpqneala0m.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpqneala0m.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpqneala0m.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqneala0m.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpqneala0m.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqneala0m.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\n    return message\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpse3anf8a.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TEST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpse3anf8a.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpse3anf8a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpse3anf8a.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"Mudasir\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpse3anf8a.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpse3anf8a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpse3anf8a.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"YES\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpse3anf8a.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpse3anf8a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpse3anf8a.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"This is a message\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpse3anf8a.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpse3anf8a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpse3anf8a.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"I DoNt KnOw WhAt\
    \ tO WrItE\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpse3anf8a.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpse3anf8a.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpse3anf8a.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqhmv071h.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpqhmv071h.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpqhmv071h.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqhmv071h.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpqhmv071h.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpqhmv071h.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpqhmv071h.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqhmv071h.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpqhmv071h.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqhmv071h.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiehfd8d_.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpiehfd8d_.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpiehfd8d_.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpiehfd8d_.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpiehfd8d_.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpiehfd8d_.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpiehfd8d_.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpiehfd8d_.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpiehfd8d_.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    vowels = \"aeiou\"\n    new_message = \"\"\n    for i in message\n      \
    \  if i in vowels\n            new_message = new_message * i[vowels[vowels.index(i)+2]]\n\
    \        else\n            new_message = new_message * i\n        end\n    end\n\
    \    return new_message\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi9mw8u4b.jl:31\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TEST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpi9mw8u4b.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi9mw8u4b.jl:30\ntest set: Error\
    \ During Test at /tmp/tmpi9mw8u4b.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encode(message::String)\n\
    \     @ Main /tmp/tmpi9mw8u4b.jl:19\n   [3] macro expansion\n     @ /tmp/tmpi9mw8u4b.jl:32\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9mw8u4b.jl:30\ntest set:\
    \ Test Failed at /tmp/tmpi9mw8u4b.jl:33\n  Expression: candidate(\"YES\") == \"\
    ygs\"\n   Evaluated: \"YES\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpi9mw8u4b.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi9mw8u4b.jl:30\ntest set: Error\
    \ During Test at /tmp/tmpi9mw8u4b.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  type String has\
    \ no field index\n  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n  \
    \   @ Base ./Base.jl:33\n   [2] encode(message::String)\n     @ Main /tmp/tmpi9mw8u4b.jl:19\n\
    \   [3] macro expansion\n     @ /tmp/tmpi9mw8u4b.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9mw8u4b.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpi9mw8u4b.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n\
    \  type String has no field in"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9mw8u4b.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpombgqvai.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpombgqvai.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpombgqvai.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpombgqvai.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpombgqvai.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpombgqvai.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpombgqvai.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpombgqvai.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpombgqvai.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpombgqvai.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqp4yxbgz.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpqp4yxbgz.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpqp4yxbgz.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqp4yxbgz.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpqp4yxbgz.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmpqp4yxbgz.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmpqp4yxbgz.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqp4yxbgz.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpqp4yxbgz.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqf333qce.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpqf333qce.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpqf333qce.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqf333qce.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpqf333qce.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpqf333qce.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpqf333qce.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqf333qce.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpqf333qce.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqf333qce.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp27x0gjak.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"TEST\") == \"tgst\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp27x0gjak.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp27x0gjak.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp27x0gjak.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp27x0gjak.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encode(message::String)\\n     @ Main /tmp/tmp27x0gjak.jl:16\\\
    n   [2] macro expansion\\n     @ /tmp/tmp27x0gjak.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp27x0gjak.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp27x0gjak.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/b"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    vowels = \"aeiou\"\n    new_message = \"\"\n    for letter in message\n \
    \       if letter in vowels\n            new_message *= vowels[(findfirst(vowels,\
    \ letter) + 2) % 5]\n        elseif letter in uppercase(letters)\n           \
    \ new_message *= lowercase(letter)\n        elseif letter in lowercase(letters)\n\
    \            new_message *= uppercase(letter)\n        else\n            new_message\
    \ *= letter\n        end\n    end\n    return new_message\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\"\
    )\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\")\
    \ == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
    )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0jondr7b.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: letters not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp0jondr7b.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmp0jondr7b.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0jondr7b.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0jondr7b.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: letters not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp0jondr7b.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmp0jondr7b.jl:36 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0jondr7b.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0jondr7b.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: letters not defined\n  Stacktrace:\n\
    \   [1] encode(message::String)\n     @ Main /tmp/tmp0jondr7b.jl:20\n   [2] macro\
    \ expansion\n     @ /tmp/tmp0jondr7b.jl:37 [inlined]\n   [3] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0jondr7b.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0jondr7b.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ letters not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main\
    \ /tmp/tmp0jondr7b.jl:20\n   [2] macro expansion\n     @ /tmp/tmp0jondr7b.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp0jondr7b.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0jondr7b.jl:39\n  Test threw exception\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0jondr7b.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: Write your code here\n    return message\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9qeca6s4.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TEST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9qeca6s4.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qeca6s4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp9qeca6s4.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"Mudasir\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9qeca6s4.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qeca6s4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp9qeca6s4.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"YES\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9qeca6s4.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qeca6s4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp9qeca6s4.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"This is a message\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9qeca6s4.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qeca6s4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp9qeca6s4.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"I DoNt KnOw WhAt\
    \ tO WrItE\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9qeca6s4.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qeca6s4.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9qeca6s4.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    encoded = \"\"\n    for letter in message\n        if letter in \"aeiou\"\
    \n            encoded *= encode_vowel(letter)\n        elseif letter in \"AEIOU\"\
    \n            encoded *= encode_vowel(letter)\n        else\n            encoded\
    \ *= letter\n        end\n    end\n    return encoded\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqozr9s5_.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  UndefVarError: encode_vowel\
    \ not defined\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpqozr9s5_.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmpqozr9s5_.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqozr9s5_.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpqozr9s5_.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  UndefVarError: encode_vowel not defined\n\
    \  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpqozr9s5_.jl:18\n\
    \   [2] macro expansion\n     @ /tmp/tmpqozr9s5_.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqozr9s5_.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpqozr9s5_.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  UndefVarError: encode_vowel not defined\n \
    \ Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpqozr9s5_.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmpqozr9s5_.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqozr9s5_.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpqozr9s5_.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n  UndefVarError:\
    \ encode_vowel not defined\n  Stacktrace:\n   [1] encode(message::String)\n  \
    \   @ Main /tmp/tmpqozr9s5_.jl:18\n   [2] macro expansion\n     @ /tmp/tmpqozr9s5_.jl:35\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpqozr9s5_.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpqozr9s5_.jl:36\n  Test t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqozr9s5_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyelwbhp_.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpyelwbhp_.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpyelwbhp_.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyelwbhp_.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpyelwbhp_.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpyelwbhp_.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpyelwbhp_.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyelwbhp_.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpyelwbhp_.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyelwbhp_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjselw48b.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpjselw48b.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpjselw48b.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjselw48b.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjselw48b.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpjselw48b.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpjselw48b.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjselw48b.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjselw48b.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjselw48b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd53ijjgt.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpd53ijjgt.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpd53ijjgt.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpd53ijjgt.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpd53ijjgt.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpd53ijjgt.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpd53ijjgt.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpd53ijjgt.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpd53ijjgt.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd53ijjgt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuzmds0c1.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpuzmds0c1.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpuzmds0c1.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpuzmds0c1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuzmds0c1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpuzmds0c1.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpuzmds0c1.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpuzmds0c1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuzmds0c1.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuzmds0c1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg3pv_4ta.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpg3pv_4ta.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpg3pv_4ta.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpg3pv_4ta.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpg3pv_4ta.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpg3pv_4ta.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpg3pv_4ta.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpg3pv_4ta.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpg3pv_4ta.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg3pv_4ta.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1wdfdxi7.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp1wdfdxi7.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp1wdfdxi7.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1wdfdxi7.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp1wdfdxi7.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp1wdfdxi7.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp1wdfdxi7.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1wdfdxi7.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp1wdfdxi7.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1wdfdxi7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # TODO: Write your code here\n    return message\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encode;\n\t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"\
    Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"\
    This is a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbrtqnkoy.jl:23\n  Expression: candidate(\"\
    TEST\") == \"tgst\"\n   Evaluated: \"TEST\" == \"tgst\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbrtqnkoy.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrtqnkoy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpbrtqnkoy.jl:24\n  Expression: candidate(\"Mudasir\") == \"\
    mWDCSKR\"\n   Evaluated: \"Mudasir\" == \"mWDCSKR\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbrtqnkoy.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrtqnkoy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpbrtqnkoy.jl:25\n  Expression: candidate(\"YES\") == \"ygs\"\
    \n   Evaluated: \"YES\" == \"ygs\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbrtqnkoy.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrtqnkoy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpbrtqnkoy.jl:26\n  Expression: candidate(\"This is a message\"\
    ) == \"tHKS KS C MGSSCGG\"\n   Evaluated: \"This is a message\" == \"tHKS KS C\
    \ MGSSCGG\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbrtqnkoy.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrtqnkoy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpbrtqnkoy.jl:27\n  Expression: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n   Evaluated: \"I DoNt KnOw WhAt\
    \ tO WrItE\" == \"k dQnT kNqW wHcT Tq wRkTg\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbrtqnkoy.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrtqnkoy.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbrtqnkoy.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3dxx13ww.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp3dxx13ww.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp3dxx13ww.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3dxx13ww.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp3dxx13ww.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp3dxx13ww.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp3dxx13ww.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3dxx13ww.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp3dxx13ww.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3dxx13ww.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyh5y6kb7.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpyh5y6kb7.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpyh5y6kb7.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyh5y6kb7.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpyh5y6kb7.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmpyh5y6kb7.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmpyh5y6kb7.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyh5y6kb7.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpyh5y6kb7.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyh5y6kb7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_lx66z74.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp_lx66z74.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp_lx66z74.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_lx66z74.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp_lx66z74.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp_lx66z74.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp_lx66z74.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp_lx66z74.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp_lx66z74.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_lx66z74.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a message, and encodes in such\
    \ a \n    way that it swaps case of all letters, replaces all vowels in \n   \
    \ the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n   \
    \ 'tHKS KS C MGSSCGG'\n    \"\"\"\nfunction encode(message::String)::String \n\
    \    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encode;\n\
    \t@test(candidate(\"TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"\
    mWDCSKR\")\n\t@test(candidate(\"YES\") == \"ygs\")\n\t@test(candidate(\"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\n\t@test(candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2bxdm9la.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"TEST\") == \"tgst\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp2bxdm9la.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp2bxdm9la.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2bxdm9la.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp2bxdm9la.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Mudasir\") == \"mWDCSKR\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encode(message::String)\n     @ Main /tmp/tmp2bxdm9la.jl:16\n\
    \   [2] macro expansion\n     @ /tmp/tmp2bxdm9la.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2bxdm9la.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp2bxdm9la.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"YES\") == \"ygs\"\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2bxdm9la.jl:19\n"
  exit_code: 1
  status: SyntaxError
